["```py\n    >>>pv=100\n    >>>pv*(1+0.1)**20\n    672.7499949325611\n    >>> import math\n    >>>math.sqrt(3)\n    1.7320508075688772\n    >>>\n\n    ```", "```py\n>>>pv=100\n>>>pv\n    100\n>>>pv*(1+0.015)**3\n    104.56783749999997\n>>>\n```", "```py\n>>>PV\nNameError: name 'PV' is not defined\n>>>Traceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n```", "```py\n>>>dir()\n['__builtins__', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'pv']\n>>>\n```", "```py\n>>>fv_f(100,0.1,2)\n     121.00000000000001\n>>>fv_f(100,0.02,20)\n    148.59473959783548\n```", "```py\ndef pv_f(fv,r,n):\n    \"\"\"Objective: estimate present value\n                     fv\n    formula  : pv=-------------\n                   (1+r)^n\n          fv: fture value\n          r : discount periodic rate\n          n : number of periods\n\n    Example #1  >>>pv_f(100,0.1,1)\n                   90.9090909090909\n\n    Example #2: >>>pv_f(r=0.1,fv=100,n=1)\n                    90.9090909090909\n    \"\"\"\n    return fv/(1+r)**n\n```", "```py\n>>>import numpy as np\n>>>cashFlows=np.array([-100,50,40,30])\n>>>for cash in cashFlows:\n...    print(cash)\n... \n-100\n50\n40\n30\n```", "```py\n>>> x=[1,2,3]\n>>>x[0]=2\n>>>x\n>>>\n     [2, 2, 3]\n>>> y=(7,8,9)\n>>>y[0]=10\n>>>\nTypeError: 'tuple' object does not support item assignment\n>>>Traceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n\n>>>type(x)\n>>>\n<class'list'>\n>>>type(y)\n>>>\n<class'tuple'>\n>>>\n```", "```py\n-100    -30       10       40        50         45       20\n|--------|---------|--------|---------|----------|--------|\n0        1         2        3         4          5        6\n```", "```py\ndef npv_f(rate, cashflows):\n       total = 0.0\n       for i in range(0,len(cashflows)):\n             total += cashflows[i] / (1 + rate)**i\n       return total\n```", "```py\n>>>r=0.035\n>>>cashflows=[-100,-30,10,40,50,45,20]\n>>>npv_f(r,cashflows)\n14.158224763725372 \n```", "```py\ndef npv_f(rate, cashflows):\n      total = 0.0\n      for i, cashflow in enumerate(cashflows):\n               total += cashflow / (1 + rate)**i\n      return total\n```", "```py\nx=[\"a\",\"b\",\"z\"]\nfor i, value in enumerate(x):\n      print(i, value)\n```", "```py\ndef npv_Excel(rate, cashflows):\n       total = 0.0\n       for i, cashflow in enumerate(cashflows):\n                total += cashflow / (1 + rate)**(i+1)\n       return total\n```", "```py\ni=1\nwhile(i<10):\n      print(i)\n      i+=1\n```", "```py\ncashFlows=(550,-500,-500,-500,1000)\nr=0\nwhile(r<1.0):\n     r+=0.000001\n     npv=npv_f(r,cashFlows)\n     if(abs(npv)<=0.0001):\n            print(r)\n```", "```py\n0.07163900000005098\n0.33673299999790873\n```", "```py\n>>>import math\n>>>dir(math)\n['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign', 'cos', 'cosh', 'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'gcd', 'hypot', 'inf', 'isclose', 'isfinite', 'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'log2', 'modf', 'nan', 'pi', 'pow', 'radians', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc']\n>>>math.pi\n3.141592653589793\n>>>\n```", "```py\n>>>sqrt(2)\nNameError: name 'sqrt' is not defined\n>>>Traceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nmath.sqrt(2)\n1.4142135623730951\n>>>\n```", "```py\n>>>from math import *\n>>>sqrt(3)\n1.7320508075688772\n>>>\n```", "```py\n>>>help(len)\nHelp on built-in function len in module builtins:\nlen(obj, /)\n    Return the number of items in a container.\n>>>\n```", "```py\na b\n1 2\n3 4\n```", "```py\n>>>f=open(\"c:/temp/test.txt\",\"r\")\n>>>x=f.read()\n>>>f.close()\n```", "```py\n>>>print(x)\na b\n1 2\n3 4\n>>>\n```", "```py\nDate,Open,High,Low,Close,Volume,Adj Close\n2016-11-04,152.399994,153.639999,151.869995,152.429993,2440700,152.429993\n2016-11-03,152.509995,153.740005,151.800003,152.369995,2878800,152.369995\n2016-11-02,152.479996,153.350006,151.669998,151.949997,3074400,151.949997\n2016-11-01,153.50,153.910004,151.740005,152.789993,3191900,152.789993\n```", "```py\n    >>> import pandas as pd\n    >>> x=pd.read_csv(\"c:/temp/ibm.csv\")\n    >>>x[1:3]\n             Date        Open        High         Low       Close   Volume  \\\n    1  2016-11-02  152.479996  153.350006  151.669998  151.949997  3074400   \n    2  2016-11-01  153.500000  153.910004  151.740005  152.789993  3191900   \n\n    Adj.Close\n    1  151.949997\n    2  152.789993>>>\n    ```", "```py\n    >>> import pandas as pd\n    >>> x=pd.read_table(\"c:/temp/ibm.csv\",sep=',')\n    ```", "```py\n>>> import pandas as pd\n>>>url=url='http://canisius.edu/~yany/data/ibm.csv'\n>>> x=pd.read_csv(url)\n>>>x[1:5]\n         Date        Open        High         Low       Close   Volume  \\\n1  2016-11-03  152.509995  153.740005  151.800003  152.369995  2843600   \n2  2016-11-02  152.479996  153.350006  151.669998  151.949997  3074400   \n3  2016-11-01  153.500000  153.910004  151.740005  152.789993  3191900   \n4  2016-10-31  152.759995  154.330002  152.759995  153.690002  3553200   \n\nAdj Close  \n1  152.369995\n2  151.949997\n3  152.789993\n4  153.690002>>>\n```", "```py\n>>>infile=pd.ExcelFile(\"c:/temp/stockReturns.xlsx\")\n>>> x=infile.parse(\"Sheet1\")\n>>>x\ndate  returnAreturnB\n0  2001     0.10     0.12\n1  2002     0.03     0.05\n2  2003     0.12     0.15\n3  2004     0.20     0.22\n>>>\n```", "```py\n>>> import pandas as pd\n>>> x=pd.read_pickle(\"c:/temp/ffMonthly.pkl\")\n>>>x[1:3]\n>>>\nMkt_RfSMBHMLRf\n196308  0.0507 -0.0085  0.0163  0.0042\n196309 -0.0157 -0.0050  0.0019 -0.0080\n>>>\n```", "```py\nif(r<0):\n    print(\"interest rate is less than zero\")\n```", "```py\n>>>if(a>0 and b>0):\n  print(\"both positive\")\n>>>if(a>0 or b>0):\n  print(\"at least one is positive\")\n```", "```py\ngrade=74\nif grade>=90:\n    print('A')\nelif grade >=85:\n    print('A-')\nelif grade >=80:\n    print('B+')\nelif grade >=75:\n    print('B')\nelif grade >=70:\n    print('B-')\nelif grade>=65:\n    print('C+')\nelse:\n    print('D')\n```", "```py\n>>> import numpy as np\n>>> r=0.023\n>>>pv=np.array([100,300,500])\n>>>type(r)\n<class'float'>\n>>>type(pv)\n<class'numpy.ndarray'>\n```", "```py\n>>> 7/3\n2.3333333333333335\n>>>round(7/3,5)\n2.33333\n>>>\n```", "```py\n>>>import numpy as np\n>>>a=np.zeros(10)                      # array with 10 zeros \n>>>b=np.zeros((3,2),dtype=float)       # 3 by 2 with zeros \n>>>c=np.ones((4,3),float)              # 4 by 3 with all ones \n>>>d=np.array(range(10),float)         # 0,1, 2,3 .. up to 9 \n>>>e1=np.identity(4)                   # identity 4 by 4 matrix \n>>>e2=np.eye(4)                        # same as above \n>>>e3=np.eye(4,k=1)                    # 1 start from k \n>>>f=np.arange(1,20,3,float)           # from 1 to 19 interval 3 \n>>>g=np.array([[2,2,2],[3,3,3]])       # 2 by 3 \n>>>h=np.zeros_like(g)                  # all zeros \n>>>i=np.ones_like(g)                   # all ones\n```", "```py\n>>> import numpy as np\n>>> x=np.array([10,20,30])\n>>>x.sum()\n60\n```", "```py\n>>>import numpy as np\n>>>x=np.array([[1,2],[5,6],[7,9]])      # a 3 by 2 array\n>>>y=x.flatten()\n>>>x2=np.reshape(y,[2,3]              ) # a 2 by 3 array\n```", "```py\n>>> t=\"This is great\"\n>>>t.upper()\n'THIS IS GREAT'\n>>>\n```", "```py\n>>>dir('')\n['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']\n>>>\n```", "```py\n>>>help(''.split)\nHelp on built-in function split:\n\nsplit(...) method of builtins.str instance\nS.split(sep=None, maxsplit=-1) -> list of strings\n\n    Return a list of the words in S, using sep as the\ndelimiter string. If maxsplit is given, at most maxsplit\nsplits are done. If sep is not specified or is None, any\nwhitespace string is a separator and empty strings are\nremoved from the result.\n>>>\n```", "```py\n>>> x=\"this is great\"\n>>>x.split()\n['this', 'is', 'great']\n>>>\n```", "```py\n>>>a=np.array([[1,2,3],[4,5,6]],float)    # 2 by 3\n>>>b=np.array([[1,2],[3,3],[4,5]],float)  # 3 by 2\n>>>np.dot(a,b)                            # 2 by 2\n>>>print(np.dot(a,b))\narray([[ 19.,  23.],\n[ 43.,  53.]])\n>>>\n```", "```py\n>>>(2+3+4)/3.\n>>>3.0\n>>>geo_mean=(2*3*4)**(1./3)\n>>>round(geo_mean,4) \n2.8845\n```", "```py\n>>> import scipy as sp\n>>> ret=sp.array([0.1,0.05,-0.02])\n>>>sp.mean(ret)\n0.043333333333333342\n>>>pow(sp.prod(ret+1),1./len(ret))-1 \n0.042163887067679262\n```", "```py\nDATE    MKT_RFSMBHMLRF\n192607    2.96   -2.30   -2.87    0.22\n192608    2.64   -1.40    4.19    0.25\n192609    0.36   -1.32    0.01    0.23\n\n201607    3.95    2.90   -0.98    0.02\n201608    0.49    0.94    3.18    0.02\n201609    0.25    2.00   -1.34    0.02\n```", "```py\nimport numpy as np\nimport pandas as pd\nfile=open(\"c:/temp/ffMonthly.txt\",\"r\")\ndata=file.readlines()\nf=[]\nindex=[]\nfor i in range(1,np.size(data)):\n    t=data[i].split()\n    index.append(int(t[0]))\n    for j in range(1,5):\n        k=float(t[j])\n        f.append(k/100)\nn=len(f) \nf1=np.reshape(f,[n/4,4])\nff=pd.DataFrame(f1,index=index,columns=['Mkt_Rf','SMB','HML','Rf'])\n```", "```py\n>>>f=open(\"c:/temp/out.txt\",\"w\")\n>>>x=\"This is great\"\n>>>f.write(x)\n>>>f.close()\n```", "```py\nimport re\nfrom matplotlib.finance import quotes_historical_yahoo_ochl\nticker='dell'\noutfile=open(\"c:/temp/dell.txt\",\"w\")\nbegdate=(2013,1,1)\nenddate=(2016,11,9)\np=quotes_historical_yahoo_ochl\n(ticker,begdate,enddate,asobject=True,adjusted=True)\noutfile.write(str(p))\noutfile.close()\n```", "```py\n>>>infile=open(\"c:/temp/dell.txt\",\"r\")\n>>>x=infile.read()\n```", "```py\n>>> import re\n>>>re.sub(\"a\",\"9\",\"abc\")\n>>>\n'9bc'\n>>>\n```", "```py\np2= re.sub('[\\(\\)\\{\\}\\.<>a-zA-Z]','', p)\noutfile.write(p2)\n```", "```py\nimport numpy as np\nimport pandas as pd\nfile=open(\"c:/temp/ffMonthly.txt\",\"r\")\ndata=file.readlines()\nf=[]\nindex=[]\nfor i in range(1,np.size(data)):\n    t=data[i].split()\n    index.append(int(t[0]))\n    for j in range(1,5):\n        k=float(t[j])\n        f.append(k/100)\nn=len(f)\nf1=np.reshape(f,[n/4,4])\nff=pd.DataFrame(f1,index=index,columns=['Mkt_Rf','SMB','HML','Rf'])\nff.to_pickle(\"c:/temp/ffMonthly.pickle\")\n```"]