["```py\n/// Agent.fs\nnamespace Agents\n\nopen System\n\n  type TradingStrategy() =\n    member this.onInit : unit = printfn \"onInit\"\n    member this.onStart : unit = printfn \"onStart\"\n    member this.onStop : unit = printfn \"onStop\"\n    member this.onTradeIndication : unit = printfn \"onTradeIndication\"\n\n  // Type for our agent\n  type Agent<'T> = MailboxProcessor<'T>\n```", "```py\n// Control messages to be sent to agent\ntype SystemMessage =\n  | Init\n  | Start\n  | Stop\n\ntype SystemState =\n  | Created\n  | Initialized\n  | Started\n  | Stopped\n```", "```py\nmodule TradingAgent =\nlet tradingAgent (strategy:TradingStrategy) = Agent.Start(fun inbox ->\n  let rec loop state = async {\n    let! msg = inbox.Receive()\n    match msg with\n    | Init ->\n    if state = Started then\n      printfn \"ERROR\"\n    else\n      printfn \"Init\"\n    strategy.onInit\n    return! loop Initialized\n    | Start ->\n    if state = Started then\n      printfn \"ERROR\"\n    else\n      printfn \"Start\"\n    strategy.onStart\n    return! loop Started\n    | Stop ->\n    if state = Stopped then\n      printfn \"ERROR\"\n    else\n      printfn \"Stop\"\n    strategy.onStop\n    return! loop Stopped\n  }\nloop Created)\n```", "```py\n// GUI.fs\nnamespace GUI\n\nopen System\nopen System.Drawing\nopen System.Windows.Forms\nopen Agents\n\n// User interface form\ntype public TradingSystemForm() as form =\n  inherit Form()\n\n  let valueLabel = new Label(Location=new Point(25,15))\n  let startButton = new Button(Location=new Point(25,50))\n  let stopButton = new Button(Location=new Point(25,80))\n  let sendButton = new Button(Location=new Point(25,75))\n```", "```py\nlet ts = TradingStrategy()\nlet agent = TradingAgent.tradingagent ts\n\nlet initControls =\n  valueLabel.Text <- \"Ready\"\n  startButton.Text <- \"Start\"\n  stopButton.Text <- \"Stop\"\n  sendButton.Text <- \"Send value to agent\"\n  do\n    initControls\n\n  form.Controls.Add(valueLabel)\n  form.Controls.Add(startButton)\n  form.Controls.Add(stopButton)\n\n  form.Text <- \"F# TradingSystem\"\n\n  startButton.Click.AddHandler(new System.EventHandler\n    (fun sender e -> form.eventStartButton_Click(sender, e)))\n\n  stopButton.Click.AddHandler(new System.EventHandler\n    (fun sender e -> form.eventStopButton_Click(sender, e)))\n\n  // Event handlers\n  member form.eventStartButton_Click(sender:obj, e:EventArgs) =      \n```", "```py\n  agent.Post(Init)\n  agent.Post(Start)\n  ()\n\n  member form.eventStopButton_Click(sender:obj, e:EventArgs) =\n  agent.Post(Stop)\n  ()\n```", "```py\n/// Program.fs\nnamespace Program\n\nopen System\nopen System.Drawing\nopen System.Windows.Forms\n\nopen GUI\n\nmodule Main =\n  [<STAThread>]\ndo\n  Application.EnableVisualStyles()\n  Application.SetCompatibleTextRenderingDefault(false)\n  let view = new TradingSystemForm()\n  Application.Run(view)\n```", "```py\n/// GUI code according to mock\nnamespace GUI\n\nopen System\nopen System.Drawing\nopen System.Windows.Forms\nopen Agents\nopen Model\n\nopen System.Net\nopen System.ComponentModel\n  // User interface form\n  type public TradingSystemForm() as form =\n    inherit Form()\n\n    let plLabel = new Label(Location=new Point(15,15))\n    let plTextBox = new TextBox(Location=new Point(75,15))\n\n    let startButton = new Button(Location=new Point(15,350))\n    let stopButton = new Button(Location=new Point(95,350))\n    let cancelButton = new Button(Location=new Point(780,350))\n    let downloadButton = new Button(Location=new Point(780,15))\n\n    let ordersLabel = new Label(Location=new Point(15,120))\n    let dataGridView = new DataGridView(Location=new Point(0,140));\n\n    let initControls =\n      plLabel.Text <- \"P/L\"\n      plLabel.AutoSize <- true\n\n      startButton.Text <- \"Start\"\n      stopButton.Text <- \"Stop\"\n      cancelButton.Text <- \"Cancel all orders\"\n      cancelButton.AutoSize <- true\n      downloadButton.Text <- \"Download data\"\n      downloadButton.AutoSize <- true\n\n    do\n      initControls\n\n    form.Size <- new Size(900,480)\n\n    form.Controls.Add(plLabel)\n    form.Controls.Add(plTextBox)\n    form.Controls.Add(ordersLabel)\n\n    form.Controls.Add(startButton)\n    form.Controls.Add(stopButton)\n\n    form.Controls.Add(cancelButton)\n    form.Controls.Add(downloadButton)\n\n    dataGridView.Size <- new Size(900,200)\n    dataGridView.RowHeadersWidthSizeMode <- DataGridViewRowHeadersWidthSizeMode.EnableResizing\n    dataGridView.AutoSizeColumnsMode <- DataGridViewAutoSizeColumnsMode.AllCells\n\n    form.Controls.Add(dataGridView)\n\n    form.Text <- \"F# TradingSystem\"\n```", "```py\nlet initOrderList() =\n  let modelList = new BindingList<Model.Order>()\n  let buyOrder = Model.Order(Model.OrderSide.Buy, Model.OrderType.Limit, 54.50, Model.Tif.FillorKill, 100, \"MSFT\", 0.0)            \n  modelList.Add(buyOrder)\n\n  dataGridView.DataSource <- modelList\n  dataGridView.Size <- new Size(900,200)\n  dataGridView.RowHeadersWidthSizeMode <- DataGridViewRowHeadersWidthSizeMode.EnableResizing\n  dataGridView.AutoSizeColumnsMode <- DataGridViewAutoSizeColumnsMode.AllCells\n```", "```py\ninitOrderList()\n```", "```py\ndataGridView.CellFormatting.AddHandler(new System.Windows.Forms.DataGridViewCellFormattingEventHandler(fun sender e -> form.eventOrdersGrid_CellFromatting(sender, e)))\n```", "```py\n  member form.eventOrdersGrid_CellFromatting(sender:obj, e:DataGridViewCellFormattingEventArgs) =            \n  match (sender :?> DataGridView).Columns.[e.ColumnIndex].DataPropertyName with\n  | \"Status\" -> e.Value <- sprintf \"%A\" modelList.[e.RowIndex].Status\n  | \"Side\" -> e.Value <- sprintf \"%A\" modelList.[e.RowIndex].Side\n  | \"Type\" -> e.Value <- sprintf \"%A\" modelList.[e.RowIndex].Type\n  | \"Tif\" -> e.Value <- sprintf \"%A\" modelList.[e.RowIndex].Tif\n  | _ -> ()    \n```", "```py\n// Functions to update GUI from controller\n\nlet updatePlTextBox(str:string) =\n  plTextBox.Text <- str\n```", "```py\nstartButton.Click.AddHandler(new System.EventHandler\n  (fun sender e -> form.eventStartButton_Click(sender, e)))\n\nstopButton.Click.AddHandler(new System.EventHandler\n  (fun sender e -> form.eventStopButton_Click(sender, e)))\n\ncancelButton.Click.AddHandler(new System.EventHandler\n  (fun sender e -> form.eventCancelButton_Click(sender, e)))\n\ndownloadButton.Click.AddHandler(new System.EventHandler\n  (fun sender e -> form.eventDownloadButton_Click(sender, e)))\n\n// Event handlers\nmember form.eventStartButton_Click(sender:obj, e:EventArgs) = Controller.startButtonPressed()\n  Controller.testUpdateGUI(updateSP500TextBoxPrice)\n\nmember form.eventStopButton_Click(sender:obj, e:EventArgs) = Controller.stopButtonPressed()\n  Controller.testUpdateGUI(updateSP500TextBoxPrice)\n\nmember form.eventCancelButton_Click(sender:obj, e:EventArgs) = Controller.cancelButtonPressed()\n  Controller.testUpdateGUI(updateSP500TextBoxPrice)\n\nmember form.eventDownloadButton_Click(sender:obj, e:EventArgs) = Controller.downloadButtonPressed(updatePlTextBox, updateSP500TextBoxPrice, updateSP500TextBoxVol, updateVixTextBoxPrice, updateVixTextBoxVol)\n```", "```py\nlet fetchOne(url:string) =\n  let uri = new System.Uri(url)\nlet client = new WebClient()\nlet html = client.DownloadString(uri)\nhtml\n\nlet downloadNewData(url1:string, url2:string) =\n  let worker = new BackgroundWorker()\n  worker.DoWork.Add(fun args ->\n  printfn(\"starting background thread\")\n  let data = fetchOne(url)\n  printfn \"%A\" data)\n  worker.RunWorkerAsync()\n```"]