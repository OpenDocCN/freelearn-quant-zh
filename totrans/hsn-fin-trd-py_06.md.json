["```py\nimport pandas as pd\nser1 = pd.Series(range(1, 6)); \nser1\n```", "```py\n0    1\n1    2\n2    3\n3    4\n4    5\ndtype: int64\n```", "```py\nser2 = pd.Series(range(1, 6), \n                 index=['a', 'b', 'c', 'd', 'e']); \nser2\n```", "```py\na    1\nb    2\nc    3\nd    4\ne    5\ndtype: int64\n```", "```py\nser3 = pd.Series({ 'a': 1.0, 'b': 2.0, 'c': 3.0, \n                   'd': 4.0, 'e': 5.0 }); \nser3\n```", "```py\na    1.0\nb    2.0\nc    3.0\nd    4.0\ne    5.0\ndtype: float64\n```", "```py\nser3.index\n```", "```py\nIndex(['a', 'b', 'c', 'd', 'e'], dtype='object')\n```", "```py\nser3.values\n```", "```py\narray([ 1.,  2.,  3.,  4.,  5.])\n```", "```py\nser3.name = 'Alphanumeric'; ser3\n```", "```py\na    1.0\nb    2.0\nc    3.0\nd    4.0\ne    5.0\nName: Alphanumeric, dtype: float64\n```", "```py\ndf1 = pd.DataFrame({'A': range(1,5,1), \n                    'B': range(10,50,10), \n                    'C': range(100, 500, 100)}); \ndf1\n```", "```py\n     A    B     C\n0    1    10    100\n1    2    20    200\n2    3    30    300\n3    4    40    400\n```", "```py\ndf2 = pd.DataFrame({'A': range(1,5,1), \n                    'B': range(10,50,10), \n                    'C': range(100, 500, 100)}, \n                    index=['a', 'b', 'c', 'd']); \ndf2\n```", "```py\n     A    B     C\na    1    10    100\nb    2    20    200\nc    3    30    300\nd    4    40    400\n```", "```py\ndf2.columns\n```", "```py\nIndex(['A', 'B', 'C'], dtype='object')\n```", "```py\ndf2.index\n```", "```py\nIndex(['a', 'b', 'c', 'd'], dtype='object')\n```", "```py\ndf2.values\n```", "```py\narray([[  1,  10, 100],\n       [  2,  20, 200],\n       [  3,  30, 300],\n       [  4,  40, 400]])\n```", "```py\ndf2['D'] = range(1000,5000,1000); \ndf2\n```", "```py\n     A    B     C      D\na    1    10    100    1000\nb    2    20    200    2000\nc    3    30    300    3000\nd    4    40    400    4000\n```", "```py\ndf2.index.name = 'lowercase'; df2\n```", "```py\n         A    B     C      D\nlowercase                \na        1    10    100    1000\nb        2    20    200    2000\nc        3    30    300    3000\nd        4    40    400    4000\n```", "```py\ndf2.columns.name = 'uppercase'; df2\n```", "```py\nuppercase  A    B     C      D\nlowercase                \na          1    10    100    1000\nb          2    20    200    2000\nc          3    30    300    3000\nd          4    40    400    4000\n```", "```py\nind2 = pd.Index(list(range(5))); ind2\n```", "```py\nInt64Index([0, 1, 2, 3, 4], dtype='int64')\n```", "```py\nind2[0] = -1\n```", "```py\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-34-20c233f961b2> in <module>()\n----> 1 ind2[0] = -1\n...\nTypeError: Index does not support mutable operations\n```", "```py\n    df2\n    ```", "```py\n    uppercase A    B     C      D\n    lowercase                \n    a         1    10    100    1000\n    b         2    20    200    2000\n    c         3    30    300    3000\n    d         4    40    400    4000\n    ```", "```py\n    df2['B']\n    ```", "```py\n    lowercase\n    a    10\n    b    20\n    c    30\n    d    40\n    Name: B, dtype: int64\n    ```", "```py\n    df2[['A', 'C']]\n    ```", "```py\n    uppercase  A    C\n    lowercase        \n    a          1    100\n    b          2    200\n    c          3    300\n    d          4    400\n    ```", "```py\n    df2[(df2['D'] > 1000) & (df2['D'] <= 3000)]\n    ```", "```py\n    uppercase    A    B     C      D\n    lowercase                \n    b            2    20    200    2000\n    c            3    30    300    3000\n    ```", "```py\n    df2.loc[['c', 'd']]\n    ```", "```py\n    uppercase    A    B     C      D\n    lowercase                \n    c            3    30    300    3000\n    d            4    40    400    4000\n    ```", "```py\n    df2.iloc[[0]]\n    ```", "```py\n    uppercase    A    B     C      D\n    lowercase                \n    a            1    10    100    1000\n    ```", "```py\n    df2[df2['D'] == 2000] = 0; df2\n    ```", "```py\n    uppercase    A    B     C      D\n    lowercase                \n    a            1    10    100    1000\n    b            0    0     0      0\n    c            3    30    300    3000\n    d            4    40    400    4000\n    ```", "```py\n    df2\n    ```", "```py\n    uppercase    A    B     C      D\n    lowercase                \n    a            1    10    100    1000\n    b            0    0     0      0\n    c            3    30    300    3000\n    d            4    40    400    4000\n    ```", "```py\n    df2.drop('b')\n    ```", "```py\n    uppercase    A    B     C      D\n    lowercase                \n    a            1    10    100    1000\n    c            3    30    300    3000\n    d            4    40    400    4000\n    ```", "```py\n    df2\n    ```", "```py\n    uppercase    A    B     C      D\n    lowercase                \n    a            1    10    100    1000\n    b            0    0     0      0\n    c            3    30    300    3000\n    d            4    40    400    4000\n    ```", "```py\n    df2.drop('b', inplace=True); \n    df2\n    ```", "```py\n    uppercase    A    B     C      D\n    lowercase                \n    a            1    10    100    1000\n    c            3    30    300    3000\n    d            4    40    400    4000\n    ```", "```py\n    df2.drop(['a', 'd'])\n    ```", "```py\n    uppercase    A    B     C      D\n    lowercase                \n    c            3    30    300    3000\n    ```", "```py\n    df2.drop(['A', 'B'], axis=1)\n    ```", "```py\n    uppercase   C      D\n    lowercase        \n    a           100    1000\n    c           300    3000\n    d           400    4000\n    ```", "```py\nimport numpy as np\ndf = pd.DataFrame(np.random.randn(5,5),\n                  index=np.random.randint(0, 100, size=5), \n                  columns=np.random.randint(0,100,size=5)); \ndf\n```", "```py\n87        79        74        3        61\n7     0.355482  -0.246812  -1.147618  -0.293973  -0.560168\n52    1.748274   0.304760  -1.346894  -0.548461   0.457927\n80   -0.043787  -0.680384   1.918261   1.080733   1.346146\n29    0.237049   0.020492   1.212589  -0.462218   1.284134\n0    -0.153209   0.995779   0.100585  -0.350576   0.776116\n```", "```py\ndf.sort_index()\n```", "```py\n87        79        74        3        61\n0    -0.153209   0.995779   0.100585  -0.350576   0.776116\n7     0.355482  -0.246812  -1.147618  -0.293973  -0.560168\n29    0.237049   0.020492   1.212589  -0.462218   1.284134\n52    1.748274   0.304760  -1.346894  -0.548461   0.457927\n80   -0.043787  -0.680384   1.918261   1.080733   1.346146\n```", "```py\ndf.sort_index(axis=1)\n```", "```py\n     3         61         74         79         87\n7    -0.293973  -0.560168  -1.147618  -0.246812   0.355482\n52   -0.548461   0.457927  -1.346894   0.304760   1.748274\n80    1.080733   1.346146   1.918261  -0.680384  -0.043787\n29   -0.462218   1.284134   1.212589   0.020492   0.237049\n0    -0.350576   0.776116   0.100585   0.995779  -0.153209\n```", "```py\ndf.sort_values(by=df.columns[0])\n```", "```py\n    87         79         74         3         61\n0     -0.153209   0.995779   0.100585  -0.350576   0.776116\n80    -0.043787  -0.680384   1.918261   1.080733   1.346146\n29     0.237049   0.020492   1.212589  -0.462218   1.284134\n7      0.355482  -0.246812  -1.147618  -0.293973  -0.560168\n52     1.748274   0.304760  -1.346894  -0.548461   0.457927\n```", "```py\ndf.rank()\n```", "```py\n     87     79     74     3      61\n7    4.0    2.0    2.0    4.0    1.0\n52   5.0    4.0    1.0    1.0    2.0\n80   2.0    1.0    5.0    5.0    5.0\n29   3.0    3.0    4.0    2.0    4.0\n0    1.0    5.0    3.0    3.0    3.0\n```", "```py\ndf1 = pd.DataFrame(np.random.randn(3,2), \n                   index=['A', 'C', 'E'], \n                   columns=['colA', 'colB']); \ndf1\n```", "```py\n     colA         colB\nA     0.519105    -0.127284\nC    -0.840984    -0.495306\nE    -0.137020     0.987424\n```", "```py\ndf2 = pd.DataFrame(np.random.randn(4,3), \n                   index=['A', 'B', 'C', 'D'], \n                   columns=['colA', 'colB', 'colC']); \ndf2\n```", "```py\n     colA          colB         colC\nA    -0.718550     1.938035     0.220391\nB    -0.475095     0.238654     0.405642\nC     0.299659     0.691165    -1.905837\nD     0.282044    -2.287640    -0.551474\n```", "```py\ndf1 + df2\n```", "```py\n     colA         colB        colC\nA    -0.199445    1.810751    NaN\nB     NaN         NaN         NaN\nC    -0.541325    0.195859    NaN\nD     NaN         NaN         NaN\nE     NaN         NaN         NaN\n```", "```py\ndf1.add(df2, fill_value=0)\n```", "```py\n     colA         colB         colC\nA    -0.199445    1.810751     0.220391\nB    -0.475095    0.238654     0.405642\nC    -0.541325    0.195859    -1.905837\nD     0.282044   -2.287640    -0.551474\nE    -0.137020    0.987424     NaN\n```", "```py\ndf1 - df2[['colB']]\n```", "```py\n     colA    colB\nA    NaN     -2.065319\nB    NaN     NaN\nC    NaN     -1.186471\nD    NaN     NaN\nE    NaN     NaN\n```", "```py\ndf1.index.name = 'Index'; df1.columns.name = 'Columns'; df1\n```", "```py\nColumns    colA          colB\nIndex        \nA           0.519105    -0.127284\nC          -0.840984    -0.495306\nE          -0.137020     0.987424\n```", "```py\ndf2.index.name = 'Index'; df2.columns.name = 'Columns'; df2\n```", "```py\nColumns    colA         colB         colC\nIndex            \nA          -0.718550     1.938035     0.220391\nB          -0.475095     0.238654     0.405642\nC           0.299659     0.691165    -1.905837\nD           0.282044    -2.287640    -0.551474\n```", "```py\npd.merge(df1, df2, left_index=True, right_index=True)\n```", "```py\nColumns colA_x    colB_x     colA_y     colB_y     colC\nIndex                    \nA       0.519105  -0.127284  -0.718550  1.938035   0.220391\nC      -0.840984  -0.495306   0.299659  0.691165  -1.905837\n```", "```py\npd.merge(df1, df2, left_index=True, right_index=True, \n         suffixes=('_1', '_2'))\n```", "```py\nColumns  colA_1    colB_1     colA_2     colB_2    colC\nIndex                    \nA        0.519105  -0.127284  -0.718550  1.938035  0.220391\nC       -0.840984  -0.495306   0.299659  0.691165 -1.905837\n```", "```py\npd.merge(df1, df2, left_index=True, right_index=True, \n         suffixes=('_1', '_2'), how='outer')\n```", "```py\nColumns  colA_1    colB_1    colA_2    colB_2    colC\nIndex                    \nA        0.519105  -0.127284  -0.718550  1.938035  0.220391\nB        NaN        NaN       -0.475095  0.238654  0.405642\nC       -0.840984  -0.495306   0.299659  0.691165 -1.905837\nD        NaN        NaN        0.282044 -2.287640 -0.551474\nE       -0.137020   0.987424   NaN       NaN       NaN\n```", "```py\ndf1.merge(df2, left_index=True, right_index=True, \n          suffixes=('_1', '_2'), how='outer')\n```", "```py\nColumns  colA_1     colB_1     colA_2    colB_2    colC\nIndex                    \nA        0.519105  -0.127284  -0.718550  1.938035  0.220391\nB        NaN        NaN       -0.475095  0.238654  0.405642\nC       -0.840984  -0.495306   0.299659  0.691165 -1.905837\nD        NaN        NaN        0.282044 -2.287640 -0.551474\nE       -0.137020   0.987424   NaN       NaN        NaN\n```", "```py\ndf1.join(df2, lsuffix='_1', rsuffix='_2')\n```", "```py\nColumns  colA_1    colB_1    colA_2    colB_2    colC\nIndex                    \nA        0.519105  -0.127284  -0.718550  1.938035  0.220391\nC       -0.840984  -0.495306   0.299659  0.691165 -1.905837\nE       -0.137020  0.987424    NaN       NaN       NaN\n```", "```py\npd.concat([df1, df2])\n```", "```py\n      colA         colB        colC\nIndex            \nA     0.519105    -0.127284    NaN\nC    -0.840984    -0.495306    NaN\nE    -0.137020     0.987424    NaN\nA    -0.718550     1.938035     0.220391\nB    -0.475095     0.238654     0.405642\nC     0.299659     0.691165    -1.905837\nD     0.282044    -2.287640    -0.551474\n```", "```py\npd.concat([df1, df2], axis=1)\n```", "```py\nColumns  colA       colB       colA      colB      colC\nA        0.519105  -0.127284  -0.718550  1.938035  0.220391\nB        NaN        NaN       -0.475095  0.238654  0.405642\nC       -0.840984  -0.495306   0.299659  0.691165 -1.905837\nD        NaN        NaN        0.282044 -2.287640 -0.551474\nE       -0.137020  0.987424    NaN       NaN       NaN\n```", "```py\ndf = pd.DataFrame(np.random.randn(10, 2),\n                  index=[list('aaabbbccdd'), \n                  [1, 2, 3, 1, 2, 3, 1, 2, 1, 2]], \n                  columns=['A', 'B']); \ndf\n```", "```py\n                 A             B\na    1     0.289379    -0.157919\n     2    -0.409463    -1.103412\n     3     0.812444    -1.950786\nb    1    -1.549981     0.947575\n     2     0.344725    -0.709320\n     3     1.384979    -0.716733\nc    1    -0.319983     0.887631\n     2    -1.763973     1.601361\nd    1     0.171177    -1.285323\n     2    -0.143279     0.020981\n```", "```py\ndf.index.names = ['alpha', 'numeric']; df\n```", "```py\n                    A            B\nalpha    numeric        \na       1           0.289379    -0.157919\n        2          -0.409463    -1.103412\n        3           0.812444    -1.950786\n...\n```", "```py\ndf.reset_index()\n```", "```py\n       alpha    numeric      A            B\n0    a        1              0.289379    -0.157919\n1    a        2             -0.409463    -1.103412\n2    a        3              0.812444    -1.950786\n...\n```", "```py\ndf.unstack()\n```", "```py\n             A                                      B\nnumeric        1             2             3              1             2             3\nalpha                        \na            0.289379    -0.409463    0.812444     -0.157919    -1.103412    -1.950786\nb            -1.549981    0.344725    1.384979     0.947575    -0.709320    -0.716733\nc            -0.319983    -1.763973    NaN             0.887631    1.601361        NaN\nd            0.171177    -0.143279    NaN             -1.285323    0.020981        NaN\n```", "```py\ndf.stack()\n```", "```py\nalpha  numeric   \na      1        A    0.289379\n                B   -0.157919\n       2        A   -0.409463\n                B   -1.103412\n       3        A    0.812444\n                B   -1.950786\n...\ndtype: float64\n```", "```py\ndf.stack().index\n```", "```py\nMultiIndex(levels=[['a', 'b', 'c', 'd'], \n                   [1, 2, 3], ['A', 'B']],\n           labels=[[0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3], [0, 0, 1, 1, 2, 2, 0, 0, 1, 1, 2, 2, 0, 0, 1, 1, 0, 0, 1, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1]],\n           names=['alpha', 'numeric', None])\n```", "```py\n    df = df.reset_index(); df\n    ```", "```py\n        alpha    numeric        A           B\n    0    a        1            -0.807285    0.170242\n    1    a        2             0.704596    1.568901\n    2    a        3            -1.417366    0.573896\n    3    b        1             1.110121    0.366712\n    ...\n    ```", "```py\n    grouped = df[['A','B']].groupby(df['alpha']); grouped\n    ```", "```py\n    <pandas.core.groupby.DataFrameGroupBy object at 0x7fd21f24cc18>\n    ```", "```py\n    grouped.describe()\n    ```", "```py\n            A        B\n    alpha            \n    a        count    3.000000    3.000000\n    mean   -0.506685    0.771013\n    std     1.092452    0.719863\n    min    -1.417366    0.170242\n    25%    -1.112325    0.372069\n    50%    -0.807285    0.573896\n    75%    -0.051344    1.071398\n    max     0.704596    1.568901\n    ...\n    ```", "```py\n    grouped.apply(pd.DataFrame.unstack)\n    ```", "```py\n    alpha      \n    a      A  0   -0.807285\n              1    0.704596\n              2   -1.417366\n           B  0    0.170242\n              1    1.568901\n              2    0.573896\n    ...\n    dtype: float64\n    ```", "```py\n    grouped[['A', 'B']].agg('mean')\n    ```", "```py\n                    A            B\n    alpha        \n        a    -0.506685     0.771013\n        b     0.670435     0.868550\n        c     0.455688    -0.497468\n        d    -0.786246     0.107246\n    ```", "```py\n    from scipy import stats\n    grouped[['A', 'B']].transform(stats.zscore)\n    ```", "```py\n                A             B\n    0    -0.337002    -1.022126\n    1     1.357964     1.357493\n    2    -1.020962    -0.335367\n    3     0.610613    -0.567813\n    4    -1.410007     1.405598\n    5     0.799394    -0.837785\n    6    -1.000000     1.000000\n    7     1.000000    -1.000000\n    8    -1.000000    -1.000000\n    9     1.000000     1.000000\n    ```", "```py\ndf2\n```", "```py\nColumns   colA         colB         colC\nIndex            \nA        -2.071652     0.742857     0.632307\nB         0.113046    -0.384360     0.414585\nC         0.690674     1.511816     2.220732\nD         0.184174    -1.069291    -0.994885\n```", "```py\ndf2.index = ['Alpha', 'Beta', 'Gamma', 'Delta']; \ndf2\n```", "```py\nColumns       colA             colB             colC\nAlpha        -2.071652         0.742857         0.632307\nBeta          0.113046        -0.384360         0.414585\nGamma         0.690674         1.511816         2.220732\nDelta         0.184174        -1.069291        -0.994885\n```", "```py\ndf2.index = df2.index.map(lambda x : x[:3]); df2\n```", "```py\nColumns     colA         colB         colC\nAlp        -2.071652     0.742857     0.632307\nBet         0.113046    -0.384360     0.414585\nGam         0.690674     1.511816     2.220732\nDel         0.184174    -1.069291    -0.994885\n```", "```py\ndf2.rename(index={'Alp': 0, 'Bet': 1, 'Gam': 2, 'Del': 3}, \n           columns={'colA': 'A', 'colB': 'B', 'colC': 'C'})\n```", "```py\nColumns      A            B            C\n0           -2.071652     0.742857     0.632307\n1            0.113046    -0.384360     0.414585\n2            0.690674     1.511816     2.220732\n3            0.184174    -1.069291    -0.994885\n```", "```py\nfor row, col in [('Bet', 'colA'), ('Bet', 'colB'), \n  ('Bet', 'colC'), ('Del', 'colB'), ('Gam', 'colC')]:\n    df2.at[row, col] = np.NaN\ndf2\n```", "```py\nColumns      colA         colB          colC\nAlp         -1.721523    -0.425150      1.425227\nBet          NaN          NaN           NaN\nGam         -0.408566    -1.121813      NaN\nDel          0.361053     NaN           0.580435\n```", "```py\ndf2.isnull()\n```", "```py\nColumns     colA     colB     colC\nAlp         False    False    False\nBet         True     True     True\nGam         False    False    True\nDel         False    True     False\n```", "```py\ndf2.notnull()\n```", "```py\nColumns    colA    colB    colC\nAlp        True    True    True\nBet        False   False   False\nGam        True    True    False\nDel        True    False   True\n```", "```py\ndf2.dropna(how='all')\n```", "```py\nColumns    colA         colB         colC\nAlp       -1.721523    -0.425150     1.425227\nGam       -0.408566    -1.121813     NaN\nDel        0.361053     NaN          0.580435\n```", "```py\ndf2.dropna(how='any')\n```", "```py\nColumns     colA         colB       colC\nAlp        -1.721523    -0.42515    1.425227\n```", "```py\ndf2\n```", "```py\nColumns     colA         colB        colC\nAlp        -1.721523    -0.425150    1.425227\nBet         NaN          NaN         NaN\nGam        -0.408566    -1.121813    NaN\nDel         0.361053     NaN         0.580435\n```", "```py\ndf2.fillna(method='backfill', inplace=True); \ndf2\n```", "```py\nColumns     colA         colB        colC\nAlp        -1.721523    -0.425150    1.425227\nBet        -0.408566    -1.121813    0.580435\nGam        -0.408566    -1.121813    0.580435\nDel         0.361053     NaN         0.580435\n```", "```py\ndf2['Category'] = ['HIGH', 'LOW', 'LOW', 'HIGH']; df2\n```", "```py\nColumns     colA         colB        colC        Category\nAlp         1.017961     1.450681   -0.328989    HIGH\nBet        -0.079838    -0.519025    1.460911    LOW\nGam        -0.079838    -0.519025    1.460911    LOW\nDel         0.359516     NaN         1.460911    HIGH\n```", "```py\ndf2['Category'] = df2['Category'].map({'HIGH': 'H', \n                                       'LOW': 'L'}); \ndf2\n```", "```py\nColumns     colA         colB        colC        Category\nAlp         1.017961     1.450681   -0.328989    H\nBet        -0.079838    -0.519025    1.460911    L\nGam        -0.079838    -0.519025    1.460911    L\nDel         0.359516     NaN         1.460911    H\n```", "```py\ndf2.drop('Category', axis=1).applymap(np.exp)\n```", "```py\nColumns    colA        colB        colC\nAlp        2.767545    4.266020    0.719651\nBet        0.923266    0.595101    4.309883\nGam        0.923266    0.595101    4.309883\nDel        1.432636    NaN         4.309883\n```", "```py\narr = np.random.randn(10); \narr\n```", "```py\narray([  1.88087339e-01,  7.94570445e-01,  -5.97384701e-01,\n        -3.01897668e+00, -5.42185315e-01,   1.10094663e+00,\n         1.16002554e+00,  1.51491444e-03,  -2.21981570e+00,\n         1.11903929e+00])\n```", "```py\ncat = pd.cut(arr, bins=5, labels=['Very Low', 'Low', 'Med', \n                                  'High', 'Very High']); \ncat\n```", "```py\n [High, Very High, Med, Very Low, Med, Very High, Very High, High, Very Low, Very High]\nCategories (5, object): [Very Low < Low < Med < High < Very High]\n```", "```py\nqcat = pd.qcut(arr, q=5, labels=['Very Low', 'Low', 'Med', \n                                 'High', 'Very High']); \nqcat\n```", "```py\n[Med, High, Low, Very Low, Low, High, Very High, Med, Very Low, Very High]\nCategories (5, object): [Very Low < Low < Med < High < Very High]\n```", "```py\npd.DataFrame({'Value': arr, 'Category': cat, \n              'Quartile Category': qcat})\n```", "```py\nCategory    Quartile     Category    Value\n0           High         Med         0.188087\n1           Very High    High        0.794570\n2           Med          Low        -0.597385\n3           Very Low     Very Low   -3.018977\n4           Med          Low        -0.542185\n5           Very High    High        1.100947\n6           Very High    Very High   1.160026\n7           High         Med         0.001515\n8           Very Low     Very Low   -2.219816\n9           Very High    Very High   1.119039\n```", "```py\npd.cut(arr, bins=5).categories\n```", "```py\nIndex(['(-3.0232, -2.183]', '(-2.183, -1.347]', \n       '(-1.347, -0.512]', '(-0.512, 0.324]', \n       '(0.324, 1.16]'],\n      dtype='object')\n```", "```py\npd.qcut(arr, q=5).categories\n```", "```py\nIndex(['[-3.019, -0.922]', '(-0.922, -0.216]', \n       '(-0.216, 0.431]', '(0.431, 1.105]', \n       '(1.105, 1.16]'],\n      dtype='object')\n```", "```py\ndf = pd.DataFrame(np.random.randn(10,5), \n                  index=np.sort(np.random.randint(0, 100, \n                                                 size=10)), \n                  columns=list('ABCDE')); \ndf\n```", "```py\n            A          B          C          D          E\n 0  -0.564568  -0.188190  -1.678637  -0.128102  -1.880633\n 0  -0.465880   0.266342   0.950357  -0.867568   1.504719\n29   0.589315  -0.968324  -0.432725   0.856653  -0.683398\n...\n```", "```py\ndf.loc[np.random.permutation(df.index)]\n```", "```py\n            A         B          C           D         E\n42   0.214554   1.108811   1.352568   0.238083  -1.090455\n 0  -0.564568  -0.188190  -1.678637  -0.128102  -1.880633\n 0  -0.465880   0.266342   0.950357  -0.867568   1.504719\n62  -0.266102   0.831051  -0.164629   0.349047   1.874955\n...\n```", "```py\ndf.iloc[np.random.randint(0, len(df), size=5)]\n```", "```py\n           A          B           C         D          E\n54   0.692757  -0.584690  -0.176656   0.728395  -0.434987\n98  -0.517141   0.109758  -0.132029   0.614610  -0.235801\n29   0.589315  -0.968324  -0.432725   0.856653  -0.683398\n35   0.520140   0.143652   0.973510   0.440253   1.307126\n62  -0.266102   0.831051  -0.164629   0.349047   1.874955\n```", "```py\ndf.to_csv('df.csv', sep=',', header=True, index=True)\n```", "```py\n!head -n 4 df.csv\n```", "```py\n,A,B,C,D,E\n4,-0.6329164608486778,0.3733235944037599,0.8225354680198685,-0.5171618315489593,0.5492241692404063\n17,0.7664860447792711,0.8427366352142621,0.9621402130525599,-0.41134468872009666,-0.9704305306626816\n24,-0.22976016405853183,0.38081314413811984,-1.526376189972014,0.07229102135441286,-0.3297356221604555\n```", "```py\npd.read_csv('df.csv', sep=',', index_col=0, nrows=5)\n```", "```py\n           A          B          C           D         E\n 4  -0.632916   0.373324   0.822535  -0.517162   0.549224\n17   0.766486   0.842737   0.962140  -0.411345  -0.970431\n24  -0.229760   0.380813  -1.526376   0.072291  -0.329736\n33   0.662259  -1.457732  -2.268573   0.332456   0.496143\n33   0.335710   0.452842  -0.977736   0.677470   1.164602\n```", "```py\npd.read_csv('df.csv', sep=',', index_col=0, chunksize=2)\n```", "```py\n<pandas.io.parsers.TextFileReader at 0x7fb4e9933a90>\n```", "```py\nlist(pd.read_csv('df.csv', sep=',', index_col=0, \n                  chunksize=2))\n```", "```py\n[           A         B         C         D         E\n 4  -0.632916  0.373324  0.822535 -0.517162  0.549224\n 17  0.766486  0.842737  0.962140 -0.411345 -0.970431,\n            A         B         C         D         E\n 24 -0.229760  0.380813 -1.526376  0.072291 -0.329736\n 33  0.662259 -1.457732 -2.268573  0.332456  0.496143,\n...\n```", "```py\ndf.iloc[:4].to_json('df.json')\n```", "```py\n!cat df.json\n```", "```py\n{\"A\":{\"4\":-0.6329164608,\"17\":0.7664860448,\"24\":-0.2297601641,\"33\":0.6622594878},\"B\":{\"4\":0.3733235944,\"17\":0.8427366352,\"24\":0.3808131441,\"33\":-1.4577321521},\"C\":{\"4\":0.822535468,\"17\":0.9621402131,\"24\":-1.52637619,\"33\":-2.2685732447},\"D\":{\"4\":-0.5171618315,\"17\":-0.4113446887 ,\"24\":0.0722910214,\"33\":0.3324557226},\"E\":{\"4\":0.5492241692 ,\"17\":-0.9704305307,\"24\":-0.3297356222,\"33\":0.4961425281}}\n```", "```py\npd.read_json('df.json')\n```", "```py\n            A         B           C         D           E\n 4  -0.632916   0.373324   0.822535  -0.517162   0.549224\n17   0.766486   0.842737   0.962140  -0.411345  -0.970431\n24  -0.229760   0.380813  -1.526376   0.072291  -0.329736\n33   0.662259  -1.457732  -2.268573   0.332456   0.496143\n```"]