- en: Chapter 2. Statistical Modeling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to discuss statistical modeling, which will be
    the first step in learning quantitative finance in R as the concepts of statistical
    modeling are the driving force for quantitative finance. Before starting this
    chapter, the assumption is that learners are familiar with basic programming in
    R and have a sound knowledge of statistical concepts. We will not be discussing
    statistical concepts in this chapter. We will be discussing how to do the statistical
    modeling in R.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Probability distributions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sampling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Statistics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Correlation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hypothesis testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parameter estimation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Outlier detection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Standardization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Normalization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Probability distributions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Probability distributions determine how the values of random variables are spread.
    For example, the set of all the possible outcomes of the tossing of a sequence
    of coins gives rise to binomial distribution. The means of large samples of the
    data population follow normal distribution, which is the most common and useful
    distribution.
  prefs: []
  type: TYPE_NORMAL
- en: The features of these distributions are very well known and can be used to extract
    inferences about the population. We are going to discuss in this chapter some
    of the most common probability distributions and how to compute them.
  prefs: []
  type: TYPE_NORMAL
- en: Normal distribution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Normal distribution is the most widely used probability distribution in the
    financial industry. It is a bell-shaped curve and mean, median mode is the same
    for normal distribution. It is denoted by ![Normal distribution](img/00002.jpeg) where
    ![Normal distribution](img/00003.jpeg) is the mean and ![Normal distribution](img/00004.jpeg)
    is the variance of the sample. If the mean is 0 and variance is 1 then the normal
    distribution is known as standard normal distribution N(1, 0).
  prefs: []
  type: TYPE_NORMAL
- en: Now let us discuss the main functions to compute the important features associated
    with normal distribution. Please note we will be using the dataset `DataChap2.csv`
    for all the calculations in this chapter. A sample is displayed in the following
    table. Let the imported dataset in R be `Sampledata`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the given sample, `Date` is the time when the data has been captured. `Open`,
    `High`, `Low`, and `Close` are the the opening, highest, lowest, and closing price
    of the day, respectively. `Adj.Close` is the adjusted prices of the day and `return`
    is the return calculated using the `Adj.Close` price of today and yesterday. `Flag`
    and `Sentiments` are the dummy variables created for the purpose of analysis:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Date` | `Open` | `High` | `Low` | `Close` | `Volume` | `Adj.Close` | `Return`
    | `Flag` | `Sentiments` |'
  prefs: []
  type: TYPE_TB
- en: '| 12/14/2016 | 198.74 | 203 | 196.76 | 198.69 | 4144600 | 198.69 | 0 | 1 |
    Good |'
  prefs: []
  type: TYPE_TB
- en: '| 12/13/2016 | 193.18 | 201.28 | 193 | 198.15 | 6816100 | 198.15 | 0.03 | 1
    | Bad |'
  prefs: []
  type: TYPE_TB
- en: '| 12/12/2016 | 192.8 | 194.42 | 191.18 | 192.43 | 615800 | 192.43 | 0 | 1 |
    Good |'
  prefs: []
  type: TYPE_TB
- en: '| 12/9/2016 | 190.87 | 193.84 | 190.81 | 192.18 | 2719600 | 192.18 | 0 | 0
    | Bad |'
  prefs: []
  type: TYPE_TB
- en: '| 12/8/2016 | 192.05 | 192.5 | 189.54 | 192.29 | 3187300 | 192.29 | 0 | 0 |
    Good |'
  prefs: []
  type: TYPE_TB
- en: norm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`norm` returns the height of the normal distribution and the function is defined
    by the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Here, `x` is the vector of numbers and `sd` is the standard deviation.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we execute the following code, it generates the given plot showing the
    height of all the points:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The graphical representation is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![norm](img/00005.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.1: Plot showing height of normal distribution'
  prefs: []
  type: TYPE_NORMAL
- en: pnorm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`pnorm` is known as the cumulative distribution function and it gives the probability
    of a random variable less than a given value of a random variable and is given
    by the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We execute the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This yields `0.159837` and can be interpreted as there is a 16% probability
    of getting a return greater than 2%.
  prefs: []
  type: TYPE_NORMAL
- en: qnorm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`qnorm` takes the probability value and returns a number for which the cumulative
    value matches the probability and the function is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Here, `x` is the probability value.
  prefs: []
  type: TYPE_NORMAL
- en: 'We execute the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This gives the output `0.02`, which means that for the return of greater than
    equal 2% the probability is 16%.
  prefs: []
  type: TYPE_NORMAL
- en: rnorm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`rnorm` is used to generate the random number whose distribution is normal.
    It is given by the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here, `x` is the number of random variables to be generated.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we run the following code, it will generate five random values with the
    mean and standard deviation of the return:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: When this code gets executed, it generates five normal random variables with
    the specified mean and standard deviation.
  prefs: []
  type: TYPE_NORMAL
- en: Lognormal distribution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In a financial time series, the lognormal distribution plays a more critical
    role than normal distribution. Just like normal distribution, we will be discussing
    the same features for lognormal distribution.
  prefs: []
  type: TYPE_NORMAL
- en: dlnorm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`dlnorm` is used to find the density function of the lognormal distribution.
    The general syntax for computing the density function is given by the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Let us find the density function of the volume of the sample data, which can
    be done by executing the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The graphical representation is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![dlnorm](img/00006.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.2: Plot showing density function of lognormal distribution'
  prefs: []
  type: TYPE_NORMAL
- en: plnorm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`plnorm` gives the cumulative probability distribution function of lognormal
    distribution. The general syntax is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let us find the `cdf` for volume, which is given by the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This gives the `cdf` plot as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![plnorm](img/00007.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.3: Plot showing cumulative distribution function of lognormal distribution'
  prefs: []
  type: TYPE_NORMAL
- en: qlnorm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`qlnorm` is used to generate `p` quantiles of the lognormal distribution, which
    can be done by using the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: rlnorm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`rlnorm` generates a dataset with a given mean and standard deviation. The
    syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Poisson distribution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Poisson distribution is the probability distribution of the occurrence of independent
    events in an interval. If ![Poisson distribution](img/00008.jpeg) is the mean
    occurrence per interval, then the probability of having *x* occurrences within
    a given interval is given by the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Poisson distribution](img/00009.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Here, *x* = 0, 1, 2, 3.....
  prefs: []
  type: TYPE_NORMAL
- en: 'If there are, on average, 10 stocks whose return per minute is getting positive,
    we can find the probability of having 15 stocks whose returns are getting positive
    in a particular minute by using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This gives the output value `0.9512596`.
  prefs: []
  type: TYPE_NORMAL
- en: Hence the lower tail probability of getting returns of 15 stocks positive is
    0.95.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, we can find the upper tail probability by executing the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Uniform distribution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Continuous uniform distribution is the probability distribution of a random
    number selection from the continuous interval between *a* and *b*. Its density
    function is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*F(x) = 1/(b-a)*'
  prefs: []
  type: TYPE_NORMAL
- en: Here ![Uniform distribution](img/00010.jpeg) and
  prefs: []
  type: TYPE_NORMAL
- en: '![Uniform distribution](img/00011.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now let us generate `10` random numbers between `1` and `5`. It can be given
    by executing the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This generates the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Extreme value theory
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most of the commonly known statistical distributions are focused on the center
    of distributions and do not bother about the tails of distributions, which contain
    the extreme/outlier values. One of the toughest challenges for a risk manager
    is to develop risk models which can take care of rare and extreme events. **Extreme
    value theory** (**EVT**) attempts to provide the best possible estimate of the
    tail area of a distribution.
  prefs: []
  type: TYPE_NORMAL
- en: There are two types of models for estimating extreme values, that is, block
    maxima models fitted with the **generalized extreme value** (**GEV**) distribution
    and **peaks over threshold** (**POT**) models fitted with the **generalized Pareto
    distribution** (**GPD**). Generally, POT is used these days so we will be giving
    an example of POT in this chapter. Let us use a subset of the dataset available
    in the POT package as an example.
  prefs: []
  type: TYPE_NORMAL
- en: 'To find the tail distribution, first we need to find a threshold point, which
    can be done by executing the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This gives the following plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Extreme value theory](img/00012.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.4: Analysis for threshold selection for EVT'
  prefs: []
  type: TYPE_NORMAL
- en: 'After analyzing these plots, the threshold point can be set and the parameters
    of GPD models can be estimated. This is done by executing the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'This gives the parameter estimates of the GPD model:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Extreme value theory](img/00013.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.5: Parameter estimates of GPD model for EVT'
  prefs: []
  type: TYPE_NORMAL
- en: Sampling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When building any model in finance, we may have very large datasets on which
    model building will be very time-consuming. Once the model is built, if we need
    to tweak the model again, it is going to be a time-consuming process because of
    the volume of data. So it is better to get the random or proportionate sample
    of the population data on which model building will be easier and less time-consuming.
    So in this section, we are going to discuss how to select a random sample and
    a stratified sample from the data. This will play a critical role in building
    the model on sample data drawn from the population data.
  prefs: []
  type: TYPE_NORMAL
- en: Random sampling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Select the sample where all the observation in the population has an equal chance.
    It can be done in two ways, one without replacement and the other with replacement.
  prefs: []
  type: TYPE_NORMAL
- en: 'A random sample without replacement can be done by executing the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'This generates the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Random sampling](img/00014.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.6: Table shows random sample without replacement'
  prefs: []
  type: TYPE_NORMAL
- en: 'A random sample with replacement can be done by executing the following code.
    Replacement means that an observation can be drawn more than once. So if a particular
    observation is selected, it is again put into the population and it can be selected
    again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'This generates the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Random sampling](img/00015.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.7: Table showing random sampling with replacement'
  prefs: []
  type: TYPE_NORMAL
- en: Stratified sampling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In stratified sampling, we divide the population into separate groups, called
    strata. Then, a probability sample (often a simple random sample) is drawn from
    each group. Stratified sampling has several advantages over simple random sampling.
    With stratified sampling, it is possible to reduce the sample size in order to
    get better precision.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let us see how many groups exist by using `Flag` and `Sentiments` as given
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Stratified sampling](img/00016.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.8: Table showing the frequencies across different groups'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you can select the sample from the different groups according to your requirement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Stratified sampling](img/00017.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.9: Table showing output for stratified sampling'
  prefs: []
  type: TYPE_NORMAL
- en: Statistics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a given dataset, we try to summarize the data by the central position of
    the data, which is known as measure of central tendency or summary statistics.
    There are several ways to measure the central tendency, such as mean, median,
    and mode. Mean is the widely used measure of central tendency. Under different
    scenarios, we use different measures of central tendency. Now we are going to
    give an example of how to compute the different measures of central tendency in
    R.
  prefs: []
  type: TYPE_NORMAL
- en: Mean
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`mean` is the equal weightage average of the sample. For example, we can compute
    the mean of `Volume` in the dataset `Sampledata` by executing the following code,
    which gives the arithmetic mean of the volume:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Median
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Median is the mid value of the matrix when it is arranged in a sorted way,
    which can be computed by executing the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Mode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Mode is the value present in the attribute which has maximum frequency. For
    mode, there does not exist an inbuilt function so we will write a function to
    compute mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Executing the preceding code gives the mode of the return attribute of the dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can also generate basic statistics of a column by executing the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: This generates the mean, median, minimum, maximum, Q1, and Q2 quartiles.
  prefs: []
  type: TYPE_NORMAL
- en: Moment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Moment gives the characteristics such as variance, skewness, and so on of the
    population, which is computed by the following code. The code gives the third
    order moment of the attribute `Volume`. Once can change the order to get the relevant
    characteristics. However before that, we need to install package `e1071`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Kurtosis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Kurtosis measures whether the data is heavy-tailed or light-tailed relative
    to a normal distribution. Datasets with high kurtosis tend to have heavy tails,
    or outliers. Datasets with low kurtosis tend to have light tails, and fewer outliers.
    The computed value of kurtosis is compared with the kurtosis of normal distribution
    and the interpretation is made on the basis of that.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `kurtosis` of `Volume` is given by the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: It gives value `5.777117`, which shows the distribution of volume as leptokurtic.
  prefs: []
  type: TYPE_NORMAL
- en: Skewness
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Skewness is the measure of symmetry of the distribution. If the mean of data
    values is less than the median then the distribution is said to be left-skewed
    and if the mean of the data values is greater than the median, then the distribution
    is said to be right-skewed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `skewness` of `Volume` is computed as follows in R:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: This gives the result `1.723744`, which means it is right-skewed.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For computing `skewness` and kurtosis, we need to install the package `e1071`.
  prefs: []
  type: TYPE_NORMAL
- en: Correlation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Correlation plays a very important role in quant finance. It not only determines
    the relation between the financial attributes but also plays a crucial role in
    predicting the future of financial instruments. Correlation is the measure of
    linear relationship between the two financial attributes. Now let us try to compute
    the different types of correlation in R using `Sampledata`, which is used in identifying
    the orders of components of predictive financial models.
  prefs: []
  type: TYPE_NORMAL
- en: 'Correlation can be computed by the following code. Let''s first subset the
    data and then run the function for getting correlation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'This generates the following correlation matrix, which shows the measure of
    linear relationship between the various daily level prices of a stock:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | `Open` | `High` | `Low` | `Close` |'
  prefs: []
  type: TYPE_TB
- en: '| `Open` | 1 | 0.962062 | 0.934174 | 0.878553 |'
  prefs: []
  type: TYPE_TB
- en: '| `High` | 0.962062 | 1 | 0.952676 | 0.945434 |'
  prefs: []
  type: TYPE_TB
- en: '| `Low` | 0.934174 | 0.952676 | 1 | 0.960428 |'
  prefs: []
  type: TYPE_TB
- en: '| `Close` | 0.878553 | 0.945434 | 0.960428 | 1 |'
  prefs: []
  type: TYPE_TB
- en: Autocorrelation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Autocorrelation is the correlation of the series with its past or future values.
    It is also known as serial correlation and lagged correlation. It plays a critical
    role in time series prediction modeling. The function `acf` computes estimates
    of the autocorrelation function.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code when executed gives the autocorrelation of the series with
    its lagged values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The graph is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Autocorrelation](img/00018.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.10: Plot showing autocorrelation of series with its lag'
  prefs: []
  type: TYPE_NORMAL
- en: This gives the plot of autocorrelations of the series with its lagged values.
    There are other options in functions such as `lag.max`, `plot`, and so on.
  prefs: []
  type: TYPE_NORMAL
