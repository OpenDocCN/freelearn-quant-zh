["```py\n>>>import pandas as pd\n>>>x=pd.read_csv(\"c:/temp/ibm.csv\")\n```", "```py\n>>>import pandas_datareader.data as getData\ndf = getData.get_data_google(\"IBM\")\n```", "```py\n>>>df.head(2)\n>>>\n                  Open        High         Low       Close   Volume  \\\nDate                                                                  \n2010-01-04  131.179993  132.970001  130.850006  132.449997  6155300   \n2010-01-05  131.679993  131.850006  130.100006  130.850006  6841400   \nAdj Close  \nDate                    \n2010-01-04  112.285875\n2010-01-05  110.929466\n>>>df.tail(2)\n                  Open        High         Low       Close   Volume  \\\nDate                                                                  \n2016-12-08  164.869995  166.000000  164.220001  165.360001  3259700   \n2016-12-09  165.179993  166.720001  164.600006  166.520004  3143900   \nAdj Close  \nDate                    \n2016-12-08  165.360001\n2016-12-09  166.520004\n>>>\n```", "```py\n>>>import pandas_datareader.data as getData\n>>>import datetime\n>>>begdate = datetime.datetime(1962, 11, 1)\n>>>enddate = datetime.datetime(2016, 11, 7)\ndf = getData.get_data_google(\"IBM\",begdate, enddate)\n```", "```py\n>>>df[0:2]\n                Open        High         Low       Close   Volume  AdjClose\nDate                                                                          \n1962-11-01  345.999992  351.999986  341.999996  351.999986  1992000   1.391752\n1962-11-02 351.999986369.875014 346.999991 357.249999  3131200   1.412510\n>>>\n```", "```py\n>>>from matplotlib.finance import quotes_historical_yahoo_ochl as getData\n>>>p=getData(\"IBM\", (2015,1,1),(2015,12,31),asobject=True,adjusted=True)\n```", "```py\n>>>p[0:4]\nrec.array([ (datetime.date(2015, 1, 2), 2015, 1, 2, 735600.0, 150.47501253708967, 151.174636, 152.34067510485053, 150.1858367047493, 5525500.0, 151.174636),\n (datetime.date(2015, 1, 5), 2015, 1, 5, 735603.0, 150.43770546142676, 148.795914, 150.43770546142676, 148.497414517829, 4880400.0, 148.795914),\n (datetime.date(2015, 1, 6), 2015, 1, 6, 735604.0, 148.9451702494383, 145.586986, 149.215699719094, 144.7474294432884, 6146700.0, 145.586986),\n (datetime.date(2015, 1, 7), 2015, 1, 7, 735605.0, 146.64107567217212, 144.635494, 146.64107567217212, 143.68400235493388, 4701800.0, 144.635494),\ndtype=[('date', 'O'), ('year', '<i2'), ('month', 'i1'), ('day', 'i1'), ('d', '<f8'), ('open', '<f8'), ('close', '<f8'), ('high', '<f8'), ('low', '<f8'), ('volume', '<f8'), ('aclose', '<f8')])>>>\n```", "```py\n>>> import numpy as np\n>>>price=np.array([10,10.2,10.1,10.22,9])\n>>>price[1:]\narray([ 10.2 ,  10.1 ,  10.22,   9\\.  ])\n>>>price[:-1]\narray([ 10\\.  ,  10.2 ,  10.1 ,  10.22])\n>>> (price[1:]-price[:-1])/price[:-1]\narray([ 0.02      , -0.00980392,  0.01188119, -0.11937378])\n>>>\n```", "```py\n>>> (10.2-10)/10\n0.019999999999999928\n>>>\n>>> (10.1-10.2)/10.2\n-0.009803921568627416\n```", "```py\n>>>import scipy as sp\n>>>sp.random.seed(123)\n>>>price=sp.random.random_sample(10)*15\n>>>price\narray([ 10.44703778,   4.29209002,   3.4027718 ,   8.26972154,\n        10.79203455,   6.3465969 ,  14.71146298,  10.27244608,\n         7.21397852,   5.88176277])\n>>>price[1:]/price[:-1]-1\narray([-0.58915722, -0.20719934,  1.43028978,  0.3050058 , -0.4119184 ,\n        1.31800809, -0.30173864, -0.29773508, -0.18467143])\n>>>\n```", "```py\nfrom matplotlib.finance import quotes_historical_yahoo_ochl as getData\nticker='IBM'\nbegdate=(2015,1,1) \nenddate=(2015,11,9)\np = getData(ticker, begdate, enddate,asobject=True, adjusted=True)\nret = p.aclose[1:]/p.aclose[:-1]-1\n```", "```py\n>>>p.aclose[0:4]\narray([ 151.174636,  148.795914,  145.586986,  144.635494])>>>\n>>>ret[0:3]\narray([-0.01573493, -0.02122663, -0.00629399])\n>>> (p.aclose[1]-p.aclose[0])/p.aclose[0]\n-0.01573492791475934\n```", "```py\nfrom scipy import stats\nimport numpy as np\nfrom matplotlib.finance import quotes_historical_yahoo_ochl as getData\nticker='ibm'\nbegdate=(2011,1,1)\nenddate=(2015,12,31)\np=getData(ticker,begdate,enddate,asobject=True, adjusted=True)\nret=p.aclose[1:]/p.aclose[:-1]-1\nmean=np.mean(ret)\nprint('   Mean '  )\nprint(round(mean,5))\n>>>\n   Mean \n>>>\n0.00011\n```", "```py\n0.00011\nprint(' T-test result: T-value and P-value'  )\nprint(stats.ttest_1samp(ret,0))\n>>>\n T-test result: T-value and P-value\n>>>\nTtest_1sampResult(statistic=0.3082333300938474, pvalue=0.75795590301241988)\n>>>\n```", "```py\n>>>import scipy.stats\n>>>help(stats.ttest_1samp)\nHelp on function ttest_1samp in module scipy.stats.stats:\n\nttest_1samp(a, popmean, axis=0, nan_policy='propagate')\n```", "```py\nimport scipy.stats as stats\nfrom matplotlib.finance import quotes_historical_yahoo_ochl as getData\nbegdate=(2013,1,1)\nenddate=(2016,12,9)\n\ndef ret_f(ticker,begdate,enddate):\n    p = getData(ticker,begdate,\nenddate,asobject=True,adjusted=True)\n    ret=p.aclose[1:]/p.aclose[:-1]-1\n    return(ret)\n\na=ret_f('IBM',begdate,enddate)\nb=ret_f('MSFT',begdate,enddate)\n```", "```py\n>>>a.mean()*100\n0.0022164073263915601\n>>>b.mean()*100\n0.10399096829827408\n>>>\n```", "```py\n>>>print(stats.ttest_ind(a,b))\nTtest_indResult(statistic=-1.652826053660396, pvalue=0.09852448906883747)\n```", "```py\nfrom matplotlib.finance import quotes_historical_yahoo_ochl as getData\nimport numpy as np\nimport pandas as pd\nticker='IBM'\nbegdate=(2015,1,1)\nenddate=(2015,12,31)\nx = getData(ticker, begdate, enddate,asobject=True, adjusted=True)\nlogret = np.log(x.aclose[1:]/x.aclose[:-1])\n\ndate=[]\nd0=x.date\nfor i in range(0,np.size(logret)):\n    date.append(''.join([d0[i].strftime(\"%Y\"),d0[i].strftime(\"%m\")]))\n\ny=pd.DataFrame(logret,date,columns=['retMonthly'])\nretMonthly=y.groupby(y.index).sum()\n```", "```py\n>>>import pandas as pd\n>>> x=pd.datetime(2016,1,1)\n>>>x\ndatetime.datetime(2016, 1, 1, 0, 0)\n>>>x.strftime(\"%Y\")\n'2016'\n```", "```py\n>>>retMonthly.head(2)\n>>>\nretMonthly\n201501   -0.046737\n201502    0.043930\n>>>\n>>>retMonthly.tail(2)\n>>>\nretMonthly\n201511    0.015798\n201512   -0.026248\n>>>\n```", "```py\nfrom matplotlib.finance import quotes_historical_yahoo_ochl as getData\nimport numpy as np\nimport pandas as pd\nticker='IBM'\nbegdate=(1980,1,1)\nenddate=(2012,12,31)\nx=getData(ticker,begdate,enddate,asobject=True,adjusted=True)\nlogret = np.log(x.aclose[1:]/x.aclose[:-1])\n\ndate=[]\nd0=x.date\nfor i in range(0,np.size(logret)):\n      date.append(d0[i].strftime(\"%Y\"))\n#\ny=pd.DataFrame(logret,date,columns=['retAnnual'])\nret_annual=exp(y.groupby(y.index).sum())-1\n```", "```py\n>>>ret_annual[0:5]\nretAnnual\n1980  0.167561\n1981 -0.105577\n1982  0.679136\n1983  0.352488\n1984  0.028644\n>>>\n>>>ret_annual.tail(2)\n>>>\nretAnnual\n2011   0.284586\n2012   0.045489\n>>>\n```", "```py\nimport scipy as sp\nfrom matplotlib.finance import quotes_historical_yahoo_ochl as getData\nbegdate=(2013,1,1)\nenddate=(2015,12,31)\ndef ret_f(ticker,begdate,enddate):\n    p = getData(ticker,begdate,\nenddate,asobject=True,adjusted=True)\n    return(p.aclose[1:]/p.aclose[:-1]-1)\ny=ret_f('IBM',begdate,enddate)\nx=ret_f('MSFT',begdate,enddate)\n```", "```py\n>>>print(sp.stats.bartlett(x,y))\nBartlettResult(statistic=44.392308291526497, pvalue=2.6874090005526671e-11)\n```", "```py\n    bartlett(*args)\n    ```", "```py\n>>>import pandas_datareader.data as getData\n>>>x = getData.DataReader('IBM', data_source='yahoo', start='2004/1/30')\n>>>x[1:5]\n                  Open        High        Low       Close   Volume  Adj Close\nDate                                                                         \n2004-02-02   99.150002   99.940002  98.500000   99.389999  6200000  77.666352\n2004-02-03   99.000000  100.000000  98.949997  100.000000  5604300  78.143024\n2004-02-04   99.379997  100.430000  99.300003  100.190002  8387500  78.291498\n2004-02-05  100.000000  100.089996  98.260002   98.860001  5975000  77.252194\n>>>\n```", "```py\n>>>import pandas_datareader.data as getData\n>>>aapl =getData.DataReader(\"AAPL\", \"google\") \n>>>aapl.head(2)\n>>>\n             Open   High    Low  Close     Volume\nDate                                             \n2010-01-04  30.49  30.64  30.34  30.57  123432050\n2010-01-05  30.66  30.80  30.46  30.63  150476004\n>>>aapl.tail(2)\n              Open    High     Low   Close    Volume\nDate                                                \n2016-12-08  110.86  112.43  110.60  112.12  27068316\n2016-12-09  112.31  114.70  112.31  113.95  34402627\n>>>\n```", "```py\n\"Series Description\",\"Federal funds effective rate\"\n\"Unit:\",\"Percent:_Per_Year\"\n\"Multiplier:\",\"1\"\n\"Currency:\",\"NA\"\n\"Unique Identifier: \",\"H15/H15/RIFSPFF_N.D\"\n\"Time Period\",\"RIFSPFF_N.D\"\n1954-07-01,1.13\n1954-07-02,1.25\n1954-07-03,1.25\n1954-07-04,1.25\n1954-07-05,0.88\n1954-07-06,0.25\n1954-07-07,1.00\n1954-07-08,1.25\n```", "```py\nimport pandas as pd\nimportnumpy as np\nfile=open(\"c:/temp/fedFundRate.csv\",\"r\")\ndata=pd.read_csv(file,skiprows=6)\n```", "```py\n>>>import pandas_datareader.data as getData\n>>>vix = DataReader(\"VIXCLS\", \"fred\")\n>>>vis.head()\nVIXCLS\nDATE              \n2010-01-01     NaN\n2010-01-04   20.04\n2010-01-05   19.35\n2010-01-06   19.16\n2010-01-07   19.06\n>>>\n```", "```py\nThe 1-month TBill return is from Ibbotson and Associates, Inc.\nMkt-RFSMBHMLRF\n192607    2.62   -2.16   -2.92    0.22\n192608    2.56   -1.49    4.88    0.25\n192609    0.36   -1.38   -0.01    0.23\n192610   -3.43    0.04    0.71    0.32\n192611    2.44   -0.24   -0.31    0.31\n```", "```py\n>>>import pandas as pd\n>>>file=open(\"c:/temp/ffMonthly.txt\",\"r\")\n>>>data=file.readlines()\n```", "```py\n>>>data[0:10]\n['DATE    MKT_RFSMBHMLRF\\n', '192607    2.96   -2.30   -2.87    0.22\\n', '192608    2.64   -1.40    4.19    0.25\\n', '192609    0.36   -1.32    0.01    0.23\\n', '192610   -3.24    0.04    0.51    0.32\\n', '192611    2.53   -0.20   -0.35    0.31\\n', '192612    2.62   -0.04   -0.02    0.28\\n', '192701   -0.06   -0.56    4.83    0.25\\n', '192702    4.18   -0.10    3.17    0.26\\n', '192703    0.13   -1.60   -2.67    0.30\\n']\n>>>\n```", "```py\nimport pandas_datareader.data as getData\nff =getData.DataReader(\"F-F_Research_Data_Factors\", \"famafrench\")\n```", "```py\nimport pandas_datareader.data as pdata\nff2=web.DataReader(\"F-F_Research_Data_Factors_weekly\", \"famafrench\")\nff3 =web.DataReader(\"6_Portfolios_2x3\", \"famafrench\")\nff4=web.DataReader(\"F-F_ST_Reversal_Factor\", \"famafrench\")\n```", "```py\n>>>import pandas as pd\n>>>ff=pd.read_pickle(\"c:/temp/ffMonthly.pkl\")\n```", "```py\n>>>import pandas as pd\n>>>ff=pd.read_pickle(\"c:/temp/ffMonthly.pkl\")\n```", "```py\n>>>import pandas as pd\n>>>ff=pd.read_pickle(\"c:/temp/ffMonthly.pkl\")\n>>>ff.head(5)\nDATE  MKT_RFSMBHMLRF\n1  1926-10-01 -0.0324  0.0004  0.0051  0.0032\n2  1926-11-01  0.0253  -0.002 -0.0035  0.0031\n3  1926-12-01  0.0262 -0.0004 -0.0002  0.0028\n4  1927-01-01 -0.0006 -0.0056  0.0483  0.0025\n5  1927-02-01  0.0418  -0.001  0.0317  0.0026\n>>>ff.tail(3)\nDATE  MKT_RFSMBHMLRF\n1078  2016-07-01  0.0395   0.029 -0.0098  0.0002\n1079  2016-08-01  0.0049  0.0094  0.0318  0.0002\n1080  2016-09-01  0.0025    0.02 -0.0134  0.0002\n>>>\n```", "```py\n>>>import pandas as pd\n>>>from datetime import timedelta\n>>>a=pd.to_datetime('12/2/2016', format='%m/%d/%Y')\n>>>a+timedelta(40)\n>>>\nTimestamp('2017-01-11 00:00:00')\n>>> b=a+timedelta(40)\n>>>b.date()\ndatetime.date(2017, 1, 11)\n```", "```py\n>>>help(loadYan)\nHelp on function loadYan in module __main__:\n\nloadYan(i, loc='c:/temp/temp.pkl')\n    Objective: download datasets with an extension of .pkl\ni     : an integer \nloc   : a temporary location, such as c:/temp/temp.pkl\n\ni  dataset           description \n     --- -------            ------------------\n1  ffMonthlyFama-French 3 factors monthly \n2  ffDailyFama-French 3 factors daily \n3  ffMonthly5Fama-French 5 factors monthly \n4  ffDaily5Fama-French 5 factors daily \n5  sp500listsCurrent S&P 500 constituents \n6  tradingDaysMonthly trading days monthly \n7  tradingDaysDaily   trading days daily \n8  usGDPannual        US GDP annual \n9  usGDPmonthly       US GDP monthly \n10  usCPI              US Consumer Price Index\n11  dollarIndex        US dollar index\n12  goldPriceMonthly   gold price monthly \n13  goldPriceDaily     gold price daily \n14  spreadAAA          Moody's spread for AAA rated bonds\n15  spreadBBB          Moody's spread for BBB rated bonds\n16  spreadCCC          Moody's spread for CCC rated bonds\n17  TORQctTORQ Consolidated Trade \n18  TORQcqTORQ Consolidated Quote  \n19  TORQcodTORQ Consolidated Order \n20  DTAQibmCTTAQ Consolidated Trade for IBM (one day)\n21  DTAQibmCQDTAQ Consolidated Quote for IBM (one day)\n22  DTAQ50CTDTAQ Consolidated Trade for 50  (one day)\n23  DTAQ50CQDTAQ Consolidated Quote for 50  (one day)\n24  spreadCredit   Spreads based on credit ratings\n25journalRankings  A list of journals\n\n    Example 1:\n>>>x=loadYan(1)\n>>>x.head(2)\nDATE  MKT_RFSMBHMLRF\n1  1926-10-01 -0.0324  0.0004  0.0051  0.0032\n2  1926-11-01  0.0253  -0.002 -0.0035  0.0031\n\n>>>x.tail(2)\nDATE  MKT_RFSMBHMLRF\n1079  2016-08-01  0.0049  0.0094  0.0318  0.0002\n1080  2016-09-01  0.0025    0.02 -0.0134  0.0002\n>>>\n```", "```py\n>>>import pandas as pd\n>>>crspInfo=pd.read_pickle(\"c:/temp/crspInfo.pkl\")\n```", "```py\n>>>crspInfo.shape\n     (31218, 8)\n>>>crspInfo.head()\nPERMNOPERMCOCUSIP                         NAME TICKER  EX   BEGDATE  \\\n0   10001    7953  6720410               AS NATURAL INCEGAS   2  19860131   \n1   10002    7954  5978R10ANCTRUST FINANCIAL GROUP IN   BTFG   3  19860131   \n2   10003    7957  9031810REAT COUNTRY BKASONIA CT   GCBK   3  19860131   \n3   10005    7961  5815510ESTERN ENERGY RESOURCES INCWERC   3  19860131   \n4   10006   22156  0080010           C F INDUSTRIES INCACF   1  19251231   \nENDDATE\n0  20151231\n1  20130228\n2  19951229\n3  19910731\n4  19840629\n>>>crspInfo.tail(3)\nPERMNOPERMCOCUSIP                  NAME TICKER  EX   BEGDATE  \\\n31215   93434   53427  8513510& W SEED CO   SANW   3  20100630   \n31216   93435   53452  2936G20INO CLEAN ENERGY INCSCEI   3  20100630   \n31217   93436   53453  8160R10ESLA MOTORS INCTSLA   3  20100630   \nENDDATE\n31215  20151231\n31216  20120531\n31217  20151231>>>\n```", "```py\n>>>myColumn=['PERMNO','BEGDATE','ENDDATE']\n>>>crspInfo[myColumn].head(6)\n>>>\nPERMNOBEGDATEENDDATE\n0   10001  19860131  20151231\n1   10002  19860131  20130228\n2   10003  19860131  19951229\n3   10005  19860131  19910731\n4   10006  19251231  19840629\n5   10007  19860131  19901031\n>>>\n```", "```py\n>>>import pandas as pd\n>>>x=pd.read_pickle(\"c:/temp/TORQcq.pkl\")\n>>>x.head()\n>>>\n  SYMBOL      DATE      TIME     BID     OFRBIDSIZOFRSIZ  MODE  QSEQ EX\n0     AC  19901101   9:30:44  12.875  13.125      32       5    10  1586  N\n1     AC  19901101   9:30:47  12.750  13.250       1       1    12     0  M\n2     AC  19901101   9:30:51  12.750  13.250       1       1    12     0  B\n3     AC  19901101   9:30:52  12.750  13.250       1       1    12     0  X\n4     AC  19901101  10:40:13  12.750  13.125       2       2    12     0  \n>>>x.tail()\n        SYMBOL      DATE      TIME     BID     OFRBIDSIZOFRSIZ  MODE  \\\n1111220    ZNT  19910131  13:31:06  12.375  12.875       1       1    12   \n1111221    ZNT  19910131  13:31:06  12.375  12.875       1       1    12   \n1111222    ZNT  19910131  16:08:44  12.500  12.750       1       1     3   \n1111223    ZNT  19910131  16:08:49  12.375  12.875       1       1    12   \n1111224    ZNT  19910131  16:16:54  12.375  12.875       1       1     3   \nQSEQ EX  \n1111220       0  B\n1111221       0  X\n1111222  237893  N  \n1111223       0  X\n1111224       0  X\n>>>M\n```", "```py\nfrom matplotlib.pyplot import *\nfrom matplotlib.finance import quotes_historical_yahoo_ochl as getData\nimport numpy as np\nimport matplotlib.mlab as mlab\n\nticker='IBM'\nbegdate=(2015,1,1) \nenddate=(2015,11,9)\np = getData(ticker, begdate, enddate,asobject=True, adjusted=True)\nret = (p.aclose[1:] - p.aclose[:-1])/p.aclose[:1] \n[n,bins,patches] = hist(ret, 100)\nmu = np.mean(ret) \nsigma = np.std(ret)\nx = mlab.normpdf(bins, mu, sigma) \nplot(bins, x, color='red', lw=2) \ntitle(\"IBM return distribution\") \nxlabel(\"Returns\") \nylabel(\"Frequency\")\nshow()\n```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.dates import DateFormatter, WeekdayLocator\nfrom matplotlib.dates import HourLocator,DayLocator, MONDAY\nfrom matplotlib.finance import candlestick_ohlc,plot_day_summary_oclh\nfrom matplotlib.finance import quotes_historical_yahoo_ochl as getData\n#\ndate1 = ( 2013, 10, 20)\ndate2 = ( 2013, 11, 10 )\nticker='IBM'\nmondays = WeekdayLocator(MONDAY)       # major ticks on the mondays\nalldays = DayLocator()                 # minor ticks on the days\nweekFormatter = DateFormatter('%b %d') # e.g., Jan 12\ndayFormatter = DateFormatter('%d')     # e.g., 12\nquotes = getData(ticker, date1, date2)\nif len(quotes) == 0:\n     raiseSystemExit\nfig, ax = plt.subplots()\nfig.subplots_adjust(bottom=0.2)\nax.xaxis.set_major_locator(mondays)\nax.xaxis.set_minor_locator(alldays)\nax.xaxis.set_major_formatter(weekFormatter)\nax.xaxis.set_minor_formatter(dayFormatter)\nplot_day_summary_oclh(ax, quotes, ticksize=3)\ncandlestick_ohlc(ax, quotes, width=0.6)\nax.xaxis_date()\nax.autoscale_view()\nplt.setp(plt.gca().get_xticklabels(), rotation=80,horizontalalignment='right')\nplt.figtext(0.35,0.45, '10/29: Open, High, Low, Close')\nplt.figtext(0.35,0.42, ' 177.62, 182.32, 177.50, 182.12')\nplt.figtext(0.35,0.32, 'Black ==> Close > Open ')\nplt.figtext(0.35,0.28, 'Red ==> Close < Open ')\nplt.title('Candlesticks for IBM from 10/20/2013 to 11/10/2013')\nplt.ylabel('Price')\nplt.xlabel('Date')\nplt.show()\n```", "```py\nimport datetime\nimport matplotlib.pyplot as plt\nfrom matplotlib.finance import quotes_historical_yahoo_ochl\nfrom matplotlib.dates import MonthLocator,DateFormatter\nticker='AAPL'\nbegdate= datetime.date( 2012, 1, 2 )\nenddate = datetime.date( 2013, 12,4)\n\nmonths= MonthLocator(range(1,13), bymonthday=1, interval=3)# 3rd month\nmonthsFmt = DateFormatter(\"%b '%Y\")\nx = quotes_historical_yahoo_ochl(ticker, begdate, enddate) \nif len(x) == 0:\n     print ('Found no quotes')\n     raiseSystemExit\ndates = [q[0] for q in x] \ncloses = [q[4] for q in x] \nfig, ax = plt.subplots()\nax.plot_date(dates, closes, '-') \nax.xaxis.set_major_locator(months) \nax.xaxis.set_major_formatter(monthsFmt)\nax.autoscale_view()\nax.grid(True)\nfig.autofmt_xdate()\nplt.show()\n```", "```py\nimport numpy as np\nimport pandas as pd\nimport datetime as datetime\nimport matplotlib.pyplot as plt\nticker='AAPL'\npath='http://www.google.com/finance/getprices?q=ttt&i=60&p=1d&f=d,o,h,l,c,v'\np=np.array(pd.read_csv(path.replace('ttt',ticker),skiprows=7,header=None))\n#\ndate=[]\nfor i in np.arange(0,len(p)): \n    if p[i][0][0]=='a':\n        t= datetime.datetime.fromtimestamp(int(p[i][0].replace('a',''))) \n        date.append(t)\n    else:\n        date.append(t+datetime.timedelta(minutes =int(p[i][0])))\n#\nfinal=pd.DataFrame(p,index=date) \nfinal.columns=['a','Open','High','Low','Close','Vol'] \ndel final['a']\n#\nx=final.index\ny=final.Close\n#\nplt.title('Intraday price pattern for ttt'.replace('ttt',ticker)) \nplt.xlabel('Price of stock')\nplt.ylabel('Intro-day price pattern') \nplt.plot(x,y)\t\nplt.show()\n```", "```py\n>>>\n>>>import pandas as pd\n>>>ff=pd.read_pickle(\"c:/temp/ffMonthly.pickle\")\n>>>type(ff)\n<class'pandas.core.frame.DataFrame'>\n>>>\n```", "```py\n>>>import pandas as pd\n>>>infile=(\"c:/temp/ffMonthly.pickle\")\n>>>ff=pd.read_pickle(infile)\n>>>ff.hist()\n```", "```py\n>>>import pandas as pd\n>>>import numpy.ranom  as random\n>>>x=random.randn(10)\n>>>y=pd.DataFrame(x)\n>>>y.to_pickle(\"c:/temp/test.pkl\")\n```", "```py\n>>> import pandas as pd\n>>>kk=pd.read_pickle(\"c:/temp/test.pkl\")\n```", "```py\nimport pandas as pd\nimport numpy as np\nfile=open(\"c:/temp/ffMonthly.txt\",\"r\")\ndata=file.readlines()\ndd=mkt=smb=hml=rf=[]\nn=len(data)\nindex=range(1,n-3)\n#\nfor i in range(4,n):\n     t=data[i].split()\n     dd.append(pd.to_datetime(t[0]+'01', format='%Y%m%d').date())\n     mkt.append(float(t[1])/100)\n     smb.append(float(t[2])/100)\n     hml.append(float(t[3])/100)\n      rf.append(float(t[4])/100)\n#\nd=np.transpose([dd,mkt,smb,hml,rf])\nff=pd.DataFrame(d,index=index,columns=['DATE','MKT_RF','SMB','HML','RF'])\nff.to_pickle(\"c:/temp/ffMonthly.pkl\")\n```", "```py\n>>>ff.head(2)\nDATE  MKT_RFSMBHML\n1  1926-10-01 -0.0324  0.0004  0.0051\n2  1926-11-01  0.0253  -0.002 -0.0035\n>>>ff.tail(2)\nDATE  MKT_RFSMBHML\n1079  2016-08-01  0.0049  0.0094  0.0318\n1080  2016-09-01  0.0025    0.02 -0.0134\n```", "```py\n>>import pandas as pd\n>>>a = pd.Series(['12/1/2014', '1/1/2015'])\n>>>b= pd.to_datetime(a, format='%m/%d/%Y')\n>>>b\n0   2014-12-01\n1   2015-01-01\ndtype: datetime64[ns]\n>>>\n```", "```py\n    >>>ret = p.aclose[1:]/p.aclose[:-1]-1     \n    >>>ret = (p.aclose[1:]-p.aclose[:-1]/p.aclose[1:]\n    ```", "```py\n    >>> ret = p.aclose[1:]/p.aclose[:-1]-1     \n    >>> ret = p.aclose[:-1]/p.aclose[1:]-1    \n    ```"]