- en: Chapter 6. Capital Asset Pricing Model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Capital Asset Pricing Model** (**CAPM**) is probably the most widely used
    model in assets pricing. There are several reasons behind its popularity. First,
    it is quite simple since it is a one-factor linear model. Second, it is quite
    easy to implement this one-factor model. Any interested reader could download
    historical price data for a listed company and market index data to calculate
    return first, and then estimate the market risk for the stock. Third, this simplest
    one-factor asset pricing model could be served as the first model for other more
    advanced ones, such as Fama-French 3-factor, Fama-French-Carhart 4-factor, and
    Fama-French 5-factor models introduced in the next chapter ([Chapter 7](ch07.html
    "Chapter 7. Multifactor Models and Performance Measures"), *Multifactor Models
    and Performance Measures*). In this chapter, the following topics will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to CAPM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to download data from Yahoo Finance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rolling beta
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Several Python programs to estimate beta for multiple stocks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adjusted beta and portfolio beta estimation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scholes and Williams (1977) adjustment for beta
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dimson (1979) adjustment for beta
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Output data to various types of external files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simple string manipulation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python via Canopy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to CAPM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'According to the famous CAPM, the expected returns of a stock are linearly
    correlated with expected market returns. Here, we use the international business
    machine with a ticker of IBM as an example and this linear one-factor asset pricing
    model could be applied to any other stocks or portfolios. The formula is given
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to CAPM](img/B06175_06_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, `E()` is the expectation, *E(R[IBM])* is the expected return for IBM,
    *R[f]* is the risk-free rate, and *E(R[mkt])* is the expected market return. For
    instance, the S&P500 index could be served as a market index. The slope of the
    preceding equation or ![Introduction to CAPM](img/B06175_06_40.jpg) is a measure
    of IBM''s market risk. To make our notation simpler, the expectation could be
    dropped:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to CAPM](img/B06175_06_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Actually, we could consider the relationship between the excess stock returns
    and the excess market returns. The following formula is essentially the same as
    the preceding formula, but it has a better and clearer interpretation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to CAPM](img/B06175_06_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Recall that in [Chapter 3](ch03.html "Chapter 3. Time Value of Money"), *Time
    Value of Money*, we learnt that the difference between a stock''s expected return
    and the risk free rate is called risk premium. This is true for both individual
    stocks and for a market index. Thus, the meaning of the *Equation (3)* is quite
    easy to interpret: the risk premium of individual stock depends on two components:
    its market risk and the market risk-premium.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Mathematically, the slop of the preceding linear regression could be written
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to CAPM](img/B06175_06_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here ![Introduction to CAPM](img/B06175_06_41.jpg) is the covariance between
    IBM''s returns and the market index returns and ![Introduction to CAPM](img/B06175_06_42.jpg)
    is the variance of the market returns. Since ![Introduction to CAPM](img/B06175_06_43.jpg),
    where ![Introduction to CAPM](img/B06175_06_44.jpg) is the correlation between
    IBM''s return and the index returns, the preceding equation could be written as
    the following one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to CAPM](img/B06175_06_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The meaning of beta is that when the expected market risk-premium increases
    by 1%, the individual stock's expected return would increase by β%, vice versa.
    Thus, beta (market risk) could be viewed as an amplifier. The average beta of
    all stocks is one. Thus, if a stock's beta is higher than 1, it means that its
    market risk is higher than that of an average stock.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following lines of code are an example of this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To see all information about the OLS results, we will use the command of `print(results.summary())`,
    see the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to CAPM](img/B06175_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'At the moment, readers could just pay attention to the values of two coefficients
    and their corresponding T-values and P-values. We would discuss other results,
    such as Durbin-Watson statistics and the Jarque-Bera normality test in [Chapter
    8](ch08.html "Chapter 8. Time-Series Analysis"), *Time-Series Analysis*. The beta
    is 0.3571, which has a T-value of 2.152\. Since it is bigger than 2, we could
    claim that it is significantly different from zero. Alternatively, based on the
    P-value of 0.084, we would have the same conclusion if we choose a 10% as our
    cut-off point. Here is the second example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The corresponding result is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, the `help()` function could be used to get more information about this
    function, see the following first few lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Help on the `linregress` function in the `scipy.stats._stats_mstats_common`
    module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Calculate a linear least-squares regression for two sets of measurements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters `x`, `y`: array like two sets of measurements. Both arrays should
    have the same length. If only `x` is given (and `y=None`), then it must be a two-
    dimensional array where one dimension has length 2\. The two sets of measurements
    are then found by splitting the array along the length-2 dimension.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For the third example, we generate a known set of `y` and `x` observations
    with known intercept and slop, such as *alpha=1* and *beta=0.8*, see the following
    formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to CAPM](img/B06175_06_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here, *yi* is the *ith* observation for dependent variable `y`, 1 is the intercept,
    0.8 is the slope (beta), *xi* is the *ith* observation for an independent variable
    of *x*, and
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to CAPM](img/B06175_06_45.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'is the random value. For the preceding equation, after we have generated a
    set of `y` and `x`, we could run a linear regression. For this purpose, a set
    of random numbers are used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, the `sp.random.rand()` function would call a set of
    random numbers. In order to get the same set of random numbers, the `sp.random.seed()`
    function is applied. In other words, whenever the same seed is used, any programmers
    would get the same set of random numbers. This will be discussed in more detail
    in [Chapter 12](ch12.html "Chapter 12. Monte Carlo Simulation"), *Monte Carlo
    Simulation*. The result is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s look at how to estimate the beta (market risk) for Microsoft. Assume
    that we are interested in the period from 1/1/2012 to 12/31/2016, for a total
    of five year''s data. The complete Python program is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'To estimate the beta of IBM using five year data, the main function used to
    download historical price data in the preceding Python program is `matplotlib.finance.quotes_historical_yahoo_ochl`
    . Here is the related link [https://matplotlib.org/api/finance_api.html](https://matplotlib.org/api/finance_api.html).
    The ticker symbol of `^GSPC` stands for the S&P500 market index. The result is
    shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to CAPM](img/B06175_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Based the preceding results, the beta for IBM is 0.41, while the intercept
    is 0.004\. In addition, the R2 is 0.36 and P-value is almost zero. In the preceding
    program, the risk-free rate is ignored. The impact of its omission on beta (slop)
    is small. In the next chapter, we will show how to include the risk free rate
    when discussing the Fama-French 3-factor model. To get more information about
    the `quotes_historical_yahoo_ochl`, the help function could be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Obviously, it is a good idea to write a function to get data with just three
    import values: ticker, beginning, and ending dates, see the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for Walmart''s beta (market risk) is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to CAPM](img/B06175_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Alternatively, we could call the `p4f.dailyReturnYahoo()` function, see the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Moving beta
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sometimes, researchers need to generate a beta time series based on, for example,
    a three-year moving window. In such cases, we could write a loop or double loops.
    Let''s look at a simpler case: estimating the annual beta for IBM over several
    years. First, let''s look at two ways of getting years from a date variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The Python program used to estimate the annual beta is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The corresponding output is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Moving beta](img/B06175_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adjusted beta
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Many researchers and professionals find that beta has a mean-reverting tendency.
    It means that if this period''s beta is less than 1, there is a good chance that
    the next beta would be higher. On the other hand, if the current beta is higher
    than 1, the next beta might be smaller. The adjusted beta has the following formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adjusted beta](img/B06175_06_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, *βadj* is the adjusted beta and *β* is our estimated beta. The beta of
    a portfolio is the weighted beta of individual stocks within the portfolio:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adjusted beta](img/B06175_06_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here ![Adjusted beta](img/B06175_06_46.jpg) is the beta of a portfolio, *wi*
    (*βi*) is the weight (beta) of its stock, and *n* is the number of stocks in the
    portfolio. The weight of *wi* is calculated according to the following equation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adjusted beta](img/B06175_06_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here *vi* is the value of stock *i*, and summation of all *vi*, the denominator
    in the preceding equation is the value of the portfolio.
  prefs: []
  type: TYPE_NORMAL
- en: Scholes and William adjusted beta
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Many researchers find that *β* would have an upward bias for frequently traded
    stocks and a downward bias for infrequently traded stocks. To overcome this, Sholes
    and Williams recommend the following adjustment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Scholes and William adjusted beta](img/B06175_06_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, *β* is the stock or portfolio beta and *ρm* is the autocorrelation for
    the market return. The three betas in the preceding formula are defined by the
    following three equations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Scholes and William adjusted beta](img/B06175_06_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, let''s look at how to add a lag to an array. The program is in the left
    panel, while the output is shown in the right one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding program the `.shift()` function is applied. Since we need
    the market return one period ahead, we could specify a negative value of `-1`
    in the `.shift()` function, see the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Scholes and William adjusted beta](img/B06175_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'First, let''s look at a Python dataset related to monthly data with a name
    of `yanMonthly.pkl`, [http://canisius.edu/~yany/python/yanMonthly.pkl](http://canisius.edu/~yany/python/yanMonthly.pkl).
    The following code would read in the dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The related output is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Scholes and William adjusted beta](img/B06175_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s look at what kind of securities are included in this monthly dataset,
    see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'From the output shown here, we can see that there are `129` securities:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Scholes and William adjusted beta](img/B06175_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To get S&P500 data, we would use ^`GSPC` since this is the ticker symbol used
    by Yahoo!Finance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The first 10 lines are shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Scholes and William adjusted beta](img/B06175_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After estimating returns, we could estimate their lag and lead, and then three
    different regressions to estimate those three betas.
  prefs: []
  type: TYPE_NORMAL
- en: 'Along the same line, Dimson (1979) suggests the following method to adjust
    beta:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Scholes and William adjusted beta](img/B06175_06_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The most frequently used *k* value is *1*. Thus, we have the following equation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Scholes and William adjusted beta](img/B06175_06_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Since this is equivalent to running a three-factor linear model, we will leave
    it to the next chapter ([Chapter 7](ch07.html "Chapter 7. Multifactor Models and
    Performance Measures"), *Multifactor Models and Performance Measures*).
  prefs: []
  type: TYPE_NORMAL
- en: Extracting output data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll be discussing different ways to extract our output data
    to different file formats.
  prefs: []
  type: TYPE_NORMAL
- en: Outputting data to text files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following code will download the daily price data for Microsoft and save
    it to a text file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The first several saved observations are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Outputting data to text files](img/B06175_06_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Saving our data to a .csv file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following program first retrieves IBM price data, and then saves it as
    a `.csv` file under `c:/temp`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we rename the `quotes_historical_yahoo_ochl()` function
    as `getData` for convenience. A reader could use their own name.
  prefs: []
  type: TYPE_NORMAL
- en: Saving our data to an Excel file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following program first retrieves IBM price data, and then saves it as
    a `.csv` file under `c:/temp`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that, if readers find an error message of `No module named openpyxl`,
    it means that you have to install that module first. A few observations are shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Saving our data to an Excel file](img/B06175_06_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Obviously, there is a good change that we don''t link the first columns since
    it is just the irrelevant row column indicator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Saving our data to a pickle dataset
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following program first generates a simple array that has just three values.
    We save them to a binary file named `tmp.bin` at `C:\temp\`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The dataset of named `a` is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Saving our data to a pickle dataset](img/B06175_06_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Saving our data to a binary file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following program first generates a simple array that has just three values.
    We save them to a binary file named `tmp.bin` at `C:\temp\`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Reading data from a binary file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Assume that we have generated a binary file called `C:\temp\tmp.bin` from the
    previous discussion. The file has just three numbers: 1, 2, and 3\. The following
    Python code is used to read them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The contents of `d` are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Reading data from a binary file](img/B06175_06_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Simple string manipulation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For Python, we could assign a string to a variable without defining it in the
    first place:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'For the formula to convert an effective rate to another one, the second input
    value is a string. For example, `''s2a''`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The `len()` function shows the length of a string, see the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are several widely used ways to select substring:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The corresponding output is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Simple string manipulation](img/B06175_06_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Many times, we want to remove the prevailing or trailing spaces. For those
    cases, three functions, called `strip()`, `lstrip()`, and `rstrip()` could be
    applied:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Simple string manipulation](img/B06175_06_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following Python program generates the frequency table for all words used
    in the bible:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'An interested reader would download the pickle file from the author''s web
    page at [http://canisius.edu/~yany/python/uniqueWordsBible.pkl](http://canisius.edu/~yany/python/uniqueWordsBible.pkl).
    After typeing `x[0:10]`, we can see the first 10 words, see the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Simple string manipulation](img/B06175_06_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Python via Canopy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section is optional, especially for readers who have no issues with Python
    or Python via Anaconda. It is a good idea to have another super package to make
    our programming in Python easier. In this section, we will discuss two simple
    tasks: how to install Python via Canopy and how to check and install various Python
    modules. To install Python, go to the related web page at [https://store.enthought.com/downloads/#default](https://store.enthought.com/downloads/#default).
    After that, you will see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Python via Canopy](img/B06175_06_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Depending on the operating system; you could download Canopy, such as winders
    32-bit. After launching Canopy, the following screen will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Python via Canopy](img/B06175_06_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The two most used panels are **Editor** and **Package Manager**. After clicking
    **Editor**, the following panel will pop up:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Python via Canopy](img/B06175_06_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Obviously, we could create a new file or select files from our existing programs.
    Let''s try the simplest one; see the following screenshot. After clicking the
    green bottom, we can run the program:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Python via Canopy](img/B06175_06_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Alternatively, we could click **Run** on the menu bar and then choose the appropriate
    action. The most important advantage that Canopy could offer is that it is extremely
    easy to install various Python modules. After clicking **Package Manager**, we
    will see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Python via Canopy](img/B06175_06_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'From the left-hand side, we see that there are 99 packages installed and 532
    are available. Assume that the Python model called `statsmodels` is not pre-installed.
    After clicking **Available** on the left-hand side, we search for this model by
    typing the keyword. After finding the module, we can decide whether we should
    install it. Quite often, multiple versions exist; see the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Python via Canopy](img/B06175_06_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Please refer to the following articles:'
  prefs: []
  type: TYPE_NORMAL
- en: Carhart, Mark M., 1997, On Persistence in Mutual Fund Performance, Journal of
    Finance 52, 57-82.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fama, Eugene and Kenneth R. French, 1993, Common risk factors in the returns
    on stocks and bonds, Journal of Financial Economics 33, 3056.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fama, Eugene and Kenneth R. French, 1992, The cross-section of expected stock
    returns, Journal of Finance 47, 427-465.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'String manipulation: [http://www.pythonforbeginners.com/basics/string-manipulation-in-python](http://www.pythonforbeginners.com/basics/string-manipulation-in-python)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Appendix A – data case #3 - beta estimation**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Objective: hands-on experience to estimate the market risk for a given set
    of companies:'
  prefs: []
  type: TYPE_NORMAL
- en: What are alpha and beta for those companies?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Comment on your results.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Based on your monthly returns, what are the means of annual returns for S&P500
    and risk-free rate?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the expected market return is 12.5% per year and the expected risk-free rate
    is 0.25% per year, what are the costs of equity for those companies?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the portfolio beta?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Computational tool: Python'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Period: From 1/2/ 2011 to 12/31/2016 (the last five years).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Technical details:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![References](img/B06175_06_37.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '| i | Company name | Ticker | Industry | Shares |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | Wal-Mart Stores Inc. | WMT | Superstore | 1000 |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | Apple Inc. | AAPL | Computer | 2000 |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | International Business Machine | IBM | Computer | 1500 |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | General Electric Company | GE | Technology | 3000 |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | Citigroup | C | Banking | 1800 |'
  prefs: []
  type: TYPE_TB
- en: 'Procedure for data downloading and manipulation:'
  prefs: []
  type: TYPE_NORMAL
- en: Stock monthly price data is from Yahoo finance ([http://finance.yahoo.com](http://finance.yahoo.com)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Calculate monthly returns from monthly prices.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: S&P500 is used as the market index and its ticker is `^GSPC`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Risk-free rate from Prof. French monthly dataset is used as our risk-free rate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When merging those datasets, please pay attention to the order of their dates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Note 1 – how to download data? Here we use S&P500 as an example (ticker is
    ^GSPC):**'
  prefs: []
  type: TYPE_NORMAL
- en: Go to Yahoo Finance ([http://finance.yahoo.com](http://finance.yahoo.com)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter ^`GSPC`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Historical Prices**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose starting date and ending dates. Click **Get Prices**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the bottom of the page and click **Download to spreadsheet**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give a name, such as `sp500.csv`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Note 2 – how to download a monthly risk-free rate?**'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the Prof. French Data library at [http://mba.tuck.dartmouth.edu/pages/faculty/ken.french/data_library.html](http://mba.tuck.dartmouth.edu/pages/faculty/ken.french/data_library.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose Fama-French 3 factors, see the following screenshot:![References](img/B06175_06_22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The first several lines and the last several lines are given in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![References](img/B06175_06_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the meaning of CAPM? Is it a linear model?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the features of a one-factor linear model?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the definitions of total risk and market risk and do you measure them?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explain the similarity and difference between the following two equations:![Exercises](img/B06175_06_38.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the relationship between total risk and market risk for a stock?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Who should care about CAPM or what are the usages of the model?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If stock A has a higher market risk than stock B, does it mean that A has a
    higher expected return as well? Explain.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you measure different types of risk?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you predict the expected market returns?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we know the expected market risk premium, how do you predict the cost of
    equity of a firm?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the logic behind the following beta adjustment formula?![Exercises](img/B06175_06_39.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Construct a portfolio with unequal weight of 20%, 10%, 30%, 10%, 10%, and 20%.
    The list of stocks are Walmart (WMT), International Business Machine (IBM), Citi
    Group (C ), Microsoft (MSFT), Google (GOOG), and Dell (DELL). Estimate their monthly
    portfolio returns from 2001 to 2016.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the beta of IBM from Yahoo Finance. Go to Yahoo Finance, then IBM, and
    then click Key Statistics on the left-hand side. [http://finance.yahoo.com/q/ks?s=IBM+Key+Statistics](http://finance.yahoo.com/q/ks?s=IBM+Key+Statistics)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download IBM's historical price data and estimate its beta and compare.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What is the total risk and market risk for DELL, IBM, GOOG, and C if you are
    using five-year monthly data?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Write a Python program to estimate *α* and *β* for the following 10 stocks.
    The time period covered should be the last five years (1/2/2012-1/10/2017) by
    using monthly data from the Yahoo Finance and the Federal Reserve Web site (for
    risk-free rate):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '|   | Company name | Ticker | Industry |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 1 | Family Dollar Stores | FDO | Retail |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 2 | Wal-Mart Stores | WMT | Superstore |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 3 | McDonald''s | MCD | Restaurants |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 4 | Dell | DELL | Computer hardware |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 5 | International Business Machine | IBM | Computer |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 6 | Microsoft | MSFT | Software |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 7 | General Electric | GE | Conglomerates |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 8 | Google | GOOG | Internet services |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 9 | Apple | AAPL | Computer hardware |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 10 | eBay | EBAY | Internet services |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: 'From this chapter, we know that we could call the `p4f.dailyReturn` function
    to download the historical data for a given ticker plus a designed time period;
    see the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The function is shown in the following code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Obviously, the second and the third input formats of beginning dates and ending
    dates are not user-friendly; see `dailyReturn("ibm",(2016,1,1),(2016,1,10))`.
    Modify the program to make it more user-friendly, such as `dailyReturn2("ibm",
    20160101, 20160110)`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Download price data, as long as it's possible, from Yahoo Finance for a few
    stocks such as DELL, IBM, and MSFT. Then calculate their volatilities over several
    decades. For example, estimate volatilities for IBM over several five-year periods.
    What is the trend of the volatility?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the correlation between (among) market indices? For example, you can
    download price data for S&P500 (its Yahoo ticker is `^GSPC`), and Dow Jones Industrial
    Average (`^DJI`) over the last 10 years. Then estimate their returns and calculate
    the corresponding correlation. Comment on your result.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Which five stocks are most strongly correlated with IBM from 2006 to 2010?
    (Hint: there is not a unique answer. You can try a dozen stocks).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On January 2nd 2017, your portfolio consists of 2,000 shares of IBM, 1,500 shares
    of Citigroup, and 500 shares of Microsoft (MSFT). What is the portfolio's beta?
    You can use past five-year historical to run CAPM.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the correlation between IBM stock returns and Microsoft (MSFT)?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You can use the past 10 years' historical data to estimate the correlation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Find the issue and correct it for the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Write a Python function called `beta()` to offer a beta value, its significance
    value such as T-vale or P-value by using the last five years of historical data,
    plus S&P500 as the index.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Capital Asset Pricing Model** (**CAPM**) is probably the most widely used
    model in assets pricing. There are several reasons behind its popularity. First,
    it is quite simple. It is just a one-factor linear model. Second, it is quite
    easy to implement this one-factor model. Any interested reader could download
    historical price data for a listed company and a market index data to calculate
    their return, and then estimate the market risk for the stock. Third, this simplest
    one-factor asset pricing model could be served as the first model for other more
    advanced ones, such as Fama-French 3-factor, Fama-French-Carhart 4-factor models,
    and Fama-French 5 factor models, which will be introduced in the next chapter.'
  prefs: []
  type: TYPE_NORMAL
