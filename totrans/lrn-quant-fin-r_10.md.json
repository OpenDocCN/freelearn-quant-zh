["```py\n> install.packages(\"fOptions\") \n> library(fOptions) \n\n```", "```py\n>model <- GBSOption(TypeFlag = \"c\", S = 900, X =950, Time   = 1/4, r = 0.02,sigma = 0.22, b = 0.02) \n\n```", "```py\n> model \nTitle: \nBlack Scholes Option Valuation  \nCall: \nGBSOption(TypeFlag = \"c\", S = 900, X = 950, Time = 1/4, r = 0.02,  b = 0.02, sigma = 0.22) \nParameters: \nValue: \n TypeFlag c      \n S        900    \n X        950    \n Time     0.25   \n r        0.02   \nb        0.02   \nsigma                0.22   \nOption Price: \n                 21.79275  \nDescription: \n Sat Dec 31 11:53:06 2016 \n\n```", "```py\n> model@price \n[1] 21.79275 \n\n```", "```py\n> GBSOption(TypeFlag = \"p\", S = 900, X =950, Time = 1/4, r = 0.02, sigma = 0.22, b = 0.02)@price \n[1] 67.05461 \n\n```", "```py\n> CRRBinomialTreeOption(TypeFlag = \"ce\", S = 900, X = 950, Time = 1/4, r = 0.02, b = 0.02, sigma = 0.22, n = 3)@price \n[1] 20.33618 \n> CRRBinomialTreeOption(TypeFlag = \"pe\", S = 900, X = 950, Time = 1/4, r = 0.02, b = 0.02, sigma = 0.22, n = 3)@price \n[1] 65.59803 \n\n```", "```py\n>model<- BinomialTreeOption(TypeFlag = \"ce\", S = 900, X = 950,Time = 1/4, r = 0.02, b = 0.02, sigma = 0.22, n = 3) \n> BinomialTreePlot(model, dy = 1, xlab = \"Time steps\",ylab = \"Options Value\", xlim = c(0,4) ,ylim=c(-3,4)) \n> title(main = \"Call Option Tree\") \n\n```", "```py\n> func <- function(n) { \n      pr  <-  CRRBinomialTreeOption(TypeFlag = \"ce\", S = 900, X = 950, Time = 1/4, r = 0.02, b = 0.02, sigma = 0.22, n = n)@price \n   return(pr)} \n\n```", "```py\nprice <- sapply(1:100,func) \n\n```", "```py\n> GBSGreeks(Selection = \"delta\", TypeFlag = \"c\", S = 900, X = 950,Time = 1/4, r = 0.02, b = 0.02, sigma = 0.22) \n[1] 0.3478744 \n\n```", "```py\n> GBSGreeks(Selection = 'gamma', TypeFlag = \"c\", S = 900, X = 950,Time = 1/4, r = 0.02, b = 0.02, sigma = 0.22) \n[1] 0.003733069 \n\n```", "```py\n>portfolio<- sapply(c('c', 'p'), function(otype) \nsapply(500:1500, function(price) GBSGreeks(Selection = 'delta', TypeFlag = otype, S = price,X = 950, Time = 1/4, r = 0.02, b = 0.02, sigma = 0.22))) \n\n```", "```py\n> head(portfolio) \n                c            p \n[1,] 4.902164e-09           -1 \n[2,] 5.455563e-09           -1 \n[3,] 6.068198e-09           -1 \n[4,] 6.746050e-09           -1 \n[5,] 7.495664e-09           -1 \n\n```", "```py\n> plot(500:1500, rowSums(portfolio), type='l',xlab='underlying Price', ylab = 'Straddle Delta') \n\n```", "```py\n>iv  <-EuropeanOptionImpliedVolatility(\"call\", 11.10, 100, 100, 0.01, 0.03, 0.5,0.4) \n> iv \n[1] 0.3805953 \n\n```", "```py\n> install.packages('termstrc') \n> library('termstrc') \n\n```", "```py\n> data(govbonds) \n> govbonds \nThis is a data set of coupon bonds for: \nGERMANY AUSTRIA FRANCE ,  \nobserved at 2008-01-30\\. \n\n```", "```py\n> cashflow <- create_cashflows_matrix(govbonds[[1]]) \n> maturity <- create_maturities_matrix(govbonds[[1]]) \n\n```", "```py\n> beta <- c(0.0323,-0.023,-0.0403,3.234) \n> bp <-  bond_prices(method=\"ns\",beta,maturity,cashflow) \n\n```", "```py\n> bp$bond_prices \n\n```", "```py\n> cashflow <- create_cashflows_matrix(govbonds[[1]],include_price=T) \n> maturity <- create_maturities_matrix(govbonds[[1]],include_price=T) \n\n```", "```py\n>by <- bond_yields(cashflow,maturity) \n\n```", "```py\n> head(by) \n                             Maturity                          Yield         \nDE0001141414                0.04383562                      0.03525805 \nDE0001137131                0.12054795                      0.03424302 \nDE0001141422                0.19726027                      0.03798065 \nDE0001137149                0.36986301                      0.03773425 \n\n```", "```py\n>   dur <- duration(cashflow,maturity, by[,\"Yield\"]) \n\n```", "```py\n> sum(dur[,3]) \n[1] 1 \n\n```", "```py\n> install.packages('CreditMetrics') \n> library('CreditMetrics') \n\n```", "```py\n> rc <- c(\"AAA\", \"AA\", \"A\", \"BBB\", \"BB\", \"B\", \"CCC\", \"D\") \n\n```", "```py\n> M <- matrix(c(90.81, 8.33, 0.68, 0.06, 0.08, 0.02, 0.01, 0.01, \n+ 0.70, 90.65, 7.79, 0.64, 0.06, 0.13, 0.02, 0.01, \n+ 0.09, 2.27, 91.05, 5.52, 0.74, 0.26, 0.01, 0.06, \n+ 0.02, 0.33, 5.95, 85.93, 5.30, 1.17, 1.12, 0.18, \n+ 0.03, 0.14, 0.67, 7.73, 80.53, 8.84, 1.00, 1.06, \n+ 0.01, 0.11, 0.24, 0.43, 6.48, 83.46, 4.07, 5.20, \n+ 0.21, 0, 0.22, 1.30, 2.38, 11.24, 64.86, 19.79, \n+ 0, 0, 0, 0, 0, 0, 0, 100 \n+ )/100, 8, 8, dimnames = list(rc, rc), byrow = TRUE) \n\n```", "```py\n> M \n         AAA     AA      A   BBB     BB      B  CCC      D \nAA  0.9081 0.0833 0.0068 0.0006 0.0008 0.0002 0.0001  0.0001 \nAA  0.0070 0.9065 0.0779 0.0064 0.0006 0.0013 0.0002  0.0001 \nA   0.0009 0.0227 0.9105 0.0552 0.0074 0.0026 0.0001  0.0006 \nBBB 0.0002 0.0033 0.0595 0.8593 0.0530 0.0117 0.0112  0.0018 \nBB  0.0003 0.0014 0.0067 0.0773 0.8053 0.0884 0.0100  0.0106 \nB   0.0001 0.0011 0.0024 0.0043 0.0648 0.8346 0.0407  0.0520 \nCCC 0.0021 0.0000 0.0022 0.0130 0.0238 0.1124 0.6486  0.1979 \nD   0.0000 0.0000 -0.0000 0.0000 0.0000 0.0000 0.0000 1.0000 \n\n```", "```py\n> lgd <- 0.2 \n\n```", "```py\n> cm.cs(M, lgd) \nAAA            AA      A        BBB        BB        B      CCC  \n0.0000200  0.0000200  0.000120 0.000360 0.002122 0.010454 0.040384 \n\n```", "```py\n> ead <- c(4000000, 1000000, 10000000)      #  Exposure at default \n> N <- 3          # Number of companies \n> n <- 50000      # Number of simulated random numbers \n>r <- 0.03                 # Risk free interest rate \n> rating <- c(\"BBB\", \"AA\", \"B\")        # Rating of selected companies \n> firmnames <- c(\"firm 1\", \"firm 2\", \"firm 3\") \n> alpha <- 0.99         # Confidence interval \n# Correlation matrix \n> rho <- matrix(c( 1, 0.4, 0.6, 0.4, 1, 0.5, 0.6, 0.5, 1), 3, 3, dimnames = list(firmnames, firmnames), byrow = TRUE) \n\n```", "```py\n> cm.CVaR(M, lgd, ead, N, n, r, rho, alpha, rating) \n     1%  \n3993485 \n\n```", "```py\n> pnl <- cm.gain(M, lgd, ead, N, n, r, rho, rating) \n\n```", "```py\n> install.packages('credule') \n> library('credule') \n\n```", "```py\n>yct = c(1,2,3,4,5,7) \n\n```", "```py\n> ycr = c(0.0050,0.0070,0.0080,0.0100, 0.0120,0.0150) \n\n```", "```py\n>cct = c(1,3,5,7) \n>ccsp = c(0.99,0.98,0.95,0.92) \n\n```", "```py\n>tenors = c(1,3,5,7) \n\n```", "```py\n>r = 0.40 \n\n```", "```py\n> priceCDS(yct,ycr,cct,ccsp,tenors,r) \n  tenor      spread \n     1 0.006032713 \n     3 0.004057761 \n     5 0.006101041 \n     7 0.007038156 \n\n```", "```py\n> cdsSpreads = c(0.0050,0.0070,0.0090,0.0110) \n\n```", "```py\n> bootstrapCDS(yct,ycr,cct,ccsp,r)\ntenor    survprob      hazrate\n1     1 0.187640397  1.673228e+00\n2     3 0.007953847  1.580436e+00\n3     5 0.007953847  2.081668e-15\n4     7 0.007953847  4.579670e-15\n\n```", "```py\n> install.packages(\"GUIDE\") \n> library(GUIDE) \n\n```", "```py\n>irswapvalue()\n\n```", "```py\n> install.packages('fExoticOptions') \n> library(fExoticOptions) \n\n```", "```py\n> price <- GeometricAverageRateOption(\"c\", 110, 120, 0.5, 0.03, 0.05, 0.1) \n> price \nTitle: \n Geometric Average Rate Option  \nCall: \n GeometricAverageRateOption(TypeFlag = \"c\", S = 110, X = 120,  \n     Time = 0.5, r = 0.03, b = 0.05, sigma = 0.1) \n\nParameters: \n Value: \n TypeFlag c      \n S        110    \n X       120    \n Time     0.5    \n r        0.03   \n b        0.05   \n sigma                   0.1    \nOption Price: \n 0.06067219  \nDescription: \n Sun Jan 15 01:00:34 2017 \n\n```", "```py\n> TurnbullWakemanAsianApproxOption(TypeFlag = \"p\", S = 100, SA = 102, X = 120, Time = 0.50, time = 0.25, tau = 0.0, r = 0.03, b = 0.05, sigma = 0.1)@price \n[1] 18.54625 \n\n```", "```py\n> LevyAsianApproxOption(TypeFlag = \"p\", S = 100, SA = 102, X = 120, Time = 0.50, time = 0.25, r = 0.03,  b = 0.05, sigma = 0.1)@price \n[1] 18.54657 \n\n```", "```py\n>  StandardBarrierOption(TypeFlag = \"cdo\", S = 100, X = 90, H = 95, K = 3, Time = 0.5, r = 0.08, b = 0.04, sigma = 0.25)@price\n[1] 9.024584\n\n```", "```py\n>  DoubleBarrierOption(TypeFlag = \"co\", S = 100, X = 100, L = 50,U = 150, Time = 0.25, r = 0.10, b = 0.10, sigma = 0.15,delta1 = -0.1, delta2 = 0.1)@price\n[1] 4.351415\n\n```", "```py\n> LookBarrierOption(TypeFlag = \"cuo\", S = 100, X = 100, H = 130,time1 = 0.25, Time2 = 1, r = 0.1, b = 0.1, sigma = 0.15)@price \n[1] 17.05969 \n\n```", "```py\n> GapOption(TypeFlag = \"c\", S = 50, X1 = 50, X2 = 57, Time = 0.5,r = 0.09, b = 0.09, sigma = 0.20) \n\n```", "```py\n> CashOrNothingOption(TypeFlag = \"p\", S = 100, X = 80, K = 10,Time = 9/12, r = 0.06, b = 0, sigma = 0.35) \n\n```", "```py\n> TwoAssetCashOrNothingOption(TypeFlag = \"c\", S1 = 100, S2 = 100,X1 = 110, X2 = 90, K = 10, Time = 0.5, r = 0.10, b1 = 0.05,b2 = 0.06, sigma1 = 0.20, sigma2 = 0.25, rho = 0.5)@price \n[1] 2.49875 \n\n```"]