["```py\n>>> import scipy as sp\n>>>sp.pmt(0.045/12,30*12,240000*0.8)\n-972.83579486570068\n```", "```py\n>>> (1+0.08/2)**2-1\n0.08160000000000012\n>>> (1+0.079/4)**4-1\n0.08137134208625363\n```", "```py\n>>> (1+0.05)**(2/4)-1\n  0.02469508\n```", "```py\n>>> (1+0.10/2)**(2/4)-1\n>>>\n0.02469507659595993\n```", "```py\ndef APR2Rm(APR1,m1,m2):\n        return (1+APR1/m1)**(m1/m2)-1\n```", "```py\n>>> APR2Rm(0.1,2,4)\n      0.02469507659595993\n>>> APR2Rm(0.08,2,12)\n0.008164846051901042\n```", "```py\ndef APR2Rm(APR1,m1,m2):\n\"\"\"\n```", "```py\n         APR1: annual percentage rate\n           m1: compounding frequency for APR1\n           m2: effective period rate of our target effective rate\n```", "```py\n    Example #1>>>APR2Rm(0.1,2,4)\n                0.02469507659595993\n\"\"\"\n    return (1+APR1/m1)**(m1/m2)-1\n```", "```py\n>>>Rs=(1+0.05/2)**(2/12)-1\n>>>Rs*2\n0.008247830930288469\n>>>\n```", "```py\ndef APR2APR(APR1,m1,m2):\n    return m2*((1+APR1/m1)**(m1/m2)-1)\n```", "```py\n>>> (1+0.1/2)**2-1\n>>>\n0.10250000000000004\n```", "```py\ndef EAR_f(APR,m):\n    return (1+APR/m)**m-1\n```", "```py\nimport numpy as np\nd=365\nh=d*24\nm=h*60\ns=m*60\nms=s*1000\nx=np.array([1,2,4,12,d,h,m,s,ms])\nAPR=0.1\nfor i in x:\n    print(EAR_f(APR,i))\n```", "```py\n>>>exp(0.1)-1\n  0.10517091807564771\n```", "```py\n>>>from math import log\n>>>2*log(1+0.0234/2)\n0.023264168459415393\n```", "```py\ndef APR2Rc(APR,m):\n       return m*log(1+APR/m)\n```", "```py\n>>> APR2Rc(0.0234,2)\n0.023264168459415393\n```", "```py\ndef Rc2APR(Rc,m):\n       return m*(exp(Rc/m)-1)\n```", "```py\n>>> Rc2APR(0.02,2)\n0.020100334168335898\n```", "```py\ndef Rc2Rm(Rc,m):\n       return exp(Rc/m)-1\n```", "```py\n>>> Rc2Rm(0.02,2)\n0.010050167084167949\n```", "```py\n>>> import scipy as sp\n>>>sp.fv(0.0025,12,5000,0)\n>>>\n-60831.913827013472\n```", "```py\nfrom matplotlib.pyplot import *\ntime=[3/12,6/12,2,3,5,10,30]\nrate=[0.47,0.6,1.18,1.53,2,2.53,3.12]\ntitle(\"Term Structure of Interest Rate \")\nxlabel(\"Time \")\nylabel(\"Risk-free rate (%)\")\nplot(time,rate)\nshow()\n```", "```py\n>>>import pandas as pd\n>>>import numpy as np\n>>>x=pd.Series([1,2,np.nan,np.nan,6])\n>>>x.interpolate()\n```", "```py\n>>>\n01.000000\n12.000000\n23.333333\n34.666667\n46.000000\n```", "```py\n>>> import pandas as pd\n>>> import numpy as np\n>>> nan=np.nan\n>>> x=pd.Series([2,nan,nan,nan,nan,2.53])\n>>>x.interpolate()\n```", "```py\n>>>\n0    2.000\n1    2.106\n2    2.212\n3    2.318\n4    2.424\n5    2.530\ndtype: float64\n>>>\n```", "```py\n>>>import pandas as pd\n>>>spread=pd.read_pickle(\"c:/temp/spreadBasedOnCreditRating.pkl\")\n>>> spread\n                   1       2       3       5       7      10     30 \nRating                                                                \nAaa/AAA          5.00    8.00   12.00   18.00   28.00   42.00   65.00\nAa1/AA+         10.00   18.00   25.00   34.00   42.00   54.00   77.00\nAa2/AA          14.00   29.00   38.00   50.00   57.00   65.00   89.00\nAa3/AA-         19.00   34.00   43.00   54.00   61.00   69.00   92.00\nA1/A+           23.00   39.00   47.00   58.00   65.00   72.00   95.00\nA2/A            24.00   39.00   49.00   61.00   69.00   77.00  103.00\nA3/A-           32.00   49.00   59.00   72.00   80.00   89.00  117.00\nBaa1/BBB+       38.00   61.00   75.00   92.00  103.00  115.00  151.00\nBaa2/BBB        47.00   75.00   89.00  107.00  119.00  132.00  170.00\nBaa3/BBB-       83.00  108.00  122.00  140.00  152.00  165.00  204.00\nBa1/BB+        157.00  182.00  198.00  217.00  232.00  248.00  286.00\nBa2/BB         231.00  256.00  274.00  295.00  312.00  330.00  367.00\nBa3/BB-        305.00  330.00  350.00  372.00  392.00  413.00  449.00\nB1/B+          378.00  404.00  426.00  450.00  472.00  495.00  530.00\nB2/B           452.00  478.00  502.00  527.00  552.00  578.00  612.00\nB3/B-          526.00  552.00  578.00  604.00  632.00  660.00  693.00\nCaa/CCC+       600.00  626.00  653.00  682.00  712.00  743.00  775.00\nTreasury-Yield  0.13    0.45    0.93    1.74    2.31    2.73  3.55\n>>>\n```", "```py\n>>> 100/(1+0.05)\n95.23809523809524\n```", "```py\n> pv2<-100/(1+0.05)\n>w1=100/(100+pv2)\n>>>w1\n 0.5121951\n>>>w2= pv2/(100+pv2)\n>>>w2\n 0.4878049\n>>>w1*1 + w2*2\n    1.487281\n```", "```py\n>>>fv=100*(1+0.05)\n>>>fv\n   105\n```", "```py\n> w1=105/(100+105)\n> w1\n[1] 0.5121951\n> w2=100/(100+105)\n> w2\n[1] 0.4878049\n>\n```", "```py\n>>> pv1=100/(1+0.05)\n>>> pv2=100/(1+0.05)**2\n>>>w1= pv1/(pv1+pv2)\n>>>w1\n0.5121951219512195\n>>>1-w1\n0.4878048780487805\n```", "```py\n> pv1+pv2\n[1] 185.941\n```", "```py\ndef duration(t,cash_flow,y):\n    n=len(t)\nB,D=0,0\nfor i in range(n):\n        B+=cash_flow[i]*exp(-y*t[i])\nfor i in range(n):\n        D+=t[i]*cash_flow[i]*exp(-y*t[i])/B\n    return D\n```", "```py\ndef duration(t,cash_flow,y):\n    n=len(t)\n    B=0     # B is the bond's present value\n    for i in range(n):\n        B+=cash_flow[i]*exp(-y*t[i])\n\n    D=0     # D is the duration\n    for i in range(n):\n        D+=t[i]*cash_flow[i]*exp(-y*t[i])/B\n    return D\n```", "```py\n>>> import scipy as sp\n>>>sp.pv(0.024,3,0.08*100,100)\n-116.02473258972169\n```", "```py\n>>> (1000/717.25)**(1/10)-1\n>>>\n0.033791469771228044\n```", "```py\n>>> import scipy as sp\n>>> sp.rate(5,0.03*1000,-818,1000)\n0.074981804314870726\n```", "```py\n# for zero-coupon bond\n>> p0=sp.pv(0.04,15,0,-100)\n>>> p1=sp.pv(0.05,15,0,-100)\n>>> (p1-p0)/p0\n-0.1337153811552842\n```", "```py\n>>> p0\n>>> 55.526450271327484\n>>> p1\n48.101709809096995\n```", "```py\n>>> p0\n>>> p0=sp.pv(0.04,30,-0.09*100,-100)\n>>> p1=sp.pv(0.05,30,-0.09*100,-100)\n>>> (p1-p0)/p0\n>>>\n    -0.13391794539315816\n>>> p0\n    186.46016650332245\n>>> p1\n    161.48980410753134\n```", "```py\n>>>import p4f\n>>>p4f.durationBond(0.04,0.09,30)\n>>>\n17.036402239014734\n```", "```py\n>> (1+50)/(1+0.12)\n>>>\n     45.535714285714285\n>>> import scipy as sp\n>>>sp.pv(0.12,1,1+50)\n     -45.53571428571432\n```", "```py\n>>>1.5/(1+0.14)+(2+78)/(1+0.14)**2\n62.873191751308084\n```", "```py\n>>> (35-30+1)/30\n0.2\n```", "```py\n>>> 4/(0.18-0.02)\n>>>\n25.0\n```", "```py\n>>>import scipy as sp\n>>>dividends=[1.80,2.07,2.277,2.48193,2.680,2.7877]\n>>>R=0.182\n>>>g=0.03\n>>>sp.npv(R,dividends[:-1])*(1+R)\n>>>\n9.5233173204508681\n>>>sp.pv(R,5,0,2.7877/(R-g))\n>>>\n-7.949046992374841\n```", "```py\n>>>import p4f\n>>> r=0.182\n>>> g=0.03\n>>> d=[1.8,2.07,2.277,2.48193,2.68,2.7877]\n>>> p4f.pvValueNperiodModel(r,g,d)\n          17.472364312825711\n```", "```py\n>>> 400*0.45/(0.18-0.03)/50\n>>>\n24.0\n```", "```py\n>>>houseHold={\"father\":\"John\",\"mother\":\"Mary\",\"daughter\":\"Jane\"}\n>>> household\n{'father': 'John', 'daughter': 'Jane','mother': 'Mary'}\n>>> type(houseHold)\n<class 'dict'>\n>>>houseHold['father']\n'John'\n```", "```py\nimport numpy as np \nfrom matplotlib.pyplot import * \nfrom pylab import * \npv=1000 \nr=0.08 \nn=10  \nt=linspace(0,n,n) \ny1=np.ones(len(t))*pv # a horizontal line \ny2=pv*(1+r*t) \ny3=pv*(1+r)**t \ntitle('Simple vs. compounded interest rates') \nxlabel('Number of years') \nylabel('Values') \nxlim(0,11) \nylim(800,2200) \nplot(t, y1, 'b-') \nplot(t, y2, 'g--') \nplot(t, y3, 'r-') \nshow()\n```", "```py\ndef APR2Rm(APR1,m1,m2):\n\"\"\"\n    Objective: convert one APR to another Rm\n         APR1: annual percentage rate\n           m1:  compounding frequency \n           m2:  effective period rate with this compounding\n\n    Formula used: Rm=(1+APR1/m1)**(m1/m2)-1\n\n    Example #1>>>APR2Rm(0.1,2,4)\n                0.02469507659595993\n\"\"\"\n    return (1+APR/m1)**(m1/m2)-1\n\ndef APR2APR(APR1,m1,m2):\n\"\"\"\n    Objective: convert one APR to another Rm\n         APR1: annual percentage rate\n           m1:  compounding frequency \n           m2:  effective period rate with this compounding\n\n    Formula used: Rm=(1+APR1/m1)**(m1/m2)-1\n\n    Example #1>>>APR2APR(0.1,2,4)\n                0.09878030638383972\n\"\"\"\n   return m2*((1+APR/m1)**(m1/m2)-1)\n\ndef APR2Rc(APR,m):\n    return m*log(1+APR/m)\n\ndef Rc2Rm(Rc,m):\n       return exp(Rc/m)-1\n\ndef Rc2APR(Rc,m):\n       return m*(exp(Rc/m)-1)\n```", "```py\ndef rateYan(APR,type):\n\"\"\"Objective: from one APR to another effective rate and APR2\n         APR : value of the given Annual Percentage Rate\n        type : Converting method, e.g., 's2a', 's2q', 's2c'\n's2a' means from semi-annual to annual\na for annual\n                 s for semi-annual\n                 q for quarterly\n                 m for monthly\n                 d for daily\n                 c for continuously\n    Example #1>>>rateYan(0.1,'s2a')\n                [0.10250000000000004, 0.10250000000000004]\n    Example #2>>>rateYan(0.1,'q2c')\n                   0.098770450361485657\n\"\"\"\n    import scipy as sp\n    rate=[]\n    if(type[0]=='a'):\n        n1=1\nelif(type[0]=='s'):\n        n1=2\nelif(type[0]=='q'):\n        n1=4\nelif(type[0]=='m'):\n        n1=12\nelif(type[0]=='d'):\n        n1=365\n    else:        \n        n1=-9\n    if(type[2]=='a'):\n        n2=1\nelif(type[2]=='s'):\n        n2=2\nelif(type[2]=='q'):\n        n2=4\nelif(type[2]=='m'):\n        n2=12\nelif(type[2]=='d'):\n        n2=365\n    else:        \n        n2=-9       \n    if(n1==-9 and n2==-9):\n        return APR           \nelif(n1==-9 and not(n2==-9)):\neffectiveRate=sp.exp(APR/n2)-1\n        APR2=n2*effectiveRate\nrate.append(effectiveRate)\nrate.append(APR2)\n        return rate        \nelif(n2==-9 and not(n1==-9)):\nRc=n1*sp.log(1+APR/n1)\n        return Rc\n    else:\neffectiveRate=(1+APR/n1)**(n1/n2)-1\n        APR2=n2*effectiveRate\nrate.append(effectiveRate)\nrate.append(APR2)\n        return rate   \n```", "```py\ndef pvValueNperiodModel(r,longTermGrowthRate,dividendNplus1):\n\"\"\"Objective: estimate stock price based on an n-period model\n                         r: discount rate \nLongTermGrowhRate: long term dividend growth rate\n         dividendsNpus1   : a dividend vector n + 1\n\n         PV    = d1/(1+R) + d2/(1+R)**2 + .... + dn/(1+R)**n + \nsellingPrice/(1+R)**n\nsellingPrice= d(n+1)/(r-g)\n             where g is long term growth rate\n\n    Example #1: >>> r=0.182\n>>> g=0.03\n>>> d=[1.8,2.07,2.277,2.48193,2.68,2.7877]\n>>>pvValueNperiodModel(r,g,d)\n                   17.472364312825711\n\"\"\"\n    import scipy as sp\n    d=dividendNplus1\n    n=len(d)-1\n    g=longTermGrowthRate\npv=sp.npv(r,d[:-1])*(1+r)\nsellingPrice=d[n]/(r-g)\npv+=sp.pv(r,n,0,-sellingPrice)\n    return pv\n```", "```py\ndef durationBond(rate,couponRate,maturity):\n\"\"\"Objective : estimte the durtion for a given bond\n       rate      : discount rate\ncouponRate: coupon rate \n      maturity   : number of years \n\n       Example 1: >>>discountRate=0.1\n>>>couponRate=0.04\n>>> n=4\n>>>durationBond(rate,couponRate,n)\n                      3.5616941835365492\n\n       Example #2>>>durationBond(0.1,0.04,4)\n                     3.7465335177625576                   \n\"\"\"\n    import scipy as sp\n    d=0\n    n=maturity\n    for i in sp.arange(n):\n        d+=(i+1)*sp.pv(rate,i+1,0,-couponRate)\n    d+=n*sp.pv(rate,nper,0,-1)\n    return d/sp.pv(rate,n,-couponRate,-1)\n```", "```py\n>>>import pandas as pd\n>>>spread=pd.read_pickle(\"c:/temp/spreadBasedOnCreditRating.pkl\")\n>>> spread\n                     1       2       3       5       7      10     30 \nRating                                                         \nAaa/AAA          5.00    8.00   12.00   18.00   28.00   42.00   65.00\nAa1/AA+         10.00   18.00   25.00   34.00   42.00   54.00   77.00\nAa2/AA          14.00   29.00   38.00   50.00   57.00   65.00   89.00\nAa3/AA-         19.00   34.00   43.00   54.00   61.00   69.00   92.00\nA1/A+           23.00   39.00   47.00   58.00   65.00   72.00   95.00\nA2/A            24.00   39.00   49.00   61.00   69.00   77.00  103.00\nA3/A-           32.00   49.00   59.00   72.00   80.00   89.00  117.00\nBaa1/BBB+       38.00   61.00   75.00   92.00  103.00  115.00  151.00\nBaa2/BBB        47.00   75.00   89.00  107.00  119.00  132.00  170.00\nBaa3/BBB-       83.00  108.00  122.00  140.00  152.00  165.00  204.00\nBa1/BB+        157.00  182.00  198.00  217.00  232.00  248.00  286.00\nBa2/BB         231.00  256.00  274.00  295.00  312.00  330.00  367.00\nBa3/BB-        305.00  330.00  350.00  372.00  392.00  413.00  449.00\nB1/B+          378.00  404.00  426.00  450.00  472.00  495.00  530.00\nB2/B           452.00  478.00  502.00  527.00  552.00  578.00  612.00\nB3/B-          526.00  552.00  578.00  604.00  632.00  660.00  693.00\nCaa/CCC+       600.00  626.00  653.00  682.00  712.00  743.00  775.00\nUS Treasury Yield  0.13    0.45    0.93    1.74    2.31    2.73  3.55\n>>>\n```"]