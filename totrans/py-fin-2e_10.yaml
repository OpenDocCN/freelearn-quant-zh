- en: Chapter 10. Options and Futures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In modern finance, the option theory (including futures and forwards) and its
    applications play an important role. Many trading strategies, corporate incentive
    plans, and hedging strategies include various types of options. For example, many
    executive incentive plans are based on stock options. Assume that an importer
    located in the US has just ordered a piece of machinery from England with a payment
    of £10 million in three months. The importer has a currency risk (or exchange
    rate risk). If the pound depreciates against the US dollar, the importer would
    be better off since he/she pays less US dollars to buy £10 million. On the contrary,
    if the pound appreciates against the US dollar, then the importer would suffer
    a loss. There are several ways that the importer could avoid or reduce such a
    risk: buy pounds right now, enter a futures market to buy pounds with a fixed
    exchange rate determined today, or long a call option with a fixed exercise price.
    In this chapter, we will explain the option theory and its related applications.
    In particular, the following topics will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: How to hedge currency risk, a market-wide short-term downturn
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Payoff and profit/loss functions for calls and puts and their graphical representations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: European versus American options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Normal distribution, standard normal distribution, and cumulative normal distribution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Black-Scholes-Merton option model with/without dividend
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various trading strategies and their visual presentations, such as covered call,
    straddle, butterfly, and calendar spread
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delta, gamma, and other Greeks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The put-call parity and its graphical representation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Graphical representation for a one-step and a two-step binomial tree model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the binomial tree method to price both European and American options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implied volatility, volatility smile and skewness
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Options theory is an integral part of finance theory. It is difficult to image
    that a finance student would not understand it. However, it is quite demanding
    to comprehend the theory thoroughly. Many finance-major students view options
    theory as rocket science, since it involves how to solve various differential
    equations. In order to satisfy as many readers as possible, in this chapter we
    avoid complex mathematical derivations.
  prefs: []
  type: TYPE_NORMAL
- en: An option would give the option buyer a right to buy or sell something in the
    future with a fixed price determined today. If the buyer has a right to buy something
    in the future, it is called a call option. If the option buyer is entitled to
    sell something, it is called a put option. Since there are two persons (sides)
    for each transaction, the buyer pays to acquire a right, while the seller receives
    cash inflow today to bear an obligation. Unlike options, a futures contract would
    give the buyer and seller both rights and obligations. Unlike options with an
    initial cash flow from buyer to seller, for a futures contract, usually there
    is no initial cash flow. Forward contracts are quite similar to future contracts
    with a few exceptions. In this chapter, these two types of contracts (futures
    and forwards) are not distinguished. A forward contract is easier to analyze than
    a future contract. If a reader wants a more in-depth analysis, he/she should consult
    other related textbooks.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing futures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before discussing the basic concepts and formulas related to futures, let''s
    review the concept of continuously compounded interest rates. In [Chapter 3](ch03.html
    "Chapter 3. Time Value of Money"), *Time Value of Money*, we learned that the
    following formula could be applied to estimate the future value of a given present
    value:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introducing futures](img/B06175_10_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, *FV* is the future value, *PV* is the present value, *R* is the effective
    period rate and *n* is the number of periods. For example, assume that the **Annual
    Percentage Rate** (**APR**) is 8%, compounded semiannually. If we deposit $100
    today, what is its future value in two years? The following code shows the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The future value is $116.99\. In the preceding program, the effective semiannual
    rate is 4% since the APR is 8% compounded semiannually. In options theory, risk-free
    rates and dividend yields are defined as continuously compounded. It is easy to
    derive the relationship between an effective (or APR) rate and a continuously
    compounded rate. The second way to estimate a future value for a given present
    value is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introducing futures](img/B06175_10_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, *Rc* is the continuously compounded rate and *T* is the number of years.
    In other words, when applying Equation (1), we could have many combinations, such
    as annual effective rate and the number of years, effective monthly rate and number
    of months, and the like. However, this is not true for Equation (2), which has
    only one pair: continuously compounded rate and the number of years. To derive
    the relationship between one effective rate and its corresponding continuously
    compounded rate, we recommend the following simple approach: choose $1 as our
    present value and 1 year as our investment horizon. Then apply the previous two
    equations and set them equal. Assume that we know that the effective semiannual
    rate is given, 4% in the preceding case. What is its equivalent *Rc*?'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introducing futures](img/B06175_10_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We equate them to have the following equation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introducing futures](img/B06175_10_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Taking the natural log on both sides of the previous equation, we have the
    following solution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introducing futures](img/B06175_10_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'With a simple generalization of the preceding approach, we end up with the
    following formula to convert an effective rate to its corresponding continuously
    compounded rate:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introducing futures](img/B06175_10_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, *m* is the compounding frequency per year: *m=1, 2, 4, 12, 52, 365* for
    annual, semiannual, quarterly, monthly, weekly, and daily, respectively. *Reffective*
    is APR divided by *m*. If an APR with related compounding frequency is given,
    we have the following equivalent converting formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introducing futures](img/B06175_10_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'On the other hand, it is quite easy to derive the formula to estimate an effective
    rate from a given continuous rate:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introducing futures](img/B06175_10_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To verify the preceding equation, see the following codes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, we have the following formula to estimate the APR from an *Rc*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introducing futures](img/B06175_10_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For a futures contract, let''s use the preceding example of an importer in
    the US who is going to pay £10 million in three months. Usually, there are two
    ways to present an exchange rate: value of the first currency per unit of the
    second currency, and the opposite. Let''s treat US as domestic and England as
    foreign, and the exchange rate is quoted in dollars per pound. Assume that today
    the exchange rate is £1 = 1.25 USD, the domestic interest rate is 1% and the foreign
    interest rate (in England) is 2%. The following codes show how much we need today
    in terms of pounds and US dollars:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The result shows that we would need £4.975 million today to satisfy the payment
    of £5 million in three months, since we could deposit £4.975 million in a bank
    to earn extra interest (at 1%). If the importer has no pounds, they could spend
    $6.2188 million US dollars to purchase the amount of pounds today. Alternatively,
    the importer could long a future contract (or a few future contracts) to purchase
    pounds in three months with a fixed exchange rate determined today. The forward
    rate (future exchange rate) is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introducing futures](img/B06175_10_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, *F* is the future price (in this case future exchange rate determined
    today), *S0* is the spot price (in this case today''s exchange rate), *Rd* is
    the domestic risk-free rate compounded continuously, *Rf* is the foreign deposit
    rate compounded continuously and *T* is the maturity in years. The following Python
    program shows the future price today:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the result, the exchange rate in three months should be 1.2468789
    US dollars per pound. In other words, US dollars should have depreciated against
    the British pound. The reason is based on the two interest rates. Here is the
    logic based on the no arbitrage principle. Assume that we have $1.25 USD today.
    We have two choices: deposit in a US bank to enjoy 2%, or exchange it for 1 pound
    and deposit it in a foreign bank, enjoying 1%. Assume further, if the future exchange
    rate is not 1.246879, we would have an arbitrate opportunity. Just assume that
    the futures price (for exchange rate) is $1.26 indicating that the pound is overvalued
    relative to the US dollar. An arbitrator would buy low and sell high, that is,
    short futures. Assume that we have one pound obligation in three months. Here
    is the arbitrage strategy: borrow $1.25 (USD) and sell one pound in three months
    with a future price of $1.26\. At the end of three months, here is the profit
    of our arbitrage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The profit is 0.15 USD. If the future price is lower than 1.246878902996825,
    an arbitrager would take an opposite position, that is, long a future contract.
    For stocks with no dividend payment before the expiry date, we have the following
    future price:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introducing futures](img/B06175_10_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here *F* is the futures price, *S0* is the current stock price, *Rf* is the
    continuously compounded risk-free rate, yield is the dividend yield continuously
    compounded. For known discrete dividends before a maturity date, we have the following
    formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introducing futures](img/B06175_10_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, *PV(D)* is the present value of all dividends before the expiry date.
    Futures could be used as a hedging tool or for speculation. Assume that a mutual
    fund manager is worried about the market''s potential negative movement in a short
    term. Assume further that his/her portfolio is positively correlated with the
    market portfolio, such as S&P500 index. Thus, he/she should short futures on S&P500\.
    Here is a related formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introducing futures](img/B06175_10_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, *n* is the number of futures contracts to long or short, *βtarget* is
    the target beta, *βp* is the beta of our current portfolio, *Vp* is the value
    of the portfolio, and *VF* is the value of one futures contract. If *n* is less
    (bigger) than zero, it means a short (long) position. Here is an example. Assume
    John Doe is managing a portfolio worth $50 million today and his portfolio has
    a beta of 1.10 with S&P500\. He is worried that the market might go down in the
    next six months. It is not feasible to sell his portfolio or part of it because
    of the transaction costs. Assume that in the short term, his target beta is zero.
    For each point of S&P500, the price is $250\. Since today''s S&P500 is 2297.41,
    the value of one futures contract is $5,743,550\. The number of contracts John
    should short (or long) is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'A negative value indicates a short position. John Doe should short 96 S&P500
    futures contracts. This is consistent with common sense, since the portfolio is
    positively correlated with the S&P500 index. The following program shows the profit
    or loss with and without hedging when the S&P500 index level falls 97 points:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The related output is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: From the last three lines, we know that without hedging, the loss in portfolio
    value would be $2.12 million. On the other hand, after shorting 96 S&P500 futures
    contracts, the net loss is only $217,876 after the S&P500 index falls 98 points
    in six months. With a few different potential S&P500 index levels, we could find
    out their related hedging and no-hedging results. Such a hedging strategy is usually
    called portfolio insurance.
  prefs: []
  type: TYPE_NORMAL
- en: Payoff and profit/loss functions for call and put options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An option gives its buyer the right to buy (call option) or sell (put option)
    something in the future to the option seller at a predetermined price (exercise
    price). For example, if we buy a European call option to acquire a stock for X
    dollars, such as $30, at the end of three months our payoff on maturity day will
    be the one calculated using the following formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Payoff and profit/loss functions for call and put options](img/B06175_10_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, ![Payoff and profit/loss functions for call and put options](img/B06175_10_56.jpg)
    is the stock price at the maturity date (T), the exercise price is X (X=30 in
    this case). Assume that three months later the stock price is $25\. We would not
    exercise our call option to pay $30 in exchange for the stock since we could buy
    the same stock with $25 in the open market. On the other hand, if the stock price
    is $40, we will exercise our right to reap a payoff of $10, that is, buy the stock
    at $30 and sell it at $40\. The following program presents the payoff function
    for a call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Applying the `payoff` function is straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The first input variable, stock price at the maturity *T*, could be an array
    as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'To create a graphic presentation, we have the following codes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The graph is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Payoff and profit/loss functions for call and put options](img/B06175_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The payoff for a call option seller is the opposite of its buyer. It is important
    to remember that this is a zero-sum game: you win, I lose. For example, an investor
    sold three call options with an exercise price of $10\. When the stock price is
    $15 on the maturity, the option buyer''s payoff is $15, while the total loss to
    the option writer is $15 as well. If the call premium (option price) is c, the
    profit/loss function for a call option buyer is the difference between her payoff
    and her initial investment (c). Obviously, the timing of cash-flows of paying
    an option premium upfront and its payoff at maturity day is different. Here, we
    ignore the time value of money since maturities are usually quite short.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For a call option buyer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Payoff and profit/loss functions for call and put options](img/B06175_10_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For a call option seller:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Payoff and profit/loss functions for call and put options](img/B06175_10_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following graph shows the profit/loss functions for call option buyer and
    seller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'A graphical representation is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Payoff and profit/loss functions for call and put options](img/B06175_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'A put option gives its buyer a right to sell a security (commodity) to the
    put option buyer in the future at a predetermined price, *X*. Here is its payoff
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Payoff and profit/loss functions for call and put options](img/B06175_10_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, *ST* is the stock price at maturity and *X* is the exercise price (strike
    price). For a put option buyer, the profit/loss function is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Payoff and profit/loss functions for call and put options](img/B06175_10_87.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The profit/loss function for a put option seller is just the opposite:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Payoff and profit/loss functions for call and put options](img/B06175_10_88.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The related program and graph for the profit and loss functions for a put option
    buyer and a seller are shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The graph is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Payoff and profit/loss functions for call and put options](img/B06175_10_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: European versus American options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A European option can be exercised only on maturity day, while an American
    option can be exercised any time before or on its maturity day. Since an American
    option could be held until it matures, its price (option premium) should be higher
    than or equal to its European counterpart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![European versus American options](img/B06175_10_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: An import difference is that for a European option, we have a close form solution,
    that is, the Black-Scholes-Merton option model. However, we don't have a close-form
    solution for an American option. Fortunately, we have several ways to price an
    American option. Later in the chapter, we show how to use the Binomial-tree method,
    also called the CRR method, to price an American option.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding cash flows, types of options, rights and obligations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We know that for each business contract, we have two sides: buyer versus seller.
    This is true for an option contract as well. A call buyer will pay upfront (cash
    output) to acquire a right. Since this is a zero-sum game, a call option seller
    would enjoy an upfront cash inflow and assumes an obligation.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table presents those positions (buyer or seller), directions
    of the initial cash flows (inflow or outflow), the option buyer''s rights (buy
    or sell) and the option seller''s obligations (that is, to satisfy the option
    seller''s desires):'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | Buyer(long position) | Seller(short position) | EuropeanOptions | AmericanOptions
    |'
  prefs: []
  type: TYPE_TB
- en: '| Call | A right to buy a security (commodity) at a pre-fixed price | An obligation
    to sell a security (commodity) at a pre-fixed price | Can be exercised on maturity
    day only | Can beexercised any time before or on maturity day |'
  prefs: []
  type: TYPE_TB
- en: '| Put | A right to sell a security with a pre-fixed price | An obligation to
    buy |'
  prefs: []
  type: TYPE_TB
- en: '| CashFlow | Upfront cash outflow | Upfront cash inflow |'
  prefs: []
  type: TYPE_TB
- en: Table 10.1 Long, short positions, initial cash flows, and right versus obligation
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Black-Scholes-Merton option model on non-dividend paying stocks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **Black-Scholes-Merton option** model is a closed-form solution to price
    a European option on a stock which does not pay any dividends before its maturity
    date. If we use ![Black-Scholes-Merton option model on non-dividend paying stocks](img/B06175_10_54.jpg)
    or the price today, X for the exercise price, *r* for the continuously compounded
    risk-free rate, T for the maturity in years, ![Black-Scholes-Merton option model
    on non-dividend paying stocks](img/B06175_10_55.jpg) for the volatility of the
    stock, the closed-form formulae for a European call (c) and put (p) are:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Black-Scholes-Merton option model on non-dividend paying stocks](img/B06175_10_39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, `N()` is the cumulative standard normal distribution. The following Python
    codes represent the preceding equations to evaluate a European call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding program, the `stats.norm.cdf()` is the cumulative normal distribution,
    that is, `N()` in the Black-Scholes-Merton option model. The current stock price
    is $40, the strike price is $42, the time to maturity is six months, the risk-free
    rate is 1.5% compounded continuously, and the volatility of the underlying stock
    is 20% (compounded continuously). Based on the preceding codes, the European call
    is worth $1.56:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Generating our own module p4f
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We could combine many small Python progams as one program, such as `p4f.py`.
    For instance, the preceding Python program called `bs_call()` function is included.
    Such a collection of programs offers several benefits. First, when we use the
    `bs_call()` function, we don''t have to type those five lines. To save space,
    we only show a few functions included in `p4f.py`. For brevity, we remove all
    comments included for each function. Those comments are designed to help future
    users when issuing the `help()` function, such as `help(bs_call())`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'To apply the Black-Scholes-Merton call option model, we simply use the following
    codes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The second advantage is to save space and make our programming simpler. Later
    in the chapter, this point will become clearer when we use a function called `binomial_grid()`.
    From now onward, when a function is discussed the first time, we will offer the
    complete codes. However, when the program is used again and the program is quite
    complex, we will call it indirectly via `p4f`. To find out our working directory,
    use the following codes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: European options with known dividends
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Assume that we have a known dividend *d1* distributed at time T1, T1<T, where
    T is our maturity date. We can modify the original Black-Scholes-Merton option
    model by replacing *S0* with *S*, where ![European options with known dividends](img/B06175_10_57.jpg):'
  prefs: []
  type: TYPE_NORMAL
- en: '![European options with known dividends](img/B06175_10_40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding example, if we have a known dividend of $1.5 delivered in one
    month, what is the price of the call?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The first line of the program imports the module called `p4f` which contains
    the call option model. The result shows that the price of the call is $1.18, which
    is lower than the previous value ($1.56). It is understandable since the price
    of the underlying stock would drop roughly by $1.5 in one month. Because of this,
    the chance that we could exercise our call option will be smaller, that is, less
    likely to go beyond $42\. The preceding argument is true for multiple known dividends
    distributed before T, that is, ![European options with known dividends](img/B06175_10_85.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: Various trading strategies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the following table, we summarize several commonly used trading strategies
    involving various types of options:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Names | Description | Direction of initial cash-flow | Expectation of future
    price movement |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Bull spread with calls | Buy a call (x1) sell a call (x2) [ x1< x2 ] | Outflow
    | Rise |'
  prefs: []
  type: TYPE_TB
- en: '| Bull spread with puts | Buy a put (x1), sell a put (x2) [ x1< x2 ] | Inflow
    | Rise |'
  prefs: []
  type: TYPE_TB
- en: '| Bear spread with puts | Buy a put (x2), sell a put (x1) [ x1 < x2 ] | Outflow
    | Fall |'
  prefs: []
  type: TYPE_TB
- en: '| Bear spread with calls | Buy a call (x2), sell a call (x1) [x1 < x2 ] | Inflow
    | Fall |'
  prefs: []
  type: TYPE_TB
- en: '| Straddle | Buy a call & sell a put with the same x | Outflow | Rise or fall
    |'
  prefs: []
  type: TYPE_TB
- en: '| Strip | Buy two puts and a call (with the same x) | Outflow | Prob (fall)
    > prob (rise) |'
  prefs: []
  type: TYPE_TB
- en: '| Strap | Buy two calls and one put (with the same x) | Outflow | Prob (rise)>
    prob(fall) |'
  prefs: []
  type: TYPE_TB
- en: '| Strangle | Buy a call (x2) and buy a put (x1) [x1 < x2 ] | Outflow | Rise
    or fall |'
  prefs: []
  type: TYPE_TB
- en: '| Butterfly with calls | Buy two calls (x1,x3) and sell two calls (x2) [x2=(x1+x3)/2]
    | Outflow | Stay around x2 |'
  prefs: []
  type: TYPE_TB
- en: '| Butterfly with puts | Buy two puts (x1,x3) and sell two puts (x2) [x2=(x1+x3)/2]
    |   | Stay around x2 |'
  prefs: []
  type: TYPE_TB
- en: '| Calendar spread | Sell a call (T1) and buy a call (T2) with the same strike
    price and T1<T2 | Outflow |   |'
  prefs: []
  type: TYPE_TB
- en: Table 10.2 Various trading strategies
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Covered-call – long a stock and short a call
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Assume that we purchase 100 shares of stock A, with a price of $10 each. Thus,
    the total cost is $1,000\. If at the same time we write a call contract, one contract
    is worth 100 shares, at a price of $20\. Thus, our total cost will be reduced
    by $20\. Assume further that the exercise price is $12\. The graphic presentation
    of our profit and loss function is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The related graph showing the positions of a stock only, call, and covered-call
    is given here. Obviously, when the stock price is under $17 (15 +2), the covered-call
    is better than long a share:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Covered-call – long a stock and short a call](img/B06175_10_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Straddle – buy a call and a put with the same exercise prices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s look at the simplest scenario. A firm faces an uncertain event next
    month. The issue is that we are not sure about its direction, that is, a good
    event or bad one. To take advantage of such an opportunity, we could u a call
    and buy a put with the same exercise prices. This means that we will benefit either
    way: the stock moves up or down. Assume further that the exercise price is $30\.
    The payoff of such a strategy is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '![Straddle – buy a call and a put with the same exercise prices](img/B06175_10_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding graph shows whichever way the stock goes, we would profit. Could
    we lose? Obviously, when the stock does not change much, our expectation fails
    to materialize.
  prefs: []
  type: TYPE_NORMAL
- en: Butterfly with calls
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When buying two calls with the exercises price of `x1` and `x3` and selling
    two calls with the exercise price of `x2`, where *x2=(x1+x2)/2*, with the same
    maturity for the same stock, we call it a butterfly. Its profit-loss function
    is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The related graph is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Butterfly with calls](img/B06175_10_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The relationship between input values and option values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When the volatility of an underlying stock increases, both its call and put
    values increase. The logic is that when a stock becomes more volatile, we have
    a better chance to observe extreme values, that is, we have a better chance to
    exercise our option. The following Python program shows this relationship:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The corresponding graph is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The relationship between input values and option values](img/B06175_10_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Greeks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Delta ![Greeks](img/B06175_10_58.jpg) is defined as the derivative of the option
    to its underlying security price. The delta of a call is defined here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Greeks](img/B06175_10_41.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The delta of a European call on a non-dividend-paying stock is defined as:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Greeks](img/B06175_10_42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The program of `delta_call()` is quite simple. Since it is included in the
    `p4f.py`, we could call it easily:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The delta for a European put on a non-dividend-paying stock is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Greeks](img/B06175_10_43.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Gamma is the rate of change of delta with respect to price, as shown in this
    formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Greeks](img/B06175_10_44.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For a European call (or put), its gamma is shown here, where ![Greeks](img/B06175_10_59.jpg):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Greeks](img/B06175_10_45.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The mathematical definitions of Greek letters for a European call and put are
    given in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Greeks](img/B06175_10_89.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Table 10.1 Mathematical definitions of Greek letters
  prefs: []
  type: TYPE_NORMAL
- en: Note that in the table, ![Greeks](img/B06175_10_68.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: 'Obviously, very few people can remember these formulae. Here is a very simple
    approach, based on their definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Greeks](img/B06175_10_86.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Table 10.2 A simple approach to estimating Greek letters
  prefs: []
  type: TYPE_NORMAL
- en: How to remember?
  prefs: []
  type: TYPE_NORMAL
- en: '**Delta**: First order derivative'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Gamma**: Second order derivative'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Theta**: Time (T)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Vega**: Volatility (V)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rho**: Rate (R)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, based on delta''s definition, we know that it is the ratio of
    `c2 - c1` and `s2 - s1`. Thus, we could generate a small number to generate those
    two pairs; see the following codes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Based on the last two values, the difference is quite small. We could apply
    this method to other Greek letters, see one end of chapter problems.
  prefs: []
  type: TYPE_NORMAL
- en: Put-call parity and its graphic presentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s look at a call with an exercise price of $20, a maturity of three months
    and a risk-free rate of 5%. The present value of this future $20 is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'In three months, what will be the wealth of our portfolio which consists of
    a call on the same stock plus $19.75 cash today? If the stock price is below $20,
    we don''t exercise the call and keep the cash. If the stock price is above $20,
    we use our cash of $20 to exercise our call option to own the stock. Thus, our
    portfolio value will be the maximum of those two values: stock price in three
    months or $20, that is, *max(s,20)*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the other hand, how about a portfolio with a stock plus a put option with
    an exercise price of $20? If the stock price falls by $20, we exercise the put
    option and get $20\. If the stock price is above $20, we simply keep the stock.
    Thus, our portfolio value will be the maximum of those two values: stock price
    in three months or $20, that is, *max(s,20)*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Thus, for both portfolios we have the same terminal wealth of *max(s,20)*.
    Based on the no-arbitrage principle, the present values of those two portfolios
    should be equal. We call this put-call parity:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Put-call parity and its graphic presentation](img/B06175_10_46.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When the stock has known dividend payments before its maturity date, we have
    the following equality:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Put-call parity and its graphic presentation](img/B06175_10_47.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, *D* is the present value of all dividends before their maturity date
    (*T*). The following Python program offers a graphic presentation of the put-call
    parity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Put-call parity and its graphic presentation](img/B06175_10_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The put-call ratio represents the perception of investors jointly towards the
    future. If there is no obvious trend, that is, we expect a normal future, then
    the put-call ratio should be close to one. On the other hand, if we expect a much
    brighter future, the ratio should be lower than one.
  prefs: []
  type: TYPE_NORMAL
- en: The following code shows a ratio of this type over the years. First, we have
    to download the data from CBOE.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [http://www.cboe.com/](http://www.cboe.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Quotes & Data** in the menu bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find `put call ratio`, that is, [http://www.cboe.com/data/putcallratio.aspx](http://www.cboe.com/data/putcallratio.aspx).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **CBOE Total Exchange Volume and Put/Call Ratios (11-01-2006 to present)**
    under **Current**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: For the data, readers can download it at [http://canisius.edu/~yany/data/totalpc.csv](http://canisius.edu/~yany/data/totalpc.csv).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following codes shows the trends of a call-put ratio:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The related graph is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Put-call parity and its graphic presentation](img/B06175_10_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The put-call ratio for a short period with a trend
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Based on the preceding program, we could choose a shorter period with a trend,
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The corresponding graph is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The put-call ratio for a short period with a trend](img/B06175_10_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Binomial tree and its graphic presentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The binomial tree method was proposed by Cox, Ross, and Robinstein in 1979\.
    Because of this, it is also called the CRR method. Based on the CRR method, we
    have the following two-step approach. First, we draw a tree, such as the following
    one-step tree. Assume that our current stock value is S. Then, there are two outcomes
    of `Su` and `Sd`, where *u>1* and *d<1*, see the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The graph is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Binomial tree and its graphic presentation](img/B06175_10_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Obviously, the simplest tree is a one-step tree. Assume that today''s price
    is $10, the exercise price is $11, and a call option will mature in six months.
    In addition, assume that we know that the price will have two outcomes: moving
    up (*u=1.15*) or moving down (d=0.9). In other words, the final values are either
    $11 or $9\. Based on such information, we have the following graph showing the
    prices for such a one-step binomial tree:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Binomial tree and its graphic presentation](img/B06175_10_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The codes to generate the preceding graph are shown here.
  prefs: []
  type: TYPE_NORMAL
- en: 'The codes are based on the codes at [https://pypi.python.org/pypi/PyFi](https://pypi.python.org/pypi/PyFi):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding program, we generate a function called `binomial_grid()` since
    we will call this function many times later in the chapter. Since we know beforehand
    that we will have two outcomes, we can choose an appropriate combination of stock
    and call options to make our final outcome with certainty, that is, the same terminal
    values. Assume that we choose an appropriate delta shares of underlying security
    plus one call to have the same terminal value at the end of one period, that is,
    ![Binomial tree and its graphic presentation](img/B06175_10_74.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: 'Thus, ![Binomial tree and its graphic presentation](img/B06175_10_75.jpg) .
    This means that if we long *0.4* shares and short one call option, our final wealth
    will be the same, *0.4*11.5-1 =3.6* when stock moves up or *0.4*9=3.6* when the
    stock moves down. Assume further that if the continuously compounded risk-free
    is 0.12%, then the value of today''s portfolio will be equivalent to the discounted
    future certain value of *4.5*, that is, *0.4*10 – c=pv(3.6)*. That is, ![Binomial
    tree and its graphic presentation](img/B06175_10_76.jpg). If using Python, we
    have the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'For a two-step binomial tree, we have the following codes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the CRR method, we have the following procedure:'
  prefs: []
  type: TYPE_NORMAL
- en: Draw a *n*-step tree.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the end of *n*-step, estimate terminal prices.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Calculate the option value at each node based on the terminal price, exercise,
    call or put.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Discount it back one step, that is, from nth to nth-1, according to the risk-neutral
    probability.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat the previous step until we find the final value at step 0\. The formulas
    for *u*, *d*, *p* are given here:![Binomial tree and its graphic presentation](img/B06175_10_48.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here, *u* is the up movement, *d* is the down movement, ![Binomial tree and
    its graphic presentation](img/B06175_10_77.jpg) is the volatility of the underlying
    security, r is the risk-free rate, ![Binomial tree and its graphic presentation](img/B06175_10_78.jpg)
    is the step, that is, ![Binomial tree and its graphic presentation](img/B06175_10_79.jpg),
    *T* is the maturity in years, *n* is the number of steps, *q* is the dividend
    yield, and p is the risk-neutral probability of an up movement. The `binomial_grid()`
    function is based on the functions shown under the one-step binomial tree graphic
    presentation. Again, as we mentioned before, this function is included in the
    grand master file called `p4fy.py`. The output graph is shown here. One obvious
    result is that the preceding Python program is very simple and straight forward.
    Here, let us use a two-step binomial tree to explain the whole process. Assume
    that the current stock price is $10, the exercise price is $10, the maturity is
    three months, the number of steps is two, the risk-free rate is 2%, and the volatility
    of the underlying security is 0.2\. The following Python codes would generate
    a two-step tree:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The tree is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Binomial tree and its graphic presentation](img/B06175_10_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we use the risk-neutral probability to discount each value one step backward.
    The codes and the graph are given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The tree is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Binomial tree and its graphic presentation](img/B06175_10_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, we explain a few values shown in the preceding graph. At the highest
    node (**s*u*u**), since the terminal stock price is 11.52 and the exercise price
    is 10, the call value is 1.52 (11.52-10). Similarly, at node **s*u*d=s** the call
    value is 0 since 10-10=0\. For a call value of 0.8, we have the following verification:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Binomial tree (CRR) method for European options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following codes are for the binomial-tree method to price a European option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'To apply the function, we give it a set of input values. For comparison, the
    result based on the *Black-Scholes-Merton option* model is shown here as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Binomial tree (CRR) method for American options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Unlike the Black-Scholes-Merton option model, which can only be applied to
    European options, the binomial tree (CRR method) can be used to price American
    options. The only difference is that we have to consider the early exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The key difference between pricing an American call option and pricing a European
    is its early exercise opportunity. In the preceding program, the last several
    lines reflect this. For each node, we estimate two values: `v1` is for the discounted
    value and `v2` is the payoff from an early exercise. We choose a higher value,
    `max(v1, v2)`. If using the same set of values to apply this binomial tree to
    price an American call, we have the following value. It is understandable the
    final result is higher than a European call counterpart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Hedging strategies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After selling a European call, we could hold ![Hedging strategies](img/B06175_10_80.jpg)
    shares of the same stock to hedge our position. This is named a delta hedge. Since
    the delta ![Hedging strategies](img/B06175_10_81.jpg) is a function of the underlying
    stock (S), to maintain an effective hedge we have to rebalance our holding constantly.
    This is called dynamic hedging. The delta of a portfolio is the weighted deltas
    of individual securities in the portfolio. Note that when we short a security,
    its weight will be negative:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hedging strategies](img/B06175_10_49.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Assume that a US importer will pay £10 million in three months. He or she is
    concerned with a potential depreciation of the US dollar against the pound. There
    are several ways to hedge such a risk: buy pounds now, enter a futures contract
    to buy £10 million in three months with a fixed exchange rate, or buy call options
    with a fixed exchange rate as its exercise price. The first choice is costly since
    the importer does not need pounds today. Entering a future contract is risky as
    well since an appreciation of the US dollar would cost the importer extra money.
    On the other hand, entering a call option will guarantee a maximum exchange rate
    today. At the same time, if the pound depreciates, the importer will reap the
    benefits. Such activities are called hedging since we take the opposite position
    of our risks.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For the currency options, we have the following equations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hedging strategies](img/B06175_10_50.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here, ![Hedging strategies](img/B06175_10_82.jpg) is the exchange rate in US
    dollars per foreign currency, ![Hedging strategies](img/B06175_10_83.jpg) is the
    domestic risk-free, rate and ![Hedging strategies](img/B06175_10_84.jpg) is the
    foreign country's risk-free rate.
  prefs: []
  type: TYPE_NORMAL
- en: Implied volatility
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'From the previous sections, we know that for a set of input variables—`S` (the
    present stock price), `X` (the exercise price), `T` (the maturity date in years),
    `r` (the continuously compounded risk-free rate), and `sigma` (the volatility
    of the stock, that is, the annualized standard deviation of its returns)—we could
    estimate the price of a call option based on the Black-Scholes-Merton option model.
    Recall that to price a European call option, we have the following Python code
    of five lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'After entering a set of five values, we can estimate the call price as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'On the other hand, if we know `S`, `X`, `T`, `r`, and `c`, how can we estimate
    sigma? Here, `sigma` is our implied volatility. In other words, if we are given
    a set values such as S=40, X=40, T=0.5, r=0.05, and c=3.30, we should find out
    the value of sigma, and it should be equal to 0.25\. In this chapter, we will
    learn how to estimate the implied volatility. Actually, the underlying logic to
    figure out the implied volatility is very simple: trial and error. Let''s use
    the previous example as an illustration. We have five values—*S=40*, *X=40*, *T=0.5*,
    *r=0.05*, and *c=3.30*. The basic design is that after inputting 100 different
    sigmas, plus the first four input values shown earlier, we have 100 call prices.
    The implied volatility is the sigma that achieves the smallest absolute difference
    between the estimated call price and 3.30\. Of course, we could increase the number
    of trials to achieve a higher precision, that is, more decimal places.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, we could adopt another conversion criterion: we stop when the
    absolute difference between our estimated call price and the given call value
    is less than a critical value, such as 1 cent, that is, |c-3.30|<0.01\. Since
    it is not a good idea to randomly pick up 100 or 1,000 different sigmas, we systematically
    choose those values, that is, use a loop by selecting those sigmas systematically.
    Next, we will discuss two types of loops: a for loop and a while loop. Implied
    volatility function based on a European call. Ultimately, we could write a function
    to estimate the implied volatility based on a European call. To save space, we
    remove all comments and examples from the program as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'With a set of input values, we could apply the previous program easily as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, we could estimate an implied volatility based on a European put
    option model. In the following program, we design a function named `implied_vol_put_min()`.
    There are several differences between this function and the previous one. First,
    the current function depends on a put option instead of a call. Thus, the last
    input value is a put premium instead of a call premium. Second, the conversion
    criterion is that an estimated price and the given put price have the smallest
    difference. In the previous function, the conversion criterion is when the absolute
    difference is less than 0.01\. In a sense, the current program will guarantee
    an implied volatility while the previous program does not guarantee an output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s use a set of input values to estimate the implied volatility. After
    that, we will explain the logic behind the previous program. Assume *S=40*, *X=40*,
    *T=12* months, *r=0.1*, and the put price is $1.50, as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'The implied volatility is 20 percent. The logic is that we assign a big value,
    such as 100, to a variable called `min_value`. For the first sigma with a value
    of 0.0002, we have an almost zero put value. Thus, the absolute difference is
    1.50, which is smaller than 100\. Because of this, our `min_value` variable will
    be replaced with the value 1.50\. We continue this way until we go through the
    loop. For the recorded minimum value, its corresponding sigma will be our implied
    volatility. We could optimize the previous program by defining some intermediate
    values. For example, in the previous program, we estimate *ln(S/X)* 10,000 times.
    Actually, we define a new variable such as `log_S_over_X`, estimate its value
    just once, and use it 10,000 times. This is true for `sigma*sigma/2.`, and `sigman*sqrt(T)`:'
  prefs: []
  type: TYPE_NORMAL
- en: Binary-search
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To estimate the implied volatility, the logic underlying the earlier methods
    is to run the Black-Scholes-Merton option model 100 times and choose the sigma
    value that achieves the smallest difference between the estimated option price
    and the observed price. Although the logic is easy to understand, such an approach
    is not efficient since we need to call the Black-Scholes-Merton option model a
    few hundred times. To estimate a few implied volatilities, such an approach would
    not pose any problems. However, under two scenarios, such an approach is problematic.
    First, if we need higher precision, such as *sigma=0.25333*, or we have to estimate
    several million implied volatilities, we need to optimize our approach. Let''s
    look at a simple example. Assume that we randomly pick up a value between one
    and 5,000\. How many steps do we need to match this value if we sequentially run
    a loop from one to 5,000? A binomial search is the *log(n)* worst-case scenario
    when linear search is the n worst case scenario. Thus, to search a value from
    one to 5,000, a linear search would need 5,000 steps (average 2,050) in a worst-case
    scenario, while a binary search would need 12 steps (average six) in a worst-case
    scenario. The following Python program performs a binary search:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'The following program shows its application for searching an implied volatility:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the result, the implied volatility is 16.17%. In the preceding program,
    the conversion condition, when the program should stop, is the difference between
    two call options. Readers could set up other conversion conditions. To avoid an
    infinitive loop, we have a screen condition of:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Retrieving option data from Yahoo! Finance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many sources of option data that we can use for our investments, research
    or teaching. One of them is Yahoo! Finance.
  prefs: []
  type: TYPE_NORMAL
- en: 'To retrieve option data for IBM, we have the following procedure:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [http://finance.yahoo.com](http://finance.yahoo.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `IBM` in the search box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Options** in the navigation bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The related page is [http://finance.yahoo.com/quote/IBM/options?p=IBM](http://finance.yahoo.com/quote/IBM/options?p=IBM).
    A screenshot of this web page is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Retrieving option data from Yahoo! Finance](img/B06175_10_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Volatility smile and skewness
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Obviously, each stock should possess one value for its volatility. However,
    when estimating implied volatility, different strike prices might offer us different
    implied volatilities. More specifically, the implied volatility based on out-of-the-money
    options, at-the-money options, and in-the-money options might be quite different.
    Volatility smile is the shape going down then up with the exercise prices, while
    the volatility skewness is downward or upward sloping. The key is that investors''
    sentiments and the supply and demand relationship have a fundamental impact on
    the volatility skewness. Thus, such a smile or skewness provides information on
    whether investors, such as fund managers, prefer to write calls or puts, as shown
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the `.pickle` dataset can be downloaded at [http://canisus.edu/~yan/python/callsFeb2014.pkl](http://canisus.edu/~yan/python/callsFeb2014.pkl).
  prefs: []
  type: TYPE_NORMAL
- en: 'The graph related to volatility smile is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Volatility smile and skewness](img/B06175_10_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Please refer to the following articles:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Black, F., M. Scholes, 1973, The pricing of options and corporate liab**ilities,
    Journal of Political Economy 81,3,637-654*, [https://www.cs.princeton.edu/courses/archive/fall09/cos323/papers/black_scholes73.pdf](https://www.cs.princeton.edu/courses/archive/fall09/cos323/papers/black_scholes73.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Cox, J. C., Ross, S. A., Rubinstein, M, 1979, Option pricing: A simplified
    appro**ach, Journal of Financial Economics, 7(3), 229-263*, [http://www.sciencedirect.com/science/article/pii/0304405X79900151](http://www.sciencedirect.com/science/article/pii/0304405X79900151)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Appendix A – data case 6: portfolio insurance'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Portfolio insurance is a method of hedging a portfolio of stocks against market
    risk by short selling stock index futures. This hedging technique is frequently
    used by institutional investors when the market direction is uncertain or volatile.
    Assume that you manage one of the industry portfolios with a current value of
    $50 million. If you expect the whole market to be quite volatile in next three
    months--in other words, the market might go down significantly--what might be
    our choices at the moment?
  prefs: []
  type: TYPE_NORMAL
- en: '**Alternative #1**: Sell stocks right now and buy them back in a few months'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Alternative #2**: Sell S&P500 index futures'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Obviously, the first alternative is costly because of the transaction cost:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Get five industry portfolios:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To retrieve Fama-French five-industry portfolio, go to Prof. French's Data Library.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to [http://mba.tuck.dartmouth.edu/pages/faculty/ken.french/data_library.html](http://mba.tuck.dartmouth.edu/pages/faculty/ken.french/data_library.html).
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Search for the keyword `Industry`; see the following screenshot:![Appendix
    A – data case 6: portfolio insurance](img/B06175_10_17.jpg)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Download the data and estimate beta for those five industries. Let''s see what
    happens when the market is down one point. Here is today''s S&P500 level:![Appendix
    A – data case 6: portfolio insurance](img/B06175_10_18.jpg)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: If the market goes down one point, the long position (S&P500 futures contract)
    would lose $250, while the short position would gain $250\. The size of one futures
    contract on S&P500 is index level *250.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If we want to hedge our $5 portfolio, we should short n futures contracts.
    For the specification, see [http://www3.canisius.edu/~yany/doc/sp500futures.pdf](http://www3.canisius.edu/~yany/doc/sp500futures.pdf):'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Appendix A – data case 6: portfolio insurance](img/B06175_10_51.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Here, *Vp* is the portfolio value, *βp* is the portfolio beta, and the index
    level is the S&P500 index level. Applying the preceding formula, we should short
    ten futures contracts. Assume, in three months, it is 2090.4, that is, ten points
    down. Since we know that beta is a measure of market risk, assume that annul risk-free
    rate is 1%, that is, 0.25% for three months.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Estimate the portfolio beta by applying the following linear regression:![Appendix
    A – data case 6: portfolio insurance](img/B06175_10_52.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Identify several moments when the market falls dramatically.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can use a business cycle Python dataset called:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that -1 means deep in recession, while 1 means the economy is expanding.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Estimate the loss with and without a hedging strategy. What is the loss of your
    portfolio? What is the gain if you short one future contract of S&P500 future?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat the whole processing that we have 1,000 shares of IBM, 2,000 shares of
    DELL, and 5,000 shares of Citi Group, and 7,000 shares of IBM.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the total market value today?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'What is the portfolio beta? [note: you can use the latest five-year monthly
    data to estimate beta]'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If we want to hedge our portfolio by using S&P500 futures contracts, how many
    contracts should we long (short)?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If the market down by 5%, what is our portfolio loss and what is the gain in
    terms of our hedging position?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following formula is a general one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Appendix A – data case 6: portfolio insurance](img/B06175_10_53.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here, *n* is the number of contracts, *β** is our target beta, *VF* is the value
    of one futures contract. *Vp* and *βp* are defined previously. If n is positive
    (negative), it means a long (short) position. In the preceding case for using
    S&P500 futures, VF=S&P500 index level *250.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Think about market timing by using S&P500 futures to change your portfolio beta
    for bad times.
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If the APR is 5% compounded quarterly, what is its equivalent continuously compounded
    rate?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The value of a portfolio is $4.77 million today with a beta of 0.88\. If the
    portfolio manager explains the market will surge in the next three months and
    s/he intends to increase her/ his portfolio beta from 0.88 to 1.20 in just three
    months by using S&P500 futures, how many contracts should s/he long or short?
    If the S&P500 index increases by 70 points what will be her/his gain or loss?
    How about if the S&P500 falls by 50 points instead?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a Python program to price a call option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explain the empty shell method when writing a complex Python program.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explain the logic behind the so-called comment-all-out method when writing a
    complex Python program.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explain the usage of the return value when we debug a program.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When we write the CND (cumulative standard normal distribution), we could define
    a1, a2, a3, a4, and a5 separately. What are the differences between the following
    two approaches?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Current approach: (a1,a2,a3,a4,a5)=(0.31938153,-0.356563782,1.781477937,-1.821255978,1.330274429)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An alternative approach:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a1=0.31938153
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: a2=-0.356563782
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: a3=1.781477937
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: a4=-1.821255978
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: a5=1.330274429
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the difference between an American call and a European call?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the unit of rf in the Black-Scholes-Merton option model?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we are given an annual rate of 3.4% compounded semi-annually, what is the
    value of rf we should use for the Black-Scholes-Merton option model?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you use options to hedge?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you treat predetermined cash dividends to price a European call?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why is an American call worth more than a European call?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assume you are a mutual manager and your portfolio's β is strongly correlated
    with the market. You are worried about the short-term fall of the market. What
    could you do to protect your portfolio?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The current price of stock A is $38.5, the strike prices for a call and a put
    are both $37\. If the continuously compounded risk-free rate is 3.2%, maturity
    is three months, and the volatility of stock A is 0.25, what are the prices for
    a European call and put?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the put-call parity to verify the preceding solutions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the strike prices for call and put in 9.11) are different, can we apply
    the put-call parity?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For a set of input values, such as S=40, X=40, T=3/12=0.25, r=0.05 and sigma=0.20,
    using the Black-Scholes-Merton option model, we can estimate the value of the
    call. Now keep all parameters constant except S (current price of a stocks); show
    the relationship, a graph is better, between calls and S.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the definitions of effective annual rate, effect semi annual rate,
    and risk-free rate for the call option model? Assume the current annual risk-free
    rate is 5 percent, compounded semi annually, which value should we use as our
    input value for the Black-Scholes-Merton call option model?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the call premium when the stock is traded at $39, the exercise price
    is $40, the maturity date is three months, the risk-free rate is 3.5 percent,
    compounding continuously, and the volatility is 0.15 per year?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat the previous exercise for when the risk-free rate is still 3.5 percent
    per year but compounded semi annually.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the advantages and disadvantages of using others' programs?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you debug others' programs?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a Python program to convert any given APR compounded m times per year,
    to a continuously compounded interest rate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you improve the accuracy of the cumulative normal distribution?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the relationship between APR and Rc, a continuously compounded rate?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For a stock with the current stock price of $52.34, what is its call price if
    the exercise price is the same as its current stock price, matures in six months
    with a 0.16 annual volatility, and the risk-free rate is 3.1 percent, compounded
    continuously?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For a set of *S*, *X*, *T*, *r*, and sigma, we could estimate a European call
    option by using those 13 lines of Python codes. When the current stock price,
    *S*, increases while other input values are the same, will the call price increase
    or decrease? Why?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Show the preceding result graphically.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the exercise price, *X*, increases, the value of a call will fall. Is this
    true? Why?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If other input values are constant, the value of the call premium will increase
    if the sigma of the stock increases. Is this true? Why?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For a set of input values of *S*, *X*, *T*, *r*, and sigma, we could use the
    codes in this chapter to price a European call option, that is, *C*. On the other
    hand, if we observe a real-world price of a call premium (Cobs) with a set of
    values *S*, *X*, *T*, and *r*, we could estimate an implied volatility (sigma).
    Specify a trial-and-error method to roughly estimate the implied volatility (if
    a new learner does not get this question, it is perfectly fine since we will devote
    a whole chapter to discussing how to do it).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: According to so-called put-call parity, which holds that a call option with
    enough cash at maturity (X dollar) is equivalent to holding a put option with
    a share of the underlying stock in hand--here, both call and put options have
    the same exercise price (X) with the same maturity (T) and both are European options--if
    the stock price is $10, exercise price is $11, maturity is six months, and risk-free
    rate is 2.9 percent, compounded semi annually, what is the price of a European
    put option?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, first we have explained many basic concepts related to portfolio
    theory, such as covariance,correlation, the formulas on how to calculate variance
    of a 2-stock portfolio and variance of an n-stock portfolio. After that, we have
    discussed various risk measures for individual stocks or portfolios, such as Sharpe
    ratio, Treynor ratio, Sortino ratio, how to minimize portfolio risk based on those
    measures (ratios), how to setup an objective function, how to choose an efficient
    portfolio for a given set of stocks, and how to construct an efficient frontier.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, we will discuss one of the most important theory in modern
    finance: options and futures. We will start from the basic concepts such as payoff
    functions for a call and for a put. Then we explain the related applications such
    as various trading strategies, corporate incentive plans, and hedging strategies
    including different types of options and futures.'
  prefs: []
  type: TYPE_NORMAL
