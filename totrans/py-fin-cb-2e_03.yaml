- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visualizing Financial Time Series
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The old adage *a picture is worth a thousand words* is very much applicable
    in the data science field. We can use different kinds of plots to not only explore
    data but also tell data-based stories.
  prefs: []
  type: TYPE_NORMAL
- en: 'While working with financial time series data, quickly plotting the series
    can already lead to many valuable insights, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: Is the series continuous?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are there any unexpected missing values?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do some values look like outliers?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are there any patterns we can quickly see and use for further analyses?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Naturally, these are only some of the potential questions that aim to help us
    with our analyses. The main goal of visualization at the very beginning of any
    project is to familiarize yourself with the data and get to know it a bit better.
    And only then can we move on to conducting proper statistical analysis and building
    machine learning models that aim to predict the future values of the series.
  prefs: []
  type: TYPE_NORMAL
- en: 'Regarding data visualization, Python offers a variety of libraries that can
    get the job done, with various levels of required complexity (including the learning
    curve) and slightly different quality of the outputs. Some of the most popular
    libraries used for visualization include:'
  prefs: []
  type: TYPE_NORMAL
- en: '`matplotlib`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`seaborn`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`plotly`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`altair`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`plotnine`—This library is based on R’s `ggplot`, so might be especially interesting
    for those who are also familiar with R'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bokeh`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we will use quite a few of the libraries mentioned above. We
    believe that it makes sense to use the best tool for the job, so if it takes a
    one-liner to create a certain plot in one library while it takes 20 lines in another
    one, then the choice is quite clear. You can most likely create all the visualizations
    shown in this chapter using any of the mentioned libraries.
  prefs: []
  type: TYPE_NORMAL
- en: If you need to create a very custom plot that is not provided out-of-the-box
    in one of the most popular libraries, then `matplotlib` should be your choice,
    as you can create pretty much anything using it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Basic visualization of time series data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualizing seasonal patterns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating interactive visualizations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a candlestick chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic visualization of time series data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The most common starting point of visualizing time series data is a simple line
    plot, that is, a line connecting the values of the time series (y-axis) over time
    (x-axis). We can use this plot to quickly identify potential issues with the data
    and see if there are any prevailing patterns.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will show the easiest way to create a line plot. To do so,
    we will download Microsoft’s stock prices from 2020.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Execute the following steps to download, preprocess, and plot Microsoft’s stock
    prices and returns series:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Download Microsoft’s stock prices from 2020 and calculate simple returns:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We dropped the `NaN`s introduced by calculating the percentage change. This
    only affects the first row.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Plot the adjusted close prices:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Executing the one-liner above generates the following plot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](../Images/B18112_03_01.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 3.1: Microsoft’s adjusted stock price in 2020'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Plot the adjusted close prices and simple returns in one plot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Running the code generates the following plot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](../Images/B18112_03_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.2: Microsoft’s adjusted stock price and simple returns in 2020'
  prefs: []
  type: TYPE_NORMAL
- en: In *Figure 3.2*, we can clearly see that the dip in early 2020—caused by the
    start of the COVID-19 pandemic—resulted in increased volatility (variability)
    of returns. We will get more familiar with volatility in the next chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After importing the libraries, we downloaded Microsoft stock prices from 2020
    and calculated simple returns using the adjusted close price.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we used the `plot` method of a `pandas` DataFrame to quickly create a
    line plot. The only argument we specified was the plot’s title. Something to keep
    in mind is that we used the `plot` method only after subsetting a single column
    from the DataFrame (which is effectively a `pd.Series` object) and the dates were
    automatically picked up for the x-axis as they were the index of the DataFrame/Series.
  prefs: []
  type: TYPE_NORMAL
- en: 'We could have also used a more explicit notation to create the very same plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `plot` method is by no means restricted to creating line charts (which are
    the default). We can also create histograms, bar charts, scatterplots, pie charts,
    and so on. To select those, we need to specify the `kind` argument with a corresponding
    type of plot. Please bear in mind that for some kinds of plots (like the scatterplot),
    we might need to explicitly provide the values for both axes.
  prefs: []
  type: TYPE_NORMAL
- en: In *Step 4*, we created a plot consisting of two subplots. We first selected
    the columns of interest (prices and returns) and then used the `plot` method while
    specifying that we want to create subplots and that they should share the x-axis.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many more interesting things worth mentioning about creating line
    plots, however, we will only cover the following two, as they might be the most
    useful in practice.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we can create a similar plot to the previous one using `matplotlib`''s
    object-oriented interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the code generates the following plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/B18112_03_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.3: Microsoft’s adjusted stock price and simple returns in 2020'
  prefs: []
  type: TYPE_NORMAL
- en: While it is very similar to the previous plot, we have included some more details
    on it, such as y-axis labels.
  prefs: []
  type: TYPE_NORMAL
- en: 'One thing that is quite important here, and which will also be useful later
    on, is the object-oriented interface of `matplotlib`. While calling `plt.subplots`,
    we indicated we want to create two subplots in a single column, and we also specified
    that they will be sharing the x-axis. But what is really crucial is the output
    of the function, that is:'
  prefs: []
  type: TYPE_NORMAL
- en: An instance of the `Figure` class called `fig`. We can think of it as the container
    for our plots.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An instance of the `Axes` class called `ax` (not to be confused with the plot’s
    x- and y-axes). These are all the requested subplots. In our case, we have two
    of them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Figure 3.4* illustrates the relationship between a figure and the axes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/B18112_03_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.4: The relationship between matplotlib’s figure and axes'
  prefs: []
  type: TYPE_NORMAL
- en: With any figure, we can have an arbitrary number of subplots arranged in some
    form of a matrix. We can also create more complex configurations, in which the
    top row might be a single wide subplot, while the bottom row might be composed
    of two smaller subplots, each half the size of the large one.
  prefs: []
  type: TYPE_NORMAL
- en: While building the plot above, we have still used the `plot` method of a `pandas`
    DataFrame. The difference is that we have explicitly specified where in the figure
    we would like to place the subplots. We have done that by providing the `ax` argument.
    Naturally, we could have also used `matplotlib`'s functions for creating the plot,
    but we wanted to save a few lines of code.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second thing worth mentioning is that we can change the plotting backend
    of `pandas` to some other libraries, like `plotly`. We can do so using the following
    snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the code generates the following interactive plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/B18112_03_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.5: Microsoft’s adjusted stock price in 2020, visualized using plotly'
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, the advantages of using the `plotly` backend are not visible
    in print. In the notebook, you can hover over the plot to see the exact values
    (and any other information we include in the tooltip), zoom in on particular periods,
    filter the lines (if there are multiple), and much more. Please see the accompanying
    notebook (available on GitHub) to test out the interactive features of the visualization.
  prefs: []
  type: TYPE_NORMAL
- en: 'While changing the backend of the `plot` method, we should be aware of two
    things:'
  prefs: []
  type: TYPE_NORMAL
- en: We need to have the corresponding libraries installed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some backends have issues with certain functionalities of the `plot` method,
    most notably the `subplots` argument.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To generate the previous plot, we specified the plotting backend while creating
    the plot. That means the next plot we create without specifying it explicitly
    will be created using the default backend (`matplotlib`). We can use the following
    snippet to change the plotting backend for our entire session/notebook: `pd.options.plotting.backend
    = "plotly"`.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[https://matplotlib.org/stable/index.html](https://matplotlib.org/stable/index.html)—`matplotlib`''s
    documentation is a treasure trove of information about the library. Most notably,
    it contains useful tutorials and hints on how to create custom visualizations.'
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing seasonal patterns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we will learn in *Chapter 6*, *Time Series Analysis and Forecasting*, seasonality
    plays a very important role in time series analysis. By **seasonality**, we mean
    the presence of patterns that occur at regular intervals (shorter than a year).
    For example, imagine the sales of ice cream, which most likely experience a peak
    in the summer months, while the sales decrease in winter. And such patterns can
    be seen year over year. We show how to use the line plot with a slight twist to
    efficiently investigate such patterns.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will visually investigate seasonal patterns in the US unemployment
    rate from the years 2014-2019.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Execute the following steps to create a line plot showing seasonal patterns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the libraries and authenticate:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Download and display unemployment data from Nasdaq Data Link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Running the code generates the following plot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](../Images/B18112_03_06.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 3.6: Unemployment rate (US) in the years 2014 to 2019'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The unemployment rate expresses the number of unemployed as a percentage of
    the labor force. The values are not adjusted for seasonality, so we can try to
    spot some patterns.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In *Figure 3.6*, we can already spot some seasonal (repeating) patterns, for
    example, each year unemployment seems to be highest in January.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create new columns with `year` and `month`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the seasonal plot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Running the code results in the following plot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](../Images/B18112_03_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.7: Seasonal plot of the unemployment rate'
  prefs: []
  type: TYPE_NORMAL
- en: By displaying each year’s unemployment rate over the months, we can clearly
    see some seasonal patterns. For example, the highest unemployment can be observed
    in January, while the lowest is in December. Also, there seems to be a consistent
    increase in unemployment over the summer months.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the first step, we imported the libraries and authenticated with Nasdaq Data
    Link. In the second step, we downloaded the unemployment data from the years 2014-2019\.
    For convenience, we renamed the `Value` column to `unemp_rate`.
  prefs: []
  type: TYPE_NORMAL
- en: In *Step 3*, we created two new columns, in which we extracted the year and
    the name of the month from the index (encoded as `DatetimeIndex`).
  prefs: []
  type: TYPE_NORMAL
- en: In the last step, we used the `sns.lineplot` function to create the seasonal
    line plot. We specified that we want to use the months on the x-axis and that
    we will plot each year as a separate line (using the `hue` argument).
  prefs: []
  type: TYPE_NORMAL
- en: We can create such plots using other libraries as well. We used `seaborn` (which
    is a wrapper around `matplotlib`) to showcase the library. In general, it is recommended
    to use `seaborn` when you would like to include some statistical information on
    the plot as well, for example, to plot the line of best fit on a scatterplot.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have already investigated the simplest way to investigate seasonality on
    a plot. In this part, we will also go over some alternative visualizations that
    can reveal additional information about seasonal patterns.
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a month plot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Running the code produces the following plot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](../Images/B18112_03_08.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 3.8: The month plot of the unemployment rate'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A month plot is a simple yet informative visualization. For each month, it plots
    a separate line showing how the unemployment rate changed over time (while not
    showing the time points explicitly). Additionally, the red horizontal lines show
    the average values in those months.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can draw some conclusions from analyzing *Figure 3.8*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: By looking at the average values, we can see the pattern we have described before
    – the highest values are observed in January, then the unemployment rate decreases,
    only to bounce back over the summer months and then continue decreasing until
    the end of the year.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Over the years, the unemployment rate decreased; however, in 2019, the decrease
    seems to be smaller than in the previous years. We can see this by looking at
    the different angles of the lines in July and August.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create a quarter plot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Running the code produces the following figure:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](../Images/B18112_03_09.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 3.9: The quarter plot of the unemployment rate'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The **quarter plot** is very similar to the month plot, the only difference
    being that we use quarters instead of months on the x-axis. To arrive at this
    plot, we had to resample the monthly unemployment rate by taking each quarter’s
    average value. We could have taken the last value as well.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a polar seasonal plot using `plotly.express`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Running the code produces the following interactive plot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](../Images/B18112_03_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.10: Polar seasonal plot of the unemployment rate'
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we created a variation of the seasonal plot in which we plotted the
    lines on the polar coordinate plane. It means that the polar chart visualizes
    the data along radial and angular axes. We have manually capped the radial range
    by setting `range_r=[3, 7]`. Otherwise, the plot would have started at 0 and it
    would be harder to see any difference between the lines.
  prefs: []
  type: TYPE_NORMAL
- en: The conclusions we can draw are similar to those from a normal seasonal plot,
    however, it might take a while to get used to this representation. For example,
    by looking at the year 2014, we immediately see that unemployment is highest in
    the first quarter of the year.
  prefs: []
  type: TYPE_NORMAL
- en: Creating interactive visualizations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the first recipe, we gave a short preview of creating interactive visualizations
    in Python. In this recipe, we will show how to create interactive line plots using
    three different libraries: `cufflinks`, `plotly`, and `bokeh`. Naturally, these
    are not the only available libraries for interactive visualizations. Another popular
    one you might want to investigate further is `altair`.'
  prefs: []
  type: TYPE_NORMAL
- en: The `plotly` library is built on top of **d3.js** (a JavaScript library used
    for creating interactive visualizations in web browsers) and is known for creating
    high-quality plots with a significant degree of interactivity (inspecting values
    of observations, viewing tooltips of a given point, zooming in, and so on). Plotly
    is also the company responsible for developing this library and it provides hosting
    for our visualizations. We can create an infinite number of offline visualizations
    and a few free ones to share online (with a limited number of views per day).
  prefs: []
  type: TYPE_NORMAL
- en: '`cufflinks` is a wrapper library built on top of `plotly`. It was released
    before `plotly.express` was introduced as part of the `plotly` framework. The
    main advantages of `cufflinks` are:'
  prefs: []
  type: TYPE_NORMAL
- en: It makes the plotting much easier than pure `plotly`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It enables us to create the `plotly` visualizations directly on top of `pandas`
    DataFrames.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It contains a selection of interesting specialized visualizations, including
    a special class for quantitative finance (which we will cover in the next recipe).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lastly, `bokeh` is another library for creating interactive visualizations,
    aiming particularly for modern web browsers. Using `bokeh`, we can create beautiful
    interactive graphics, from simple line plots to complex interactive dashboards
    with streaming datasets. The visualizations of `bokeh` are powered by JavaScript,
    but actual knowledge of JavaScript is not explicitly required for creating the
    visualizations.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create a few interactive line plots using Microsoft’s
    stock price from 2020\.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Execute the following steps to download Microsoft’s stock prices and create
    interactive visualizations:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the libraries and initialize the notebook display:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Download Microsoft’s stock prices from 2020 and calculate simple returns:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the plot using `cufflinks`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Running the code creates the following plot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](../Images/B18112_03_11.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 3.11: Example of time series visualization using cufflinks'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: With the plots generated using `cufflinks` and `plotly`, we can hover over the
    line to see the tooltip containing the date of the observation and the exact value
    (or any other available information). We can also select a part of the plot that
    we would like to zoom in on for easier analysis.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create the plot using `bokeh`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Executing the code generates the following plot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](../Images/B18112_03_12.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 3.12: Microsoft’s adjusted stock prices visualized using Bokeh'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: By default, the `bokeh` plot comes not only with the tooltip and zooming functionalities,
    but also the range slider. We can use it to easily narrow down the range of dates
    that we would like to see in the plot.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create the plot using `plotly.express`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Running the code results in the following visualization:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](../Images/B18112_03_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.13: Example of time series visualization using plotly'
  prefs: []
  type: TYPE_NORMAL
- en: In *Figure 3.13*, you can see an example of the interactive tooltip, which is
    useful for identifying particular observations within the analyzed time series.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the first step, we imported the libraries and initialized the `notebook`
    display for `bokeh` and the offline mode for `cufflinks`. Then, we downloaded
    Microsoft’s stock prices from 2020, calculated simple returns using the adjusted
    close price, and only kept those two columns for further plotting.
  prefs: []
  type: TYPE_NORMAL
- en: In the third step, we created the first interactive visualization using `cufflinks`.
    As mentioned in the introduction, thanks to `cufflinks`, we can use the `iplot`
    method directly on top of the `pandas` DataFrame. It works similarly to the original
    `plot` method. Here, we indicated that we wanted to create subplots in one column,
    sharing the x-axis. The library handled the rest and created a nice and interactive
    visualization.
  prefs: []
  type: TYPE_NORMAL
- en: In *Step 4*, we created a line plot using `bokeh`. We did not use the pure `bokeh`
    library, but an official wrapper around pandas—`pandas_bokeh`. Thanks to it, we
    could access the `plot_bokeh` method directly on top of the `pandas` DataFrame
    to simplify the process of creating the plot.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we used the `plotly.express` framework, which is now officially part
    of the `plotly` library (it used to be a standalone library). Using the `px.line`
    function, we can easily create a simple, yet interactive line plot.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While using the visualizations to tell a story or presenting the outputs of
    our analyses to stakeholders or a non-technical audience, there are a few techniques
    that might improve the plot’s ability to convey a given message. Annotations are
    one of those techniques and we can easily add them to the plots generated with
    `plotly` (we can do so with other libraries as well).
  prefs: []
  type: TYPE_NORMAL
- en: 'We show the required steps below:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the annotations for the `plotly` plot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The dictionaries contain a few elements that might be worthwhile to explain:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`x`/`y`—The location of the annotation on the x- and y-axes respectively'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`text`—The text of the annotation'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`font`—The font’s formatting'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`arrowhead`—The shape of the arrowhead we want to use'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ax`/`ay`—The offset along the x- and y-axes from the indicated point'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: We frequently use the offset to make sure that the annotations are not overlapping
    with each other or with other elements of the plot.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After defining the annotations, we can simply add them to the plot.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the layout of the plot and show it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Running the snippet generates the following plot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](../Images/B18112_03_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.14: Time series visualization with added annotations'
  prefs: []
  type: TYPE_NORMAL
- en: Using the annotations, we have marked the dates when the market started to decline
    due to the COVID-19 pandemic, as well as when it started to recover and rise again.
    The dates used for annotations were selected simply by viewing the plot.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[https://bokeh.org/](https://bokeh.org/)—For more information about `bokeh`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://altair-viz.github.io/](https://altair-viz.github.io/)—You can also
    inspect `altair`, another popular Python library for interactive visualizations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://plotly.com/python/](https://plotly.com/python/)—`plotly`''s Python
    documentation. The library is also available for other programming languages such
    as R, MATLAB, or Julia.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a candlestick chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A candlestick chart is a type of financial graph, used to describe a given security’s
    price movements. A single candlestick (typically corresponding to one day, but
    a different frequency is possible) combines the **open**, **high**, **low**,and
    **close** (**OHLC**) prices.
  prefs: []
  type: TYPE_NORMAL
- en: 'The elements of a bullish candlestick (where the close price in a given time
    period is higher than the open price) are presented in *Figure 3.15*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/B18112_03_15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.15: Diagram of a bullish candlestick'
  prefs: []
  type: TYPE_NORMAL
- en: For a bearish candlestick, we should swap the positions of the open and close
    prices. Typically, we would also change the candle’s color to red.
  prefs: []
  type: TYPE_NORMAL
- en: In comparison to the plots introduced in the previous recipes, candlestick charts
    convey much more information than a simple line plot of the adjusted close price.
    That is why they are often used in real trading platforms, and traders use them
    for identifying patterns and making trading decisions.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we also add moving average lines (which are one of the most
    basic technical indicators), as well as bar charts representing volume.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we will download Twitter’s (adjusted) stock prices for the
    year 2018\. We will use Yahoo Finance to download the data, as described in *Chapter
    1,* *Acquiring Financial Data*. Follow these steps to get the data for plotting:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Download the adjusted prices:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Execute the following steps to create an interactive candlestick chart:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the candlestick chart using Twitter’s stock prices:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add volume and moving averages to the figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Display the plot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can observe the following plot (it is interactive in the notebook):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](../Images/B18112_03_16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.16: Candlestick plot of Twitter’s stock prices in 2018'
  prefs: []
  type: TYPE_NORMAL
- en: In the plot, we can see that the **exponential moving average** (**EMA**) adapts
    to the changes in prices much faster than the **simple moving average** (**SMA**).
    Some discontinuities in the chart are caused by the fact that we are using daily
    data, and there is no data for weekends/bank holidays.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the first step, we imported the required libraries and indicated that we
    wanted to use the offline mode of `cufflinks` and `plotly`.
  prefs: []
  type: TYPE_NORMAL
- en: As an alternative to running `cf.go_offline()` every time, we can also modify
    the settings to always use the offline mode by running `cf.set_config_file(offline=True)`.
    We can then view the settings using `cf.get_config_file()`.
  prefs: []
  type: TYPE_NORMAL
- en: In *Step 2*, we created an instance of a `QuantFig` object by passing a DataFrame
    containing the input data, as well as some arguments for the title and legend’s
    position. We could have created a simple candlestick chart by running the `iplot`
    method of `QuantFig` immediately afterward.
  prefs: []
  type: TYPE_NORMAL
- en: In *Step 3*, we added two moving average lines by using the `add_sma`/`add_ema`
    methods. We decided to consider 20 periods (days, in this case). By default, the
    averages are calculated using the `close` column, however, we can change this
    by providing the `column` argument.
  prefs: []
  type: TYPE_NORMAL
- en: The difference between the two moving averages is that the exponential one puts
    more weight on recent prices. By doing so, it is more responsive to new information
    and reacts faster to any changes in the general trend.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we displayed the plot using the `iplot` method.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As mentioned in the chapter’s introduction, there are often multiple ways we
    can do the same task in Python, often using different libraries. We will also
    show how to create candlestick charts using pure `plotly` (in case you do not
    want to use a wrapper library such as `cufflinks`) and `mplfinance`, a standalone
    expansion to `matplotlib` dedicated to plotting financial data:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a candlestick chart using pure `plotly`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Running the snippet results in the following plot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](../Images/B18112_03_17.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 3.17: An example of a candlestick chart generated using plotly'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The code is a bit lengthy, but in reality, it is quite straightforward. We needed
    to pass an object of class `go.Candlestick` as the `data` argument for the figure
    defined using `go.Figure`. Then, we just added the title and the label for the
    y-axis using the `update_layout` method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What is convenient about the `plotly` implementation of the candlestick chart
    is that it comes with a range slider, which we can use to interactively narrow
    down the displayed candlesticks to the period that we want to investigate in more
    detail.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a candlestick chart using `mplfinance`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Running the code generated the following plot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](../Images/B18112_03_18.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.18: An example of a candlestick chart generated using mplfinance'
  prefs: []
  type: TYPE_NORMAL
- en: We used the `mav` argument to indicate we wanted to create two moving averages,
    10- and 20-day ones. Unfortunately, at this moment, it is not possible to add
    exponential variants. However, we can add additional plots to the figure using
    the `mpf.make_addplot` helper function. We also indicated that we wanted to use
    a style resembling the one used by Yahoo Finance.
  prefs: []
  type: TYPE_NORMAL
- en: You can use the command `mpf.available_styles()` to display all the available
    styles.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Some useful references:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/santosjorge/cufflinks](https://github.com/santosjorge/cufflinks)—The
    GitHub repository of `cufflinks`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/santosjorge/cufflinks/blob/master/cufflinks/quant_figure.py](https://github.com/santosjorge/cufflinks/blob/master/cufflinks/quant_figure.py)—The
    source code of `cufflinks` might be helpful for getting more information on the
    available methods (different indicators and settings)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/matplotlib/mplfinance](https://github.com/matplotlib/mplfinance)—The
    GitHub repository of `mplfinance`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/matplotlib/mplfinance/blob/master/examples/addplot.ipynb](https://github.com/matplotlib/mplfinance/blob/master/examples/addplot.ipynb)—A
    Notebook with examples of how to add extra information to plots generated with
    `mplfinance`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have covered various ways of visualizing financial (and
    not only) time series. Plotting the data is very helpful in getting familiar with
    the analyzed time series. We can identify some patterns (for example, trends or
    changepoints) that we might subsequently want to confirm with statistical tests.
    Visualizing data can also help to spot some outliers (extreme values) in our series.
    This brings us to the topic of the next chapter, that is, automatic pattern identification
    and outlier detection.
  prefs: []
  type: TYPE_NORMAL
