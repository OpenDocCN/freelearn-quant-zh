- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: Visualizing Financial Time Series
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可视化金融时间序列
- en: The old adage *a picture is worth a thousand words* is very much applicable
    in the data science field. We can use different kinds of plots to not only explore
    data but also tell data-based stories.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 俗话说，*一图胜千言*，这在数据科学领域非常适用。我们可以使用不同类型的图表，不仅仅是为了探索数据，还能讲述基于数据的故事。
- en: 'While working with financial time series data, quickly plotting the series
    can already lead to many valuable insights, such as:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理金融时间序列数据时，快速绘制序列就能带来许多有价值的见解，例如：
- en: Is the series continuous?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 序列是连续的吗？
- en: Are there any unexpected missing values?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否存在意外的缺失值？
- en: Do some values look like outliers?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些值看起来像是离群值吗？
- en: Are there any patterns we can quickly see and use for further analyses?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否有任何模式我们可以快速识别并用于进一步分析？
- en: Naturally, these are only some of the potential questions that aim to help us
    with our analyses. The main goal of visualization at the very beginning of any
    project is to familiarize yourself with the data and get to know it a bit better.
    And only then can we move on to conducting proper statistical analysis and building
    machine learning models that aim to predict the future values of the series.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这些仅仅是一些可能有助于我们分析的潜在问题。数据可视化的主要目标是在任何项目开始时让你熟悉数据，进一步了解它。只有这样，我们才能进行适当的统计分析并建立预测序列未来值的机器学习模型。
- en: 'Regarding data visualization, Python offers a variety of libraries that can
    get the job done, with various levels of required complexity (including the learning
    curve) and slightly different quality of the outputs. Some of the most popular
    libraries used for visualization include:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 关于数据可视化，Python提供了各种库，可以完成这项工作，涵盖不同复杂度（包括学习曲线）和输出质量的差异。一些最受欢迎的可视化库包括：
- en: '`matplotlib`'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`matplotlib`'
- en: '`seaborn`'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`seaborn`'
- en: '`plotly`'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`plotly`'
- en: '`altair`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`altair`'
- en: '`plotnine`—This library is based on R’s `ggplot`, so might be especially interesting
    for those who are also familiar with R'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`plotnine`—这个库基于R的`ggplot`，所以对于那些也熟悉R的人来说特别有兴趣。'
- en: '`bokeh`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bokeh`'
- en: In this chapter, we will use quite a few of the libraries mentioned above. We
    believe that it makes sense to use the best tool for the job, so if it takes a
    one-liner to create a certain plot in one library while it takes 20 lines in another
    one, then the choice is quite clear. You can most likely create all the visualizations
    shown in this chapter using any of the mentioned libraries.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用上面提到的许多库。我们认为使用最合适的工具来完成工作是有道理的，因此如果一个库用一行代码就能创建某个图表，而另一个库则需要20行代码，那么选择就非常明确。你很可能可以使用任何一个提到的库来创建本章展示的所有可视化。
- en: If you need to create a very custom plot that is not provided out-of-the-box
    in one of the most popular libraries, then `matplotlib` should be your choice,
    as you can create pretty much anything using it.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要创建一个非常自定义的图表，而这种图表在最流行的库中没有现成的，那么`matplotlib`应该是你的选择，因为你几乎可以用它创建任何图表。
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下几种配方：
- en: Basic visualization of time series data
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时间序列数据的基本可视化
- en: Visualizing seasonal patterns
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可视化季节性模式
- en: Creating interactive visualizations
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建交互式可视化
- en: Creating a candlestick chart
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建蜡烛图
- en: Basic visualization of time series data
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间序列数据的基本可视化
- en: The most common starting point of visualizing time series data is a simple line
    plot, that is, a line connecting the values of the time series (y-axis) over time
    (x-axis). We can use this plot to quickly identify potential issues with the data
    and see if there are any prevailing patterns.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化时间序列数据的最常见起点是简单的折线图，也就是连接时间序列（y轴）随时间变化（x轴）的值的线条。我们可以利用此图快速识别数据中的潜在问题，并查看是否有任何明显的模式。
- en: In this recipe, we will show the easiest way to create a line plot. To do so,
    we will download Microsoft’s stock prices from 2020.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将展示创建折线图的最简单方法。为此，我们将下载2020年微软的股价。
- en: How to do it…
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到……
- en: 'Execute the following steps to download, preprocess, and plot Microsoft’s stock
    prices and returns series:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以下载、预处理并绘制微软的股价和回报系列：
- en: 'Import the libraries:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入库：
- en: '[PRE0]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Download Microsoft’s stock prices from 2020 and calculate simple returns:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载2020年微软的股价并计算简单回报：
- en: '[PRE1]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We dropped the `NaN`s introduced by calculating the percentage change. This
    only affects the first row.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们删除了通过计算百分比变化引入的`NaN`值，这只影响第一行。
- en: 'Plot the adjusted close prices:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绘制调整后的收盘价：
- en: '[PRE2]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Executing the one-liner above generates the following plot:'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行上述一行代码会生成以下图表：
- en: '![](../Images/B18112_03_01.png)'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](../Images/B18112_03_01.png)'
- en: 'Figure 3.1: Microsoft’s adjusted stock price in 2020'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3.1：微软2020年的调整后股票价格
- en: 'Plot the adjusted close prices and simple returns in one plot:'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将调整后的收盘价和简单收益绘制在同一张图表中：
- en: '[PRE3]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Running the code generates the following plot:'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行代码会生成以下图表：
- en: '![](../Images/B18112_03_02.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B18112_03_02.png)'
- en: 'Figure 3.2: Microsoft’s adjusted stock price and simple returns in 2020'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.2：微软2020年的调整后股票价格和简单收益
- en: In *Figure 3.2*, we can clearly see that the dip in early 2020—caused by the
    start of the COVID-19 pandemic—resulted in increased volatility (variability)
    of returns. We will get more familiar with volatility in the next chapters.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图3.2*中，我们可以清楚地看到2020年初的下跌——这是由COVID-19大流行开始引起的——导致收益的波动性（变化性）增加。我们将在接下来的章节中更熟悉波动性。
- en: How it works…
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: After importing the libraries, we downloaded Microsoft stock prices from 2020
    and calculated simple returns using the adjusted close price.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在导入库之后，我们从2020年开始下载了微软的股票价格，并使用调整后的收盘价计算了简单收益。
- en: Then, we used the `plot` method of a `pandas` DataFrame to quickly create a
    line plot. The only argument we specified was the plot’s title. Something to keep
    in mind is that we used the `plot` method only after subsetting a single column
    from the DataFrame (which is effectively a `pd.Series` object) and the dates were
    automatically picked up for the x-axis as they were the index of the DataFrame/Series.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用`pandas` DataFrame的`plot`方法快速创建了一个折线图。我们指定的唯一参数是图表的标题。需要记住的是，我们在从DataFrame中子集化出一列数据（实际上是`pd.Series`对象）后才使用`plot`方法，日期自动被选作x轴，因为它们是DataFrame/Series的索引。
- en: 'We could have also used a more explicit notation to create the very same plot:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用更明确的表示法来创建完全相同的图表：
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `plot` method is by no means restricted to creating line charts (which are
    the default). We can also create histograms, bar charts, scatterplots, pie charts,
    and so on. To select those, we need to specify the `kind` argument with a corresponding
    type of plot. Please bear in mind that for some kinds of plots (like the scatterplot),
    we might need to explicitly provide the values for both axes.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`plot`方法绝不仅限于创建折线图（默认图表类型）。我们还可以创建直方图、条形图、散点图、饼图等等。要选择这些图表类型，我们需要指定`kind`参数，并选择相应的图表类型。请记住，对于某些类型的图表（如散点图），我们可能需要显式提供两个轴的值。'
- en: In *Step 4*, we created a plot consisting of two subplots. We first selected
    the columns of interest (prices and returns) and then used the `plot` method while
    specifying that we want to create subplots and that they should share the x-axis.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第4步*中，我们创建了一个包含两个子图的图表。我们首先选择了感兴趣的列（价格和收益），然后使用`plot`方法，指定我们要创建子图，并且这些子图应共享x轴。
- en: There’s more…
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容……
- en: There are many more interesting things worth mentioning about creating line
    plots, however, we will only cover the following two, as they might be the most
    useful in practice.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多有趣的内容值得提及，关于创建折线图，但我们将只涵盖以下两点，因为它们在实践中可能是最有用的。
- en: 'First, we can create a similar plot to the previous one using `matplotlib`''s
    object-oriented interface:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们可以使用`matplotlib`的面向对象接口创建一个类似于前一个的图表：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Running the code generates the following plot:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 运行代码会生成以下图表：
- en: '![](../Images/B18112_03_03.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B18112_03_03.png)'
- en: 'Figure 3.3: Microsoft’s adjusted stock price and simple returns in 2020'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.3：微软2020年的调整后股票价格和简单收益
- en: While it is very similar to the previous plot, we have included some more details
    on it, such as y-axis labels.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管它与之前的图表非常相似，我们在上面加入了一些更多的细节，例如y轴标签。
- en: 'One thing that is quite important here, and which will also be useful later
    on, is the object-oriented interface of `matplotlib`. While calling `plt.subplots`,
    we indicated we want to create two subplots in a single column, and we also specified
    that they will be sharing the x-axis. But what is really crucial is the output
    of the function, that is:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一点非常重要，并且在以后也会非常有用，那就是`matplotlib`的面向对象接口。在调用`plt.subplots`时，我们指示希望在单列中创建两个子图，并且还指定了它们将共享x轴。但真正关键的是函数的输出，即：
- en: An instance of the `Figure` class called `fig`. We can think of it as the container
    for our plots.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个名为`fig`的`Figure`类实例。我们可以将其视为绘图的容器。
- en: An instance of the `Axes` class called `ax` (not to be confused with the plot’s
    x- and y-axes). These are all the requested subplots. In our case, we have two
    of them.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个名为`ax`的`Axes`类实例（不要与图表的x轴和y轴混淆）。这些是所有请求的子图。在我们的例子中，我们有两个这样的子图。
- en: '*Figure 3.4* illustrates the relationship between a figure and the axes:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3.4* 展示了图形和坐标轴之间的关系：'
- en: '![](../Images/B18112_03_04.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B18112_03_04.png)'
- en: 'Figure 3.4: The relationship between matplotlib’s figure and axes'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.4：matplotlib中的图形与坐标轴的关系
- en: With any figure, we can have an arbitrary number of subplots arranged in some
    form of a matrix. We can also create more complex configurations, in which the
    top row might be a single wide subplot, while the bottom row might be composed
    of two smaller subplots, each half the size of the large one.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何图形，我们可以在某种矩阵形式中安排任意数量的子图。我们还可以创建更复杂的配置，其中顶行可能是一个宽大的子图，而底行可能由两个较小的子图组成，每个子图的大小是大子图的一半。
- en: While building the plot above, we have still used the `plot` method of a `pandas`
    DataFrame. The difference is that we have explicitly specified where in the figure
    we would like to place the subplots. We have done that by providing the `ax` argument.
    Naturally, we could have also used `matplotlib`'s functions for creating the plot,
    but we wanted to save a few lines of code.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建上面的图表时，我们仍然使用了`pandas` DataFrame的`plot`方法。不同之处在于，我们明确指定了要在图形中放置子图的位置。我们通过提供`ax`参数来实现这一点。当然，我们也可以使用`matplotlib`的函数来创建图表，但我们希望节省几行代码。
- en: 'The second thing worth mentioning is that we can change the plotting backend
    of `pandas` to some other libraries, like `plotly`. We can do so using the following
    snippet:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个值得提及的事项是，我们可以将`pandas`的绘图后端更改为其他一些库，例如`plotly`。我们可以使用以下代码片段实现：
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Running the code generates the following interactive plot:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 运行代码生成以下交互式图表：
- en: '![](../Images/B18112_03_05.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B18112_03_05.png)'
- en: 'Figure 3.5: Microsoft’s adjusted stock price in 2020, visualized using plotly'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.5：微软2020年调整后的股价，使用plotly可视化
- en: Unfortunately, the advantages of using the `plotly` backend are not visible
    in print. In the notebook, you can hover over the plot to see the exact values
    (and any other information we include in the tooltip), zoom in on particular periods,
    filter the lines (if there are multiple), and much more. Please see the accompanying
    notebook (available on GitHub) to test out the interactive features of the visualization.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，使用`plotly`后端的优势在打印中是看不出来的。在笔记本中，您可以将鼠标悬停在图表上查看精确的数值（以及我们在工具提示中包含的任何其他信息）、放大特定时间段、筛选多条线（如果有的话）等更多功能。请参阅随附的笔记本（在GitHub上提供）以测试可视化的交互式功能。
- en: 'While changing the backend of the `plot` method, we should be aware of two
    things:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在更改`plot`方法的后端时，我们应当注意两点：
- en: We need to have the corresponding libraries installed.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要安装相应的库。
- en: Some backends have issues with certain functionalities of the `plot` method,
    most notably the `subplots` argument.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些后端在`plot`方法的某些功能上存在问题，最显著的是`subplots`参数。
- en: 'To generate the previous plot, we specified the plotting backend while creating
    the plot. That means the next plot we create without specifying it explicitly
    will be created using the default backend (`matplotlib`). We can use the following
    snippet to change the plotting backend for our entire session/notebook: `pd.options.plotting.backend
    = "plotly"`.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 为了生成前面的图表，我们在创建图表时指定了绘图后端。这意味着，下一个我们创建的图表如果没有明确指定，将使用默认的后端（`matplotlib`）。我们可以使用以下代码片段更改整个会话/笔记本的绘图后端：`pd.options.plotting.backend
    = "plotly"`。
- en: See also
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: '[https://matplotlib.org/stable/index.html](https://matplotlib.org/stable/index.html)—`matplotlib`''s
    documentation is a treasure trove of information about the library. Most notably,
    it contains useful tutorials and hints on how to create custom visualizations.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://matplotlib.org/stable/index.html](https://matplotlib.org/stable/index.html)—`matplotlib`的文档是关于该库的宝贵资料库，特别包含了如何创建自定义可视化的有用教程和提示。'
- en: Visualizing seasonal patterns
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可视化季节性模式
- en: As we will learn in *Chapter 6*, *Time Series Analysis and Forecasting*, seasonality
    plays a very important role in time series analysis. By **seasonality**, we mean
    the presence of patterns that occur at regular intervals (shorter than a year).
    For example, imagine the sales of ice cream, which most likely experience a peak
    in the summer months, while the sales decrease in winter. And such patterns can
    be seen year over year. We show how to use the line plot with a slight twist to
    efficiently investigate such patterns.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们将在*第6章*《时间序列分析与预测》中所学到的那样，季节性在时间序列分析中起着非常重要的作用。我们所说的**季节性**是指在一定时间间隔（通常小于一年）内会重复出现的模式。例如，想象一下冰淇淋的销售，夏季销售通常会达到高峰，而冬季则会下降。这些模式每年都会出现。我们展示了如何使用稍微调整过的折线图来高效地研究这些模式。
- en: In this recipe, we will visually investigate seasonal patterns in the US unemployment
    rate from the years 2014-2019.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将视觉化调查2014-2019年间美国失业率的季节性模式。
- en: How to do it…
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'Execute the following steps to create a line plot showing seasonal patterns:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以创建显示季节性模式的折线图：
- en: 'Import the libraries and authenticate:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入库并进行身份验证：
- en: '[PRE7]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Download and display unemployment data from Nasdaq Data Link:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Nasdaq 数据链接下载并显示失业数据：
- en: '[PRE8]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Running the code generates the following plot:'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行代码会生成以下图表：
- en: '![](../Images/B18112_03_06.png)'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](../Images/B18112_03_06.png)'
- en: 'Figure 3.6: Unemployment rate (US) in the years 2014 to 2019'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 3.6：2014至2019年美国失业率
- en: The unemployment rate expresses the number of unemployed as a percentage of
    the labor force. The values are not adjusted for seasonality, so we can try to
    spot some patterns.
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 失业率表示失业人数占劳动力人口的百分比。该值未做季节性调整，因此我们可以尝试找出一些模式。
- en: In *Figure 3.6*, we can already spot some seasonal (repeating) patterns, for
    example, each year unemployment seems to be highest in January.
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在*图 3.6*中，我们已经可以观察到一些季节性（重复性）模式，例如，每年失业率似乎在1月达到最高。
- en: 'Create new columns with `year` and `month`:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建包含`year`和`month`的新列：
- en: '[PRE9]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Create the seasonal plot:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建季节性图：
- en: '[PRE10]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Running the code results in the following plot:'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行代码的结果如下图所示：
- en: '![](../Images/B18112_03_07.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B18112_03_07.png)'
- en: 'Figure 3.7: Seasonal plot of the unemployment rate'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.7：失业率的季节性图
- en: By displaying each year’s unemployment rate over the months, we can clearly
    see some seasonal patterns. For example, the highest unemployment can be observed
    in January, while the lowest is in December. Also, there seems to be a consistent
    increase in unemployment over the summer months.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 通过展示每年各月的失业率，我们可以清楚地看到一些季节性模式。例如，最高失业率出现在1月，而最低失业率出现在12月。此外，似乎每年夏季失业率都有持续上升的趋势。
- en: How it works…
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理……
- en: In the first step, we imported the libraries and authenticated with Nasdaq Data
    Link. In the second step, we downloaded the unemployment data from the years 2014-2019\.
    For convenience, we renamed the `Value` column to `unemp_rate`.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一步中，我们导入了库并与 Nasdaq 数据链接进行了身份验证。第二步，我们下载了2014-2019年的失业数据。为了方便起见，我们将`Value`列重命名为`unemp_rate`。
- en: In *Step 3*, we created two new columns, in which we extracted the year and
    the name of the month from the index (encoded as `DatetimeIndex`).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第3步*中，我们创建了两个新列，从索引中提取了年份和月份名称（索引为`DatetimeIndex`类型）。
- en: In the last step, we used the `sns.lineplot` function to create the seasonal
    line plot. We specified that we want to use the months on the x-axis and that
    we will plot each year as a separate line (using the `hue` argument).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一步中，我们使用了`sns.lineplot`函数来创建季节性折线图。我们指定了要在x轴上使用月份，并将每一年绘制为一条独立的线（使用`hue`参数）。
- en: We can create such plots using other libraries as well. We used `seaborn` (which
    is a wrapper around `matplotlib`) to showcase the library. In general, it is recommended
    to use `seaborn` when you would like to include some statistical information on
    the plot as well, for example, to plot the line of best fit on a scatterplot.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用其他库创建类似的图表。我们使用了`seaborn`（这是`matplotlib`的封装）来展示该库。通常，如果你希望在图表中包括一些统计信息，例如在散点图上绘制最佳拟合线，推荐使用`seaborn`。
- en: There’s more…
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多……
- en: We have already investigated the simplest way to investigate seasonality on
    a plot. In this part, we will also go over some alternative visualizations that
    can reveal additional information about seasonal patterns.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经调查了在图表中调查季节性最简单的方法。在这一部分，我们还将讨论一些其他的可视化方法，这些方法能揭示更多关于季节性模式的信息。
- en: 'Import the libraries:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入库：
- en: '[PRE11]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Create a month plot:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建月份图：
- en: '[PRE12]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Running the code produces the following plot:'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行代码生成以下图表：
- en: '![](../Images/B18112_03_08.png)'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](../Images/B18112_03_08.png)'
- en: 'Figure 3.8: The month plot of the unemployment rate'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 3.8：失业率的月度图
- en: A month plot is a simple yet informative visualization. For each month, it plots
    a separate line showing how the unemployment rate changed over time (while not
    showing the time points explicitly). Additionally, the red horizontal lines show
    the average values in those months.
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 月度图是一个简单但富有信息的可视化图表。对于每个月，它绘制了一条独立的线，展示了失业率随时间的变化（虽然没有明确显示时间点）。此外，红色的水平线表示这些月份的平均值。
- en: 'We can draw some conclusions from analyzing *Figure 3.8*:'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以通过分析*图 3.8*得出一些结论：
- en: By looking at the average values, we can see the pattern we have described before
    – the highest values are observed in January, then the unemployment rate decreases,
    only to bounce back over the summer months and then continue decreasing until
    the end of the year.
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过查看平均值，我们可以看到之前描述的模式——在1月失业率最高，然后失业率下降，接着在夏季几个月反弹，最后在年底继续下降。
- en: Over the years, the unemployment rate decreased; however, in 2019, the decrease
    seems to be smaller than in the previous years. We can see this by looking at
    the different angles of the lines in July and August.
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多年来，失业率逐渐下降；然而，在2019年，下降幅度似乎比之前几年要小。我们可以通过观察7月和8月的线条角度来看到这一点。
- en: 'Create a quarter plot:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建季度图：
- en: '[PRE13]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Running the code produces the following figure:'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行代码生成以下图表：
- en: '![](../Images/B18112_03_09.png)'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](../Images/B18112_03_09.png)'
- en: 'Figure 3.9: The quarter plot of the unemployment rate'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 3.9：失业率的季度图
- en: The **quarter plot** is very similar to the month plot, the only difference
    being that we use quarters instead of months on the x-axis. To arrive at this
    plot, we had to resample the monthly unemployment rate by taking each quarter’s
    average value. We could have taken the last value as well.
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**季度图**与月度图非常相似，唯一的区别是我们在x轴上使用季度而不是月份。为了得到这个图表，我们必须通过取每个季度的平均值来重新采样每月的失业率。我们也可以取最后一个值。'
- en: 'Create a polar seasonal plot using `plotly.express`:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`plotly.express`创建极坐标季节性图：
- en: '[PRE14]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Running the code produces the following interactive plot:'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行代码生成以下交互式图表：
- en: '![](../Images/B18112_03_10.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B18112_03_10.png)'
- en: 'Figure 3.10: Polar seasonal plot of the unemployment rate'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.10：失业率的极坐标季节性图
- en: Lastly, we created a variation of the seasonal plot in which we plotted the
    lines on the polar coordinate plane. It means that the polar chart visualizes
    the data along radial and angular axes. We have manually capped the radial range
    by setting `range_r=[3, 7]`. Otherwise, the plot would have started at 0 and it
    would be harder to see any difference between the lines.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们创建了季节性图的一种变体，其中我们将线条绘制在极坐标平面上。这意味着极坐标图将数据可视化在径向和角度轴上。我们手动限制了径向范围，设置了`range_r=[3,
    7]`。否则，图表会从0开始，且较难看出线条之间的差异。
- en: The conclusions we can draw are similar to those from a normal seasonal plot,
    however, it might take a while to get used to this representation. For example,
    by looking at the year 2014, we immediately see that unemployment is highest in
    the first quarter of the year.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以得出的结论与常规季节性图类似，但可能需要一段时间才能适应这种表示方式。例如，通过查看2014年，我们可以立即看到失业率在第一季度最高。
- en: Creating interactive visualizations
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建交互式可视化
- en: 'In the first recipe, we gave a short preview of creating interactive visualizations
    in Python. In this recipe, we will show how to create interactive line plots using
    three different libraries: `cufflinks`, `plotly`, and `bokeh`. Naturally, these
    are not the only available libraries for interactive visualizations. Another popular
    one you might want to investigate further is `altair`.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个食谱中，我们简要预览了如何在Python中创建交互式可视化。在本食谱中，我们将展示如何使用三种不同的库：`cufflinks`、`plotly`和`bokeh`来创建交互式折线图。当然，这些并不是唯一可以用来创建交互式可视化的库。另一个你可能想进一步了解的流行库是`altair`。
- en: The `plotly` library is built on top of **d3.js** (a JavaScript library used
    for creating interactive visualizations in web browsers) and is known for creating
    high-quality plots with a significant degree of interactivity (inspecting values
    of observations, viewing tooltips of a given point, zooming in, and so on). Plotly
    is also the company responsible for developing this library and it provides hosting
    for our visualizations. We can create an infinite number of offline visualizations
    and a few free ones to share online (with a limited number of views per day).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`plotly`库建立在**d3.js**（一个用于在网页浏览器中创建交互式可视化的JavaScript库）之上，因其能够创建高质量的图表并具有高度的交互性（检查观察值、查看某一点的工具提示、缩放等）而闻名。Plotly还是负责开发该库的公司，并提供我们的可视化托管服务。我们可以创建无限数量的离线可视化，并且可以创建少量的免费可视化分享到网上（每个可视化每天有查看次数限制）。'
- en: '`cufflinks` is a wrapper library built on top of `plotly`. It was released
    before `plotly.express` was introduced as part of the `plotly` framework. The
    main advantages of `cufflinks` are:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`cufflinks`是一个建立在`plotly`之上的包装库。在`plotly.express`作为`plotly`框架的一部分发布之前，它已经被发布。`cufflinks`的主要优势是：'
- en: It makes the plotting much easier than pure `plotly`.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使绘图比纯粹的`plotly`更容易。
- en: It enables us to create the `plotly` visualizations directly on top of `pandas`
    DataFrames.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使我们能够直接在`pandas` DataFrame上创建`plotly`可视化。
- en: It contains a selection of interesting specialized visualizations, including
    a special class for quantitative finance (which we will cover in the next recipe).
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它包含了一系列有趣的专业可视化图表，包括一个针对定量金融的特殊类（我们将在下一节中介绍）。
- en: Lastly, `bokeh` is another library for creating interactive visualizations,
    aiming particularly for modern web browsers. Using `bokeh`, we can create beautiful
    interactive graphics, from simple line plots to complex interactive dashboards
    with streaming datasets. The visualizations of `bokeh` are powered by JavaScript,
    but actual knowledge of JavaScript is not explicitly required for creating the
    visualizations.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`bokeh`是另一个用于创建交互式可视化的库，特别面向现代网页浏览器。通过使用`bokeh`，我们可以创建美观的交互式图形，从简单的折线图到复杂的交互式仪表板，支持流式数据集。`bokeh`的可视化由JavaScript驱动，但实际的JavaScript知识并不是创建可视化的必要条件。
- en: In this recipe, we will create a few interactive line plots using Microsoft’s
    stock price from 2020\.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用2020年的微软股票价格创建一些交互式折线图。
- en: How to do it…
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现…
- en: 'Execute the following steps to download Microsoft’s stock prices and create
    interactive visualizations:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以下载微软的股票价格并创建交互式可视化：
- en: 'Import the libraries and initialize the notebook display:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入库并初始化笔记本显示：
- en: '[PRE15]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Download Microsoft’s stock prices from 2020 and calculate simple returns:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载2020年的微软股票价格并计算简单收益：
- en: '[PRE16]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Create the plot using `cufflinks`:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`cufflinks`创建图表：
- en: '[PRE17]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Running the code creates the following plot:'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行代码会生成以下图表：
- en: '![](../Images/B18112_03_11.png)'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](../Images/B18112_03_11.png)'
- en: 'Figure 3.11: Example of time series visualization using cufflinks'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3.11：使用cufflinks的时间序列可视化示例
- en: With the plots generated using `cufflinks` and `plotly`, we can hover over the
    line to see the tooltip containing the date of the observation and the exact value
    (or any other available information). We can also select a part of the plot that
    we would like to zoom in on for easier analysis.
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用`cufflinks`和`plotly`生成的图表时，我们可以将鼠标悬停在折线图上，查看包含观察日期和确切值（或任何其他可用信息）的工具提示。我们还可以选择图表的某个部分进行缩放，以便更方便地进行分析。
- en: 'Create the plot using `bokeh`:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`bokeh`创建图表：
- en: '[PRE18]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Executing the code generates the following plot:'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行代码会生成以下图表：
- en: '![](../Images/B18112_03_12.png)'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](../Images/B18112_03_12.png)'
- en: 'Figure 3.12: Microsoft’s adjusted stock prices visualized using Bokeh'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3.12：使用Bokeh可视化的微软调整后的股票价格
- en: By default, the `bokeh` plot comes not only with the tooltip and zooming functionalities,
    but also the range slider. We can use it to easily narrow down the range of dates
    that we would like to see in the plot.
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认情况下，`bokeh`图表不仅具有工具提示和缩放功能，还包括范围滑块。我们可以使用它轻松缩小希望在图表中查看的日期范围。
- en: 'Create the plot using `plotly.express`:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`plotly.express`创建图表：
- en: '[PRE19]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Running the code results in the following visualization:'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行代码会产生以下可视化效果：
- en: '![](../Images/B18112_03_13.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B18112_03_13.png)'
- en: 'Figure 3.13: Example of time series visualization using plotly'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.13：使用plotly的时间序列可视化示例
- en: In *Figure 3.13*, you can see an example of the interactive tooltip, which is
    useful for identifying particular observations within the analyzed time series.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图3.13*中，您可以看到交互式工具提示的示例，这对于识别分析时间序列中的特定观测值非常有用。
- en: How it works…
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: In the first step, we imported the libraries and initialized the `notebook`
    display for `bokeh` and the offline mode for `cufflinks`. Then, we downloaded
    Microsoft’s stock prices from 2020, calculated simple returns using the adjusted
    close price, and only kept those two columns for further plotting.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一步中，我们导入了库并初始化了`bokeh`的`notebook`显示和`cufflinks`的离线模式。然后，我们下载了2020年微软的股价数据，使用调整后的收盘价计算了简单收益率，并仅保留了这两列以供进一步绘图。
- en: In the third step, we created the first interactive visualization using `cufflinks`.
    As mentioned in the introduction, thanks to `cufflinks`, we can use the `iplot`
    method directly on top of the `pandas` DataFrame. It works similarly to the original
    `plot` method. Here, we indicated that we wanted to create subplots in one column,
    sharing the x-axis. The library handled the rest and created a nice and interactive
    visualization.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在第三步中，我们使用`cufflinks`创建了第一个交互式可视化。如介绍中所提到的，得益于`cufflinks`，我们可以直接在`pandas` DataFrame上使用`iplot`方法。它的工作方式类似于原始的`plot`方法。在这里，我们指示要在一列中创建子图，并共享x轴。该库处理了其余的部分，并创建了一个漂亮且互动性强的可视化。
- en: In *Step 4*, we created a line plot using `bokeh`. We did not use the pure `bokeh`
    library, but an official wrapper around pandas—`pandas_bokeh`. Thanks to it, we
    could access the `plot_bokeh` method directly on top of the `pandas` DataFrame
    to simplify the process of creating the plot.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤4*中，我们使用`bokeh`创建了一个折线图。我们没有使用纯`bokeh`库，而是使用了一个围绕pandas的官方封装——`pandas_bokeh`。得益于此，我们可以直接在`pandas`
    DataFrame上访问`plot_bokeh`方法，从而简化了图表创建的过程。
- en: Lastly, we used the `plotly.express` framework, which is now officially part
    of the `plotly` library (it used to be a standalone library). Using the `px.line`
    function, we can easily create a simple, yet interactive line plot.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用了`plotly.express`框架，它现在是`plotly`库的一部分（之前是一个独立的库）。使用`px.line`函数，我们可以轻松地创建一个简单但交互性强的折线图。
- en: There’s more…
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: While using the visualizations to tell a story or presenting the outputs of
    our analyses to stakeholders or a non-technical audience, there are a few techniques
    that might improve the plot’s ability to convey a given message. Annotations are
    one of those techniques and we can easily add them to the plots generated with
    `plotly` (we can do so with other libraries as well).
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用可视化讲述故事或向利益相关者或非技术观众展示分析结果时，有一些技巧可以提高图表传达给定信息的能力。注释就是其中一种技巧，我们可以轻松地将它们添加到`plotly`生成的图表中（我们也可以在其他库中做到这一点）。
- en: 'We show the required steps below:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在下面展示了所需的步骤：
- en: 'Import the libraries:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入库：
- en: '[PRE20]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Define the annotations for the `plotly` plot:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`plotly`图表定义注释：
- en: '[PRE21]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The dictionaries contain a few elements that might be worthwhile to explain:'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 字典包含了一些值得解释的元素：
- en: '`x`/`y`—The location of the annotation on the x- and y-axes respectively'
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x`/`y`—注释在x轴和y轴上的位置'
- en: '`text`—The text of the annotation'
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`text`—注释的文本'
- en: '`font`—The font’s formatting'
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`font`—字体的格式'
- en: '`arrowhead`—The shape of the arrowhead we want to use'
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`arrowhead`—我们希望使用的箭头形状'
- en: '`ax`/`ay`—The offset along the x- and y-axes from the indicated point'
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ax`/`ay`—从指定点开始的x轴和y轴上的偏移量'
- en: We frequently use the offset to make sure that the annotations are not overlapping
    with each other or with other elements of the plot.
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们经常使用偏移量来确保注释不会与彼此或图表的其他元素重叠。
- en: After defining the annotations, we can simply add them to the plot.
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 定义完注释后，我们可以简单地将它们添加到图表中。
- en: 'Update the layout of the plot and show it:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新图表的布局并显示它：
- en: '[PRE22]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Running the snippet generates the following plot:'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行代码片段会生成以下图表：
- en: '![](../Images/B18112_03_14.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B18112_03_14.png)'
- en: 'Figure 3.14: Time series visualization with added annotations'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.14：带有注释的时间序列可视化
- en: Using the annotations, we have marked the dates when the market started to decline
    due to the COVID-19 pandemic, as well as when it started to recover and rise again.
    The dates used for annotations were selected simply by viewing the plot.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 使用注释，我们标记了市场因COVID-19大流行而开始下跌的日期，以及开始恢复和再次上涨的日期。用于注释的日期是通过查看图表简单选取的。
- en: See also
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: '[https://bokeh.org/](https://bokeh.org/)—For more information about `bokeh`.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://bokeh.org/](https://bokeh.org/)—有关`bokeh`的更多信息。'
- en: '[https://altair-viz.github.io/](https://altair-viz.github.io/)—You can also
    inspect `altair`, another popular Python library for interactive visualizations.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://altair-viz.github.io/](https://altair-viz.github.io/)—你还可以查看`altair`，这是另一个流行的Python交互式可视化库。'
- en: '[https://plotly.com/python/](https://plotly.com/python/)—`plotly`''s Python
    documentation. The library is also available for other programming languages such
    as R, MATLAB, or Julia.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://plotly.com/python/](https://plotly.com/python/)—`plotly`的Python文档。该库也可用于其他编程语言，如R、MATLAB或Julia。'
- en: Creating a candlestick chart
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建蜡烛图
- en: A candlestick chart is a type of financial graph, used to describe a given security’s
    price movements. A single candlestick (typically corresponding to one day, but
    a different frequency is possible) combines the **open**, **high**, **low**,and
    **close** (**OHLC**) prices.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 蜡烛图是一种金融图表，用于描述给定证券的价格波动。单个蜡烛图（通常对应一天，但也可以是其他频率）结合了**开盘价**、**最高价**、**最低价**和**收盘价**（**OHLC**）。
- en: 'The elements of a bullish candlestick (where the close price in a given time
    period is higher than the open price) are presented in *Figure 3.15*:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 看涨蜡烛图的元素（在给定时间段内收盘价高于开盘价）如*图 3.15*所示：
- en: '![](../Images/B18112_03_15.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B18112_03_15.png)'
- en: 'Figure 3.15: Diagram of a bullish candlestick'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.15：看涨蜡烛图示意图
- en: For a bearish candlestick, we should swap the positions of the open and close
    prices. Typically, we would also change the candle’s color to red.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 对于看跌蜡烛图，我们应该交换开盘价和收盘价的位置。通常，我们还会将蜡烛的颜色改为红色。
- en: In comparison to the plots introduced in the previous recipes, candlestick charts
    convey much more information than a simple line plot of the adjusted close price.
    That is why they are often used in real trading platforms, and traders use them
    for identifying patterns and making trading decisions.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面介绍的图表相比，蜡烛图传达的信息比简单的调整后收盘价折线图要多得多。这就是为什么它们常用于实际交易平台，交易者通过它们识别模式并做出交易决策的原因。
- en: In this recipe, we also add moving average lines (which are one of the most
    basic technical indicators), as well as bar charts representing volume.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们还添加了移动平均线（它是最基本的技术指标之一），以及表示成交量的柱状图。
- en: Getting ready
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'In this recipe, we will download Twitter’s (adjusted) stock prices for the
    year 2018\. We will use Yahoo Finance to download the data, as described in *Chapter
    1,* *Acquiring Financial Data*. Follow these steps to get the data for plotting:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将下载Twitter 2018年的（调整后的）股价。我们将使用Yahoo Finance下载数据，正如*第1章*《获取金融数据》中所描述的那样。按照以下步骤获取绘图所需的数据：
- en: 'Import the libraries:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入库：
- en: '[PRE23]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Download the adjusted prices:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载调整后的价格：
- en: '[PRE24]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: How to do it…
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现…
- en: 'Execute the following steps to create an interactive candlestick chart:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以创建交互式蜡烛图：
- en: 'Import the libraries:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入库：
- en: '[PRE25]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Create the candlestick chart using Twitter’s stock prices:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Twitter的股价创建蜡烛图：
- en: '[PRE26]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Add volume and moving averages to the figure:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向图表添加成交量和移动平均线：
- en: '[PRE27]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Display the plot:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示图表：
- en: '[PRE28]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We can observe the following plot (it is interactive in the notebook):'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以观察到以下图表（在笔记本中是交互式的）：
- en: '![](../Images/B18112_03_16.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B18112_03_16.png)'
- en: 'Figure 3.16: Candlestick plot of Twitter’s stock prices in 2018'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.16：2018年Twitter股价的蜡烛图
- en: In the plot, we can see that the **exponential moving average** (**EMA**) adapts
    to the changes in prices much faster than the **simple moving average** (**SMA**).
    Some discontinuities in the chart are caused by the fact that we are using daily
    data, and there is no data for weekends/bank holidays.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在图表中，我们可以看到**指数移动平均**（**EMA**）比**简单移动平均**（**SMA**）对价格变化的适应速度更快。图表中的一些不连续性是由于我们使用的是日数据，并且周末/节假日没有数据。
- en: How it works…
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: In the first step, we imported the required libraries and indicated that we
    wanted to use the offline mode of `cufflinks` and `plotly`.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一步中，我们导入了所需的库，并指定我们希望使用`cufflinks`和`plotly`的离线模式。
- en: As an alternative to running `cf.go_offline()` every time, we can also modify
    the settings to always use the offline mode by running `cf.set_config_file(offline=True)`.
    We can then view the settings using `cf.get_config_file()`.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 作为每次运行`cf.go_offline()`的替代方法，我们也可以通过运行`cf.set_config_file(offline=True)`来修改设置，始终使用离线模式。然后，我们可以使用`cf.get_config_file()`查看设置。
- en: In *Step 2*, we created an instance of a `QuantFig` object by passing a DataFrame
    containing the input data, as well as some arguments for the title and legend’s
    position. We could have created a simple candlestick chart by running the `iplot`
    method of `QuantFig` immediately afterward.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤2*中，我们通过传入包含输入数据的 DataFrame 以及一些参数（如标题和图例位置），创建了一个`QuantFig`对象的实例。之后，我们本可以直接运行`QuantFig`的`iplot`方法来创建一个简单的蜡烛图。
- en: In *Step 3*, we added two moving average lines by using the `add_sma`/`add_ema`
    methods. We decided to consider 20 periods (days, in this case). By default, the
    averages are calculated using the `close` column, however, we can change this
    by providing the `column` argument.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤3*中，我们通过使用`add_sma`/`add_ema`方法添加了两条移动平均线。我们决定考虑20个周期（在本例中为天数）。默认情况下，平均值是使用`close`列计算的，但我们可以通过提供`column`参数来更改此设置。
- en: The difference between the two moving averages is that the exponential one puts
    more weight on recent prices. By doing so, it is more responsive to new information
    and reacts faster to any changes in the general trend.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 两条移动平均线的区别在于，指数加权移动平均线对最近的价格赋予了更多的权重。通过这样做，它对新信息更为敏感，并且能更快地对整体趋势的变化做出反应。
- en: Lastly, we displayed the plot using the `iplot` method.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用`iplot`方法显示了图表。
- en: There’s more…
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'As mentioned in the chapter’s introduction, there are often multiple ways we
    can do the same task in Python, often using different libraries. We will also
    show how to create candlestick charts using pure `plotly` (in case you do not
    want to use a wrapper library such as `cufflinks`) and `mplfinance`, a standalone
    expansion to `matplotlib` dedicated to plotting financial data:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 正如本章引言所提到的，通常在 Python 中执行相同任务有多种方式，通常使用不同的库。我们还将展示如何使用纯`plotly`（如果你不想使用像`cufflinks`这样的封装库）和`mplfinance`（`matplotlib`的一个独立扩展，专门用于绘制金融数据）来创建蜡烛图：
- en: 'Import the libraries:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入库：
- en: '[PRE29]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Create a candlestick chart using pure `plotly`:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用纯`plotly`创建蜡烛图：
- en: '[PRE30]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Running the snippet results in the following plot:'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行代码片段会生成以下图表：
- en: '![](../Images/B18112_03_17.png)'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](../Images/B18112_03_17.png)'
- en: 'Figure 3.17: An example of a candlestick chart generated using plotly'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 3.17：使用 plotly 生成的蜡烛图示例
- en: The code is a bit lengthy, but in reality, it is quite straightforward. We needed
    to pass an object of class `go.Candlestick` as the `data` argument for the figure
    defined using `go.Figure`. Then, we just added the title and the label for the
    y-axis using the `update_layout` method.
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这段代码有点长，但实际上非常简洁。我们需要传入一个`go.Candlestick`类的对象作为图形的`data`参数，图形则通过`go.Figure`来定义。然后，我们使用`update_layout`方法添加了标题和
    y 轴标签。
- en: What is convenient about the `plotly` implementation of the candlestick chart
    is that it comes with a range slider, which we can use to interactively narrow
    down the displayed candlesticks to the period that we want to investigate in more
    detail.
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`plotly`实现的蜡烛图的便利之处在于，它配有一个范围滑块，我们可以用它交互式地缩小显示的蜡烛图范围，从而更详细地查看我们感兴趣的时间段。'
- en: 'Create a candlestick chart using `mplfinance`:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`mplfinance`创建蜡烛图：
- en: '[PRE31]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Running the code generated the following plot:'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行代码生成了以下图表：
- en: '![](../Images/B18112_03_18.png)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B18112_03_18.png)'
- en: 'Figure 3.18: An example of a candlestick chart generated using mplfinance'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.18：使用 mplfinance 生成的蜡烛图示例
- en: We used the `mav` argument to indicate we wanted to create two moving averages,
    10- and 20-day ones. Unfortunately, at this moment, it is not possible to add
    exponential variants. However, we can add additional plots to the figure using
    the `mpf.make_addplot` helper function. We also indicated that we wanted to use
    a style resembling the one used by Yahoo Finance.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了`mav`参数来指示我们想要创建两条移动平均线，分别为10天和20天的平均线。不幸的是，目前无法添加指数加权的变体。不过，我们可以使用`mpf.make_addplot`辅助函数向图形中添加额外的图表。我们还指示希望使用类似于
    Yahoo Finance 风格的样式。
- en: You can use the command `mpf.available_styles()` to display all the available
    styles.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用命令`mpf.available_styles()`来显示所有可用的样式。
- en: See also
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: 'Some useful references:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 一些有用的参考资料：
- en: '[https://github.com/santosjorge/cufflinks](https://github.com/santosjorge/cufflinks)—The
    GitHub repository of `cufflinks`'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/santosjorge/cufflinks](https://github.com/santosjorge/cufflinks)—`cufflinks`的
    GitHub 仓库'
- en: '[https://github.com/santosjorge/cufflinks/blob/master/cufflinks/quant_figure.py](https://github.com/santosjorge/cufflinks/blob/master/cufflinks/quant_figure.py)—The
    source code of `cufflinks` might be helpful for getting more information on the
    available methods (different indicators and settings)'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/santosjorge/cufflinks/blob/master/cufflinks/quant_figure.py](https://github.com/santosjorge/cufflinks/blob/master/cufflinks/quant_figure.py)——`cufflinks`的源代码可能对获取更多关于可用方法（不同指标和设置）的信息有帮助。'
- en: '[https://github.com/matplotlib/mplfinance](https://github.com/matplotlib/mplfinance)—The
    GitHub repository of `mplfinance`'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/matplotlib/mplfinance](https://github.com/matplotlib/mplfinance)——`mplfinance`的GitHub代码库。'
- en: '[https://github.com/matplotlib/mplfinance/blob/master/examples/addplot.ipynb](https://github.com/matplotlib/mplfinance/blob/master/examples/addplot.ipynb)—A
    Notebook with examples of how to add extra information to plots generated with
    `mplfinance`'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/matplotlib/mplfinance/blob/master/examples/addplot.ipynb](https://github.com/matplotlib/mplfinance/blob/master/examples/addplot.ipynb)——这是一个包含如何向`mplfinance`生成的图表中添加额外信息的示例的Notebook。'
- en: Summary
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have covered various ways of visualizing financial (and
    not only) time series. Plotting the data is very helpful in getting familiar with
    the analyzed time series. We can identify some patterns (for example, trends or
    changepoints) that we might subsequently want to confirm with statistical tests.
    Visualizing data can also help to spot some outliers (extreme values) in our series.
    This brings us to the topic of the next chapter, that is, automatic pattern identification
    and outlier detection.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了可视化金融（以及非金融）时间序列的各种方法。绘制数据对于熟悉分析的时间序列非常有帮助。我们可以识别一些模式（例如，趋势或变更点），这些模式可能需要通过统计测试进行验证。数据可视化还可以帮助我们发现序列中的一些异常值（极端值）。这将引出下一章的主题，即自动模式识别和异常值检测。
