["```py\n> V0 <- 100; nu <- 0.1; sigma <- 0.2\n\n```", "```py\n> dt <- 1 / 252; Time <- 1\n\n```", "```py\n> M <- Time / dt\n\n```", "```py\n> n <- 10000\n\n```", "```py\n> set.seed(117)\n\n```", "```py\n> val <- rnorm(n*M,\n+   mean = (nu - sigma^2 / 2) * dt, \n+   sd   = sigma * dt^0.5)\n\n```", "```py\n> dlnV <- matrix(val, M, n)\n\n```", "```py\n> V <- V0 * exp(apply(dlnV, 2, cumsum))\n\n```", "```py\n> matplot(x = seq(0 + dt, Time, dt), y = V[, 1:5], type = 's', lty = 1, +    xlab = 'Time',\n+    ylab = 'Firm value trajectories',\n+    main = 'Trajectories of firm values in the Merton model')\n\n```", "```py\n> r <- 0.05; K <- 80\n\n```", "```py\n> D <- exp(-r * Time) * mean((pmin(V[M, ], K)))\n\n```", "```py\n> D\n[1] 75.73553\n\n```", "```py\n> install.packages(\"fOptions\"); library(fOptions)\n\n```", "```py\n> V0 - GBSOption(TypeFlag = \"c\", S = V0, X = K, Time = Time, r = r,\n+\nb =\nr, sigma = sigma)@price\n\n```", "```py\n[1] 75.41116\n\n```", "```py\n> Time <- seq(0.1, 10, 0.1)\n\n```", "```py\n> D <- V0 - GBSOption(TypeFlag = \"c\", S = V0, X = K, Time = Time, r = r,\n+\nb = r,\n\nsigma = sigma)@price\n\n```", "```py\n> matplot(x = Time, y = creditspreads, type = 'l', xlab = 'Maturity',\n+    ylab = 'Credit spreads',\n+    main = 'Term structure of credit spreads in the Merton model')\n\n```", "```py\n> library(sde)\n\n```", "```py\n> Time <- 1; dt <- 1/252; M <- Time / dt\n\n```", "```py\n> lambda <- sde.sim(X0 = 0.1, delta = dt,T = Time, N = M,\n+     theta = c (0.05, 0.5, 0.2), model = \"CIR\")\n\n```", "```py\n> n <- 5\n> set.seed(117); val <- rpois(n * (M + 1), lambda)\n\n```", "```py\n> dN <- matrix(val, M + 1, n)\n\n```", "```py\n> N <- apply(dN, 2, cumsum)\n\n```", "```py\n> matplot(x = seq(0, Time, dt), y = N[, 1:5], type = 's', xlab = 'Time',\n+    ylab = \"'Number of defaults' process trajectories\",\n+    main = 'Trajectories of Cox processes ')\n\n```", "```py\n> library(copula)\n> norm.cop <- normalCopula(0.7)\n\n```", "```py\n> set.seed(117); u1 <- rCopula(500, norm.cop)\n\n```", "```py\n> t.cop <- tCopula(0.7, df = 4)\n\n```", "```py\n> set.seed(117); u2 <- rCopula(500, t.cop)\n\n```", "```py\n> par(mfcol = c(1, 2))\n> plot(u1, main = 'Scatter graphs of random variable pairs generated by Gaussian copula')\n> plot(u2, main = 'Scatter graphs of random variable pairs generated by t-copula')\n\n```", "```py\n> fit.ml <- fitCopula(norm.cop, u1, method = \"ml\")\n\n```", "```py\n> fit.ml\nfitCopula() estimation based on 'maximum likelihood'\nand a sample of size 500.\n Estimate Std. Error z value Pr(>|z|) \nrho.1  0.68583    0.01936   35.43   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nThe maximized loglikelihood is  164.8\nOptimization converged\nNumber of loglikelihood evaluations:\nfunction gradient\n 28        3\n\n```", "```py\n> library(CreditMetrics)\n> lgd <- 0.5\n> rc <- c( \"A\", \"B\", \"D\")\n> M <- matrix(c(85, 13, 2, 5, 80, 15, 0, 0, 100 ) /100, 3, 3,\n+          dimnames = list(rc, rc), byrow = TRUE)\n\n```", "```py\n> cm.cs(M, lgd)\n A          B\n0.01005034 0.07796154\n\n```"]