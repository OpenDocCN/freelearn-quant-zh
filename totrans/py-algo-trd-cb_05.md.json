["```py\n$ brew install ta-lib\n```", "```py\n$ tar -xzf ta-lib-0.4.0-src.tar.gz \n```", "```py\n$ cd ta-lib/\n```", "```py\n$ ./configure --prefix=/usr \n```", "```py\n$ make\n```", "```py\n$ sudo make install\n```", "```py\n>>> import pandas as pd\n>>> import talib\n>>> from pyalgotrading.broker.broker_connection_zerodha import BrokerConnectionZerodha\n>>> from pyalgotrading.utils.func import plot_candlesticks_chart, PlotType\n```", "```py\n>>> api_key = \"<your-api-key>\"\n>>> api_secret = \"<your-api-secret>\"\n>>> broker_connection = BrokerConnectionZerodha(api_key, \n                                                api_secret)\n```", "```py\nInstalling package kiteconnect via pip. This may take a while...\nPlease login to this link to generate your request token: https://kite.trade/connect/login?api_key=<your-api-key>&v=3\n```", "```py\n>>> request_token = \"<your-request-token>\"\n>>> broker_connection.set_access_token(request_token)\n```", "```py\n>>> instrument = broker_connection.get_instrument('NSE', \n                                                  'TATASTEEL')\n>>> historical_data = \\\n        broker_connection.get_historical_data(\n                                instrument=instrument, \n                                candle_interval='minute', \n                                start_date='2020-01-01 12:00:00', \n                                end_date='2020-01-01 14:00:00')\n>>> historical_data\n```", "```py\n                    timestamp   open   high    low  close volume\n  0 2020-01-01 12:00:00+05:30 467.00 467.30 467.00 467.15   5694\n  1 2020-01-01 12:01:00+05:30 467.15 467.50 467.10 467.35  10852\n  2 2020-01-01 12:02:00+05:30 467.35 467.45 467.20 467.45   4171\n  3 2020-01-01 12:03:00+05:30 467.50 467.50 467.35 467.45   2897\n...                       ...    ...    ...    ...    ...    ...\n117 2020-01-01 13:57:00+05:30 469.70 469.70 469.55 469.60   9442\n118 2020-01-01 13:58:00+05:30 469.60 469.70 469.50 469.60   7609\n119 2020-01-01 13:59:00+05:30 469.60 469.60 469.50 469.50   8155\n120 2020-01-01 14:00:00+05:30 469.50 469.60 469.45 469.60   6973\n```", "```py\n>>> sma_9 = talib.SMA(historical_data['close'], \n                      timeperiod=9)\n>>> sma_9\n```", "```py\n0             NaN\n1             NaN\n2             NaN\n3             NaN\n4             NaN\n5             NaN\n6             NaN\n7             NaN\n8      467.927778\n9      468.100000\n10     468.211111\n11     468.400000\n          ...    \n117    469.738889\n118    469.744444\n119    469.716667\n120    469.716667\n```", "```py\n>>> indicators = [\n    {\n       'name': 'SMA 9',\n       'data': sma_9,\n       'extra': {\n           'mode': 'lines',\n           'line': {\n               'color': 'gray'\n            }\n        }\n    }\n]\n>>> plot_candlesticks_chart(data=historical_data,\n                            plot_type=PlotType.JAPANESE, \n```", "```py\n                           indicators=indicators, \n                           caption='Trend Indicator: '\n                           'Simple Moving Average | '\n                           'NSE:TATASTEEL | '\n                           '1st Jan, 2020 | '\n                           'Candle Interval: 1 Minute')\n```", "```py\n>>> ema_9 = talib.EMA(historical_data['close'], \n                      timeperiod=9)\n>>> ema_9\n```", "```py\n0             NaN\n1             NaN\n2             NaN\n3             NaN\n4             NaN\n5             NaN\n6             NaN\n7             NaN\n8      467.927778\n9      468.082222\n10     468.135778\n11     468.338622\n          ...    \n117    469.728790\n118    469.703032\n119    469.662426\n120    469.649941\n```", "```py\n>>> indicators = [\n    {\n        'name': 'EMA 9',\n        'data': ema_9, \n        'extra': {\n            'mode': 'lines',\n            'line': {\n                'color': 'gray'\n            }\n        }\n    }\n]\n>>> plot_candlesticks_chart(data=historical_data, \n                            plot_type=PlotType.JAPANESE, \n                            indicators=indicators, \n                            caption='Trend Indicator: '\n                            'Exponential Moving Average | '\n                            'NSE:TATASTEEL | '\n                            '1st Jan, 2020 | '\n                            'Candle Interval: 1 Minute')\n```", "```py\n>>> macd_line, macd_signal, macd_histogram = \\\n                            talib.MACD(historical_data['close'],\n                                       fastperiod=12,\n                                       slowperiod=26,\n                                       signalperiod=9)\n>>> pd.DataFrame({\n    'Line': macd_line,\n    'Signal': macd_signal, \n    'Histogram': macd_histogram\n})\n```", "```py\n        Line   Signal Histogram\n0        NaN      NaN       NaN\n1        NaN      NaN       NaN\n2        NaN      NaN       NaN\n3        NaN      NaN       NaN\n4        NaN      NaN       NaN\n...      ...      ...       ...\n116 0.075136 0.087038  -0.011901\n117 0.057580 0.081146  -0.023566\n118 0.043170 0.073551  -0.030381\n119 0.023410 0.063523  -0.040113\n120 0.015639 0.053946  -0.038307\n```", "```py\n>>> indicators = [\n    {\n        'name': 'MACD Line',\n        'data': macd_line,\n        'extra': {\n            'mode': 'lines',\n            'line': {\n                'width': 1\n            }\n        }\n    },\n    {\n        'name': 'MACD Signal',\n        'data': macd_signal,\n        'extra': {\n            'mode': 'lines',\n            'line': {\n                'width': 1\n            }\n        }\n    },\n    {\n        'name': 'MACD Histogram',\n        'data': macd_histogram,\n        'extra': {\n            'mode': 'lines',\n            'line': {\n                'dash': 'dot',\n                'width': 2\n            }\n        }\n    }\n]\n\n>>> plot_candlesticks_chart(data=historical_data, \n                            plot_type=PlotType.JAPANESE, \n                            indicators=indicators,\n                            plot_indicators_separately=True, \n                            caption='Trend Indicator: Moving '\n                            'Average Convergence/Divergence | '\n                            'NSE:TATASTEEL | '\n                            '1st Jan, 2020 | '\n                            'Candle Interval: 1 Minute', \n                            plot_height=700)\n```", "```py\n>>> psar = talib.SAR(historical_data['high'], \n                     historical_data['low'], \n                     acceleration=0.02, \n                     maximum=0.2)\n>>> psar\n```", "```py\n0             NaN\n1      467.000000\n2      467.010000\n3      467.019800\n4      467.029404\n          ...    \n116    469.175426\n117    469.208409\n118    469.240073\n119    469.270470\n120    469.299651\n```", "```py\n>>> indicators = [\n    {\n        'name': 'PSAR',\n        'data': psar,\n        'extra': {\n            'mode': 'lines',\n            'line': {\n                'dash': 'dot',\n                'width': 2,\n                'color': 'purple'\n            }\n        }\n    }\n]\n\n>>> plot_candlesticks_chart(data=historical_data, \n                            plot_type=PlotType.JAPANESE,\n                            indicators=indicators,\n                            caption='Trend Indicator: '\n                            'Parabolic Stop and Reverse | '\n                            'NSE:TATASTEEL | '\n                            '1st Jan, 2020 | '\n                            'Candle Interval: 1 Minute')\n```", "```py\n>>> rsi_14 = talib.RSI(historical_data['close'], \n                       timeperiod=14)\n>>> rsi_14\n```", "```py\n0            NaN\n1            NaN\n2            NaN\n3            NaN\n          ...\n12           NaN\n13           NaN\n14     70.886076\n15     69.932757\n16     69.932757\n17     64.873530\n18     61.976413\n         ...    \n116    48.449209\n117    48.449209\n118    48.449209\n119    45.997672\n120    48.788323\n```", "```py\n>>> indicators = [\n    {\n        'name': 'RSI (14)', \n        'data': rsi_14,\n        'extra': {\n            'mode': 'lines',\n            'line': {\n                'width': 2,\n                'color': 'purple'\n            }\n        }\n    }\n]\n\n>>> plot_candlesticks_chart(data=historical_data, \n                            plot_type=PlotType.JAPANESE, \n                            indicators=indicators, \n                            plot_indicators_separately=True,\n                            caption='Momentum Indicator: '\n                            'Relative Strength Index | '\n                            'NSE:TATASTEEL | '\n                            '1st Jan, 2020 | '\n                            'Candle Interval: 1 Minute')\n```", "```py\n>>> slowk, slowd = talib.STOCH(historical_data['high'], \n                               historical_data['low'], \n                               historical_data['close'], \n                               fastk_period=5, \n                               slowk_period=3, \n                               slowk_matype=0, \n                               slowd_period=3, \n                               slowd_matype=0)\n>>> pd.DataFrame({\n    'Slow K': slowk, \n    'Slow D': slowd\n})\n```", "```py\n       Slow K    Slow D\n  0       NaN       NaN\n  1       NaN       NaN\n  2       NaN       NaN\n  3       NaN       NaN\n  4       NaN       NaN\n  5       NaN       NaN\n  6       NaN       NaN\n  7       NaN       NaN\n  8 70.514283 69.296302\n  9 71.113411 70.921500\n 10 61.606578 67.744757\n 11 67.613252 66.777747\n 12 52.662272 60.627367\n...       ...       ...\n116 63.626374 77.374847\n117 44.102564 64.420024\n118 20.000000 42.576313\n119 13.333333 25.811966\n120 15.757576 16.363636\n```", "```py\n>>> indicators = [\n    {\n        'name': 'Slow K',\n        'data': slowk, \n        'extra': {\n            'mode':'lines', \n            'line': {\n                'width': 2\n            }\n        }\n    },\n    {\n        'name': 'Slow D',\n        'data': slowd, \n        'extra': {\n            'mode': 'lines',\n            'line': {\n                'width': 2\n            }\n        }\n    }\n]\n\n>>> plot_candlesticks_chart(data=historical_data, \n                            plot_type=PlotType.JAPANESE, \n                            indicators=indicators, \n                            plot_indicators_separately=True, \n                            caption='Trend Indicator: '\n                            'Stochastic Oscillator (Slow) | '\n                            'NSE:TATASTEEL | '\n                            '1st Jan, 2020 | '\n                            'Candle Interval: 1 Minute', \n                            plot_height=700)\n```", "```py\n>>> upperband, middleband, lowerband = talib.BBANDS(\n                                        historical_data['close'], \n                                        timeperiod=5, \n                                        nbdevup=2, \n                                        nbdevdn=2, \n                                        matype=0)\n>>> pd.DataFrame({\n    'Upperband': upperband,\n    'Middleband': middleband,\n    'Lowerband': lowerband\n})\n```", "```py\n      Upperband Middleband   Lowerband\n  0         NaN        NaN         NaN\n  1         NaN        NaN         NaN\n  2         NaN        NaN         NaN\n  3         NaN        NaN         NaN\n  4  468.138749     467.50  466.861251\n...         ...        ...         ...\n116  470.071661     469.83  469.588339\n117  470.080666     469.78  469.479334\n118  470.020666     469.72  469.419334\n119  469.959839     469.65  469.340161\n120  469.660000     469.58  469.500000\n```", "```py\n>>> indicators = [\n    {\n        'name': 'Upperband',\n        'data': upperband, \n        'extra': {\n            'mode': 'lines', \n            'line': {\n                'width': 1\n            }\n        }\n    },\n    {\n        'name': 'Middleband',\n        'data': middleband, \n        'extra': {\n            'mode':'lines',\n            'line': {\n                'width': 1\n            }\n        }\n    },\n    {\n        'name': 'Lowerband',\n        'data': lowerband, \n        'extra': {\n            'mode': 'lines',\n            'line': {\n                'width': 1\n            }\n        }\n    }\n]\n\n>>> plot_candlesticks_chart(data=historical_data, \n                            plot_type=PlotType.JAPANESE, \n                            indicators=indicators, \n                            caption='Volatility Indicator: '\n                            'Bollinger Bands | '\n                            'NSE:TATASTEEL | '\n                            '1st Jan, 2020 | '\n                            'Candle Interval: 1 Minute')\n```", "```py\n>>> atr_14 = talib.ATR(historical_data['high'], \n                       historical_data['low'], \n                       historical_data['close'], \n                       timeperiod=14)\n>>> atr_14\n```", "```py\n0           NaN\n1           NaN\n2           NaN\n3           NaN\n4           NaN\n5           NaN\n6           NaN\n7           NaN\n8           NaN\n9           NaN\n10          NaN\n11          NaN\n12          NaN\n13          NaN\n14     0.575000\n15     0.555357\n16     0.562117\n17     0.550538\n18     0.529071\n         ...   \n116    0.375902\n117    0.359766\n118    0.348354\n119    0.330614\n120    0.317713\n```", "```py\n>>> indicators = [\n    {\n        'name': 'ATR (14)',\n        'data': atr_14,\n        'extra': {\n            'mode': 'lines',\n            'line': {\n                'width': 2,\n                'color': 'purple'\n            }\n        }\n    }\n]\n\n>>> plot_candlesticks_chart(data=historical_data,\n                            plot_type=PlotType.JAPANESE,\n                            indicators=indicators,\n                            plot_indicators_separately=True, \n                            caption='Volatility Indicator: '\n                            'Average True Range | '\n                            'NSE:TATASTEEL | '\n                            '1st Jan, 2020 | '\n                            'Candle Interval: 1 Minute', \n                            plot_height=700)\n```", "```py\n>>> obv = talib.OBV(historical_data['close'], \n                    historical_data['volume'])\n>>> obv\n```", "```py\n0        5694.0\n1       16546.0\n2       20717.0\n3       20717.0\n4      211302.0\n         ...   \n116    406508.0\n117    406508.0\n118    406508.0\n119    398353.0\n120    405326.0\n```", "```py\n>>> indicators = [\n    {\n        'name': 'On Balance Volume',\n        'data': obv,\n        'extra': {\n            'mode': 'lines',\n            'line': {\n                'width': 2,\n                'color': 'purple'\n            }\n        }\n    }\n]\n\n>>> plot_candlesticks_chart(data=historical_data, \n                            plot_type=PlotType.JAPANESE, \n                            indicators=indicators,\n                            plot_indicators_separately=True, \n                            caption='Volume Indicator: '\n                            'On Balance Volume | '\n                            'NSE:TATASTEEL | '\n                            '1st Jan, 2020 | '\n                            'Candle Interval: 1 Minute', \n                            plot_height=700)\n```", "```py\n>>> def VWAP(hist_data_df):\n        \"\"\"\n        Returns VWAP computed over the given historical data\n        hist_data_df: A pandas DataFrame of historical data with \n                        columns\n        'timestamp', 'high', 'low', 'close' and 'volume'\n        \"\"\"\n        hist_data_df['date'] = \\\n               hist_data_df['timestamp'].apply(lambda x: x.date())\n        unique_dates = sorted(set(hist_data_df['date']))\n        vwap = []\n\n        \"\"\"\n        Compute vwap for each day's data and append it to vwap \n        variable\n        \"\"\"\n        for i, date in enumerate(unique_dates):\n            day_df = hist_data_df.loc[hist_data_df['date'] == date]\n            typical_price_day_df = (day_df.high + day_df.low + \n                                    day_df.close)/3\n            vwap_day = list(((typical_price_day_df * \n                              day_df.volume).cumsum()) /                     \n                              day_df.volume.cumsum())\n            vwap += vwap_day\n\n        return pd.Series(vwap)\n```", "```py\n>>> vwap = VWAP(historical_data)\n>>> vwap\n```", "```py\n0      467.150000\n1      467.259311\n2      467.280925\n3      467.299623\n4      468.085910\n          ...    \n116    468.965162\n117    468.967599\n118    468.969499\n119    468.971309\n120    468.972893\n```", "```py\n>>> indicators = [\n    {\n        'name': 'VWAP',\n        'data': vwap, \n        'extra': {\n            'mode': 'lines',\n            'line': {\n                'width': 2, \n                'color': 'purple'\n            }\n        }\n    }\n]\n\n>>> plot_candlesticks_chart(data=historical_data, \n                            plot_type=PlotType.JAPANESE, \n                            indicators=indicators,\n                            plot_indicators_separately=True,\n                            caption='Volume Indicator: '\n                            'Volume Weighted Average Price | '\n                            'NSE:TATASTEEL | '\n                            '1st Jan, 2020 | '\n                            'Candle Interval: 1 Minute',\n                            plot_height=700)\n```"]