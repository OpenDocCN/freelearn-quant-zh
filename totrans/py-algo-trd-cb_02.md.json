["```py\n>>> from pyalgotrading.broker.broker_connection_zerodha import BrokerConnectionZerodha\n```", "```py\n>>> api_key = \"<your-api-key>\"\n>>> api_secret = \"<your-api-secret>\"\n>>> broker_connection = BrokerConnectionZerodha(api_key, api_secret)\n```", "```py\nInstalling package kiteconnect via pip...\nPlease login to this link to generate your request token: https://kite.trade/connect/login?api_key=<your-api-key>&v=3\n```", "```py\n>>> request_token = \"<your-request-token>\"\n>>> broker_connection.set_access_token(request_token)\n```", "```py\nhttps://127.0.0.1/?request_token=&action=login&status=success\n```", "```py\nhttps://127.0.0.1/?request_token=H06I6Ydv95y23D2Dp7NbigFjKweGwRP7&action=login&status=success\n```", "```py\n>>> instruments = broker_connection.get_all_instruments()\n>>> instruments\n```", "```py\n  instrument_token exchange_token tradingsymbol name last_price expiry strike tick_size lot_size instrument_type segment exchange\n0 267556358 1045142 EURINR20AUGFUT EURINR 0.0 2020-08-27 0.0 0.0025 1 FUT BCD-FUT BCD\n1 268660998 1049457 EURINR20DECFUT EURINR 0.0 2020-12-29 0.0 0.0025 1 FUT BCD-FUT BCD\n2 266440966 1040785 EURINR20JULFUT EURINR 0.0 2020-07-29 0.0 0.0025 1 FUT BCD-FUT BCD\n3 266073606 1039350 EURINR20JUNFUT EURINR 0.0 2020-06-26 0.0 0.0025 1 FUT BCD-FUT BCD\n4 265780742 1038206 EURINR20MAYFUT EURINR 0.0 2020-05-27 0.0 0.0025 1 FUT BCD-FUT BCD\n... ... ... ... ... ... ... ... ... ... ... ... ...\n64738 978945 3824 ZODJRDMKJ ZODIAC JRD-MKJ 0.0 0.0 0.0500 1 EQ NSE NSE\n64739 2916865 11394 ZOTA ZOTA HEALTH CARE 0.0 0.0 0.0500 1 EQ NSE NSE\n64740 7437825 29054 ZUARI-BE ZUARI AGRO CHEMICALS 0.0 0.0 0.0500 1 EQ NSE NSE\n64741 979713 3827 ZUARIGLOB ZUARI GLOBAL 0.0 0.0 0.0500 1 EQ NSE NSE\n64742 4514561 17635 ZYDUSWELL ZYDUS WELLNESS 0.0 0.0 0.0500 1 EQ NSE NSE\n\n64743 rows Ã— 12 columns\n```", "```py\n>>> print(f'Total instruments: {len(instruments)}')\n```", "```py\nTotal instruments: 64743\n```", "```py\n>>> broker_connection.get_instrument(segment='NSE', tradingsymbol='TATASTEEL')\n```", "```py\nsegment: NSE\nexchange: NSE\ntradingsymbol: TATASTEEL\nbroker_token: 895745\ntick_size: 0.05\nlot_size: 1\nexpiry: \nstrike_price: 0.0\n```", "```py\n>>> exchanges = instruments.exchange.unique()\n>>> print(exchanges)\n```", "```py\n['BCD' 'BSE' 'NSE' 'CDS' 'MCX' 'NFO']\n```", "```py\n>>> segments = instruments.segment.unique()\n>>> print(segments)\n```", "```py\n['BCD-FUT' 'BCD' 'BCD-OPT' 'BSE' 'INDICES' 'CDS-FUT' 'CDS-OPT' 'MCX-FUT' 'MCX-OPT' 'NFO-OPT' 'NFO-FUT' 'NSE']\n```", "```py\n>>> from pyalgotrading.broker.broker_connection_zerodha import BrokerConnectionZerodha\n```", "```py\n>>> list(BrokerConnectionZerodha.ORDER_TRANSACTION_TYPE_MAP.keys())\n```", "```py\n[<BrokerOrderTransactionTypeConstants.BUY: 'BUY'>,\n <BrokerOrderTransactionTypeConstants.SELL: 'SELL'>]\n```", "```py\n>>> list(BrokerConnectionZerodha.ORDER_VARIETY_MAP.keys())\n```", "```py\n[<BrokerOrderVarietyConstants.MARKET: 'ORDER_VARIETY_MARKET'>,\n <BrokerOrderVarietyConstants.LIMIT: 'ORDER_VARIETY_LIMIT'>,\n <BrokerOrderVarietyConstants.STOPLOSS_LIMIT: 'ORDER_VARIETY_STOPLOSS_LIMIT'>,\n <BrokerOrderVarietyConstants.STOPLOSS_MARKET: 'ORDER_VARIETY_STOPLOSS_MARKET'>]\n```", "```py\n>>> list(BrokerConnectionZerodha.ORDER_TYPE_MAP.keys())\n```", "```py\n[<BrokerOrderTypeConstants.REGULAR: 'ORDER_TYPE_REGULAR'>,\n <BrokerOrderTypeConstants.BRACKET: 'ORDER_TYPE_BRACKET'>,\n <BrokerOrderTypeConstants.COVER: 'ORDER_TYPE_COVER'>,\n <BrokerOrderTypeConstants.AMO: 'ORDER_TYPE_AFTER_MARKET_ORDER'>]\n```", "```py\n>>> list(BrokerConnectionZerodha.ORDER_CODE_MAP.keys())\n```", "```py\n[<BrokerOrderCodeConstants.INTRADAY: 'ORDER_CODE_INTRADAY'>,\n <BrokerOrderCodeConstants.DELIVERY: 'ORDER_CODE_DELIVERY_T0'>]\n```", "```py\n>>> from pyalgotrading.constants import *\n```", "```py\n>>> instrument = broker_connection.get_instrument(segment='NSE', \n                                        tradingsymbol='TATASTEEL')\n```", "```py\n>>> order_id = broker_connection.place_order(\n                   instrument=instrument, \n                   order_transaction_type= \\\n                       BrokerOrderTransactionTypeConstants.BUY,\n                   order_type=BrokerOrderTypeConstants.REGULAR, \n                   order_code=BrokerOrderCodeConstants.INTRADAY,\n                   order_variety= \\\n                       BrokerOrderVarietyConstants.MARKET, \n                   quantity=1)\n>>> order_id\n```", "```py\n191209000001676\n```", "```py\n>>> from pyalgotrading.constants import *\n```", "```py\n>>> instrument = broker_connection.get_instrument(segment='NSE', \n                                        tradingsymbol='ICICIBANK')\n```", "```py\n>>> ltp = broker_connection.get_ltp(instrument)\n```", "```py\n>>> order_id = broker_connection.place_order(\n                   instrument=instrument,\n                   order_transaction_type= \\\n                       BrokerOrderTransactionTypeConstants.BUY,\n                   order_type=BrokerOrderTypeConstants.BRACKET, \n                   order_code=BrokerOrderCodeConstants.INTRADAY, \n                   order_variety=BrokerOrderVarietyConstants.LIMIT,\n                   quantity=1, price=ltp-1, \n                   stoploss=2, target=2)\n>>> order_id\n```", "```py\n191212001268839\n```", "```py\n>>> from pyalgotrading.constants import *\n```", "```py\n>>> instrument = broker_connection.get_instrument(segment='NSE', \n                                        tradingsymbol='AXISBANK')\n```", "```py\n>>> order_id = broker_connection.place_order(\n                   instrument=instrument,\n                   order_transaction_type= \\\n                       BrokerOrderTransactionTypeConstants.SELL,\n                   order_type=BrokerOrderTypeConstants.REGULAR,\n                   order_code=BrokerOrderCodeConstants.DELIVERY,\n                   order_variety= \\\n                       BrokerOrderVarietyConstants.MARKET, \n                    quantity=1)\n>>> order_id\n```", "```py\n191212001268956\n```", "```py\n>>> from pyalgotrading.constants import *\n```", "```py\n>>> instrument = broker_connection.get_instrument(segment='NSE', \n                                        tradingsymbol='HDFCBANK')\n```", "```py\n>>> ltp = broker_connection.get_ltp(instrument)\n```", "```py\n>>> order_id = broker_connection.place_order(\n                   instrument=instrument,\n                   order_transaction_type= \\\n                       BrokerOrderTransactionTypeConstants.SELL,\n                   order_type=BrokerOrderTypeConstants.BRACKET,\n                   order_code=BrokerOrderCodeConstants.INTRADAY, \n                   order_variety=BrokerOrderVarietyConstants.LIMIT,\n                   quantity=1, price=ltp+1, stoploss=2, target=2)\n>>> order_id\n```", "```py\n191212001269042\n```", "```py\n>>> equity_margins = broker_connection.get_margins('equity')\n>>> equity_margins\n```", "```py\n{'enabled': True,\n 'net': 1623.67,\n 'available': {'adhoc_margin': 0,\n  'cash': 1623.67,\n  'opening_balance': 1623.67,\n  'live_balance': 1623.67,\n  'collateral': 0,\n  'intraday_payin': 0},\n 'utilised': {'debits': 0,\n  'exposure': 0,\n  'm2m_realised': 0,\n  'm2m_unrealised': 0,\n  'option_premium': 0,\n  'payout': 0,\n  'span': 0,\n  'holding_sales': 0,\n  'turnover': 0,\n  'liquid_collateral': 0,\n  'stock_collateral': 0}}\n```", "```py\n>>> equity_funds = broker_connection.get_funds('equity')\n>>> equity_funds\n```", "```py\n1623.67\n```", "```py\n>>> commodity_margins = get_margins(commodity')\n>>> commodity_margins\n```", "```py\n{'enabled': True,\n 'net': 16215.26,\n 'available': {'adhoc_margin': 0,\n  'cash': 16215.26,\n  'opening_balance': 16215.26,\n  'live_balance': 16215.26,\n  'collateral': 0,\n  'intraday_payin': 0},\n 'utilised': {'debits': 0,\n  'exposure': 0,\n  'm2m_realised': 0,\n  'm2m_unrealised': 0,\n  'option_premium': 0,\n  'payout': 0,\n  'span': 0,\n  'holding_sales': 0,\n  'turnover': 0,\n  'liquid_collateral': 0,\n  'stock_collateral': 0}}\n```", "```py\n>>> commodity_funds = broker_connection.get_funds('commodity')\n>>> commodity_funds\n```", "```py\n0\n```", "```py\n>>> entry_price = 1245\n>>> brokerage = (0.01 * 1245)/100\n>>> print(f'Brokerage charged per trade: {brokerage:.4f}')\n```", "```py\nBrokerage charged per trade: 0.1245\n```", "```py\n>>> total_brokerage = 10 * (0.01 * 1245) / 100\n>>> print(f'Total Brokerage charged for 10 trades: \\\n            {total_brokerage:.4f}')\n```", "```py\nTotal Brokerage charged for 10 trades: 1.2450\n```", "```py\n>>> entry_price = 1245\n>>> brokerage = (0.1 * 1245)/100\n>>> print(f'Government taxes charged per trade: {brokerage:.4f}')\n```", "```py\nGovernment taxes charged per trade: 1.2450\n```", "```py\n>>> total_brokerage = 10 * (0.1 * 1245) / 100\n>>> print(f'Total Government taxes charged for 10 trades: \\\n            {total_brokerage:.4f}')\n```", "```py\nTotal Government taxes charged for 10 trades: 12.4500\n```"]