- en: Algorithmic Trading - Paper Trading
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 算法交易 - 模拟交易
- en: After building algorithmic trading strategies in [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml),
    *Algorithmic Trading Strategies – Coding Step by Step*, and successfully backtesting
    them with satisfactory results in the previous chapter, the next step is to paper
    trade the strategies in live markets.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 8 章](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml) *算法交易策略 - 编码 - 逐步* 中构建算法交易策略，并在上一章成功进行了令人满意的回测后，下一步是在实时市场中模拟交易这些策略。
- en: '**Paper trading** is the method of executing a trading strategy in the live
    market hours by simply recording trades coming from the strategy execution in
    real time. The trades are not executed with real money via a broker. Earlier,
    this recording of trades was done on paper, hence the name **paper trading**.
    These virtual trades can be used for analyzing the risk and return metrics. Typical
    paper trading metrics include **profit and loss** (**P&L**), maximum drawdown,
    the count of total trades, winning trades, losing trades, long trades and short
    trades, average profit per winning and losing trade, and more. Paper trading should
    be performed for at least a few trading days and until these metrics meet the
    necessary requirements, the entire process should be repeated, which consists
    of updating the strategy parameters and/or strategy implementation, followed by
    backtesting and paper trading.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**模拟交易** 是在实时市场小时内执行交易策略的方法，仅通过实时记录来自策略执行的交易。这些交易不通过经纪人使用真实资金执行。之前，这些交易记录是在纸上完成的，因此称为
    **纸上交易**。这些虚拟交易可用于分析风险和回报指标。典型的模拟交易指标包括 **盈亏**（**P&L**）、最大回撤、总交易次数、盈利交易、亏损交易、多头交易和空头交易、每个盈利和亏损交易的平均利润等。应至少进行几个交易日的模拟交易，并在这些指标满足必要要求之前，整个过程应重复进行，包括更新策略参数和/或策略实施，然后进行回测和模拟交易。'
- en: The underlying idea behind paper trading is that the trading strategy can be
    executed in the live market, in a fashion almost similar to real trading, but
    without risking real money. Paper trading helps to ensure that the market scenarios
    from the past, for which backtesting was run, are still valid. If the market scenarios
    from the past do not prevail currently, even if backtesting results are profitable,
    paper trading results may turn out to be otherwise. This would suggest that the
    strategy parameters and/or strategy implementation needs more work before executing
    the strategy on real money.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟交易背后的基本思想是，交易策略可以在实时市场中执行，几乎与实际交易相似，但不冒真实资金的风险。模拟交易有助于确保过去的市场情景，用于回测的情景仍然有效。如果过去的市场情景当前不再存在，即使回测结果盈利，模拟交易结果可能会相反。这表明在将策略用于真实资金之前，策略参数和/或策略实施需要更多工作。
- en: 'For paper trading, a strategy configuration is required. It consists of multiple
    parameters, some of which are as follows:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 对于模拟交易，需要一个策略配置。其中包含多个参数，其中一些如下：
- en: '**Start and end times**: The time duration within the current day for which
    paper trading should be run.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开始和结束时间**：在当前一天内进行模拟交易的时间段。'
- en: '**Financial instrument(s)**: One or more financial instruments for which paper
    trading should be performed.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**金融工具**：应进行模拟交易的一个或多个金融工具。'
- en: '**Candle interval**: One of the various possible candle intervals – for example,
    `1 minute`, `15 minutes`, `hour`, or `day`.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**蜡烛间隔**：各种可能的蜡烛间隔之一 - 例如，`1 分钟`、`15 分钟`、`小时` 或 `日`。'
- en: '**Strategy specific parameters**: Values for custom parameters defined in the
    strategy.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**策略特定参数**：策略中定义的自定义参数的值。'
- en: '**Strategy mode**: Either intraday or delivery. Intraday strategies punch intraday
    orders, which are squared-off at the end of the day. Delivery strategies punch
    delivery orders, which don''t square-off at the end of the day and get carried
    forward to the next trading day.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**策略模式**：即日内或交割。日内策略进行日内订单，这些订单在一天结束时平仓。交割策略进行交割订单，这些订单不会在一天结束时平仓，并会延续到下一个交易日。'
- en: A paper trading engine is required to perform paper trading on a given strategy.
    In this chapter, you will use the paper trading engine provided by AlgoBulls ([https://algobulls.com](https://algobulls.com)),
    an algorithmic trading platform that makes its services available via its **developer
    options**. It provides a Python package called `pyalgotrading` ([https://github.com/algobulls/pyalgotrading](https://github.com/algobulls/pyalgotrading))
    to make use of these services.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 执行模拟交易需要一个模拟交易引擎。在本章中，您将使用 AlgoBulls 提供的模拟交易引擎（[https://algobulls.com](https://algobulls.com)），这是一个通过其**开发者选项**提供服务的算法交易平台。它提供了一个名为
    `pyalgotrading` 的 Python 包（[https://github.com/algobulls/pyalgotrading](https://github.com/algobulls/pyalgotrading)）来使用这些服务。
- en: 'You have already coded two algorithmic trading strategies in [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml),
    *Algorithmic Trading Strategies – Coding Step by Step*. Recall that the strategy
    descriptions are as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经在[第 8 章](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml)，*算法交易策略 - 逐步编码*，中编写了两种算法交易策略。请回想策略描述如下：
- en: '**EMA-Regular-Order strategy**: A strategy based on the technical indicator
    EMA and regular orders. (The first six recipes of [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml), *Algorithmic
    Trading Strategies – Coding Step by Step*.)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**EMA-Regular-Order 策略**：基于 EMA 技术指标和常规订单的策略。（[第 8 章](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml)的前六个配方，*算法交易策略
    - 逐步编码*。）'
- en: '**MACD-Bracket-Order strategy**: A strategy based on the technical indicator
    of MACD and bracket orders. (The latter six recipes of [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml), *Algorithmic
    Trading Strategies – Coding Step by Step*.)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MACD-Bracket-Order 策略**：基于 MACD 技术指标和括号订单的策略。（[第 8 章](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml)的后六个配方，*算法交易策略
    - 逐步编码*。）'
- en: 'These strategies are also available as part of a Python package, `pyalgostrategypool`.
    You can install it using `pip`, as follows: `$ pip install pyalgostrategypool`.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这些策略也作为 Python 包的一部分提供，`pyalgostrategypool`。您可以使用 `pip` 安装它，如下所示：`$ pip install
    pyalgostrategypool`。
- en: You can also check them out on GitHub ([https://github.com/algobulls/pyalgostrategypool](https://github.com/algobulls/pyalgostrategypool)).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在 GitHub 上查看它们（[https://github.com/algobulls/pyalgostrategypool](https://github.com/algobulls/pyalgostrategypool)）。
- en: As you have followed [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml), *Algorithmic
    Trading Strategies – Coding Step by Step*, you have uploaded these two strategies
    to your AlgoBulls account. In this chapter, you will fetch these strategies from
    your AlgoBulls account and perform paper trading on them. After paper trading,
    you will get strategy execution logs and various reports – namely, a P&L report,
    a statistics report, and an order history. These logs and reports help validate
    the strategy performance and prepare it for real trading. By using `pyalgotrading`,
    you ensure that you focus on developing and validating the strategy via paper
    trading without worrying about the ecosystem needed for the strategy execution.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 由于您已经按照[第 8 章](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml)，*算法交易策略 - 逐步编码*，将这两种策略上传到您的
    AlgoBulls 账户。在本章中，您将从您的 AlgoBulls 账户中获取这些策略并对其进行模拟交易。在模拟交易后，您将获得策略执行日志和各种报告 -
    即损益报告、统计报告和订单历史。这些日志和报告有助于验证策略的性能，并为实际交易做准备。通过使用 `pyalgotrading`，您可以确保在模拟交易中专注于开发和验证策略，而不必担心策略执行所需的生态系统。
- en: This chapter includes step-by-step recipes for both the previously mentioned
    strategies, from setting up a connection with the AlgoBulls platform, fetching
    the strategy, and running paper trading jobs to fetching the execution logs and
    fetching various types of reports.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包括了逐步配方，涵盖了之前提到的两种策略，从与 AlgoBulls 平台建立连接、获取策略、运行模拟交易任务到获取执行日志和各种类型的报告。
- en: 'In this chapter, you will cover the following recipes:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下内容：
- en: EMA-Regular-Order strategy – fetching the strategy
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EMA-Regular-Order 策略 – 获取该策略
- en: EMA-Regular-Order strategy – paper trading the strategy
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EMA-Regular-Order 策略 – 模拟交易该策略
- en: EMA-Regular-Order strategy – fetching paper trading logs in real time
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EMA-Regular-Order 策略 – 实时获取模拟交易日志
- en: EMA-Regular-Order strategy – fetching a paper trading report – P&L table
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EMA-Regular-Order 策略 – 获取模拟交易报告 – 损益表
- en: EMA-Regular-Order strategy  – fetching a paper trading report – statistics table
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EMA-Regular-Order 策略 – 获取模拟交易报告 – 统计表
- en: EMA-Regular-Order strategy  – fetching a paper trading report – order history
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EMA-Regular-Order 策略 – 获取模拟交易报告 – 订单历史
- en: MACD-Bracket-Order strategy – fetching the strategy
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MACD-Bracket-Order策略 – 获取策略
- en: MACD-Bracket-Order strategy – paper trading the strategy
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MACD-Bracket-Order策略 – 模拟交易策略
- en: MACD-Bracket-Order strategy – fetching paper trading logs in real time
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MACD-Bracket-Order策略 – 获取实时模拟交易日志
- en: MACD-Bracket-Order strategy – fetching a paper trading report – P&L table
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MACD-Bracket-Order策略 – 获取模拟交易报告 – P&L表
- en: MACD-Bracket-Order strategy  – fetching a paper trading report – statistics
    table
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MACD-Bracket-Order策略  – 获取模拟交易报告 – 统计表
- en: MACD-Bracket-Order strategy  – fetching a paper trading report - order history
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MACD-Bracket-Order策略 – 获取模拟交易报告 - 订单历史
- en: Paper trading is meaningful only if run during the live market hours, unlike
    backtesting, which can be run at any time. Please make sure you try out the recipes
    of this chapter during the live market hours.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在实时市场小时内运行的模拟交易才有意义，与可以在任何时间运行的回测不同。请确保您在实时市场小时内尝试本章的配方。
- en: Technical requirements
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'You will need the following to successfully execute the recipes in this chapter:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要成功执行本章的配方，您需要以下内容：
- en: Python 3.7+
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3.7+
- en: 'Python package:'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python软件包：
- en: '`pyalgotrading` (`$ pip install pyalgotrading`)'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pyalgotrading`（`$ pip install pyalgotrading`）'
- en: The latest Jupyter notebook for this chapter can be found on GitHub at [https://github.com/PacktPublishing/Python-Algorithmic-Trading-Cookbook/tree/master/Chapter10](https://github.com/PacktPublishing/Python-Algorithmic-Trading-Cookbook/tree/master/Chapter10).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的最新Jupyter笔记本可在GitHub上找到，网址为[https://github.com/PacktPublishing/Python-Algorithmic-Trading-Cookbook/tree/master/Chapter10](https://github.com/PacktPublishing/Python-Algorithmic-Trading-Cookbook/tree/master/Chapter10)。
- en: EMA-Regular-Order strategy – fetching the strategy
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: EMA-Regular-Order策略 – 获取策略
- en: In this recipe, you will fetch the strategy class, `StrategyEMARegularOrder`,
    from your account on the AlgoBulls platform, which you will have uploaded while
    going through the *EMA-Regular-Order strategy – uploading the strategy on the
    AlgoBulls trading platform* recipe in [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml),
    *Algorithmic Trading Strategies – Coding Step by Step*. This recipe starts by
    setting up a connection to the AlgoBulls platform, querying all the available
    strategies in your account, and fetching details of the required strategy class,
    `StrategyEMARegularOrder`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个步骤中，您将从您在AlgoBulls平台上的帐户中获取策略类`StrategyEMARegularOrder`，这是您在[第8章](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml)中通过*EMA-Regular-Order策略
    – 在AlgoBulls交易平台上上传策略*步骤中上传的。这个步骤首先建立到AlgoBulls平台的连接，查询您帐户中所有可用的策略，并获取所需策略类`StrategyEMARegularOrder`的详细信息。
- en: Make sure you have gone through the first six recipes of [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml), *Algorithmic
    Trading Strategies – Coding Step by Step**, *to get a complete picture of the
    strategy class used, `StrategyEMARegularOrder`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您已经完成[第8章](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml)中的前六个配方，*Algorithmic
    Trading Strategies – Coding Step by Step*，以获取使用的策略类`StrategyEMARegularOrder`的完整图片。
- en: How to do it…
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'We execute the following steps for this recipe:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为本配方执行以下步骤：
- en: 'Import the necessary modules:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入必要的模块：
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create a new AlgoBulls connection object:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的AlgoBulls连接对象：
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Fetch the authorization URL:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取授权URL：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We get the following output:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Log in to the preceding link with your AlgoBulls credentials, fetch your token,
    and set it here (refer to *Appendix II* for more details):'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的AlgoBulls凭据登录到上述链接，获取您的令牌，并在此处设置它（有关更多详情，请参阅*附录II*）：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Fetch and display all strategies you have created and uploaded so far:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取并显示到目前为止您创建和上传的所有策略：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We get the following output. Your output may differ (make sure you have followed
    the recipes in [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml), *Algorithmic
    Trading Strategies – Coding Step by Step*, to get a similar output):'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出。您的输出可能不同（确保您已经按照[第8章](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml)中的配方，*Algorithmic
    Trading Strategies – Coding Step by Step*，来获得类似的输出）：
- en: '![](img/e47eed73-4a5b-4ef8-8637-cd5dfd8ef7f9.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e47eed73-4a5b-4ef8-8637-cd5dfd8ef7f9.png)'
- en: 'Fetch and display the strategy code for the first strategy:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取并显示第一个策略的策略代码：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We get the following output (your output may differ):'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出（您的输出可能不同）：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Before paper trading your strategy, you can inspect it to ensure you have the
    right strategy:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模拟交易您的策略之前，您可以检查它以确保您有正确的策略：
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We get the following output:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The complete output is not shown here. Please visit the following link to read
    the complete output: [https://github.com/algobulls/pyalgostrategypool/blob/master/pyalgostrategypool/strategy_ema_regular_order.py](https://github.com/algobulls/pyalgostrategypool/blob/master/pyalgostrategypool/strategy_ema_regular_order.py)
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有显示完整的输出。请访问以下链接以阅读完整的输出：[https://github.com/algobulls/pyalgostrategypool/blob/master/pyalgostrategypool/strategy_ema_regular_order.py](https://github.com/algobulls/pyalgostrategypool/blob/master/pyalgostrategypool/strategy_ema_regular_order.py)
- en: How it works…
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何运作…
- en: You import the necessary modules in *step 1*. In *step 2*, an instance of the
    `AlgoBullsConnection` class is created, named `algobulls_connection`. In *step
    3*, you get the authorization URL using the `get_authorization_url()` method of
    the `algobulls_connection` object. This prints the authorization URL. You should
    visit this URL from your web browser to sign in to the AlgoBulls platform and
    fetch your developer access token. (You can find more details with screenshots
    in *Appendix II* on fetching developer access tokens from the AlgoBulls platform.)
    You copy the access token and set it in *step 4* using the `set_access_token()`
    method of `algobulls_connection`. If the token is accepted, a successful connection
    is set up with the AlgoBulls platform.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 您在*第 1 步*中导入了必要的模块。在*第 2 步*中，创建了 `AlgoBullsConnection` 类的一个实例，命名为 `algobulls_connection`。在*第
    3 步*中，您使用 `algobulls_connection` 对象的 `get_authorization_url()` 方法获取授权 URL。这将打印授权
    URL。您应该从您的 Web 浏览器中访问此 URL，以登录 AlgoBulls 平台并获取您的开发者访问令牌。（您可以在 *附录 II* 中找到有关从 AlgoBulls
    平台获取开发者访问令牌的更多详细信息和截图。）您复制访问令牌，并在*第 4 步*中使用 `algobulls_connection` 的 `set_access_token()`
    方法设置它。如果令牌被接受，则会建立与 AlgoBulls 平台的成功连接。
- en: In *step 5*, you fetch all strategies you have created and uploaded on the AlgoBulls
    platform so far. You use the `get_all_strategies()` method for this step and assign
    it to a new variable, `all_strategies`. This variable is a `pandas.DataFrame`
    object with the `strategyCode` and `strategyName` columns. This table holds information
    on the strategy codes and strategy names you have uploaded previously. If you
    have followed the *EMA-Regular-Order strategy – uploading the strategy on the
    AlgoBulls trading platform* recipe from [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml),
    *Algorithmic Trading Strategies – Coding Step by Step*, you will find a strategy
    with the name `EMA-Regular-Order strategy`. In *step 6*, you assign the strategy
    code of the `EMA-Regular-Order strategy` strategy to a new variable, `strategy_code1`.
    The strategy code is shown in the output of this step. This strategy code is unique
    for every strategy on the AlgoBulls platform.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第 5 步*，您获取到目前已经在 AlgoBulls 平台上创建并上传的所有策略。您可以使用 `get_all_strategies()` 方法来完成这一步，并将其赋值给一个新变量
    `all_strategies`。这个变量是一个 `pandas.DataFrame` 对象，具有 `strategyCode` 和 `strategyName`
    两列。该表格保存了您之前上传的策略代码和策略名称的信息。如果您按照 [第 8 章](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml)
    中的 *EMA-Regular-Order 策略——将策略上传至 AlgoBulls 交易平台* 这一步骤，您会找到一个名为 `EMA-Regular-Order
    策略` 的策略。在*第 6 步*，您将 `EMA-Regular-Order 策略` 策略的策略代码赋值给一个新变量 `strategy_code1`。该策略代码将显示在此步骤的输出中。这个策略代码对于
    AlgoBulls 平台上的每个策略都是唯一的。
- en: Finally, in *step 7*, you ensure that the strategy referred by `strategy_code1`
    is indeed the one you have uploaded earlier (in the *EMA-Regular-Order strategy
    – uploading the strategy on the AlgoBulls trading platform* recipe in [Chapter
    8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml), *Algorithmic Trading Strategies
    – Coding Step by Step*). You use the `get_strategy_details()` method of the `algobulls_connection`
    object to inspect the strategy. This method takes strategy code as an argument.
    You pass `strategy_code1` here. This method returns the entire class code as a
    string. You assign it to a new variable, `strategy_details1`, and display it.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在*第 7 步*，您确保由 `strategy_code1` 引用的策略确实是您之前上传的策略（在 [第 8 章](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml)
    中的 *EMA-Regular-Order 策略——将策略上传至 AlgoBulls 交易平台* 步骤中，在 *Algorithmic Trading Strategies
    – Coding Step by Step*）。您使用 `algobulls_connection` 对象的 `get_strategy_details()`
    方法来检查策略。此方法以策略代码作为参数。您在这里传递 `strategy_code1`。此方法将整个类代码作为字符串返回。您将其分配给一个新变量 `strategy_details1`，并显示它。
- en: If you would like to change the class code referred to by `strategy_code1`,
    as shown in *step 7*, please refer to the *There's more…* section of the *EMA-Regular-Order
    strategy – uploading the strategy on the AlgoBulls trading platform* recipe in [Chapter
    8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml), *Algorithmic Trading Strategies
    – Coding Step by Step*.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要更改`strategy_code1`所引用的类代码，如*步骤7*所示，请参考[第8章](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml)中*EMA-Regular-Order策略
    - 在AlgoBulls交易平台上上传策略*配方的*There's more…*部分，*算法交易策略 - 逐步编码*。
- en: EMA-Regular-Order strategy – paper trading the strategy
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: EMA-Regular-Order策略 - 对策略进行纸张交易
- en: In this recipe, you will perform paper trading on the `EMA-Regular-Order` strategy.
    You must have fetched this strategy from your account on the AlgoBulls platform
    in the previous recipe. You will leverage the paper trading functionality facilitated
    by `pyalgotrading` for this recipe, which in turn submits a paper trading job
    on the AlgoBulls platform.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，您将在`EMA-Regular-Order`策略上进行纸张交易。您必须在上一个配方中从AlgoBulls平台上的账户中获取此策略。您将利用`pyalgotrading`提供的纸张交易功能进行此配方，该功能反过来在AlgoBulls平台上提交了一份纸张交易作业。
- en: 'Once submitted, paper trading will be run by the AlgoBulls paper trading engine.
    You can query the status any time to know the state of the paper trading job.
    The job goes through the following states, in the following given order:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 提交后，AlgoBulls纸张交易引擎将运行纸张交易。您可以随时查询状态，以了解纸张交易作业的状态。作业按照以下给定顺序经历以下状态：
- en: '`''STARTING''` (intermediate state)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''STARTING''`（中间状态）'
- en: '`''STARTED''` (stable state)'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''STARTED''`（稳定状态）'
- en: '`''STOPPING''` (intermediate state)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''STOPPING''`（中间状态）'
- en: '`''STOPPED''` (stable state)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''STOPPED''`（稳定状态）'
- en: On submitting a job, it starts with an intermediate state, `'STARTING'`. In
    this state, the AlgoBulls paper trading engine will fetch the strategy and get
    the execution environment ready, which may take a couple of minutes. Once done,
    the job moves to the `'STARTED'` state. The paper trading strategy happens in
    this stage. Here, it stays as long as it takes for paper trading to complete.
    Once done, the job moves to an intermediate state, `'STOPPING'`. In this state,
    the AlgoBulls paper trading engine cleans up the resources allocated for this
    job, which usually takes less than a minute. Finally, the job moves to the `'STOPPED'`
    state.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 提交作业后，它将以中间状态`'STARTING'`开始。在此状态下，AlgoBulls纸张交易引擎将获取策略并准备执行环境，这可能需要几分钟的时间。一旦完成，作业将转移到`'STARTED'`状态。纸张交易策略在此阶段发生。在此阶段，它保持不变，直到纸张交易完成。完成后，作业将移动到中间状态`'STOPPING'`。在此状态下，AlgoBulls纸张交易引擎将清理为此作业分配的资源，这通常需要不到一分钟的时间。最后，作业将移动到`'STOPPED'`状态。
- en: If you have already submitted a strategy paper trading job, you cannot submit
    another job for the same strategy until the first job completes. This means you
    have to wait for the first job to move to the `'STOPPED'` state. If the first
    job is long-running and you would like to stop it immediately, you can submit
    a stop job request via `pyalgotrading`. You need to ensure the job is in the `'STARTED'`
    state before submitting the request.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经提交了策略纸张交易作业，则在第一个作业完成之前，不能提交另一个相同策略的作业。这意味着您必须等待第一个作业进入`'STOPPED'`状态。如果第一个作业运行时间较长，并且您希望立即停止它，则可以通过`pyalgotrading`提交停止作业请求。在提交请求之前，您需要确保作业处于`'STARTED'`状态。
- en: 'The following state machine diagram demonstrates the various states and transitions
    of a paper trading job during its lifetime on the AlgoBulls platform:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以下状态机图演示了在AlgoBulls平台上进行纸张交易作业期间的各种状态和转换：
- en: '![](img/9650dbe5-d8ca-4011-b647-973d4263578f.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9650dbe5-d8ca-4011-b647-973d4263578f.png)'
- en: After submitting a paper trading job, you can fetch logs and reports for the
    strategy execution in real time. The logs and reports help validate the strategy
    performance and debug any potential issues.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 提交纸张交易作业后，您可以实时获取策略执行的日志和报告。日志和报告有助于验证策略的性能并调试任何潜在问题。
- en: Make sure you have gone through the first six recipes of [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml), *Algorithmic
    Trading Strategies – Coding Step by Step* to get a complete picture of the strategy
    class used, `StrategyEMARegularORder`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您已经阅读了[第8章](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml)的前六个配方，*算法交易策略 - 逐步编码*，以完全了解所使用的策略类`StrategyEMARegularORder`的完整情况。
- en: Getting ready
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Make sure the `algobulls_connection` and `strategy_code1` objects are available
    in your Python namespace. Refer to the first recipe of this chapter to set up
    the `algobulls_connection` and `strategy_code1` objects.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 确保`algobulls_connection`和`strategy_code1`对象在您的Python命名空间中可用。请参阅本章第一个配方以设置`algobulls_connection`和`strategy_code1`对象。
- en: How to do it…
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'We execute the following steps for this recipe:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们执行以下步骤：
- en: 'Import the necessary modules:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入必要的模块：
- en: '[PRE10]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Search for an instrument using its trading symbol as a keyword. Assign the
    returned object to `instruments`:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用其交易符号作为关键字搜索工具。将返回的对象赋值给`instruments`：
- en: '[PRE11]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We get the following output (your output may differ):'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出（你的输出可能不同）：
- en: '[PRE12]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Get `value` for the instrument of choice from `instruments`:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`instruments`中获取所选工具的`value`：
- en: '[PRE13]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We get the following output:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE14]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Submit a paper trading job for `strategy_code1`:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交一个`strategy_code1`的纸上交易任务：
- en: '[PRE15]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We get the following output:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE16]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Check the status of the submitted paper trading job:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查已提交的纸上交易任务的状态：
- en: '[PRE17]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We get the following output:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE18]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Check the status of the submitted job again after some time:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再过一段时间后再次检查提交的任务的状态：
- en: '[PRE19]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We get the following output:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE20]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: How it works…
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: In *step 1*, you import the `time` class from the `datetime` module and all
    the constants from the `pyalgotrading.constants` module. In *step 2*, you fetch
    the instrument for which you would like to paper trade the strategy, `EMA-Regular-Order
    strategy`, using the `search_instrument()` method of the `algobulls_connection`
    object. The `search_instrument()` method accepts a search string as an argument,
    which should be the trading symbol, in part or complete, of the instrument you
    are interested in. You pass `'SBIN'` here. This function returns a list with details
    of instruments that match the search string. There could be multiple instruments
    that could have the search string in their trading symbols. In *step 3*, you fetch
    the value of the first matched instrument and assign it to a new variable, `instrument`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤1*中，从`datetime`模块中导入`time`类以及从`pyalgotrading.constants`模块中导入所有常量。在*步骤2*中，使用`algobulls_connection`对象的`search_instrument()`方法获取您想要纸上交易策略的工具，`EMA-Regular-Order
    strategy`。`search_instrument()`方法接受一个搜索字符串作为参数，该参数应该是您感兴趣的工具的交易符号的一部分或全部。这里你传递了`'SBIN'`。该函数返回一个包含与搜索字符串匹配的工具详细信息的列表。可能有多个工具的交易符号中可能有搜索字符串。在*步骤3*中，您获取第一个匹配工具的值并将其分配给一个新变量`instrument`。
- en: 'In *step 4*, you submit a paper trading job using the `papertrade()` method
    of the `algobulls_connection()` object. It takes the following arguments:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤4*中，使用`algobulls_connection()`对象的`papertrade()`方法提交一个纸上交易任务。它接受以下参数：
- en: '`strategy_code`: The strategy code of the strategy for which paper trading
    has to be performed. This should be a string. You pass `strategy_code1` here.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`strategy_code`: 要执行纸上交易的策略的策略代码。这应该是一个字符串。你在这里传递了`strategy_code1`。'
- en: '`start_time`: Today''s time from when paper trading should be started. Should
    be a `datetime.time` object. Here, you pass an object holding the value 9 hours
    15 – `time(hour=9, minute=15)`. Refer to the first recipe of this book for details
    on creating a `time` object.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`start_time`: 今天开始纸上交易的时间。应该是一个`datetime.time`对象。在这里，你传递了一个包含值为9小时15分钟的对象 –
    `time(hour=9, minute=15)`。请参阅本书第一个配方以了解如何创建`time`对象的详细信息。'
- en: '`end_time`: Today''s time until when paper trading should be performed. This
    object should hold a time value ahead of the value held by `start_time`. Should
    be a `datetime.time` instance. Here, you pass an object holding the value 15 hours
    30 – `time(hour=15, minute=30)`.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`end_time`: 今天的时间，纸上交易应该执行到什么时候。此对象应该包含一个比`start_time`所持有的值提前的时间值。应该是一个`datetime.time`实例。在这里，你传递一个包含值为15小时30分钟的对象
    – `time(hour=15, minute=30)`。'
- en: '`instrument`: The financial instrument for which paper trading should be run.
    Historical data will be fetched for this instrument. Should be a string. You pass
    `instrument` here.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instrument`: 应该运行纸上交易的金融工具。将为该工具获取历史数据。应该是一个字符串。你在这里传递了`instrument`。'
- en: '`lots`: The number of lots for which paper trading should be performed. This
    should be an integer. The quantity is calculated by the strategy as *number of
    lots *× *lot size of the financial instrument*. You pass `1` here.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lots`: 纸上交易应该执行的手数。这应该是一个整数。数量由策略计算为*手数×金融工具的手数*。你在这里传递了`1`。'
- en: '`strategy_parameters`: The parameter names and values expected by the strategy.
    This should be a dictionary, with `parameter-name` and `parameter-value` as key-value
    pairs. You pass the following parameters here:'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`strategy_parameters`: 策略期望的参数名称和值。这应该是一个字典，其中`parameter-name`和`parameter-value`作为键值对。你在这里传递以下参数：'
- en: '`timeperiod1: 5`'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timeperiod1: 5`'
- en: '`timeperiod2: 12 `'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timeperiod2: 12 `'
- en: (Recall that parameters for EMA-Regular-Order strategy have been defined in
    its `__init__()` method, as shown in the first recipe of [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml), *Algorithmic
    Trading Strategies – Coding Step by Step*).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: （回想一下，EMA-Regular-Order策略的参数已经在其`__init__()`方法中定义，就像[第 8 章](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml)的第一个示例中展示的那样，*按步骤编写算法交易策略*。）
- en: '`candle_interval`: The candle interval for the historical data fetched for
    paper trading. This should be an enum of the type `CandleInterval`. You pass `CandleInterval.MINUTES_15`
    here. (The `CandleInterval` enum provides various enums for candle intervals,
    some of which are `MINUTE_1`, `MINUTES_3` , `MINUTES_5`, `MINUTES_10`, `MINUTES_15`,
    `MINUTES_30`, `HOUR`, and `DAY`.)'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`candle_interval`: 获取用于模拟交易的历史数据的蜡烛图间隔。这应该是一个`CandleInterval`类型的枚举。你在这里传递`CandleInterval.MINUTES_15`。（`CandleInterval`枚举提供各种蜡烛图间隔的枚举，其中一些是`MINUTE_1`、`MINUTES_3`、`MINUTES_5`、`MINUTES_10`、`MINUTES_15`、`MINUTES_30`、`HOUR`和`DAY`。）'
- en: If the job submission is successful, you will see `Success` messages printed
    by the `papertrade()` function.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果任务提交成功，你将会看到`papertrade()`函数打印的`Success`消息。
- en: Once a job is submitted, it takes a while to start. After starting, it may take
    some time to finish depending on the duration of paper trading specified using
    the `start_time` and `end_time` arguments. Usually, paper trading is run for the
    entire trading day, which means the job would be running for 6–8 hours.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦提交了任务，它就需要一段时间才能启动。启动后，根据使用`start_time`和`end_time`参数指定的模拟交易持续时间，可能需要一些时间才能完成。通常，模拟交易在整个交易日运行，这意味着任务将运行
    6-8 小时。
- en: In *step 5*, you fetch the job status using the `get_papertrading_job_status()`
    method of the `algobulls_connection` object. You pass `strategy_code1` as the
    argument here. This method returns a dictionary with a single key-value pair,
    the *data* and the *job* status. If you query the status immediately after placing
    the job, you get `'STARTING'` as the status. In *step 6*, you query the status
    again after some time, and if the job has started, you get the status as `'STARTED'`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 5* 中，你使用`algobulls_connection`对象的`get_papertrading_job_status()`方法获取任务状态。你在这里传递`strategy_code1`作为参数。该方法返回一个带有单个键值对的字典，即*data*和*job*状态。如果在放置任务后立即查询状态，你会得到`'STARTING'`作为状态。在*步骤
    6* 中，你再次查询状态，如果任务已经启动，你会得到状态为`'STARTED'`。
- en: A successful submission implies that the minimum inputs needed to paper trade
    a strategy have been passed in the required format. It, however, does not ensure
    that the strategy will run without errors. The strategy execution may still run
    into errors during paper trading. To debug execution issues, you would need to
    fetch the output logs, which is explained in the next recipe. Possible reasons
    for errors could be either bugs in the strategy class Python code or an incomplete
    `strategy_parameters` dictionary passed to the `papertrade()` function.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 成功的提交意味着已经以所需格式传递了模拟交易策略的最小输入。然而，这并不保证策略会在模拟交易过程中无错误地运行。策略执行仍可能在模拟交易期间遇到错误。要调试执行问题，你需要获取输出日志，这将在下一个示例中解释。导致错误的可能原因可能是策略类
    Python 代码中的错误或者传递给`papertrade()`函数的`strategy_parameters`字典不完整。
- en: There's more…
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'If a job is running for a long time and you would like to stop it before its
    completion, you can use the `stop_papertrading_job()` method of the `algobulls_connection`
    object. This method accepts strategy code as an argument. You pass `strategy_code1`
    here. This method submits a stop request to the AlgoBulls paper trading engine.
    If the request is accepted, you see a `Success` message here:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个任务运行时间很长，而你希望在其完成之前停止它，你可以使用`algobulls_connection`对象的`stop_papertrading_job()`方法。此方法接受策略代码作为参数。你在这里传递`strategy_code1`。该方法向AlgoBulls模拟交易引擎提交停止请求。如果请求被接受，你会看到一个`Success`消息：
- en: '[PRE21]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'If you query the status after submitting the stop request, you get the status
    as `''STOPPING''`:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在提交停止请求后再次查询状态，你会得到状态为`'STOPPING'`：
- en: '[PRE22]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'If you query the status again after some time, and if the job has stopped,
    you get the status as `''STOPPED''`:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一段时间后再次查询状态，如果任务已经停止，你会得到状态为`'STOPPED'`：
- en: '[PRE23]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: EMA-Regular-Order strategy – fetching paper trading logs in real time
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: EMA-Regular-Order策略 - 实时获取模拟交易日志
- en: After submitting a paper trading job on the AlgoBulls platform, the AlgoBulls
    paper trading engine starts executing the strategy. During the execution, every
    event that occurs and decisions taken by the AlgoBulls paper trading engine are
    recorded with exact timestamps in the form of textual logs. Some examples of recorded
    activities include the given strategy config, every new candle generated at regular
    intervals, trades punched by your strategy, the entry and exit of the positions
    created by these trades, waits for new candles, and so on. These logs are quintessential
    in validating the strategy behavior and debugging behavioral or performance issues
    that are frequently encountered while developing a strategy.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在AlgoBulls平台上提交模拟交易作业后，AlgoBulls模拟交易引擎开始执行策略。在执行过程中，AlgoBulls模拟交易引擎记录发生的每一个事件和所采取的决策，并以文本日志的形式记录具有精确时间戳。一些记录的活动示例包括给定策略配置、定期间隔生成的每个新蜡烛、您的策略打出的交易、这些交易创建的持仓的进入和退出、等待新蜡烛等。这些日志在验证策略行为和调试在开发策略时经常遇到的行为或性能问题方面至关重要。
- en: In this recipe, you will fetch paper trading logs for your strategy. The logs
    start coming up as soon as your submitted paper trading job reaches the `'STARTED'`
    state (refer to the preceding recipe for more information on the states of a paper
    trading job). The AlgoBulls platform allows you to fetch logs in real time, even
    while the paper trading job is still going on. You can get insights into the strategy
    execution without having to wait for the paper trading job to complete. This is
    helpful as paper trading jobs are usually long-running. The `pyalgotrading` package
    provides a simple method to fetch the execution logs for a given strategy.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，你将获取你的策略的模拟交易日志。这些日志会在你提交的模拟交易作业达到`'STARTED'`状态时立即出现（有关模拟交易作业状态的更多信息，请参阅前面的配方）。AlgoBulls平台允许你实时获取日志，即使模拟交易作业仍在进行中。你可以在无需等待模拟交易作业完成的情况下了解策略执行情况。这对于模拟交易作业通常是长时间运行的情况非常有帮助。`pyalgotrading`包提供了一个简单的方法来获取给定策略的执行日志。
- en: Make sure you have gone through the first six recipes of [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml),
    *Algorithmic Trading Strategies – Coding Step by Step*, to get a complete picture
    of the strategy class used, `StrategyEMARegularOrder`.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经阅读了[第8章](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml)的前六个配方，*算法交易策略 - 逐步编码*，以获取使用的完整策略类`StrategyEMARegularOrder`的完整图片。
- en: Getting ready
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Make sure the `algobulls_connection` and `strategy_code1` objects are available
    in your Python namespace. Refer to the first recipe of this chapter to set up
    the `algobulls_connection` and `strategy_code1` objects.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 确保`algobulls_connection`和`strategy_code1`对象在你的Python命名空间中可用。请参阅本章的第一个配方，设置`algobulls_connection`和`strategy_code1`对象。
- en: How to do it…
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现…
- en: 'We execute the following steps for this recipe:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以完成此配方：
- en: 'Fetch the paper trading execution logs for `strategy_code1`:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取`strategy_code1`的模拟交易执行日志：
- en: '[PRE24]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We get the following output (your output may differ):'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们获得以下输出（您的输出可能不同）：
- en: '[PRE25]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Fetch the paper trading execution logs for `strategy_code1` again after some
    time:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 过一段时间后，再次获取`strategy_code1`的模拟交易执行日志：
- en: '[PRE26]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We get the following output (your output may differ):'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们获得以下输出（您的输出可能不同）：
- en: '[PRE27]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The complete output is not shown here. Please visit the following link to read
    the complete output: [https://github.com/algobulls/pyalgostrategypool/blob/master/pyalgostrategypool/sample/papertrading/strategy_ema_regular_order/logs.txt](https://github.com/algobulls/pyalgostrategypool/blob/master/pyalgostrategypool/sample/papertrading/strategy_ema_regular_order/logs.txt)
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有显示完整的输出。请访问以下链接阅读完整的输出：[https://github.com/algobulls/pyalgostrategypool/blob/master/pyalgostrategypool/sample/papertrading/strategy_ema_regular_order/logs.txt](https://github.com/algobulls/pyalgostrategypool/blob/master/pyalgostrategypool/sample/papertrading/strategy_ema_regular_order/logs.txt)
- en: How it works…
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: In *step 1*, you use the `get_papertrading_logs()` method of the `algobulls_connection`
    object to fetch the strategy paper trading logs in real time. This method accepts
    strategy code as an argument. You pass `strategy_code1` here. The return data
    is a string. If you try this step immediately after submitting the job, you get
    a string that says the logs are not ready yet (`[2020-07-09 09:14:18] Logs not
    available yet. Please retry in sometime.`). This happens if the paper trading
    job is in the `'STARTING'` state.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *第 1 步*，你使用 `algobulls_connection` 对象的 `get_papertrading_logs()` 方法实时获取策略
    paper trading 日志。此方法接受策略代码作为参数。你在这里传递了 `strategy_code1`。返回的数据是一个字符串。如果在提交作业后立即尝试此步骤，你会得到一个字符串，表示日志尚未准备好（`[2020-07-09
    09:14:18] Logs not available yet. Please retry in sometime.`）。如果 paper trading
    作业处于 `'STARTING'` 状态，则会发生这种情况。
- en: In *step 2*, you fetch the logs again after some time. If the job is out of
    the `'STARTING'` state, you start getting your strategy execution logs. You get
    the entire paper trading logs every time you call the `get_papertrading_logs()`
    function.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *第 2 步*，你会在一段时间后再次获取日志。如果作业不再处于 `'STARTING'` 状态，你就开始获取策略执行日志。每次调用 `get_papertrading_logs()`
    函数时，你都会获取整个 paper trading 日志。
- en: There's more...
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Once the paper trading job moves to the `'STOPPED'` state, no new logs are generated.
    You can fetch the complete logs any time before you submit the next paper trading
    job for the same strategy. If a new paper trading job is submitted (for the same
    strategy), these logs will no longer be accessible via the `get_papertrading_logs()`
    method. You can save the fetched logs to a file if you'd like to refer to it at
    a later point in time.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 paper trading 作业转移到 `'STOPPED'` 状态，就不会生成新的日志。你可以在提交下一个相同策略的 paper trading
    作业之前的任何时候获取完整的日志。如果提交了新的 paper trading 作业（针对相同的策略），则无法再通过 `get_papertrading_logs()`
    方法访问这些日志。如果你想在以后参考它，可以将获取的日志保存到文件中。
- en: EMA-Regular-Order strategy – fetching a paper trading report – profit and loss
    table
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: EMA-Regular-Order 策略 – 获取 paper trading 报告 – 盈亏表
- en: After submitting a paper trading job on the AlgoBulls platform, the AlgoBulls
    paper trading engine starts executing the strategy. During the execution, along
    with the logs, the AlgoBulls paper trading engine also generates a P&L table in
    real time. This table holds information on every trade punched by the strategy.
    It also has details on the mapping between entry and exit orders and the trade
    P&L and cumulative P&L, sorted chronologically, with the latest order first. This
    table gives an insight into the overall strategy performance with the help of
    individual and cumulative P&L numbers. The entry-exit order mapping also helps
    validate the strategy behavior.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在 AlgoBulls 平台提交 paper trading 作业后，AlgoBulls paper trading 引擎开始执行策略。在执行过程中，除了日志之外，AlgoBulls
    paper trading 引擎还实时生成 P&L 表。这张表记录了策略打出的每一笔交易信息。它还有关于入场和出场订单以及交易 P&L 和累计 P&L 之间的映射的详细信息，按时间顺序排序，最新的订单排在最前面。这张表通过个别和累计
    P&L 数字提供了对整体策略表现的洞察。入场-出场订单映射也有助于验证策略行为。
- en: In this recipe, you will fetch the P&L table report for your strategy. This
    report is available as soon as the first trade is punched by your strategy after
    you submit a paper trading job. The AlgoBulls platform allows you to fetch the
    P&L table in real time, even while the paper trading job is still going on. You
    can get insights into the strategy performance without having to wait for the
    paper trading job to complete. This is helpful as paper trading jobs are usually
    long-running. The `pyalgotrading` package provides a simple method to fetch the
    P&L table for a given strategy.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，你将获取你的策略的 P&L 表报告。只要提交 paper trading 作业后，你的策略打出第一笔交易，这份报告就会可用。AlgoBulls
    平台允许你实时获取 P&L 表，即使 paper trading 作业仍在进行中。这样可以让你在 paper trading 作业完成之前就了解策略的表现。这对于
    paper trading 作业通常需要很长时间的情况很有帮助。`pyalgotrading` 包提供了一种简单的方法来获取给定策略的 P&L 表。
- en: Make sure you have gone through the first six recipes of [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml),
    *Algorithmic Trading Strategies – Coding Step by Step*, to get a complete picture
    of the strategy class used, `StrategyEMARegularOrder`.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经通过了 [第 8 章](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml) 的前六个示例，*算法交易策略
    – 逐步编码*，以完全了解所使用的策略类 `StrategyEMARegularOrder`。
- en: Getting ready
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure the `algobulls_connection` and `strategy_code1` objects are available
    in your Python namespace. Refer to the first recipe of this chapter to set up
    the `algobulls_connection` and `strategy_code1` objects.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 确保 `algobulls_connection` 和 `strategy_code1` 对象在你的 Python 命名空间中可用。参考本章的第一个示例设置
    `algobulls_connection` 和 `strategy_code1` 对象。
- en: How to do it…
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Fetch the paper trading P&L report for `strategy_code1`:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 获取`strategy_code1`的模拟交易P&L报告：
- en: '[PRE28]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We get the following output. Your output may differ (note that the following
    output has been split into multiple tables for representation purposes. You will
    see a single wide table in your Jupyter notebook):'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们获得以下输出。你的输出可能会有所不同（请注意以下输出已分成多个表格以表示，你在 Jupyter 笔记本中将看到单个宽表）：
- en: '![](img/52ef91e7-6611-4b11-988f-a0174893590a.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](img/52ef91e7-6611-4b11-988f-a0174893590a.png)'
- en: How it works…
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'In this recipe, you use the `get_papertrading_report_pnl_table()` method of
    the `algobulls_connection` object to fetch the paper trading P&L table in real
    time. This method accepts strategy code as an argument. You pass `strategy_code1`
    here. The return data is a `pandas.DataFrame` object with multiple columns, described
    as follows:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，你使用 `algobulls_connection` 对象的 `get_papertrading_report_pnl_table()` 方法实时获取模拟交易P&L表。此方法接受策略代码作为参数。你在这里传递了
    `strategy_code1`。返回数据是一个 `pandas.DataFrame` 对象，具有多列，描述如下：
- en: '`instrument`: Financial instrument for which trade was entered.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instrument`: 进行交易的金融工具。'
- en: '`entry_timestamp`: The timestamp at which the entry order was placed. (Note
    that it may remain in the `''OPEN''` state for a while before it goes to the `''COMPLETE''`
    state. The time for this state transition can be found using the order history
    table, explained in the sixth recipe of this chapter.)'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`entry_timestamp`: 下达进入订单的时间戳。（注意它可能在进入 `''COMPLETE''` 状态之前保持 `''OPEN''` 状态一段时间。可以使用订单历史表（本章第六个示例中解释）找到此状态转换的时间。）'
- en: '`entry_transaction_type`: The entry order transaction type (either `BUY` or
    `SELL`).'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`entry_transaction_type`: 进入订单的交易类型（可以是 `BUY` 或 `SELL`）。'
- en: '`entry_quantity`: The entry order quantity.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`entry_quantity`: 进入订单数量。'
- en: '`entry_price`: The price at which the entry order gets executed and goes to
    the `''COMPLETE''` state.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`entry_price`: 进入订单执行并进入 `''COMPLETE''` 状态的价格。'
- en: '`exit_timestamp`: The timestamp at which the exit order was placed. (Note that
    it may remain in the `''OPEN''` state for a while before it goes to `''COMPLETE''`
    state.)'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exit_timestamp`: 下达退出订单的时间戳。（注意它可能在进入 `''COMPLETE''` 状态之前保持 `''OPEN''` 状态一段时间。）'
- en: '`exit_transaction_type`: The exit order transaction type (either `BUY` or `SELL`).'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exit_transaction_type`: 退出订单的交易类型（可以是 `BUY` 或 `SELL`）。'
- en: '`exit_quantity`: The exit order quantity.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exit_quantity`: 退出订单数量。'
- en: '`exit_price`: The price at which the exit order gets executed and goes to the `''COMPLETE''`
    state.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exit_price`: 退出订单执行并进入 `''COMPLETE''` 状态的价格。'
- en: '`pnl_absolute`: The difference between the exit order execution price and entry
    order execution price. Mathematically, this is (*exit_price* - *entry_price*)**exit_quantity* for
    a long trade and (*entry_price* - *exit_price*)**exit_quantity* for a short trade.
    A positive value would imply that the trade is a profit-making trade. A negative
    value would imply that the trade is a loss-making trade.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pnl_absolute`: 退出订单执行价格与进入订单执行价格之间的差异。数学上，这是（*exit_price* - *entry_price*）**exit_quantity* （长买）或（*entry_price*
    - *exit_price*）**exit_quantity*（短卖）。正值意味着交易盈利，负值意味着交易亏损。'
- en: '`pnl_percentage`: The percentage of profit or loss with respect to the entry
    price. Mathematically, this is *pnl_absolute* / *entry_price* / *exit_quantity*
    x *100*.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pnl_percentage`: 相对于进入价格的利润或损失的百分比。数学上，这是 *pnl_absolute* / *entry_price* /
    *exit_quantity* x *100*。'
- en: '`pnl_cumulative_absolute`: Cumulative profit or loss. Mathematically, this
    is the sum of all the `pnl_absolute` values of the previous trades. This number
    gives a direct insight into the strategy performance against the simulation time.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pnl_cumulative_absolute`: 累计利润或损失。数学上，这是前期交易的所有 `pnl_absolute` 值的总和。此数字直接反映了策略相对于模拟时间的表现。'
- en: '`pnl_cumulative_percentage`: The percentage of cumulative profit or loss with
    respect to the entry price. Mathematically, this is *pnl_cumulative* / *entry_price*
    / *exit_quantity* x *100*.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pnl_cumulative_percentage`: 相对于进入价格的累计利润或损失的百分比。数学上，这是 *pnl_cumulative* /
    *entry_price* / *exit_quantity* x *100*。'
- en: There's more...
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Once the paper trading job moves to the `'STOPPED'` state, the P&L table report
    will not update anymore. You can fetch the complete P&L report any time before
    you submit the next paper trading job for the same strategy. If a new paper trading
    job is submitted (for the same strategy), this report will no longer be accessible
    via the `get_papertrading_report_pnl_table()` method. You can save the fetched
    report to a `.csv` file if you'd like to refer to it at a later point in time.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦模拟交易任务转移到“停止”状态，P&L表报告将不再更新。您可以在提交下一个相同策略的模拟交易任务之前随时获取完整的P&L报告。如果提交了新的模拟交易任务（针对相同策略），则将无法通过`get_papertrading_report_pnl_table()`方法访问此报告。如果您想以后参考它，可以将获取的报告保存为`.csv`文件。
- en: EMA-Regular-Order strategy – fetching a paper trading report – statistics table
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: EMA-Regular-Order策略 – 获取模拟交易报告 – 统计表
- en: After submitting a paper trading job on the AlgoBulls platform, the AlgoBulls
    paper trading engine starts executing the strategy. During the execution, along
    with the logs and the P&L table, the AlgoBulls paper trading engine also generates
    a summary from the P&L table in real time. This summary is a table of statistics
    containing various statistical numbers, such as `Net P&L` (absolute and percentage),
    `Max Drawdown` (absolute and percentage), the count of total trades, winning trades,
    losing trades, long trades, and short trades, maximum gain and minimum gain (or
    maximum loss), and the average profit per winning and losing trade. This table
    gives an instant overview of the overall strategy performance.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在AlgoBulls平台提交模拟交易任务后，AlgoBulls模拟交易引擎开始执行策略。在执行过程中，除了日志和P&L表外，AlgoBulls模拟交易引擎还实时从P&L表生成摘要。此摘要是包含各种统计数字的统计表，例如`净P&L`（绝对值和百分比）、`最大回撤`（绝对值和百分比）、总交易次数、盈利交易次数、亏损交易次数、多头交易次数和空头交易次数、最大盈利和最小盈利（或最大亏损），以及每次盈利和亏损交易的平均利润。此表提供了对整体策略绩效的即时概览。
- en: In this recipe, you will fetch the statistics table report for your strategy.
    This report is available as soon as the first trade is punched by your strategy
    after you submit a paper trading job. The AlgoBulls platform allows you to fetch
    the statistics table in real time, even while the paper trading job is still going
    on. You can get insights into the strategy performance without having to wait
    for the paper trading job to complete. This is helpful as paper trading jobs are
    usually long-running. The `pyalgotrading` package provides a simple method to
    fetch the statistics table for a given strategy.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，您将获取策略的统计表报告。在提交模拟交易任务后，您的策略打出第一笔交易后，此报告即可获得。AlgoBulls平台允许您实时获取统计表，即使模拟交易任务仍在进行中。您可以在等待模拟交易任务完成之前了解策略绩效。这对于长时间运行的模拟交易任务非常有帮助。`pyalgotrading`包提供了一种简单的方法来获取给定策略的统计表。
- en: Make sure you have gone through the first six recipes of [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml), *Algorithmic
    Trading Strategies – Coding Step by Step*, to get a complete picture of the strategy
    class used, `StrategyEMARegularOrder`.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您已经阅读了[第8章](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml)中的前六个示例，*算法交易策略 – 逐步编码*，以完整了解使用的策略类`StrategyEMARegularOrder`。
- en: Getting ready
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure the `algobulls_connection` and `strategy_code1` objects are available
    in your Python namespace. Refer to the first recipe of this chapter to set up
    the `algobulls_connection` and `strategy_code1` objects.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 确保`algobulls_connection`和`strategy_code1`对象在您的Python命名空间中可用。请参考本章的第一个示例设置`algobulls_connection`和`strategy_code1`对象。
- en: How to do it…
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Fetch the paper trading statistics report for `strategy_code1`:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 获取`strategy_code1`的模拟交易统计报告：
- en: '[PRE29]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We get the following output (your output may differ):'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出（您的输出可能不同）：
- en: '![](img/1dd60b77-4e40-4a7e-9ec9-28fbc0c27ab3.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1dd60b77-4e40-4a7e-9ec9-28fbc0c27ab3.png)'
- en: How it works…
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'In this recipe, you use the `get_papertrading_report_statistics()` method of
    the `algobulls_connection` object to fetch the paper trading statistics table
    in real time. This method accepts strategy code as an argument. You pass `strategy_code1`
    here. The return data is a `pandas.DataFrame` object with two columns—`highlight_type`
    and `highlight_value`—and multiple rows. The rows are described as follows:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，您将使用`algobulls_connection`对象的`get_papertrading_report_statistics()`方法实时获取模拟交易统计表。此方法接受策略代码作为参数。在这里，您传递`strategy_code1`。返回数据是一个`pandas.DataFrame`对象，具有两列—`highlight_type`和`highlight_value`—以及多行。行描述如下：
- en: '`Net PnL`: The cumulative paper trading P&L. This is also the `pnl_cumulative_absolute`
    value of the first entry in the P&L table.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`净盈亏`：累积纸交易盈亏。这也是P&L表中第一个条目的`pnl_cumulative_absolute`值。'
- en: '`Net PnL %`: The cumulative paper trading P&L percentage. This is also the
    `pnl_cumulative_percentage` value of the first entry in the P&L table.'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`净盈亏百分比`：累积纸交易盈亏百分比。这也是P&L表中第一个条目的`pnl_cumulative_percentage`值。'
- en: '`Max Drawdown`: The lowest value in the `pnl_cumulative` column of the P&L
    table. This indicates the maximum loss your strategy has encountered during the
    execution.'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`最大回撤`：P&L表中`pnl_cumulative`列中的最低值。这表示您的策略在执行过程中遇到的最大损失。'
- en: '`Max Drawdown %`: Mathematically, this is *(Max Drawdown)* / *(corresponding
    entry_price*/*exit_quantity* x *100*).'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`最大回撤百分比`：在数学上，这是*(最大回撤)* / *(相应的入场价格/退出数量 x 100)*。'
- en: '`Number of Trades`: Total trades (entry and exit counted as one) during the
    session.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`交易次数`：会话期间的总交易数（入场和退出计为一次）。'
- en: '`Number of Wins`: The count of trades where the trade P&L was non-negative.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`盈利次数`：交易盈亏为非负数的次数。'
- en: '`Number of Losses`: The count of trades where the trade P&L was negative.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`亏损次数`：交易中交易盈亏为负的次数。'
- en: '`Number of Long Trades`: The count of trades where the entry transaction type
    was `''BUY''`.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`多头交易次数`：入场交易类型为`''BUY''`的交易次数。'
- en: '`Number of Short Trades`: The count of trades where the entry transaction type
    was `''SELL''`.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`空头交易次数`：入场交易类型为`''SELL''`的交易次数。'
- en: '`Max Gain`: The P&L of the trade with the maximum P&L value among all trades.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`最大获利`：所有交易中P&L值最大的交易的P&L。'
- en: '`Min Gain`: The P&L of the trade with the minimum P&L value among all trades.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`最小获利`：所有交易中P&L值最小的交易的P&L。'
- en: '`Avg. Profit per winning trade`: Mathematically, this is *(Total P&L of winning
    trades)* / *(Count of winning trades)*.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`每笔盈利交易的平均利润`：在数学上，这是*(盈利交易的总P&L)* / *(盈利交易的数量)*。'
- en: '`Avg. Profit per losing trade`: Mathematically, this is *(Total P&L of losing
    trades)* / *(Count of losing trades)*.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`每笔亏损交易的平均利润`：在数学上，这是*(亏损交易的总P&L)* / *(亏损交易的数量)*。'
- en: There's more...
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: If the statistics table is fetched while the paper trading job is still running,
    the previously mentioned numbers will be intermediate numbers, based on the trades
    completed until that time. The numbers may change as more trades are punched until
    the paper trading job completes.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在纸交易工作仍在运行时获取统计表，则上述数字将是中间数字，基于到达该时间的交易完成情况。随着更多交易被打入，这些数字可能会发生变化，直到纸交易工作完成。
- en: Once the paper trading job moves to the `'STOPPED'` state, the statistics table
    will not change anymore. You can fetch the complete statistics table any time
    before you submit the next paper trading job for the same strategy. If a new paper
    trading job is submitted (for the same strategy), this table will no longer be
    accessible via the `get_papertrading_report_statistics()` method. You can save
    the fetched report table to a `.csv` file if you'd like to refer to it at a later
    point in time.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦纸张交易工作进入`'STOPPED'`状态，统计表将不再更改。您可以在提交下一个相同策略的纸交易工作之前的任何时间获取完整的统计表。如果提交了新的纸交易工作（用于相同策略），则将无法通过`get_papertrading_report_statistics()`方法访问此表。如果您希望稍后参考它，可以将获取的报告表保存到`.csv`文件中。
- en: EMA-Regular-Order strategy – fetching a paper trading report – order history
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: EMA-Regular-Order策略 – 获取纸交易报告 – 订单历史
- en: After submitting a paper trading job on the AlgoBulls platform, the AlgoBulls
    paper trading engine starts executing the strategy. During the execution, along
    with the logs, the P&L table, and statistics table, the AlgoBulls paper trading
    engine also generates an order history log in real time. This log contains state
    transitions of every order, along with the timestamps and additional information
    (if any) for each order state. The order history log is crucial in understanding
    how long it has taken for a trade to go from `'OPEN'` to `'COMPLETE'` or to the `'CANCELLED`'
    state. For example, the `MARKET` orders would immediately go from an `'OPEN'`
    to `'COMPLETE'` state but the `LIMIT` orders may take a while, based on the market
    conditions, to go from an `'OPEN'` to `'COMPLETE'` state, or they may even get
    to `'CANCELLED'`. All this information is available in the order history log.
    (Refer to the state machine diagrams in [Chapter 6](077b54a1-c9c4-424c-912a-11f28db3797f.xhtml),
    *Placing Orders on the Exchange*, for more information on order state transitions.)
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在AlgoBulls平台上提交了一个模拟交易任务后，AlgoBulls模拟交易引擎开始执行该策略。在执行过程中，除了日志、损益表和统计表之外，AlgoBulls模拟交易引擎还会实时生成一个订单历史记录。该记录包含每个订单的状态转换，以及每个订单状态的时间戳和附加信息（如果有）。订单历史记录对于理解一个交易从`'OPEN'`到`'COMPLETE'`或`'CANCELLED'`状态所需的时间非常重要。例如，`MARKET`订单会立即从`'OPEN'`状态转移到`'COMPLETE'`状态，但`LIMIT`订单可能需要一段时间，根据市场条件，才能从`'OPEN'`状态转移到`'COMPLETE'`状态，或者甚至可能转移到`'CANCELLED'`状态。所有这些信息都包含在订单历史记录中。（有关订单状态转换的更多信息，请参考[第6章](077b54a1-c9c4-424c-912a-11f28db3797f.xhtml)的状态机图。）
- en: In this recipe, you will fetch the order history log for your strategy. This
    log is available as soon as the first trade is punched by your strategy after
    you submit a paper trading job. The AlgoBulls platform allows you to fetch the
    order history log in real time, even while the paper trading job is still going
    on. This helps us get details for orders in the end states without having to wait
    for the paper trading job to complete. The `pyalgotrading` package provides a
    simple method to fetch the order history log for a given strategy.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，你将获取你的策略的订单历史记录。这个记录在你提交一个模拟交易任务后，你的策略进行了第一笔交易后就可以获取。AlgoBulls平台允许你实时获取订单历史记录，即使模拟交易任务仍在进行中。这有助于我们在等待模拟交易任务完成之前获取订单的最终状态的详细信息。`pyalgotrading`包提供了一种简单的方法来获取给定策略的订单历史记录。
- en: Make sure you have gone through the first six recipes of [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml), *Algorithmic
    Trading Strategies – Coding Step by Step*, to get a complete picture of the strategy
    class used, `StrategyEMARegularOrder`.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经阅读了[第8章](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml)的前六个示例，*算法交易策略 - 逐步编码*，以获得所使用的策略类`StrategyEMARegularOrder`的完整图片。
- en: Getting ready
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure the `algobulls_connection` and `strategy_code1` objects are available
    in your Python namespace. Refer to the first recipe of this chapter to set up
    the `algobulls_connection` and `strategy_code1` objects.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你的Python命名空间中有`algobulls_connection`和`strategy_code1`对象。参考本章的第一个示例来设置`algobulls_connection`和`strategy_code1`对象。
- en: How to do it…
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Fetch the paper trading order history report for `strategy_code1`:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 获取`strategy_code1`的模拟交易订单历史报告：
- en: '[PRE30]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We get the following output. Your output may differ:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 我们获得以下输出。你的输出可能会有所不同：
- en: '[PRE31]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The complete output is not shown here. Please visit the following link to read
    the complete output: [https://github.com/algobulls/pyalgostrategypool/blob/master/pyalgostrategypool/sample/papertrading/strategy_ema_regular_order/oms_order_history.log](https://github.com/algobulls/pyalgostrategypool/blob/master/pyalgostrategypool/sample/papertrading/strategy_ema_regular_order/oms_order_history.log)
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 完整输出未在此处显示。请访问以下链接以阅读完整输出：[https://github.com/algobulls/pyalgostrategypool/blob/master/pyalgostrategypool/sample/papertrading/strategy_ema_regular_order/oms_order_history.log](https://github.com/algobulls/pyalgostrategypool/blob/master/pyalgostrategypool/sample/papertrading/strategy_ema_regular_order/oms_order_history.log)
- en: How it works…
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'In this recipe, you use the `get_papertrading_report_order_history()` method
    of the `algobulls_connection` object to fetch order history logs in real time.
    This method accepts strategy code as an argument. You pass `strategy_code1` here.
    The return data is a string, described as follows:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，你可以使用`algobulls_connection`对象的`get_papertrading_report_order_history()`方法来实时获取订单历史记录。这个方法接受策略代码作为参数。这里传递了`strategy_code1`。返回的数据是一个字符串，描述如下：
- en: 'For every order, the log has the following information:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个订单，记录中都包含以下信息：
- en: 'A descriptive table on the order, with the following columns:'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个关于订单的描述性表格，具有以下列：
- en: '`INST`: The financial instrument of the order'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INST`：订单的金融工具'
- en: '`TIME`: The time at which the order was placed'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TIME`：订单下单的时间'
- en: '`ID`: The unique ID of the order'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ID`：订单的唯一 ID'
- en: '`TT`: The order transaction type (`BUY` or `SELL`)'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TT`：订单交易类型（`BUY` 或 `SELL`）'
- en: 'A sample of the table is shown as follows:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 表格的一个示例如下所示：
- en: '[PRE32]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This information will help you find this exact order in the strategy execution
    log.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 此信息将帮助您在策略执行日志中找到该订单。
- en: 'An order state transition table, with the following columns:'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个订单状态转换表，具有以下列：
- en: '`TIME`: The time at which the order is present in the state represented by
    the `''STATE''` column.'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TIME`：订单在 `''STATE''` 列所表示的状态中出现的时间。'
- en: '`STATE`: The order enters into this state at the time mentioned in the `''TIME''`
    column.'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`STATE`：订单在 `''TIME''` 列中提到的时间进入此状态。'
- en: '`MSG`: Additional message from the OMS for any unexpected state transitions.
    For example, orders that go to the `REJECTED` state have a message from the OMS
    stating the reason for their rejection. This column is usually empty.'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MSG`：来自 OMS 的任何意外状态转换的额外消息。例如，进入 `REJECTED` 状态的订单会有来自 OMS 的说明其被拒绝的原因的消息。此列通常为空。'
- en: 'A sample of the table is shown as follows:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 表格的一个示例如下所示：
- en: '[PRE33]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: From this table, you can see that upon placing the order at 10:30 AM, it transitions
    to the `'COMPLETE'` state immediately. This is expected as the order is a regular
    market order. (Refer to the first recipe of [Chapter 6](077b54a1-c9c4-424c-912a-11f28db3797f.xhtml),
    *Placing Regular Orders on the Exchange*, for more details on regular market orders.)
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个表格中，您可以看到在上午 10:30 下单后，订单立即转移到 `'COMPLETE'` 状态。这是预期的，因为订单是常规市价订单。（有关常规市价订单的更多详细信息，请参阅[第
    6 章](077b54a1-c9c4-424c-912a-11f28db3797f.xhtml)的第一个配方，*在交易所上下单*。）
- en: There's more...
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容……
- en: Once the paper trading job moves to the `'STOPPED'` state, no new order history
    logs are generated. You can fetch the complete order history logs any time before
    you submit the next paper trading job for the same strategy. If a new paper trading
    job is submitted (for the same strategy), these logs will no longer be accessible
    via the `get_papertrading_report_order_history()` method. You can save the fetched
    logs to a file if you'd like to refer to it at a later point in time.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 paper trading 任务转移到 `'STOPPED'` 状态，就不会生成新的订单历史记录日志。您可以在提交下一个相同策略的 paper trading
    任务之前随时获取完整的订单历史记录日志。如果提交了新的 paper trading 任务（用于相同的策略），则无法通过 `get_papertrading_report_order_history()`
    方法访问这些日志。如果您希望稍后参考，可以将获取的日志保存到文件中。
- en: MACD-Bracket-Order strategy – fetching the strategy
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MACD-Bracket-Order 策略 - 获取策略
- en: In this recipe, you will fetch the strategy class, `StrategyMACDBracketOrder`,
    from your account on the AlgoBulls platform, which you must have uploaded while
    going through the last recipe of [Chapter 8](https://cdp.packtpub.com/python_algorithmic_trading_cookbook/wp-admin/post.php?post=32&action=edit#post_30), *Algorithmic
    Trading Strategies – Coding Step by Step*. This recipe starts with setting up
    a connection to the AlgoBulls platform, querying all available strategies in your
    account  and fetching details of the required strategy class, `StrategyMACDBracketOrder`.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在此配方中，您将从 AlgoBulls 平台上的帐户中获取策略类 `StrategyMACDBracketOrder`，您必须在学习[第 8 章](https://cdp.packtpub.com/python_algorithmic_trading_cookbook/wp-admin/post.php?post=32&action=edit#post_30)的最后一个配方时上传该策略类。该配方从建立到
    AlgoBulls 平台的连接开始，查询您帐户中所有可用的策略，然后获取所需的策略类 `StrategyMACDBracketOrder` 的详细信息。
- en: Make sure you have gone through the last six recipes of [Chapter 8](https://cdp.packtpub.com/python_algorithmic_trading_cookbook/wp-admin/post.php?post=32&action=edit#post_30), *Algorithmic
    Trading Strategies – Coding Step by Step*, to get a complete picture of the strategy
    class used, `StrategyMACDBracketOrder`.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您已经学习了[第 8 章](https://cdp.packtpub.com/python_algorithmic_trading_cookbook/wp-admin/post.php?post=32&action=edit#post_30)的最后六个配方，*算法交易策略
    - 逐步编码*，以完全了解所使用的策略类 `StrategyMACDBracketOrder`。
- en: How to do it…
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 怎么做……
- en: 'We execute the following steps for this recipe:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为这个配方执行以下步骤：
- en: 'Import the necessary modules:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入必要的模块：
- en: '[PRE34]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Create a new AlgoBulls connection object:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 AlgoBulls 连接对象：
- en: '[PRE35]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Fetch the authorization URL:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取授权 URL：
- en: '[PRE36]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'We get the following output:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 我们获得以下输出：
- en: '[PRE37]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Log in to the preceding link with your AlgoBulls credentials, fetch your token,
    and set it here (refer to *Appendix II* for more details):'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的AlgoBulls凭据登录到上述链接，获取您的令牌，并在此处设置它（有关更多详细信息，请参阅《附录II》）：
- en: '[PRE38]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Fetch and display all strategies you have created and uploaded so far:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检索并显示你目前已经创建并上传的所有策略：
- en: '[PRE39]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'We get the following output. Your output may differ (make sure you have followed
    the recipes in [Chapter 8](https://cdp.packtpub.com/python_algorithmic_trading_cookbook/wp-admin/post.php?post=32&action=edit#post_30), *Algorithmic
    Trading Strategies – Coding Step by Step*, to get a similar output):'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '我们得到以下输出。你的输出可能会有所不同（确保您已经遵循了《第8章》中的配方，*算法交易策略-逐步编码*，以获得类似的输出）:'
- en: '![](img/3234f6cd-f539-41f3-849d-3389502713e6.png)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3234f6cd-f539-41f3-849d-3389502713e6.png)'
- en: 'Fetch and display the strategy code of the second strategy, the MACD-Bracket-Order
    strategy:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检索并显示第二个策略MACD-Bracket-Order策略的策略代码：
- en: '[PRE40]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'We get the following output (your output may differ):'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出（你的输出可能会有所不同）：
- en: '[PRE41]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Before paper trading your strategy, you can inspect your strategy to ensure
    you have the right strategy:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模拟交易您的策略之前，您可以检查您的策略以确保您选择了正确的策略：
- en: '[PRE42]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'We get the following output:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE43]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The complete output is not shown here. Please visit the following link to read
    the complete output: [https://github.com/algobulls/pyalgostrategypool/blob/master/pyalgostrategypool/strategy_macd_bracket_order.py](https://github.com/algobulls/pyalgostrategypool/blob/master/pyalgostrategypool/strategy_macd_bracket_order.py)
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 此处未显示完整输出。请访问以下链接以阅读完整输出：[https://github.com/algobulls/pyalgostrategypool/blob/master/pyalgostrategypool/strategy_macd_bracket_order.py](https://github.com/algobulls/pyalgostrategypool/blob/master/pyalgostrategypool/strategy_macd_bracket_order.py)
- en: How it works…
  id: totrans-273
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: You import the necessary modules in *step 1*. In *step 2*, you create an instance
    of the `AlgoBullsConnection` class, named `algobulls_connection`. In *step 3*,
    you get the authorization URL using the `get_authorization_url()` method of the
    `algobulls_connection` object. This prints the authorization URL. You should visit
    this URL from your web browser to sign in to the AlgoBulls platform and fetch
    your developer access token. (You can find more details with screenshots in *Appendix
    II* on fetching developer access token from the AlgoBulls platform.) You copy
    the access token and set it in *step 4* using the `set_access_token()` method
    of `algobulls_connection`. If the token is accepted, a successful connection is
    set up with the AlgoBulls platform.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第1步*中，您导入所需的模块。在*第2步*中，您创建了`AlgoBullsConnection`类的一个实例，命名为`algobulls_connection`。在*第3步*中，您使用`algobulls_connection`对象的`get_authorization_url()`方法获取授权URL。这将打印授权URL。您应该从您的网络浏览器访问此URL以登录到AlgoBulls平台并获取您的开发者访问令牌。
    （您可以在《附录II》中的屏幕截图中找到有关从AlgoBulls平台获取开发者访问令牌的更多详细信息。）您复制访问令牌，并在*第4步*中使用`algobulls_connection`的`set_access_token()`方法设置它。如果令牌被接受，则与AlgoBulls平台建立了成功的连接。
- en: In *step 5*, you fetch all strategies you have created and uploaded on the AlgoBulls
    platform so far. You use the `get_all_strategies()` method for this step and assign
    it to a new variable, `all_strategies`. This variable is a `pandas.DataFrame`
    object with the `strategyCode` and `strategyName` columns. This table holds information
    on the strategy codes and strategy names you have uploaded previously. If you
    have followed the *MACD-Bracket-Order strategy – uploading the strategy on the
    AlgoBulls trading platform* recipe from [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml),
    *Algorithmic Trading Strategies – Coding Step by Step*, you will find a strategy
    with the name `MACD-Regular-Order strategy`. In *step 6*, you assign the strategy
    code of the `MACD-Regular-Order strategy` strategy, to a new variable, `strategy_code2`.
    The strategy code is shown in the output of this step. This strategy code is unique
    for every strategy on the AlgoBulls platform.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第五步*中，您将检索到目前在AlgoBulls平台上创建并上传的所有策略。您可以使用`get_all_strategies()`方法来执行此步骤，并将其分配给一个新变量`all_strategies`。此变量是一个`pandas.DataFrame`对象，具有`strategyCode`和`strategyName`两列。此表格包含了您之前上传的策略代码和策略名称的信息。如果您遵循了来自[第8章](https://cdp.packtpub.com/python_algorithmic_trading_cookbook/wp-admin/post.php?post=32&action=edit#post_30)《算法交易策略-逐步编码》的《MACD-Bracket-Order策略
    - 将策略上传到AlgoBulls交易平台》的配方，您会发现一个名为`MACD-Regular-Order策略`的策略。在*第6步*中，您将`MACD-Regular-Order策略`策略的策略代码分配给一个新变量`strategy_code2`。此步骤的输出显示了策略代码。此策略代码对于AlgoBulls平台上的每个策略都是唯一的。
- en: Finally, in *step 7*, you ensure that the strategy referred by `strategy_code2`
    is indeed the one you uploaded earlier (in the last recipe of [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml), *Algorithmic
    Trading Strategies – Coding Step by Step*). You use the `get_strategy_details()`
    method of the `algobulls_connection` object to inspect the strategy. This method
    takes strategy code as an argument. You pass `strategy_code2` here. This method
    returns the entire class code as a string. You assign it to a new variable, `strategy_details2`,
    and display it.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在*步骤 7* 中，您确保 `strategy_code2` 引用的策略确实是您之前上传的策略（在[第 8 章](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml)的最后一个配方中，*算法交易策略
    - 逐步编码*）。您使用 `algobulls_connection` 对象的 `get_strategy_details()` 方法来检查策略。该方法以策略代码作为参数。您在此处传递
    `strategy_code2`。该方法将整个类代码作为字符串返回。您将其赋值给一个新变量 `strategy_details2`，并显示它。
- en: If you would like to change the class code referred by `strategy_code2`, as
    shown in *step 7*, please refer to *There's more…* section of the last recipe
    in [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml), *Algorithmic Trading
    Strategies – Coding Step by Step*.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想更改由 `strategy_code2` 引用的类代码，就像*步骤 7* 中所示，请参考[第 8 章](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml)的最后一个配方的*更多内容*部分，*算法交易策略
    - 逐步编码*。
- en: MACD-Bracket-Order strategy – paper trading the strategy
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MACD-Bracket-Order 策略 - 模拟交易策略
- en: In this recipe, you will perform paper trading on the `MACD-Bracket-Order strategy` strategy.
    You must have fetched this strategy from your account on the AlgoBulls platform
    in the preceding recipe of this chapter. You will leverage the paper trading functionality
    facilitated by `pyalgotrading` for this recipe, which in turn submits a paper
    trading job on the AlgoBulls platform.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，您将对 `MACD-Bracket-Order strategy` 策略进行模拟交易。您必须在本章的前一个配方中从 AlgoBulls 平台的您的帐户中获取此策略。您将利用
    `pyalgotrading` 提供的模拟交易功能来执行此配方，该功能进而在 AlgoBulls 平台上提交一个模拟交易任务。
- en: 'Once submitted, paper trading will be run by the AlgoBulls paper trading engine.
    You can query the status any time to know the state of the paper trading job.
    The job goes through the following states, in the following given order:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦提交，模拟交易将由 AlgoBulls 模拟交易引擎运行。您可以随时查询状态以了解模拟交易任务的状态。该任务按以下给定顺序经历以下状态：
- en: '`''STARTING''` (intermediate state)'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''STARTING''`（中间状态）'
- en: '`''STARTED''` (stable state)'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''STARTED''`（稳定状态）'
- en: '`''STOPPING''` (intermediate state)'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''STOPPING''`（中间状态）'
- en: '`''STOPPED''` (stable state)'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''STOPPED''`（稳定状态）'
- en: On submitting a job, it starts with an intermediate state, `'STARTING'`. In
    this state, the AlgoBulls paper trading engine will fetch the strategy and get
    the execution environment ready, which may take a couple of minutes. Once done,
    the job moves to the `'STARTED'` state. The paper trading strategy happens in
    this stage. Here, it stays as long as it takes for paper trading to complete.
    Once done, the job moves to an intermediate state, `'STOPPING'`. In this state,
    the AlgoBulls paper trading engine cleans up the resources allocated for this
    job, which usually takes less than a minute. Finally, the job moves to the `'STOPPED'`
    state.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 在提交任务时，它从一个中间状态 `'STARTING'` 开始。在这种状态下，AlgoBulls 模拟交易引擎将获取策略并准备执行环境，这可能需要几分钟。完成后，任务转移到
    `'STARTED'` 状态。模拟交易策略在此阶段发生。在此期间，它会保持不变，直到模拟交易完成。完成后，任务转移到一个中间状态 `'STOPPING'`。在这种状态下，AlgoBulls
    模拟交易引擎清理为此任务分配的资源，通常需要不到一分钟。最后，任务移动到 `'STOPPED'` 状态。
- en: If you have already submitted a paper trading job for a strategy, you cannot
    submit another job for the same strategy until the first job completes. This means
    you have to wait for the first job to move to the `'STOPPED'` state. If the first
    job is long-running and you would like to stop it immediately, you can submit
    a stop job request via `pyalgotrading`. You need to ensure the job is in the `'STARTED'` state
    before submitting the request.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经为一种策略提交了一个模拟交易任务，您就不能再为同一策略提交另一个任务，直到第一个任务完成为止。这意味着您必须等待第一个任务转移到 `'STOPPED'`
    状态。如果第一个任务运行时间较长，而您希望立即停止它，您可以通过 `pyalgotrading` 提交一个停止任务请求。在提交请求之前，您需要确保任务处于
    `'STARTED'` 状态。
- en: After submitting a paper trading job, you can fetch logs and reports for the
    strategy execution in real time. The logs and reports help validate the strategy
    performance and debug any potential issues.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 在提交模拟交易任务后，您可以实时获取有关策略执行的日志和报告。这些日志和报告有助于验证策略的性能并调试任何潜在问题。
- en: You can refer to the second recipe of this chapter for the state machine diagram
    of a paper trading job. It demonstrates the various states and transitions of
    a paper trading job during its lifetime on the AlgoBulls platform.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以参考本章的第二个配方，了解 AlgoBulls 平台上一份模拟交易任务的状态机图。它展示了一份模拟交易任务在其生命周期中的各种状态和转换。
- en: Make sure you have gone through the last six recipes of [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml), *Algorithmic
    Trading Strategies – Coding Step by Step*, to get a complete picture of the strategy
    class used, `StrategyMACDBracketOrder`.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经阅读完[第 8 章](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml)的最后六个配方，逐步编码算法交易策略，以全面了解使用的策略类`StrategyMACDBracketOrder`。
- en: Getting ready
  id: totrans-290
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Make sure the `algobulls_connection` and `strategy_code2` objects are available
    in your Python namespace. Refer to the *MACD-Bracket-Order strategy – fetching
    the strategy* recipe of this chapter to set up the `algobulls_connection` and
    `strategy_code2` objects.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 确保`algobulls_connection` 和 `strategy_code2` 对象在你的 Python 命名空间中可用。请参考本章的*MACD-Bracket-Order
    策略 - 获取策略*配方来设置 `algobulls_connection` 和 `strategy_code2` 对象。
- en: How to do it…
  id: totrans-292
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'We execute the following steps for this recipe:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 我们执行以下步骤来完成此配方：
- en: 'Import the necessary modules:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入必要的模块：
- en: '[PRE44]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Search for an instrument using its trading symbol as a keyword. Assign the
    returned object to `instruments`:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用其交易代码作为关键字搜索仪器。将返回的对象分配给 `instruments`：
- en: '[PRE45]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'We get the following output (your output may differ):'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出（你的输出可能不同）：
- en: '[PRE46]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Get `value` for the instrument of choice from `instruments`:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `instruments` 获取选择仪器的`value`：
- en: '[PRE47]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'We get the following output:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE48]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Submit a paper trading job for `strategy_code2`:'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交一个 `strategy_code2` 的模拟交易任务：
- en: '[PRE49]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'We get the following output:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE50]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Check the status of the submitted paper trading job:'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查已提交的模拟交易任务的状态：
- en: '[PRE51]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Check the status of the submitted paper trading job again after some time:'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再过一段时间后再次检查提交的模拟交易任务的状态：
- en: '[PRE52]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: How it works…
  id: totrans-312
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理如下…
- en: In *step 1*, you import the `time` class from the `datetime` module and all
    constants from the `pyalgotrading.constants` module. In *step 2*, you fetch the
    instrument for which you would like to paper trade the strategy, `MACD-Bracket-Order
    strategy`, using the `search_instrument()` method of the `algobulls_connection`
    object. The `search_instrument()` method accepts a search string as an argument,
    which should be the trading symbol, in part or complete, of the instrument you
    are interested in. You pass `'TATASTEEL'` here. This function returns a list with
    details of instruments that match the search string. There could be multiple instruments
    that could have the search string in their trading symbols. In *step 3*, you fetch
    the value of the first matched instrument and assign it to a new variable, `instrument`.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 1* 中，你从 `datetime` 模块导入 `time` 类和`pyalgotrading.constants` 模块中的所有常量。在
    *步骤 2* 中，你使用 `algobulls_connection` 对象的 `search_instrument()` 方法获取你想要进行策略模拟交易的仪器，即
    `MACD-Bracket-Order strategy`。`search_instrument()` 方法接受一个搜索字符串作为参数，这个字符串应该是你感兴趣的仪器的交易代码的部分或完整代码。在这里你传递了
    `'TATASTEEL'`。这个函数返回一个包含与搜索字符串匹配的仪器详情的列表。可能有多个仪器的交易代码中包含搜索字符串。在 *步骤 3* 中，你获取第一个匹配仪器的值，并将其分配给一个新变量，`instrument`。
- en: 'In *step 4*, you submit a paper trading job using the `papertrade()` method
    of the `algobulls_connection()` object. It takes the following arguments:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 4* 中，你使用 `algobulls_connection()` 对象的 `papertrade()` 方法提交了一个模拟交易任务。它接受以下参数：
- en: '`strategy_code`: The strategy code of the strategy for which paper trading
    has to be performed. Should be a string. You pass `strategy_code2` here.'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`strategy_code`：要执行模拟交易的策略的策略代码。应该是一个字符串。你在这里传递了 `strategy_code2`。'
- en: '`start_time`: Today''s time from when paper trading should be started. Should
    be a `datetime.time` object. Here, you pass an object holding the value 9 hours
    15 – `time(hour=9, minute=15)`. Refer to the first recipe of this book for details
    on creating a `time` object.'
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`start_time`：应该开始模拟交易的今天时间。应该是一个`datetime.time`对象。在这里，你传递一个持有9小时15分钟值的对象 -
    `time(hour=9, minute=15)`。有关创建`time`对象的详细信息，请参考本书的第一个配方。'
- en: '`end_time`: Today''s time until when paper trading should be performed. This
    object should hold a time value ahead of the value held by `start_time`. Should
    be a `datetime.time` instance. Here, you pass an object holding the value 15:30
    hours – `time(hour=15, minute=30)`.'
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`end_time`：应该执行模拟交易的今天时间。这个对象应该是 `start_time` 持有的值之后的时间值。应该是一个 `datetime.time`
    实例。在这里，你传递一个持有15:30小时值的对象 - `time(hour=15, minute=30)`。'
- en: '`instrument`: The financial instrument for which paper trading should be run.
    Historical data will be fetched for this instrument. Should be a string. You pass
    `instrument` here.'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instrument`: 应运行纸张交易的金融工具。将获取此工具的历史数据。应为字符串。你在此处传递`instrument`。'
- en: '`lots`: The number of lots for which paper trading should be performed. Should
    be an integer. The quantity is calculated by the strategy as *number of lots*
    × *lot size of the financial instrument*. You pass `1` here.'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lots`: 应执行纸张交易的批次数。应为整数。数量由策略计算为*批次数* × *金融工具的批次大小*。你在此处传递`1`。'
- en: '`strategy_parameters`: The parameter names and values expected by the strategy.
    Should be a dictionary, with `parameter-name` and `parameter-value` as key-value
    pairs. You pass the following parameters here:'
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`strategy_parameters`: 策略期望的参数名称和值。应为字典，带有`parameter-name`和`parameter-value`作为键值对。你在此处传递以下参数：'
- en: '`fastma_period: 26`'
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fastma_period: 26`'
- en: '`slowma_period: 6 `'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`slowma_period: 6`'
- en: '`signal_period: 9`'
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`signal_period: 9`'
- en: '`target_trigger: 0.01`'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target_trigger: 0.01`'
- en: '`stoploss_trigger: 0.01`'
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stoploss_trigger: 0.01`'
- en: '`trailing_stoploss_trigger: 1`'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`trailing_stoploss_trigger: 1`'
- en: (Recall that the parameters for MACD-Bracket-Order strategy have been defined
    in its `__init__()` method, as shown in the first recipe of [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml), *Algorithmic
    Trading Strategies – Coding Step by Step*).
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: （回想一下MACD-Bracket-Order策略的参数已在其`__init__()`方法中定义，如[第8章](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml)的第一个示例所示，*算法交易策略
    - 逐步编码*）。
- en: '`candle_interval`: The candle interval for the historical data fetched for
    paper trading. Should be an enum of the type `CandleInterval`. You pass `CandleInterval.MINUTES_15`
    here. (The `CandleInterval` enum provides various enums for candle intervals,
    some of which are `MINUTE_1`, `MINUTES_3` , `MINUTES_5`, `MINUTES_10`, `MINUTES_15`,
    `MINUTES_30`, `HOUR`, and `DAY`.)'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`candle_interval`: 用于获取用于纸张交易的历史数据的蜡烛图间隔。应为`CandleInterval`类型的枚举。你在此处传递`CandleInterval.MINUTES_15`。（`CandleInterval`枚举提供各种蜡烛图间隔的枚举，其中一些是`MINUTE_1`，`MINUTES_3`，`MINUTES_5`，`MINUTES_10`，`MINUTES_15`，`MINUTES_30`，`HOUR`和`DAY`）。'
- en: If the job submission is successful, you will see `Success` messages printed
    by the `papertrade()` function.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 如果作业提交成功，则`papertrade()`函数将打印`Success`消息。
- en: Once a job is submitted, it takes a while to start. After starting, it may take
    some time to finish depending on the duration of paper trading specified using
    the `start_time` and `end_time` arguments. Usually, paper trading is run for the
    entire trading day, which means the job would be running for 6–8 hours.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 提交作业后，启动需要一段时间。启动后，根据使用`start_time`和`end_time`参数指定的纸张交易持续时间的长短，完成可能需要一些时间。通常，纸张交易运行整个交易日，这意味着作业将运行6-8小时。
- en: In *step 5*, you fetch the job status using the `get_papertrading_job_status()`
    method of the `algobulls_connection` object. You pass `strategy_code2` as the
    argument here. This method returns a dictionary with a single key-value pair,
    the *data* and the *job* status. If you query the status immediately after placing
    the job, you get `'STARTING'` as the status. In *step 6*, you query the status
    again after some time, and if the job has started, you get the status as `'STARTED'`.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤5*中，您使用`algobulls_connection`对象的`get_papertrading_job_status()`方法获取作业状态。你在此处传递`strategy_code2`作为参数。此方法返回一个带有单个键值对的字典，*数据*和*作业*状态。如果在放置作业后立即查询状态，则会得到`'STARTING'`作为状态。在*步骤6*中，您再次查询状态，如果作业已经启动，则会得到状态为`'STARTED'`。
- en: A successful submission implies that the minimum inputs needed to paper trade
    a strategy have been passed in the required format. It, however, does not ensure
    that the strategy will run without errors. The strategy execution may still run
    into errors during paper trading. To debug execution issues, you would need to
    fetch the output logs, which is explained in the next recipe. Possible reasons
    for errors could be either bugs in the strategy class Python code or an incomplete
    `strategy_parameters` dictionary passed to the `papertrade()` function.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 成功提交意味着已以所需格式传递了用于纸张交易策略的最小输入。但是，这并不保证策略在纸张交易期间不会出现错误。策略执行在纸张交易期间仍可能遇到错误。要调试执行问题，您需要获取输出日志，下一节将对此进行解释。错误的可能原因可能是策略类Python代码中的错误或传递给`papertrade()`函数的`strategy_parameters`字典不完整。
- en: There's more…
  id: totrans-333
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'If a job is running for a long time and you would like to stop it before its
    completion, you can use the `stop_papertrading_job()` method of the `algobulls_connection` object.
    This method accepts strategy code as an argument. You pass `strategy_code2` here.
    This method submits a stop request to the AlgoBulls paper trading engine. If the
    request is accepted, you see a `Success` message here:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 如果作业运行时间很长，并且您希望在完成之前停止它，您可以使用`algobulls_connection`对象的`stop_papertrading_job()`方法。此方法接受策略代码作为参数。这里传递了`strategy_code2`。此方法向
    AlgoBulls 模拟交易引擎提交停止请求。如果请求被接受，您将在此处看到一个`Success`消息：
- en: '[PRE53]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'If you query the status after submitting the stop request, you get the status
    as `''STOPPING''`:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在提交停止请求后查询状态，则状态为`'STOPPING'`：
- en: '[PRE54]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'If you query the status again after some time, and if the job has stopped,
    you get the status as `''STOPPED''`:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 如果过一段时间后再次查询状态，如果作业已停止，则状态为`'STOPPED'`：
- en: '[PRE55]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: MACD-Bracket-Order strategy – fetching paper trading logs in real time
  id: totrans-340
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MACD-Bracket-Order 策略 – 实时获取模拟交易日志
- en: After submitting a paper trading job on the AlgoBulls platform, the AlgoBulls
    paper trading engine starts executing the strategy. During the execution, every
    event that occurs and decisions taken by the AlgoBulls paper trading engine are
    recorded with exact timestamps in the form of textual logs. Examples of recorded
    activities include the given strategy config, every new candle generated at regular
    intervals, trades punched by your strategy, the entry and exit of positions created
    by these trades, waits for new candles, and so on. These logs are quintessential
    in validating the strategy behavior and debugging behavioral or performance issues
    that are frequently encountered while developing a strategy.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 在 AlgoBulls 平台上提交模拟交易作业后，AlgoBulls 模拟交易引擎开始执行策略。在执行过程中，AlgoBulls 模拟交易引擎记录了发生的每个事件以及采取的决策，以确切的时间戳形式记录在文本日志中。记录的活动示例包括给定策略配置，定期生成的每个新蜡烛，您的策略打出的交易，这些交易创建的持仓的进入和退出，等待新蜡烛等。这些日志在验证策略行为和调试开发策略时经常遇到的行为或性能问题方面至关重要。
- en: In this recipe, you will fetch paper trading logs for your strategy. The logs
    start coming up as soon as your submitted paper trading job reaches the `'STARTED'`
    state (refer to the preceding recipe for more information on states of a paper
    trading job). The AlgoBulls platform allows you to fetch logs in real time, even
    while the paper trading job is still going on. You can get insights into the strategy
    execution without having to wait for the paper trading job to complete, which
    is helpful when jobs are long-running. The `pyalgotrading` package provides a
    simple method to fetch the execution logs for a given strategy.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，您将为您的策略获取模拟交易日志。一旦您提交的模拟交易作业达到`'STARTED'`状态（有关模拟交易作业状态的更多信息，请参考前面的配方），日志就会开始出现。AlgoBulls
    平台允许您实时获取日志，即使模拟交易作业仍在进行中。您可以在不等待模拟交易作业完成的情况下了解策略执行情况，这在作业运行时间较长时非常有用。`pyalgotrading`包提供了一个简单的方法来获取给定策略的执行日志。
- en: Make sure you have gone through the last six recipes of [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml), *Algorithmic
    Trading Strategies – Coding Step by Step*, to get a complete picture of the strategy
    class used, `StrategyMACDBracketOrder`.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您已经阅读了[第 8 章](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml)的最后六个配方，*算法交易策略 –
    逐步编码*，以获得使用的完整策略类`StrategyMACDBracketOrder`的完整图片。
- en: Getting ready
  id: totrans-344
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure the `algobulls_connection` and `strategy_code2` objects are available
    in your Python namespace. Refer to the *MACD-Bracket-Order strategy – fetching
    the strategy* recipe of this chapter to set up the `algobulls_connection` and
    `strategy_code2` objects.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 确保`algobulls_connection`和`strategy_code2`对象在你的 Python 命名空间中可用。参考本章的 *MACD-Bracket-Order
    策略 – 获取策略* 配方来设置`algobulls_connection`和`strategy_code2`对象。
- en: How to do it…
  id: totrans-346
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'We execute the following steps for this recipe:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 我们执行以下步骤来完成此配方：
- en: 'Fetch the paper trading execution logs for `strategy_code2`:'
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取`strategy_code2`的模拟交易执行日志：
- en: '[PRE56]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'We get the following output (your output may differ):'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出（你的输出可能会有所不同）：
- en: '[PRE57]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Fetch the paper trading execution logs for `strategy_code2` again after some
    time:'
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 过一段时间后再次获取`strategy_code2`的模拟交易执行日志：
- en: '[PRE58]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'We get the following output (your output may differ):'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出（你的输出可能会有所不同）：
- en: '[PRE59]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: The complete output is not shown here. Please visit the following link to read
    the complete output: [https://github.com/algobulls/pyalgostrategypool/blob/master/pyalgostrategypool/sample/papertrading/strategy_macd_bracket_order/logs.txt](https://github.com/algobulls/pyalgostrategypool/blob/master/pyalgostrategypool/sample/papertrading/strategy_macd_bracket_order/logs.txt)
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 此处未显示完整输出。请访问以下链接阅读完整输出：[https://github.com/algobulls/pyalgostrategypool/blob/master/pyalgostrategypool/sample/papertrading/strategy_macd_bracket_order/logs.txt](https://github.com/algobulls/pyalgostrategypool/blob/master/pyalgostrategypool/sample/papertrading/strategy_macd_bracket_order/logs.txt)
- en: How it works…
  id: totrans-357
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何运作…
- en: In *step 1*, you use the `get_papertrading_logs()` method of the `algobulls_connection`
    object to fetch the strategy paper trading logs in real time. This method accepts
    strategy code as an argument. You pass `strategy_code2` here. The return data
    is a string. If you try this step immediately after submitting the job, you get
    a string that says the logs are not ready yet (`[2020-07-09 09:14:12] Logs not
    available yet. Please retry in sometime.`). This happens if the paper trading
    job is in the `'STARTING'` state.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第一步*中，您使用`algobulls_connection`对象的`get_papertrading_logs()`方法实时获取策略的模拟交易日志。此方法接受策略代码作为参数。您在这里传递了`strategy_code2`。返回的数据是一个字符串。如果在提交作业后立即尝试此步骤，您将获得一个字符串，该字符串表示日志尚未准备好（`[2020-07-09
    09:14:12] 日志尚未准备好，请稍后重试。`）。如果模拟交易任务处于`'STARTING'`状态，就会发生这种情况。
- en: In *step 2*, you fetch the logs again after some time. If the job is out of
    the `'STARTING'` state, you start getting your strategy execution logs. You get
    the entire paper trading logs every time you call the `get_papertrading_logs()`
    function.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第二步*中，您再次经过一段时间后重新获取日志。如果任务处于`'STARTING'`状态之外，您将开始获取您的策略执行日志。每次调用`get_papertrading_logs()`函数时，您都会获得整个模拟交易日志。
- en: There's more...
  id: totrans-360
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: Once the paper trading job moves to the `'STOPPED'` state, no new logs are generated.
    You can fetch the complete logs any time before you submit the next paper trading
    job for the same strategy. If a new paper trading job is submitted (for the same
    strategy), these logs will no longer be accessible via the `get_papertrading_logs()`
    method. You can save the fetched logs to a file if you'd like to refer to it at
    a later point in time.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦模拟交易任务转移到`'STOPPED'`状态，就不会生成新的日志。您可以在提交下一个相同策略的模拟交易任务之前的任何时候获取完整的日志。如果提交了新的模拟交易任务（针对相同的策略），则无法通过`get_papertrading_logs()`方法再访问这些日志。如果您希望稍后参考它，可以将获取的日志保存到文件中。
- en: MACD-Bracket-Order strategy – fetching a paper trading report – profit and loss
    table
  id: totrans-362
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MACD-Bracket-Order策略 - 获取模拟交易报告 - 盈亏表
- en: After submitting a paper trading job on the AlgoBulls platform, the AlgoBulls
    paper trading engine starts executing the strategy. During the execution, along
    with the logs, the AlgoBulls paper trading engine also generates a P&L table in
    real time. This table holds information on every trade punched by the strategy.
    It also has details on the mapping between entry and exit orders and the trade
    P&L and cumulative P&L, sorted chronologically, with the latest order first. This
    table gives an insight into the overall strategy performance with the help of
    individual and cumulative P&L numbers. The entry-exit order mapping also helps
    validate the strategy behavior.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 在AlgoBulls平台上提交模拟交易任务后，AlgoBulls模拟交易引擎开始执行策略。在执行过程中，随着日志一起，AlgoBulls模拟交易引擎还实时生成了一张P&L表。该表包含策略打出的每笔交易的信息。它还包括了入场和出场订单以及交易P&L和累计P&L之间的映射细节，按时间顺序排列，最新订单排在最前面。该表通过个人和累计P&L数字提供了对整体策略表现的洞察。入场-出场订单映射还有助于验证策略行为。
- en: In this recipe, you will fetch the P&L table report for your strategy. This
    report is available as soon as the first trade is punched by your strategy after
    you submit a paper trading job. The AlgoBulls platform allows you to fetch the
    P&L table in real time, even while the paper trading job is still going on. You
    can get insights into the strategy performance without having to wait for the
    paper trading job to complete. This is helpful as paper trading jobs are usually
    long-running. The `pyalgotrading` package provides a simple method to fetch the
    P&L table for a given strategy.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，您将获取策略的P&L表报告。只要提交模拟交易任务后您的策略打出了第一笔交易，此报告就可用。AlgoBulls平台允许您实时获取P&L表，即使模拟交易任务仍在进行中。您无需等待模拟交易任务完成即可了解策略表现。这对于模拟交易任务通常需要长时间运行很有帮助。`pyalgotrading`包提供了一个简单的方法来获取给定策略的P&L表。
- en: Make sure you have gone through the last six recipes of [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml),
    *Algorithmic Trading Strategies – Coding Step by Step*, to get a complete picture
    of the strategy class used, `StrategyMACDBracketOrder`.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经阅读了[第 8 章](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml)的最后六个示例，*算法交易策略-逐步编码*，以完整了解使用的策略类，`StrategyMACDBracketOrder`。
- en: Getting ready
  id: totrans-366
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure the `algobulls_connection` and `strategy_code2` objects are available
    in your Python namespace. Refer to the *MACD-Bracket-Order strategy – fetching
    the strategy* recipe of this chapter to set up the `algobulls_connection` and
    `strategy_code2` objects.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 确保`algobulls_connection`和`strategy_code2`对象在你的Python命名空间中可用。参考本章的*MACD-Bracket-Order策略-获取策略*示例来设置`algobulls_connection`和`strategy_code2`对象。
- en: How to do it…
  id: totrans-368
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Fetch the paper trading P&L report for `strategy_code2`:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 获取`strategy_code2`的模拟交易盈亏报告：
- en: '[PRE60]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'We get the following output. Your output may differ (note that the following
    output has been split into multiple tables for representation purposes. You will
    see a single wide table in your Jupyter notebook):'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出。你的输出可能不同（请注意，以下输出已被拆分为多个表以进行表示。你将在你的Jupyter笔记本中看到一个单独的宽表）：
- en: '![](img/720448f5-0a58-46cb-9359-cca391accb5c.png)'
  id: totrans-372
  prefs: []
  type: TYPE_IMG
  zh: '![](img/720448f5-0a58-46cb-9359-cca391accb5c.png)'
- en: How it works…
  id: totrans-373
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'In this recipe, you use the `get_papertrading_report_pnl_table()` method of
    the `algobulls_connection` object to fetch the paper trading P&L table in real
    time. This method accepts strategy code as an argument. You pass `strategy_code2`
    here. The return data is a `pandas.DataFrame` object with multiple columns, described
    as follows:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，你将使用`algobulls_connection`对象的`get_papertrading_report_pnl_table()`方法实时获取模拟交易的盈亏表。该方法接受策略代码作为参数。你在这里传递了`strategy_code2`。返回的数据是一个`pandas.DataFrame`对象，具有多列，描述如下：
- en: '`instrument`: The financial instrument for which trade was entered.'
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instrument`: 进行交易的金融工具。'
- en: '`entry_timestamp`: The timestamp at which the entry order was placed. (Note
    that it may remain in the `''OPEN''` state for a while before it goes to the `''COMPLETE''`
    state. The time for this state transition can be found using the order history
    table, explained in the *EMA-Regular-Order strategy – fetching the paper trading
    report – order history* recipe of this chapter.)'
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`entry_timestamp`: 进入订单放置的时间戳。（请注意，它可能在进入`''COMPLETE''`状态之前保持`''OPEN''`状态一段时间。此状态转换的时间可以在本章的*EMA-Regular-Order策略-获取模拟交易报告-订单历史*示例中的订单历史表中找到。）'
- en: '`entry_transaction_type`: The entry order transaction type (either `BUY` or
    `SELL`).'
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`entry_transaction_type`: 进场订单交易类型（`BUY` 或 `SELL`）。'
- en: '`entry_quantity`: The entry order quantity.'
  id: totrans-378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`entry_quantity`: 进场订单数量。'
- en: '`entry_price`: The price at which the entry order gets executed and goes to
    the `''COMPLETE''` state.'
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`entry_price`: 进入订单执行的价格并进入`''COMPLETE''`状态。'
- en: '`exit_timestamp`: The timestamp at which the exit order was placed. (Note that
    it may remain in the `''OPEN''` state for a while before it goes to the `''COMPLETE''`
    state.)'
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exit_timestamp`: 退出订单放置的时间戳。（请注意，它可能在进入`''COMPLETE''`状态之前保持`''OPEN''`状态一段时间。）'
- en: '`exit_transaction_type`: The exit order transaction type (either `BUY` or `SELL`).'
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exit_transaction_type`: 退出订单交易类型（`BUY` 或 `SELL`）。'
- en: '`exit_quantity`: The exit order quantity.'
  id: totrans-382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exit_quantity`: 退出订单数量。'
- en: '`exit_price`: The price at which the exit order gets executed and goes to the `''COMPLETE''`
    state.'
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exit_price`: 退出订单执行的价格并进入`''COMPLETE''`状态。'
- en: '`pnl_absolute`: The difference between the exit order execution price and entry
    order execution price. Mathematically, this is (*exit_price* - *entry_price*)**exit_quantity* for
    a long trade and (*entry_price* - *exit_price*)**exit_quantity* for a short trade.
    A positive value would imply that the trade is a profit-making trade. A negative
    value would imply that the trade is a loss-making trade.'
  id: totrans-384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pnl_absolute`: 退出订单执行价格与进入订单执行价格之间的差异。在数学上，这是（*exit_price* - *entry_price*）**exit_quantity* （对于多头交易）和（*entry_price*
    - *exit_price*）**exit_quantity* （对于空头交易）。正值意味着交易盈利，负值意味着交易亏损。'
- en: '`pnl_percentage`: The percentage of profit or loss with respect to the entry
    price. Mathematically, this is *pnl_absolute* / *entry_price* / *exit_quantity*
    x *100*.'
  id: totrans-385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pnl_percentage`: 相对于进场价格的利润或亏损百分比。在数学上，这是*pnl_absolute* / *entry_price* /
    *exit_quantity* x *100*。'
- en: '`pnl_cumulative_absolute`: The cumulative profit or loss. Mathematically, this
    is the sum of all the `pnl_absolute` values of the previous trades. This number
    gives a direct insight into the strategy performance against the simulation time.'
  id: totrans-386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pnl_cumulative_absolute`：累积利润或损失。在数学上，这是前期交易的所有`pnl_absolute`值的总和。这个数字直接反映了策略在模拟时间上的表现。'
- en: '`pnl_cumulative_percentage`: The percentage of cumulative profit or loss with
    respect to the entry price. Mathematically, this is *pnl_cumulative* / *entry_price*
    / *exit_quantity* x *100*.'
  id: totrans-387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pnl_cumulative_percentage`：累积利润或损失的百分比，与进场价格相比。在数学上，这是 *pnl_cumulative* /
    *entry_price* / *exit_quantity* x *100*。'
- en: There's more...
  id: totrans-388
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Once the paper trading job moves to the `'STOPPED'` state, the P&L table report
    will not update anymore. You can fetch the complete P&L report any time before
    you submit the next paper trading job for the same strategy. If a new paper trading
    job is submitted (for the same strategy), this report will no longer be accessible
    via the `get_papertrading_report_pnl_table()` method. You can save the fetched
    report to a `.csv` file if you'd like to refer to it at a later point in time.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦模拟交易任务进入`'STOPPED'`状态，损益表报告将不再更新。在提交下一个相同策略的模拟交易任务之前，您可以随时获取完整的损益报告。如果提交了新的模拟交易任务（相同策略），则无法再通过`get_papertrading_report_pnl_table()`方法访问此报告。如果您希望在以后参考该报告，可以将获取的报告保存到`.csv`文件中。
- en: MACD-Bracket-Order strategy – fetching a paper trading report – statistics table
  id: totrans-390
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MACD-Bracket-Order 策略 - 获取模拟交易报告 - 统计表
- en: After submitting a paper trading job on the AlgoBulls platform, the AlgoBulls
    paper trading engine starts executing the strategy. During the execution, along
    with the logs and P&L table, the AlgoBulls paper trading engine also generates
    a summary from the P&L table in real time. This summary is a table of statistics
    containing various statistical numbers, such as `Net P&L` (absolute and percentage),
    `Max Drawdown` (absolute and percentage), the count of total trades, winning trades,
    losing trades, long trades, and short trades, maximum gain and minimum gain (or
    maximum loss), and the average profit per winning and losing trade. This table
    gives an instant overview of the overall strategy performance.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 在 AlgoBulls 平台上提交模拟交易任务后，AlgoBulls 模拟交易引擎开始执行策略。在执行过程中，除了日志和损益表之外，AlgoBulls
    模拟交易引擎还实时从损益表生成摘要。这个摘要是一个包含各种统计数字的统计表，如`净盈亏`（绝对值和百分比）、`最大回撤`（绝对值和百分比）、总交易次数、盈利交易次数、亏损交易次数、多头交易次数和空头交易次数、最大收益和最小收益（或最大损失），以及盈利和亏损交易的平均利润。这张表可以立即了解整体策略的表现。
- en: In this recipe, you will fetch the statistics table report for your strategy.
    This report is available as soon as the first trade is punched by your strategy
    after you submit a paper trading job. The AlgoBulls platform allows you to fetch
    the statistics table in real time, even while the paper trading job is still going
    on. You can get insights into the strategy performance without having to wait
    for the paper trading job to complete. This is helpful as paper trading jobs are
    usually long-running. The `pyalgotrading` package provides a simple method to
    fetch the statistics table for a given strategy.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，您将获取策略的统计表报告。在您提交模拟交易任务后，只要您的策略 punched 第一笔交易，此报告即可获得。AlgoBulls 平台允许您实时获取统计表，即使模拟交易任务仍在进行中。您可以在等待模拟交易任务完成之前即可获得策略表现的见解。这对于模拟交易任务通常持续很长时间来说是有帮助的。`pyalgotrading`包提供了一个简单的方法来获取给定策略的统计表。
- en: Make sure you have gone through the last six recipes of [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml),
    *Algorithmic Trading Strategies – Coding Step by Step*, to get a complete picture
    of the strategy class used, `StrategyMACDBracketOrder`.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经阅读了[第 8 章](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml)的最后六个示例，*算法交易策略 -
    逐步编码*，以完全了解所使用的策略类`StrategyMACDBracketOrder`的全貌。
- en: Getting ready
  id: totrans-394
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure the `algobulls_connection` and `strategy_code2` objects are available
    in your Python namespace. Refer to the *MACD-Bracket-Order strategy – fetching
    the strategy* recipe of this chapter to set up the `algobulls_connection` and
    `strategy_code2` objects.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 确保`algobulls_connection`和`strategy_code2`对象在您的 Python 命名空间中可用。参考本章的*MACD-Bracket-Order
    策略 - 获取策略*示例设置`algobulls_connection`和`strategy_code2`对象。
- en: How to do it…
  id: totrans-396
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Fetch the paper trading statistics report for `strategy_code2`:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 获取`strategy_code2`的模拟交易统计报告：
- en: '[PRE61]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'We get the following output (your output may differ):'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出（你的输出可能有所不同）：
- en: '![](img/ba2b272b-98ab-40ad-b12d-cb1f97f886b1.png)'
  id: totrans-400
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ba2b272b-98ab-40ad-b12d-cb1f97f886b1.png)'
- en: How it works…
  id: totrans-401
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'In this recipe, you use the `get_papertradig_report_statistics()` method of
    the `algobulls_connection` object to fetch the paper trading statistics table
    in real time. This method accepts strategy code as an argument. You pass `strategy_code2`
    here. The return data is a `pandas.DataFrame` object with two columns—`highlight_type`
    and `highlight_value`—and multiple rows. The rows are described as follows:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，您使用`algobulls_connection`对象的`get_papertradig_report_statistics()`方法实时获取模拟交易统计表。此方法接受策略代码作为参数。您在此处传递了`strategy_code2`。返回的数据是一个`pandas.DataFrame`对象，有两列—`highlight_type`和`highlight_value`—以及多行。行描述如下：
- en: '`Net PnL`: The cumulative paper trading P&L. This is also the `pnl_cumulative_absolute`
    value of the first entry in the P&L table.'
  id: totrans-403
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`净盈亏`：累计模拟交易盈亏。这也是盈亏表中第一项的`pnl_cumulative_absolute`值。'
- en: '`Net PnL %`: The cumulative paper trading P&L percentage. This is also the
    `pnl_cumulative_percentage` value of the first entry in the P&L table.'
  id: totrans-404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`净盈亏百分比`：累计模拟交易盈亏百分比。这也是盈亏表中第一项的`pnl_cumulative_percentage`值。'
- en: '`Max Drawdown`: The lowest value in the `pnl_cumulative` column of the P&L
    table. This indicates the maximum loss your strategy has encountered during the
    execution.'
  id: totrans-405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`最大回撤`：盈亏表中`pnl_cumulative`列中的最低值。这表示您的策略在执行过程中遇到的最大损失。'
- en: '`Max Drawdown %`: Mathematically, this is *(Max Drawdown)* / *(corresponding*
    *entry_price )/ exit_quantity* × *100*.'
  id: totrans-406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`最大回撤百分比`：数学上来说，这是*(最大回撤)* / *(相应的入场价格 / 出场数量)* × *100*。'
- en: '`Number of Trades`: Total trades (entry and exit counted as one) during the
    session.'
  id: totrans-407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`交易数目`：会话期间的总交易数（入场和出场计为一次）。'
- en: '`Number of Wins`: The count of trades where the trade P&L was non-negative.'
  id: totrans-408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`获利次数`：交易盈亏为非负数的交易计数。'
- en: '`Number of Losses`: The count of trades where the trade P&L was negative.'
  id: totrans-409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`亏损次数`：交易盈亏为负数的交易计数。'
- en: '`Number of Long Trades`: The count of trades where the entry transaction type
    was `''BUY''`.'
  id: totrans-410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`多头交易数目`：入场交易类型为`''BUY''`的交易计数。'
- en: '`Number of Short Trades`: The count of trades where the entry transaction type
    was `''SELL''`.'
  id: totrans-411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`空头交易数目`：入场交易类型为`''SELL''`的交易计数。'
- en: '`Max Gain`: The P&L of the trade with maximum P&L value among all trades.'
  id: totrans-412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`最大盈利`：所有交易中盈利最高的交易的盈亏（P&L）。'
- en: '`Min Gain`: The P&L of the trade with the minimum P&L value among all trades.'
  id: totrans-413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`最小盈利`：所有交易中盈利最低的交易的盈亏（P&L）。'
- en: '`Avg. Profit per winning trade`: Mathematically, this is *(Total P&L of winning
    trades)* / *(Count of winning trades)*.'
  id: totrans-414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`平均每次盈利交易盈利`：数学上来说，这是*(盈利交易的总盈亏)* / *(盈利交易的计数)*。'
- en: '`Avg. Profit per losing trade`: Mathematically, this is *(Total P&L of losing
    trades)* / *(Count of losing trades)*.'
  id: totrans-415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`平均每次亏损交易盈利`：数学上来说，这是*(亏损交易的总盈亏)* / *(亏损交易的计数)*。'
- en: There's more...
  id: totrans-416
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: If the statistics table is fetched while the paper trading job is still running,
    the previously mentioned numbers would be intermediate numbers, based on the trades
    completed until that time. The numbers may change as more trades are punched until
    the paper trading job completes.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在模拟交易作业仍在运行时获取统计表，则先前提到的数字将是中间数字，基于直到那时完成的交易。随着更多交易完成直到模拟交易作业完成，这些数字可能会更改。
- en: Once the paper trading job moves to the `'STOPPED'` state, the statistics table
    will not change anymore. You can fetch the complete statistics table any time
    before you submit the next paper trading job for the same strategy. If a new paper
    trading job is submitted (for the same strategy), this table will no longer be
    accessible via the `get_papertrading_report_statistics()` method. You can save
    the fetched report to a `.csv` file if you'd like to refer to it at a later point
    in time.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦模拟交易作业转移到`'STOPPED'`状态，统计表将不再更改。在提交下一个相同策略的模拟交易作业之前，您可以随时获取完整的统计表。如果提交了新的模拟交易作业（针对相同策略），则无法通过`get_papertrading_report_statistics()`方法再次访问此表。如果您希望稍后参考，可以将获取的报告保存到`.csv`文件中。
- en: MACD-Bracket-Order strategy – fetching a paper trading report – order history
  id: totrans-419
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MACD-Bracket-Order策略 – 获取模拟交易报告 – 订单历史
- en: After submitting a paper trading job on the AlgoBulls platform, the AlgoBulls
    paper trading engine starts executing the strategy. During the execution, along
    with the logs, P&L table, and statistics table, the AlgoBulls paper trading engine
    also generates an order history log in real time. This log contains state transitions
    of every order, along with the timestamps and additional information (if any)
    for each order state. The order history log is crucial in understanding how long
    it has taken for a trade to go from `'OPEN'` to `'COMPLETE'` or to the `'CANCELLED'`
    state. For example, the `MARKET` orders would immediately go from an `'OPEN'`
    to `'COMPLETE'` state but the `LIMIT` orders may take a while, based on the market
    conditions, to go from an `'OPEN'` to `'COMPLETE'` state, or they may even get
    to the `'CANCELLED'` state. All this information is available in the order history
    log. (Refer to the state machine diagrams in [Chapter 6](077b54a1-c9c4-424c-912a-11f28db3797f.xhtml),
    *Placing Regular Orders on the Exchange*, for more information on order state
    transitions.)
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 在 AlgoBulls 平台上提交了一个模拟交易作业后，AlgoBulls 模拟交易引擎开始执行策略。在执行过程中，除了日志、盈亏表和统计表之外，AlgoBulls
    模拟交易引擎还实时生成订单历史记录。此日志包含每个订单的状态转换，以及每个订单状态的时间戳和其他信息（如果有的话）。订单历史记录对于理解交易从 `'OPEN'`
    状态到 `'COMPLETE'` 或 `'CANCELLED'` 状态所需的时间至关重要。例如，`MARKET` 订单将立即从 `'OPEN'` 转换到 `'COMPLETE'`
    状态，但是 `LIMIT` 订单可能需要一段时间，根据市场情况，从 `'OPEN'` 转换到 `'COMPLETE'` 状态，或者甚至转换到 `'CANCELLED'`
    状态。所有这些信息都包含在订单历史记录中。（有关订单状态转换的更多信息，请参阅 [第 6 章](077b54a1-c9c4-424c-912a-11f28db3797f.xhtml)
    中的状态机图，*在交易所上放置常规订单*。）
- en: In this recipe, you will fetch the order history log for your strategy. This
    log is available as soon as the first trade is punched by your strategy after
    you submit a paper trading job. The AlgoBulls platform allows you to fetch the
    order history log in real time, even while the paper trading job is still going
    on. This helps us get details for orders in the end states without having to wait
    for the paper trading job to complete. The `pyalgotrading` package provides a
    simple method to fetch the order history log for a given strategy.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，您将获取您策略的订单历史记录。此日志在您提交模拟交易作业后，您的策略第一笔交易打入后即可使用。即使模拟交易作业仍在进行中，AlgoBulls
    平台也允许您实时获取订单历史记录。这有助于我们获取最终状态订单的详细信息，而无需等待模拟交易作业完成。`pyalgotrading` 包提供了一个简单的方法来获取给定策略的订单历史记录。
- en: Make sure you have gone through the last six recipes of [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml),
    *Algorithmic Trading Strategies – Coding Step by Step*, to get a complete picture
    of the strategy class used, `StrategyMACDBracketOrder`.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您已经阅读了 [第 8 章](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml) 的最后六个示例，*算法交易策略
    - 逐步编码*，以获取使用的策略类 `StrategyMACDBracketOrder` 的完整图景。
- en: Getting ready
  id: totrans-423
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure the `algobulls_connection` and `strategy_code2` objects are available
    in your Python namespace. Refer to the *MACD-Bracket-Order strategy – fetching
    the strategy* recipe of this chapter to set up the `algobulls_connection` and
    `strategy_code2` objects.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您的 Python 命名空间中可用 `algobulls_connection` 和 `strategy_code2` 对象。请参阅本章 *MACD-Bracket-Order
    策略 - 获取策略* 的示例设置 `algobulls_connection` 和 `strategy_code2` 对象。
- en: How to do it…
  id: totrans-425
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Fetch the paper trading order history report for `strategy_code2`:'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 获取 `strategy_code2` 的模拟交易订单历史报告：
- en: '[PRE62]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'We get the following output (your output may differ):'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出（您的输出可能有所不同）：
- en: '[PRE63]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: The complete output is not shown here. Please visit the following link to read
    the complete output: [https://github.com/algobulls/pyalgostrategypool/blob/master/pyalgostrategypool/sample/papertrading/strategy_macd_bracket_order/oms_order_history.log](https://github.com/algobulls/pyalgostrategypool/blob/master/pyalgostrategypool/sample/papertrading/strategy_macd_bracket_order/oms_order_history.log)
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 此处未显示完整输出。请访问以下链接阅读完整输出：[https://github.com/algobulls/pyalgostrategypool/blob/master/pyalgostrategypool/sample/papertrading/strategy_macd_bracket_order/oms_order_history.log](https://github.com/algobulls/pyalgostrategypool/blob/master/pyalgostrategypool/sample/papertrading/strategy_macd_bracket_order/oms_order_history.log)
- en: How it works…
  id: totrans-431
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'In this recipe, you use the `get_papertrading_report_order_history()` method
    of the `algobulls_connection` object to fetch order history logs in real time.
    This method accepts strategy code as an argument. You pass `strategy_code2` here.
    The return data is a string, described as follows:'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，您使用 `algobulls_connection` 对象的 `get_papertrading_report_order_history()`
    方法实时获取订单历史记录。该方法接受策略代码作为参数。您在此处传递 `strategy_code2`。返回的数据是一个字符串，描述如下：
- en: 'For every order, the log has the following information:'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个订单，日志都包含以下信息：
- en: 'A descriptive table on the order, with the following mentioned columns:'
  id: totrans-434
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个关于订单的描述性表，列出了以下列：
- en: '`INST`: The financial instrument of the order'
  id: totrans-435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INST`：订单的财务工具'
- en: '`TIME`: The time at which the order was placed'
  id: totrans-436
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TIME`：订单下达的时间'
- en: '`ID`: The unique ID of the order'
  id: totrans-437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ID`：订单的唯一ID'
- en: '`TT`: The order transaction type (`BUY` or `SELL`)'
  id: totrans-438
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TT`：订单交易类型（`买入` 或 `卖出`）'
- en: 'A sample of the table is shown as follows:'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 表格的示例如下所示：
- en: '[PRE64]'
  id: totrans-440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: This information will help you find this exact order in the strategy execution
    log.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 这些信息将帮助您在策略执行日志中找到这个确切的订单。
- en: 'An order state transition table, with the following mentioned columns:'
  id: totrans-442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个订单状态转换表，列出了以下列：
- en: '`TIME`: The timestamp at which the order enters into the state represented
    by the `STATE` column.'
  id: totrans-443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TIME`：订单进入由 `STATE` 列表示的状态的时间戳。'
- en: '`STATE`: The order enters into this state at the timestamp mentioned in the
    `TIME` column.'
  id: totrans-444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`STATE`：订单在 `TIME` 列中提到的时间进入此状态。'
- en: '`MSG`: Additional message from OMS for any unexpected state transitions. For
    example, orders that go to the `REJECTED` state have a message from the OMS stating
    the reason for their rejection. This column is usually empty.'
  id: totrans-445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MSG`：来自OMS的关于任何意外状态转换的附加消息。例如，进入 `REJECTED` 状态的订单会有来自OMS的消息说明其被拒绝的原因。此列通常为空。'
- en: 'A sample of the table is shown as follows:'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 表格的示例如下所示：
- en: '[PRE65]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: From this table, you can see that upon placing the order at 10:00 AM, it transitions
    to the  `TRIGGER PENDING` state. It stays there for 15 minutes before transitioning
    to the `CANCELLED` state. This is expected as the order is a bracket limit order.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个表中，你可以看到在上午10:00下达订单后，它转换到 `TRIGGER PENDING` 状态。它在那里停留了15分钟，然后转换到 `CANCELLED`
    状态。这是符合预期的，因为订单是一个限价范围订单。
- en: There's more...
  id: totrans-449
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这还不是全部...
- en: Once the paper trading job moves to the `STOPPED` state, no new order history
    logs are generated. You can fetch the complete order history logs any time before
    you submit the next paper trading job for the same strategy. If a new paper trading
    job is submitted (for the same strategy), these logs will no longer be accessible
    via the `get_papertrading_report_order_history()` method. You can save the fetched
    logs to a file if you'd like to refer to it at a later point in time.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦模拟交易作业进入 `STOPPED` 状态，就不会生成新的订单历史记录日志。您可以在提交下一个相同策略的模拟交易作业之前随时获取完整的订单历史记录日志。如果提交了新的模拟交易作业（对于相同的策略），则无法通过
    `get_papertrading_report_order_history()` 方法访问这些日志。如果您希望稍后参考这些日志，可以将获取的日志保存到文件中。
