["```py\nlet myval = 100\n```", "```py\nmodule application\n\nlet myval = 100\n```", "```py\nmodule MainModule =\n    let x = 2\n    let y = 3\n    module NestedModule =\n        let f = \n            x + y\n\nprintfn \"%A\" MainModule.NestedModule.f\n```", "```py\nmodule Module1 =\n    let x = Module2.Version() // Error: Not yet declared!\n\nmodule Module2 =\n    let Version() = \n        \"\"Version 1.0\"\n```", "```py\nmodule Module2 =\n    let Version() = \n        \"\"Version 1.0\"\n\nmodule Module1 =\n    let x = Module2.Version() // Now Module2 is found\n```", "```py\nmodule Module2 =\n    let private Version() = \n        \"Version 1.0\"\n\nmodule Module1 =\n    let x = Module2.Version() // Error: Version is private!\n```", "```py\nmodule Module2 =\n    let internal Version() = \n        \"Version 1.0\"\n\nmodule Module1 =\n    let x = Module2.Version() // Now it works again, Version is set to be internal\n```", "```py\nnamespace Namespace1.Library1\n\n    module Module2 =\n        let internal Version() = \n            \"Version 1.0\"\n\n    module Module1 =\n        let x = Module2.Version()\n```", "```py\nnamespace Namespace1.Library1\n\n    module Module2 =\n        let internal Version() = \n            \"Version 1.0\"\n\nnamespace Namespace1.Library2\n\n    module Module1 =\n        let x = Namespace1.Library1.Module2.Version()\n```", "```py\ntype OHLC = \n    {\n    o: float\n    h: float\n    l: float\n    c: float\n    }\n```", "```py\nlet ohclBar : OHLC = {o = 1.0; h = 2.0; l = 3.0; c = 4.0} \n```", "```py\ntype Quote =\n    {\n    bid : float\n    ask : float\n    }\n    member this.midpoint() = (this.bid + this.ask) / 2.0\n\nlet q : Quote = {bid = 100.0; ask = 200.0} \nq.midpoint()\n```", "```py\ntype Quote =\n    {\n    mutable bid : float\n    mutable ask : float\n    }\n    member this.midpoint() = (this.bid + this.ask) / 2.0\n\nlet q : Quote = {bid = 100.0; ask = 200.0} q.midpoint()\nq.bid <- 150.0\nq.midpoint()\n```", "```py\nlet matchQuote (quote : Quote) =\nmatch quote with\n   | { bid = 0.0; ask = 0.0 } -> printfn \"Both bid and ask is zero\"\n   | { bid = b; ask = a } -> printfn \"bid: %f, ask: %f\" b a\n\nlet q1 : Quote = {bid = 100.0; ask = 200.0}\nlet q2 : Quote = {bid = 0.0; ask = 0.0}\n\nmatchQuote q1\nmatchQuote q2\n```", "```py\ntype OrderSide =\n    | Buy\n    | Sell\n\nlet buy = Buy\nlet sell = Sell\n\nlet testOrderSide() =\n    printfn \"Buy: %A\" buy\n    printfn \"Sell: %A\" sell\n\ntestOrderSide()\n```", "```py\ntype OrderSide =\n    | Buy\n    | Sell\nlet toggle1 = \n\tmatch x with\n\t| Buy -> Sell\n\t| Sell -> Buy\n\nlet toggle2 = function\n    | Buy -> Sell\n    | Sell -> Buy\n\nlet buy = Buy\nlet sell = Sell\n\nlet testOrderSide() =\n    printfn \"Buy: %A\" buy\n    printfn \"Sell: %A\" sell\n    printfn \"Toggle Buy: %A\" (toggle1 buy)\n    printfn \"Toggle Sell: %A\" (toggle2 sell)\n\ntestOrderSide()\n```", "```py\ntype OptionT = \n    | Put of float\n    | Call of float\n    | Combine of OptionT * OptionT\n```", "```py\ntype Tree = \n    | Leaf of int\n    | Node of tree * tree\n\nlet SimpleTree = \n    Node (\n        Leaf 1, \n        Leaf 2\n        )\n// Iterate tree\nlet countLeaves tree =\n    let rec loop sum = function\n        | Leaf(_) -> sum + 1\n        | Node(tree1, tree2) ->\n            sum + (loop 0 tree1) + (loop 0 tree2)\n    loop 0 tree\n```", "```py\n// Enumeration\ntype RGB = \n    | Red = 0\n    | Green = 1\n    | Blue = 2\n```", "```py\nlet col1 : Color = Color.Red\n```", "```py\nlet array1 = [| 1; 2; 3 |]\n```", "```py\narray1.[0] <- 10\n```", "```py\nlet array2 = [| 1.0; 2; 3 |] \n```", "```py\nlet array3 = [| for i in 1 .. 10 -> i * i |]\n```", "```py\narray1.[0]\n```", "```py\narray1.[0..2]\nThis can be shortened further, for example, if you select the elements from the beginning to the element with index 2: array1.[..2] \n```", "```py\narray1.[2..] \n```", "```py\nlet arrayOfTenZeroes : int array = Array.zeroCreate 10\n```", "```py\nlet myEmptyArray = Array.empty\n```", "```py\nprintfn \"%A\" (Array.append [| 1; 2; 3|] [| 4; 5; 6|])\n```", "```py\nprintfn \"%A\" (Array.filter (fun elem -> elem % 2 = 0) [| 1 .. 10|])\n```", "```py\n> let list1 = [1 .. 10];;\n\nval list1 : int list = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10]\n```", "```py\n> let list2 = [ for i in 1 .. 10 -> i * i ];;\n\nval list2 : int list = [1; 4; 9; 16; 25; 36; 49; 64; 81; 100]\n```", "```py\n> 10 :: [10];;\nval it : int list = [10; 10]\n\n> 10 :: list1;;\nval it : int list = [10; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10]\n```", "```py\n> [10] @ list1;;\nval it : int list = [10; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10]\n\n> list1 @ list2;;\nval it : int list =\n[1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 1; 4; 9; 16; 25; 36; 49; 64; 81; 100]\n```", "```py\n> List.nth list1 3;;\nval it : int = 4\n```", "```py\n> let list3 = [10.0 .. 20.0];;\n\nval list3 : float list =\n  [10.0; 11.0; 12.0; 13.0; 14.0; 15.0; 16.0; 17.0; 18.0; 19.0; 20.0]\n\n> List.average list3;;\nval it : float = 15.0\n```", "```py\nList.average list1;;\n\nList.average list1;;\n-------------^^^^^\n\n... error FS0001: The type 'int' does not support the operator 'DivideByInt'\n```", "```py\n> List.min list1;;\nval it : int = 1\n\n> List.max list1;;\nval it : int = 10\n```", "```py\n> List.append list1 list2;;\nval it : int list =\n  [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 1; 4; 9; 16; 25; 36; 49; 64; 81;100]\n```", "```py\n> List.filter (fun elem -> elem > 10) list1;;\nval it : int list = []\n\n> List.filter (fun elem -> elem > 3) list1;;\nval it : int list = [4; 5; 6; 7; 8; 9; 10]\n\n> List.find (fun elem -> elem > 3) list1;;\nval it : int = 4\n\n> List.exists (fun elem -> elem > 3) list1;;\nval it : bool = true\n\n> List.exists (fun elem -> elem > 10) list1;;\nval it : bool = false\n```", "```py\n> List.zip list1 list2;;\nval it : (int * int) list =\n  [(1, 1); (2, 4); (3, 9); (4, 16); (5, 25); (6, 36); (7, 49); (8, 64); (9, 81); (10, 100)]\n```", "```py\n> List.fold (+) 0 list1;;\nval it : int = 55\n```", "```py\n> List.fold (*) 1 list1;;\nval it : int = 3628800\n```", "```py\n    // Get the length of a list\n    let rec getLengthOfList l = function\n        | [] -> printfn \"Length of list: %d\" l\n        | head :: tail -> getLengthOfList (l+1) tail\n\n    let myList = [1..10]\n    getLengthOfList 0 myList\n```", "```py\n    // Get the second last element of a list\n    let rec getSecondLastElement = function\n        | head :: tail :: [] -> head\n        | head :: tail -> getSecondLastElement tail\n\n    getSecondLastElement myList\n```", "```py\n> seq {1 .. 2}\nval it : seq<int> = [1; 2]\n\n> seq {1 .. 10}\nval it : seq<int> = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10]\n\n> seq {1 .. 10 .. 100}\nval it : seq<int> = [1; 11; 21; 31; 41; 51; 61; 71; 81; 91]\n> seq {for i in 1 .. 10 do yield i * i}\nval it : seq<int> = [1; 4; 9; 16; 25; 36; 49; 64; 81; 100]\n\n> seq {for i in 1 .. 10 -> i * i}\nval it : seq<int> = [1; 4; 9; 16; 25; 36; 49; 64; 81; 100]\n```", "```py\n> Seq.nth 3 { 1 .. 10};;\nval it : int = 4\n```", "```py\n> Seq.average {0.0 .. 100.0};;\nval it : float = 50.0\n```", "```py\n> Seq.min seq1;;\nval it : int = 1\n\n> Seq.max seq1;;\nval it : int = 10\n```", "```py\n> Seq.append seq1 seq1;;\nval it : seq<int> = seq [1; 2; 3; 4; …]\n```", "```py\n> Seq.empty;;\nval it : seq<'a> = seq []\n```", "```py\n> Seq.filter (fun elem -> elem > 3) seq1;;\nval it : seq<int> = seq [4; 5; 6; 7; ...]\n\n> Seq.filter (fun elem -> elem > 3) seq1;;\nval it : seq<int> = seq [4; 5; 6; 7; ...]\n\n> Seq.find (fun elem -> elem > 3) seq1;;\nval it : int = 4\n\n> Seq.exists (fun elem -> elem > 3) seq1;;\nval it : bool = true\n\n> Seq.exists (fun elem -> elem > 10) seq1;;\nval it : bool = false\n```", "```py\n> Seq.head seq1;;\nval it : int = 1\n```", "```py\n> let s1 = set [1; 2; 7];;\n```", "```py\nval s1 : Set<int> = set [1; 2; 7]\n```", "```py\n> s1.Add(9);;\nval it : Set<int> = set [1; 2; 7; 9]\n```", "```py\n> Set.contains 1 s1;;\nval it : bool = true\n```", "```py\n> let s2 = Set.ofSeq [1..10];;\nval s2 : Set<int> = set [1; 2; 3; 4; 5; 6; 7; 8; 9; ...]\n```", "```py\n> let s3 = Set.ofArray([| for i in 1 .. 5 -> i * i |]);;\nval s3 : Set<int> = set [1; 4; 9; 16; 25]\n```", "```py\n> Set.count s1;;\nval it : int = 3\n```", "```py\n> Set.fold (fun a b -> a + b) 0 s1;;\nval it : int = 10\n\n> Set.fold (fun a b -> a * b) 1 s1;;\nval it : int = 14\n```", "```py\n> Set.fold (+) 0 s1;;\nval it : int = 10\n\n> Set.fold (*) 1 s1;;\nval it : int = 14\n```", "```py\n> Set.exists (fun elem -> elem = 2) s1;;\nval it : bool = true\n\n> Set.exists ((=) 4) s1;;val it : bool = false\n```", "```py\n> Set.filter (fun elem -> elem > 1) s1;;\nval it : Set<int> = set [2; 7]\n\n> Set.filter (fun elem -> elem < 2) s1;;\nval it : Set<int> = set [1]\n```", "```py\n> Set.partition (fun elem -> elem < 2) s1;;\nval it : Set<int> * Set<int> = (set [1], set [2; 7])\n```", "```py\n> Set.map (fun elem -> elem + 2) s1;;\nval it : Set<int> = set [3; 4; 9]\n```", "```py\n> let m1 = Map.empty.Add(\"Age\", 27);;\nval m1 : Map<string,int> = map [(\"Age\", 27)]\n```", "```py\n> m1.[\"Age\"];;\nval it : int = 27\n```", "```py\n> let m2 = [\"Year\", 2009; \"Month\", 21; \"Day\", 3] |> Map.ofList;;\nval m2 : Map<string,int> = map [(\"Day\", 3); (\"Month\", 21); (\"Year\", 2009)]\n```", "```py\n> Map.filter (fun _ v -> v = 27) m1;;\nval it : Map<string,int> = map [(\"Age\", 27)]\n```", "```py\n> Map.exists (fun _ v -> v = 27) m1;;\nval it : bool = true\n```", "```py\n> Map.partition (fun _ v -> v = 27) m1;;\nval it : Map<string,int> * Map<string,int> = (map [(\"Age\", 27)], map [])\n```", "```py\n> Map.containsKey \"Age\" m1;;\nval it : bool = true\n\n> Map.containsKey \"Ages\" m1;;\nval it : bool = false\n```", "```py\nlet evalOption (o : int option) = \n    match o with\n    | Some(a) -> printfn \"Found value: %d\" a\n    | None -> printfn \"None\"\nlet some : int option = Some(1)\nlet none : int option = None\n```", "```py\n> evalOption some;;\nFound value: 1\nval it : unit = ()\n\n> evalOption none;;\nNone\nval it : unit = ()\n```", "```py\nlet str1 = \"This is a string\"\nlet str2 = @\"This is a string with \\ \\ //\"\nlet str3 = \"\"\" this is \"another\" string\"\"\"\n\nprintfn \"%s\" (str1.[0..2])\n\nlet str4 = \"Hello, \" + \"world\"\nlet str5 = str1 + str3\n\nString.length str4\nString.Compare (str1, \"This is a string\")\nString.Compare (str1, \"This is another string\")\n\nString.map (fun s -> Char.ToUpper s) str1\n```", "```py\nlet rec fib n =\n   if n <= 2 then 1\n   else fib (n - 1) + fib (n – 2)\n```", "```py\nlet rec sum list =\n   match list with\n   | head :: tail -> head + sum tail\n   | [] -> 0\n```", "```py\nlet rec len list =\n   match list with\n   | head :: tail -> 1 + len tail\n   | [] -> 0\n```", "```py\nlet rec mymap f = function\n    | [] -> []\n    | x::xs -> f x::mymap f xs\n```", "```py\nlet rec factorial1 n =\n    match n with\n    | 0 | 1 -> 1\n    | _ -> n * factorial1(n - 1)\n\nlet factorial2 n =\n    let rec tailrecfact n acc =\n        match n with\n        | 0 -> acc\n        | _ -> trecfact (n - 1) (acc * n)\n    tailrecfact n 1\n```", "```py\n> factorial1 4;;\nval it : int = 24\n\n> factorial2 4;;\nval it : int = 24\n```", "```py\n> factorial1 10;;\nval it : int = 3628800\n\n> factorial2 10;;\nval it : int = 3628800\n```", "```py\nlet sampleMatcher value =\n    match value with\n    | 0 -> \"Zero\"\n    | 1 -> \"One\"\n    | _ -> \"Greather than one\"\n\nsampleMatcher 0\n```", "```py\nlet sampleMatcher value =\n    match value with\n    | 0 -> \"Zero\"\n    | 1 -> \"One\"    \n```", "```py\nwarning FS0025: Incomplete pattern matches on this expression. For example, the value '2' may indicate a case not covered by the pattern(s).\n```", "```py\nlet nameMatcher name =\n    match name with\n    | \"John\" -> \"The name is John\"\n    | \"Bob\" -> \"Hi Bob!\"\n```", "```py\nlet nameMatcher name =\n    match name with\n    | \"John\" -> \"The name is John\"\n    | \"Bob\" -> \"Hi Bob!\"\n    | _ -> \"I don't know you!\"\n\nnameMatcher \"John\"\nnameMatcher \"Linda\"\n```", "```py\nlet sampleMatcher value =\n    match value with\n    | 0 -> \"Zero\"\n    | 1 -> \"One\"    \n    | x when x > 1 -> \"Greather than one\"\n    | _ -> \"Some strange value\"\nsampleMatcher 0\nsampleMatcher 1\nsampleMatcher 2\nsampleMatcher -1\n```", "```py\n> let (bid, ask) = (100.0, 110.0);;\nval bid : float = 100.0\nval ask : float = 110.0\n```", "```py\n> let (x, y, z) = (3.0, 2.0, 4.0);;\nval z : float = 4.0\nval y : float = 2.0\nval x : float = 3.0\n```", "```py\n> let (x, y, _) = (3.0, 2.0, 4.0);;\nval y : float = 2.0\nval x : float = 3.0\n```", "```py\nlet (|Negative|Positive|) number =\n    if number >= 0.0 then\n        Positive\n    else\n        Negative\n\nlet TestNumber (number:float) =\n    match number with\n    | Positive -> printfn \"%f is positive\" number\n    | Negative -> printfn \"%f is negative\" number\n```", "```py\n> TestNumber 0.0;;\n0.000000 is positive\nval it : unit = ()\n\n> TestNumber 16.0;;\n16.000000 is positive\nval it : unit = ()\n\n> TestNumber -7.0;;\n-7.000000 is negative\nval it : unit = ()\n```", "```py\nlet (|Limit|Market|Invalid|) (order:Order) = \n    if order.Type = OrderType.Limit && order.Price > 0.0 then \n        Limit \n    else if order.Type = OrderType.Market && order.Price = 0.0 then\n        Market\n    else \n        Invalid\n\nlet TestOrder (order:Order) =\n   match order with\n   | Market -> printfn \"Market order\"\n   | Limit -> printfn \"Limit order\"\n   | Invalid -> printfn \"Invalid order\"\n```", "```py\n> TestOrder (Order(Buy, Limit, 5.0));;\nLimit order\nval it : unit = ()\n\n> TestOrder (Order(Sell, Market, 0.0));;\nMarket order\nval it : unit = ()\n\n> TestOrder (Order(Sell, Limit, 0.0));;\nInvalid order\nval it : unit = ()\n\n> TestOrder (Order(Buy, Market, 2.0));;\nInvalid order\nval it : unit = ()\n\n> TestOrder (Order(Sell, Invalid, 2.0));;\nInvalid order\nval it : unit = ()\n```", "```py\nlet (|Integer|_|) str =\n   match System.Int32.TryParse(str) with\n   | (true,num) -> Some(num)\n   | _ -> None\n\nlet (|Double|_|) str =\n   match System.Double.TryParse(str) with\n   | (true,num) -> Some(num)\n   | _ -> None\n\nlet testParse numberStr = \n    match numberStr with\n    | Integer num -> printfn \"Parsed an integer '%A'\" num\n    | Double num -> printfn \"Parsed a double '%A'\" num\n    | _ -> printfn \"Couldn't parse string: %A\" numberStr\n\n> testParse \"10.0\"\nParsed a double '10.0'\nval it : unit = ()\n> testParse \"11\"\nParsed an integer '11'\nval it : unit = ()\n\n> testParse \"abc\"\nCouldn't parse string: \"abc\"\nval it : unit = ()\n```", "```py\nlet genericListMaker<'T>(x, y, z) = \nlet list = new List<'T>()\n   list.Add(x)\n   list.Add(y)\n   list.Add(z)\n   list\n```", "```py\n> genericListMaker<int>(1, 2, 3);;val it : List<int> = seq [1; 2; 3]\n> genericListMaker<float>(1.0, 2.0, 3.0);;val it : List<float> = seq [1.0; 2.0; 3.0]\n> genericListMaker<string>(\"1\", \"2\", \"3\");;val it : List<string> = seq [\"1\"; \"2\"; \"3\"]\n```", "```py\nlet lazyListFolding =\n  lazy \n  ( \n    let someList = [for i in 1 .. 10 -> i * 2]\n    List.fold (+) 0 someList\n  )\n```", "```py\n> let forcedMultiply1 = lazyListFolding.Force();;\n\nval forcedMultiply1 : int = 110\n```", "```py\nval lazyMultiply : Lazy<int> = Value is not created.\n```", "```py\n/// Conversion rate representing 1 EUR in USD\nlet rateEurUsd = 1.28M\n/// Converts amount in EUR to USD\nlet euroToUsds eur = eur * rateEurUsd\n\n/// Convert 10000 EUR to USD\nlet usd = euroToUsds 10000.0M\n```", "```py\n[<Measure>]\ntype USD\n\n[<Measure>]\ntype EUR\n\nlet rateEurUsd = 1.28M<EUR/USD>\n\n// Converts amount in EUR to USD\nlet euroToUsds (eur:decimal<EUR>) = eur * rateEurUsd\n\n// Convert 10000 EUR to USD\nlet usd = euroToUsds 10000.0M<EUR>\n```", "```py\n[<Measure>]\ntype USD\n\n[<Measure>]\ntype EUR\n\n[<Measure>]\ntype YEN\n\nlet rateEurUsd = 1.28M<EUR/USD>\n// Converts amount in EUR to USD\nlet euroToUsds (eur:decimal<EUR>) = eur * rateEurUsd\n\n// Convert 10000 EUR to USD\nlet usd = euroToUsds 10000.0M<YEN>\n```", "```py\nerror FS0001: Type mismatch. Expecting a\n    decimal<EUR>    \nbut given a\n    decimal<YEN>    \nThe unit of measure 'EUR' does not match the unit of measure 'YEN'\n```", "```py\nopen System.Windows.Forms\n\nlet form = new Form(Text=\"F# Events\",\n                    Visible = true,\n                    TopMost = true)\n\nform.Click.Add(fun evArgs -> System.Console.WriteLine(\"Click event handler\"))\nApplication.Run(form)\n```", "```py\nopen System.Windows.Forms\n\nlet form = new Form(Text=\"F# Events\",\n                    Visible = true,\n                    TopMost = true)\n\nform.MouseDown \n|> Event.filter (fun args -> args.X < 50)\n|> Event.map (fun args -> printfn \"%d %d\" args.X args.Y)\n```", "```py\nopen System.Threading\nopen System.ComponentModel\n\nlet worker = new BackgroundWorker()\nworker.DoWork.Add(fun args ->    \n    for i in 1 .. 50 do\n        // Simulates heavy calculation\n        Thread.Sleep(1000)\n        printfn \"%A\" i\n)\nworker.RunWorkerCompleted.Add(fun args ->\n    printfn \"Completed...\"\n)\n\nworker.RunWorkerAsync()\n```", "```py\nopen System.Threading\nopen System.ComponentModel\n\nlet worker = new BackgroundWorker()\nworker.DoWork.Add(fun args ->    \n    for i in 1 .. 50 do\n        // Simulates heavy calculation\n        Thread.Sleep(1000)\n        printfn \"A: %A\" i\n)\n\nworker.DoWork.Add(fun args ->    \n    for i in 1 .. 10 do\n        // Simulates heavy calculation\n        Thread.Sleep(500)\n        printfn \"B: %A\" i\n)\n\nworker.RunWorkerCompleted.Add(fun args ->\n    printfn \"Completed...\"\n)\n\nworker.RunWorkerAsync()\n```", "```py\nopen System.ComponentModel\n\nlet workerCancel = new BackgroundWorker(WorkerSupportsCancellation = true)\nworkerCancel.DoWork.Add(fun args ->\n    printfn \"apan %A\" args\n    for i in 1 .. 50 do\n        if (workerCancel.CancellationPending = false) then\n            Thread.Sleep(1000)\n            printfn \"%A\" i\n)\n\nworkerCancel.RunWorkerCompleted.Add(fun args ->\n    printfn \"Completed...\"\n)\n\nworkerCancel.RunWorkerAsync()\n```", "```py\nworkerCancel.CancelAsync()\n```", "```py\nopen System.Threading\n\nlet runMe() = \n    for i in 1 .. 10 do\n        try\n            Thread.Sleep(1000)\n        with\n            | :? System.Threading.ThreadAbortException as ex -> printfn \"Exception %A\" ex\n        printfn \"I'm still running...\"\n\nlet thread = new Thread(runMe)\nthread.Start()\n```", "```py\nopen System.Threading\n\nlet runMe() = \n    for i in 1 .. 10 do\n        try\n            Thread.Sleep(1000)\n        with\n            | :? System.Threading.ThreadAbortException as ex -> printfn \"Exception %A\" ex\n        printfn \"I'm still running...\"\n\nlet createThread() =\n    let thread = new Thread(runMe)\n    thread.Start()\n\ncreateThread()\ncreateThread()\n```", "```py\nopen System.Threading\n\nlet runMe(arg:obj) = \n    for i in 1 .. 10 do\n        try\n            Thread.Sleep(1000)\n        with\n            | :? System.Threading.ThreadAbortException as ex -> printfn \"Exception %A\" ex\n        printfn \"%A still running...\" arg\n\nThreadPool.QueueUserWorkItem(new WaitCallback(runMe), \"One\")\nThreadPool.QueueUserWorkItem(new WaitCallback(runMe), \"Two\")\nThreadPool.QueueUserWorkItem(new WaitCallback(runMe), \"Three\")\n```", "```py\nasync { expression }\n```", "```py\nmyFunction1()\nlet! response = req.AsyncGetResponse()\nmyFunction2()\n```", "```py\nopen System.Net\nopen Microsoft.FSharp.Control.WebExtensions\n/// Stock symbol and URL to Yahoo finance\nlet urlList = [ \"MSFT\", \"http://ichart.finance.yahoo.com/table.csv?s=MSFT&d=6&e=6&f=2013&g=d&a=1&b=1&c=2010&ignore=.csv\" \n                \"GOOG\", \"http://ichart.finance.yahoo.com/table.csv?s=GOOG&d=6&e=6&f=2013&g=d&a=1&b=1&c=2010&ignore=.csv\" \n                \"EBAY\", \"http://ichart.finance.yahoo.com/table.csv?s=EBAY&d=6&e=6&f=2013&g=d&a=1&b=1&c=2010&ignore=.csv\"\n                \"AAPL\", \"http://ichart.finance.yahoo.com/table.csv?s=AAPL&d=6&e=6&f=2013&g=d&a=1&b=1&c=2010&ignore=.csv\"\n                \"ADBE\", \"http://ichart.finance.yahoo.com/table.csv?s=ADBE&d=6&e=6&f=2013&g=d&a=1&b=1&c=2010&ignore=.csv\"\n              ]\n\n/// Async fetch of CSV data\nlet fetchAsync(name, url:string) =\n    async { \n        try \n            let uri = new System.Uri(url)\n            let webClient = new WebClient()\n            let! html = webClient.AsyncDownloadString(uri)\n            printfn \"Downloaded historical data for %s, received %d characters\" name html.Length\n        with\n            | ex -> printfn \"Exception: %s\" ex.Message\n    }\n\n/// Helper function to run in async parallel\nlet runAll() =\n    urlList\n    |> Seq.map fetchAsync\n    |> Async.Parallel \n    |> Async.RunSynchronously\n    |> ignore\n\n/// Get max closing price from 2010-01-01 for each stock\nrunAll()\n```", "```py\nopen System.Net\nopen Microsoft.FSharp.Control.WebExtensions\n\n/// Stock symbol and URL to Yahoo finance\nlet urlList = [ \"MSFT\", \"http://ichart.finance.yahoo.com/table.csv?s=MSFT&d=6&e=6&f=2013&g=d&a=1&b=1&c=2010&ignore=.csv\" \n                \"GOOG\", \"http://ichart.finance.yahoo.com/table.csv?s=GOOG&d=6&e=6&f=2013&g=d&a=1&b=1&c=2010&ignore=.csv\" \n                \"EBAY\", \"http://ichart.finance.yahoo.com/table.csv?s=EBAY&d=6&e=6&f=2013&g=d&a=1&b=1&c=2010&ignore=.csv\"\n                \"AAPL\", \"http://ichart.finance.yahoo.com/table.csv?s=AAPL&d=6&e=6&f=2013&g=d&a=1&b=1&c=2010&ignore=.csv\"\n                \"ADBE\", \"http://ichart.finance.yahoo.com/table.csv?s=ADBE&d=6&e=6&f=2013&g=d&a=1&b=1&c=2010&ignore=.csv\"\n              ]\n\n/// Parse CSV and extract max price\nlet getMaxPrice(data:string) =   \n    let rows = data.Split('\\n')\n    rows\n    |> Seq.skip 1\n    |> Seq.map (fun s -> s.Split(','))\n    |> Seq.map (fun s -> float s.[4])    \n    |> Seq.take (rows.Length - 2)\n    |> Seq.max\n\n/// Async fetch of CSV data\nlet fetchAsync(name, url:string) =\n    async { \n        try \n            let uri = new System.Uri(url)\n            let webClient = new WebClient()\n            let! html = webClient.AsyncDownloadString(uri)            \n            let maxprice = (getMaxPrice(html.ToString()))\n            printfn \"Downloaded historical data for %s, max closing price since 2010-01-01: %f\" name maxprice\n        with\n            | ex -> printfn \"Exception: %s\" ex.Message\n    }\n/// Helper function to run in async parallel\nlet runAll() =\n    urlList\n    |> Seq.map fetchAsync\n    |> Async.Parallel \n    |> Async.RunSynchronously\n    |> ignore\n\n/// Get max closing price from 2010-01-01 for each stock\nrunAll()\n```", "```py\nopen System\n\n// Type for our agent\ntype Agent<'T> = MailboxProcessor<'T>\n\n// Control messages to be sent to agent\ntype CounterMessage = \n    | Update of float\n    | Reset\n\nmodule Helpers =\n    let genRandomNumber (n) =\n        let rnd = new System.Random()\n        float (rnd.Next(n, 100))\n\nmodule MaxAgent =\n    // Agent to keep track of max value and update GUI\n    let sampleAgent = Agent.Start(fun inbox ->\n        let rec loop max = async {\n            let! msg = inbox.Receive()\n            match msg with\n            | Reset ->\n                return! loop 0.0\n            | Update value ->\n                let max = Math.Max(max, value)\n\n                Console.WriteLine(\"Max: \" + max.ToString())\n\n                do! Async.Sleep(1000)\n                return! loop max\n        } \n        loop 0.0)\n\nlet agent = MaxAgent.sampleAgent\nlet random = Helpers.genRandomNumber 5\nagent.Post(Update random)\n```", "```py\nMax: 15\n\nval random : float = 15.0\nval it : unit = ()\n\n> \n\nval random : float = 43.0\nval it : unit = ()\n\n> Max: 43\n\nval random : float = 90.0\nval it : unit = ()\n\n> Max: 90\n```", "```py\nagent.Post(Reset)\n```", "```py\nlet random = Helpers.genRandomNumber 5\nagent.Post(Update random)\n```", "```py\ntype OrderSide =\n    | Buy\n    | Sell\n\ntype OrderType =\n    | Market\n    | Limit\n\ntype Order(s: OrderSide, t: OrderType, p: float) =\n    member this.S = s\n    member this.T = t\n    member this.P = p\n```", "```py\n> let order = Order(Buy, Limit, 45.50);;\n\nval order : Order\n\n> order.S;;\nval it : OrderSide = Buy\n> order.T;;\nval it : OrderType = Limit\n> order.P;;\nval it : float = 45.5\n```", "```py\n// Toggle order side\ntype Order(s: OrderSide, t: OrderType, p: float) =\n    let mutable S = s\n    member this.T = t\n    member this.P = p\n\n    member this.Side\n        with get()  = S\n        and  set(s) = S <- s\n\n    member this.toggleOrderSide() =\n        match S with\n        | Buy -> S <- Sell\n        | Sell -> S <- Buy\n```", "```py\n> let order = Order(Buy, Limit, 45.50);;\n\nval order : Order\n\n> order.Side;;\nval it : OrderSide = Buy\n> order.toggleOrderSide();;\nval it : unit = ()\n> order.Side;;\nval it : OrderSide = Sell\n> order.toggleOrderSide();;\nval it : unit = ()\n> order.Side;;\nval it : OrderSide = Buy\n```", "```py\ntype Order(s: OrderSide, t: OrderType, p: float) =\n    let mutable S = s\n    member this.T = t\n    member this.P = p\n\n    member this.Side\n        with get()  = S\n        and  set(s) = S <- s\n\n    member this.Type\n        with get() = this.T\n\n    member this.Price\n        with get() = this.P\n\n    member this.toggleOrderSide() =\n        match S with\n        | Buy -> S <- Sell\n        | Sell -> S <- Buy\n```", "```py\n> order.Type;;\nval it : OrderType = Limit\n\n> order.Price;;\nval it : float = 45.5\n```", "```py\ntype Order(s: OrderSide, t: OrderType, p: float) =\n    let mutable S = s\n    member this.T = t\n    member this.P = p\n\n    member this.Side\n        with get()  = S\n        and  set(s) = S <- s\n\n    member this.Type\n        with get() = this.T\n\n    member this.Price\n        with get() = this.P\n\n    member this.toggleOrderSide() =\n        S <- this.toggleOrderSide(S)\n\n    member private this.toggleOrderSide(s: OrderSide) =\n        match s with\n        | Buy -> Sell\n        | Sell -> Buy\n\n    static member (~-) (o : Order) =\n        Order(o.toggleOrderSide(o.Side), o.Type, o.Price)\n```", "```py\n> let order1 = Order(Buy, Limit, 50.00);;\n\nval order1 : Order\n\n> let order2 = -order1;;\n\nval order2 : Order\n\n> order1;;\nval it : Order = FSI_0263+Order {P = 50.0;\n                                 Price = 50.0;\n                                 Side = Buy;\n                                 T = Limit;\n                                 Type = Limit;}\n> order2;;\nval it : Order = FSI_0263+Order {P = 50.0;\n                                 Price = 50.0;\n                                 Side = Sell;\n                                 T = Limit;\n                                 Type = Limit;}\n```", "```py\n/// <summary>Extracts the maximum closing price from the provided CSV string</summary>\n///<param name=\"str\">Unparsed CSV string.</param>\n///<remarks>Will leave the two last lines unhandled, due to Yahoo specific conditions</remarks>\n///<returns>The maximum closing price for the entire sequence.</returns>\nlet getMaxPrice(data:string) =   \n    let rows = data.Split('\\n')\n    rows\n    |> Seq.skip 1\n    |> Seq.map (fun s -> s.Split(','))\n    |> Seq.map (fun s -> float s.[4])    \n    |> Seq.take (rows.Length - 2)\n    |> Seq.max\n```"]