["```py\nts(data, start, end, frequency) \n\n```", "```py\n> StockPrice<\n-c(23.5,23.75,24.1,25.8,27.6,27,27.5,27.75,26,28,27,25.5) \n> StockPrice \n\n```", "```py\n> StockPricets<- ts(StockPrice,start = c(2016,1),frequency = 12)   \n> StockPricets  \n\n```", "```py\n> plot(StockPricets) \n\n```", "```py\n> install.packages(\"zoo\") \n> library(zoo) \n\n```", "```py\n>StockData <- read.table(\"DataChap4.csv\",header = TRUE, sep = \",\",nrows=3) \n\n```", "```py\n> dt = as.Date(StockData$Date, format=\"%m/%d/%Y\") \n>Stockdataz = zoo(x=cbind(StockData$Volume,StockData$Adj.Close), order.by=dt)  \n> colnames(Stockdataz) <- c(\"Volume\",\"Adj.Close\") \n> Stockdataz \n\n```", "```py\n>StockData <- read.zoo(\"DataChap4.csv\",header = TRUE, sep = \",\",format=\"%m/%d/%Y\") \n\n```", "```py\n>window(StockData, start=as.Date(\"2016/11/1\"), end=as.Date(\"2016/11/3\")) \n\n```", "```py\n> StockData <- read.table(\"DataChap4.csv\",header = TRUE, sep = \",\",nrows=3) \n> zVolume <-zoo(StockData[,2:2],as.Date(as.character(StockData[, 1]), format=\"%m/%d/%Y\")) \n> zAdj.Close <-zoo(StockData[,3:3],as.Date(as.character(StockData[, 1]), format=\"%m/%d/%Y\")) \n> cbind(zVolume, zAdj.Close) \n\n```", "```py\n>plot(StockData$Adj.Close) \n\n```", "```py\n> StockData <- read.zoo(\"DataChap4.csv\",header = TRUE, sep = \",\",format=\"%m/%d/%Y\",nrows=3) \n> matrix_xts <- as.xts(StockData,dateFormat='POSIXct') \n> matrix_xts \n\n```", "```py\n> str(matrix_xts) \n\n```", "```py\n  Data: num [1:3, 1:3] 615800 6816100 4144600 192 198 ... \n - attr(*, \"dimnames\")=List of 2 \n  ..$ : NULL \n  ..$ : chr [1:3] \"Volume\" \"Adj.Close\" \"Return\" \n  Indexed by objects of class: [Date] TZ: UTC \n  xts Attributes:   \nList of 1 \n $ dateFormat: chr \"POSIXct\" \n\n```", "```py\n> x<-matrix(5:8, ncol =2, nrow =2) \n> dt<-as.Date(c(\"2016-02-02\",\"2016-03-02\")) \n> xts_object<-xts(x,order.by=dt) \n> colnames(xts_object) <- c(\"a\",\"b\") \n> xts_object \n\n```", "```py\nFilter(x,filter)\n\n```", "```py\n> StockData <- read.zoo(\"DataChap4.csv\",header = TRUE, sep = \",\",format=\"%m/%d/%Y\") \n>PriceData<-ts(StockData$Adj.Close, frequency = 5)\n> plot(PriceData,type=\"l\")\n> WeeklyMAPrice <- filter(PriceData,filter=rep(1/5,5))\n> monthlyMAPrice <- filter(PriceData,filter=rep(1/25,25))\n> lines(WeeklyMAPrice,col=\"red\")\n> lines(monthlyMAPrice,col=\"blue\")\n\n```", "```py\n> PriceData<-ts(StockData$Adj.Close, frequency = 5) \n> acf(PriceData, lag.max = 10) \n\n```", "```py\n> pacf(PriceData, lag.max = 10) \n\n```", "```py\n> VolumeData<-ts(StockData$Volume, frequency = 5) \n> acf(VolumeData, lag.max = 10) \n\n```", "```py\n> pacf(VolumeData, lag.max = 10) \n\n```", "```py\n> PriceData<-ts(StockData$Adj.Close, frequency = 5) \n> plot(PriceData) \n\n```", "```py\n> PriceDiff <- diff(PriceData, differences=1) \n> plot(PriceDiff) \n\n```", "```py\n> acf(PriceDiff, lag.max = 10) \n\n```", "```py\n> pacf(PriceDiff, lag.max = 10) \n\n```", "```py\n>PriceArima <- arima(PriceData, order=c(0,1,1)) \n>PriceArima \n\n```", "```py\n> library(forecast) \n> FutureForecast<-forecast.Arima(PriceArima,h=5) \n> FutureForecast \n\n```", "```py\n> plot.forecast(FutureForecast) \n\n```", "```py\n>Box.test(FutureForecast$residuals, lag=20, type=\"Ljung-Box\") \n\n```", "```py\n>install.packages(\"rugarch\") \n>Library(rugarch) \n >snp <- read.zoo(\"DataChap4SP500.csv\",header = TRUE, sep = \",\",format=\"%m/%d/%Y\") \n\n```", "```py\n> gspec.ru <- ugarchspec(mean.model=list( armaOrder=c(0,0)), distribution=\"std\") \n> gfit.ru <- ugarchfit(gspec.ru, snp$Return) \n> coef(gfit.ru) \n\n```", "```py\n> FutureForecast=ugarchforecast(gfit.ru, n.ahead = 5) \n> FutureForecast \n\n```", "```py\n> snp <- read.zoo(\"DataChap4SP500.csv\",header = TRUE, sep = \",\",format=\"%m/%d/%Y\") \n> egarchsnp.spec = ugarchspec(variance.model=list(model=\"eGARCH\",garchOrder=c(1,1)), \n+                        mean.model=list(armaOrder=c(0,0))) \n> egarchsnp.fit = ugarchfit(egarchsnp.spec, snp$Return) \n> egarchsnp.fit \n> coef(egarchsnp.fit) \n\n```", "```py\n> FutureForecast=ugarchforecast(egarchsnp.fit, n.ahead = 5) \n> FutureForecast \n\n```", "```py\n>install.packages(\"rmgarch\")\n>install.packages(\"PerformanceAnalytics\")\n>library(rmgarch)\n>library(PerformanceAnalytics)\n>snpdji <- read.zoo(\"DataChap4SPDJIRet.csv\",header = TRUE, sep = \",\",format=\"%m/%d/%Y\")\n>garch_spec = ugarchspec(mean.model = list(armaOrder = c(2,1)),variance.model = list(garchOrder = c(1,1), model = \"sGARCH\"), distribution.model = \"norm\")\n> dcc.garch_spec = dccspec(uspec = multispec( replicate(2, garch_spec) ), dccOrder = c(1,1), distribution = \"mvnorm\")\n> dcc_fit= dccfit(dcc.garch_spec,data = snpdji)\n> fcst=dccforecast(dcc_.fit,n.ahead=5)\n> fcst\n\n```", "```py\ninstall.packages(\"rmgarch\") \ninstall.packages(\"PerformanceAnalytics\") \nlibrary(rmgarch) \nlibrary(PerformanceAnalytics) \n\n```", "```py\nsnpdji <- read.zoo(\"DataChap4SPDJIRet.csv\",header = TRUE, sep = \",\",format=\"%m/%d/%Y\") \n> garchspec = ugarchspec(mean.model = list(armaOrder = c(0,0)),  \n+                variance.model = list(garchOrder = c(1,1),  \n+                model = \"sGARCH\"), distribution.model = \"norm\") \n>  \n> dcc.garchsnpdji.spec = dccspec(uspec = multispec( replicate(2, garchspec) ), dccOrder = c(1,1), distribution = \"mvnorm\") \n\n```", "```py\n> dcc_fit = dccfit(dcc.garchsnpdji.spec , data = snpdji, fit.control=list(scale=TRUE)) \n> dcc_fit \n\n```"]