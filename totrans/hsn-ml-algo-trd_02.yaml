- en: Market and Fundamental Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data has always been an essential driver of trading, and traders have long made
    efforts to gain an advantage by having access to superior information. These efforts
    date back at least to the rumors that the House Rothschild benefited handsomely
    from bond purchases upon advance news about the British victory at Waterloo carried
    by pigeons across the channel.
  prefs: []
  type: TYPE_NORMAL
- en: Today, investments in faster data access take the shape of the Go West consortium
    of leading **high-frequency trading** (**HFT**) firms that connects the **Chicago
    Mercantile Exchange** (**CME**) with Tokyo. The round-trip latency between the
    CME and the BATS exchange in New York has dropped to close to the theoretical
    limit of eight milliseconds as traders compete to exploit arbitrage opportunities.
  prefs: []
  type: TYPE_NORMAL
- en: Traditionally, investment strategies mostly relied on publicly available data,
    with limited efforts to create or acquire private datasets. In the case of equities,
    fundamental strategies used financial models built on reported financials, possibly
    combined with industry or macro data. Strategies motivated by technical analysis
    extract signals from market data, such as prices and volumes.
  prefs: []
  type: TYPE_NORMAL
- en: '**Machine learning** (**ML**) algorithms can exploit market and fundamental
    data more efficiently, in particular when combined with alternative data, which
    is the topic of the next chapter. We will address several techniques that focus
    on market and fundamental data in later chapters, such as classic and modern time-series
    techniques, including **recurrent neural networks** (**RNNs**).'
  prefs: []
  type: TYPE_NORMAL
- en: This chapter introduces market and fundamental data sources and the environment
    in which they are created. Familiarity with various types of orders and the trading
    infrastructure matters because they affect backtest simulations of a trading strategy.
    We also illustrate how to use Python to access and work with trading and financial
    statement data.
  prefs: []
  type: TYPE_NORMAL
- en: 'In particular, this chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: How market microstructure shapes market data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to reconstruct the order book from tick data using Nasdaq ITCH
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to summarize tick data using various types of bars
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to work with **eXtensible Business Reporting Language** (**XBRL**)-encoded
    electronic filings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to parse and combine market and fundamental data to create a P/E series
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to access various market and fundamental data sources using Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to work with market data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Market data results from the placement and processing of buy and sell orders
    in the course of the trading of financial instruments on the many marketplaces.
    The data reflects the institutional environment of trading venues, including the
    rules and regulations that govern orders, trade execution, and price formation.
  prefs: []
  type: TYPE_NORMAL
- en: Algorithmic traders use ML algorithms to analyze the flow of buy and sell orders
    and the resulting volume and price statistics to extract trade signals or features
    that capture insights into, for example, demand-supply dynamics or the behavior
    of certain market participants.
  prefs: []
  type: TYPE_NORMAL
- en: We will first review institutional features that impact the simulation of a
    trading strategy during a backtest. Then, we will take a look at how tick data
    can be reconstructed from the order book source. Next, we will highlight several
    methods that regularize tick data and aim to maximize the information content.
    Finally, we will illustrate how to access various market data provider interfaces
    and highlight several providers.
  prefs: []
  type: TYPE_NORMAL
- en: Market microstructure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Market microstructure is the branch of financial economics that investigates
    the trading process and the organization of related markets. The institutional
    details are quite complex and diverse across asset classes and their derivatives,
    trading venues, and geographies. We will only give a brief overview of key concepts
    before we dive into the data generated by trading. The references on GitHub link
    to several sources that treat this subject in great detail.
  prefs: []
  type: TYPE_NORMAL
- en: Marketplaces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Trading in financial instruments occurs in organized, mostly electronic exchanges,
    and over the counter. An exchange is a central marketplace where buyers and sellers
    meet, and buyers compete with each other for the highest bid while sellers compete
    for the lowest offer.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many exchanges and alternative trading venues across the US and abroad.
    The following table lists some of the larger global exchanges and the trading
    volumes for the 12 months concluded 03/2018 in various asset classes, including
    derivatives. Typically, a minority of financial instruments accounts for most
    trading:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **Stocks** |'
  prefs: []
  type: TYPE_TB
- en: '| **Exchange** | **Market Cap (USD mn)** | **# Listed Companies** | **Volume
    / Day (USD mn)** | **# Shares / Day (''000)** | **# Options / Day (''000)** |'
  prefs: []
  type: TYPE_TB
- en: '| NYSE | 23,138,626 | 2,294 | 78,410 | 6,122 | 1,546 |  |'
  prefs: []
  type: TYPE_TB
- en: '| Nasdaq-US | 10,375,718 | 2,968 | 65,026 | 7,131 | 2,609 |  |'
  prefs: []
  type: TYPE_TB
- en: '| Japan Exchange Group Inc. | 6,287,739 | 3,618 | 28,397 | 3,361 | 1 |  |'
  prefs: []
  type: TYPE_TB
- en: '| Shanghai Stock Exchange | 5,022,691 | 1,421 | 34,736 | 9,801 |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Euronext | 4,649,073 | 1,240 | 9,410 | 836 | 304 |  |'
  prefs: []
  type: TYPE_TB
- en: '| Hong Kong Exchanges and Clearing | 4,443,082 | 2,186 | 12,031 | 1,174 | 516
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| LSE Group | 3,986,413 | 2,622 | 10,398 | 1,011 |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Shenzhen Stock Exchange | 3,547,312 | 2,110 | 40,244 | 14,443 |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Deutsche Boerse AG | 2,339,092 | 506 | 7,825 | 475 |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| BSE India Limited | 2,298,179 | 5,439 | 602 | 1,105 |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| National Stock Exchange of India Limited | 2,273,286 | 1,952 | 5,092 | 10,355
    |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| BATS Global Markets – US |  |  |  |  | 1,243 |  |'
  prefs: []
  type: TYPE_TB
- en: '| Chicago Board Options Exchange |  |  |  |  | 1,811 |  |'
  prefs: []
  type: TYPE_TB
- en: '| International Securities Exchange |  |  |  |  | 1,204 |  |'
  prefs: []
  type: TYPE_TB
- en: Exchanges may rely on bilateral trading or order-driven systems, where buy and
    sell orders are matched according to certain rules. Price formation may occur
    through auctions, such as in the **New York Stock Exchange** (**NYSE**), where
    the highest bid and lowest offer are matched, or through dealers who buy from
    sellers and sell to buyers.
  prefs: []
  type: TYPE_NORMAL
- en: Many exchanges use intermediaries that provide liquidity, that is, the ability
    to trade, by making markets in certain securities. The NYSE, for example, usually
    has a single designated market maker who ensures orderly trading for each security,
    while the **National Association of Securities Dealers Automated Quotations**
    (**Nasdaq**) has several. Intermediaries can act as dealers that trade as principals
    on their own behalf, or brokers that trade as agents on behalf of others.
  prefs: []
  type: TYPE_NORMAL
- en: Exchanges used to be member-owned but have often moved to corporate ownership
    as market reforms have increased competition. The NYSE dates back to 1792, whereas
    the Nasdaq started 1971 as the world's first electronic stock market and took
    over most stock trades that had been executed OTC. In US equity markets alone,
    trading is fragmented across 13 exchanges and over 40 alternative trading venues,
    each reporting trades to the consolidated tape, but at different latencies.
  prefs: []
  type: TYPE_NORMAL
- en: Types of orders
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Traders can place various types of buy or sell orders. Some orders guarantee
    immediate execution, while others may state a price threshold or other conditions
    that trigger execution. Orders are typically valid for the same trading day unless
    specified otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: A market order guarantees immediate execution of the order upon arrival to the
    trading venue, at the price that prevails at that moment. In contrast, a limit
    order only executes if the market price is higher (lower) than the limit for a
    sell (buy) limit order. A stop order, in turn, only becomes active when the market
    price rises above (falls below) a specified price for a buy (sell) stop order.
    A buy stop order can be used to limit losses of short sales. Stop orders may also
    have limits.
  prefs: []
  type: TYPE_NORMAL
- en: Numerous other conditions can be attached to orders—all or none orders prevent
    partial execution and are only filled if a specified number of shares is available,
    and can be valid for the day or longer. They require special handling and are
    not visible to market participants. Fill or kill orders also prevent partial execution
    but cancel if not executed immediately. Immediate or cancel orders immediately
    buy or sell the number of shares that are available and cancel the remainder.
    Not-held orders allow the broker to decide on the time and price of execution.
    Finally, the market on open/close orders executes on or near the opening or closing
    of the market. Partial executions are allowed.
  prefs: []
  type: TYPE_NORMAL
- en: Working with order book data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The primary source of market data is the order book, which is continuously updated
    in real-time throughout the day to reflect all trading activity. Exchanges typically
    offer this data as a real-time service and may provide some historical data for
    free.
  prefs: []
  type: TYPE_NORMAL
- en: The trading activity is reflected in numerous messages about trade orders sent
    by market participants. These messages typically conform to the electronic **Financial
    Information eXchange** (**FIX**) communications protocol for real-time exchange
    of securities transactions and market data or a native exchange protocol.
  prefs: []
  type: TYPE_NORMAL
- en: The FIX protocol
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just like SWIFT is the message protocol for back-office (example, for trade-settlement)
    messaging, the FIX protocol is the de facto messaging standard for communication
    before and during, trade execution between exchanges, banks, brokers, clearing
    firms, and other market participants. Fidelity Investments and Salomon Brothers
    introduced FIX in 1992 to facilitate electronic communication between broker-dealers
    and institutional clients who by then exchanged information over the phone.
  prefs: []
  type: TYPE_NORMAL
- en: It became popular in global equity markets before expanding into foreign exchange,
    fixed income and derivatives markets, and further into post-trade to support straight-through
    processing. Exchanges provide access to FIX messages as a real-time data feed
    that is parsed by algorithmic traders to track market activity and, for example,
    identify the footprint of market participants and anticipate their next move.
  prefs: []
  type: TYPE_NORMAL
- en: The sequence of messages allows for the reconstruction of the order book. The
    scale of transactions across numerous exchanges creates a large amount (~10 TB)
    of unstructured data that is challenging to process and, hence, can be a source
    of competitive advantage.
  prefs: []
  type: TYPE_NORMAL
- en: The FIX protocol, currently at version 5.0, is a free and open standard with
    a large community of affiliated industry professionals. It is self-describing
    like the more recent XML, and a FIX session is supported by the underlying **Transmission
    Control Protocol** (**TCP**) layer. The community continually adds new functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'The protocol supports pipe-separated key-value pairs, as well as a tag-based
    FIXML syntax. A sample message that requests a server login would look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: There are a few open source FIX implementations in python that can be used to
    formulate and parse FIX messages. Interactive Brokers offer a FIX-based **computer-to-computer
    interface** (**CTCI**) for automated trading (see the resources section for this
    chapter in the GitHub repo).
  prefs: []
  type: TYPE_NORMAL
- en: Nasdaq TotalView-ITCH Order Book data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While FIX has a dominant large market share, exchanges also offer native protocols. The
    Nasdaq offers a TotalView ITCH direct data-feed protocol that allows subscribers
    to track individual orders for equity instruments from placement to execution
    or cancellation.
  prefs: []
  type: TYPE_NORMAL
- en: As a result, it allows for the reconstruction of the order book that keeps track
    of the list of active-limit buy and sell orders for a specific security or financial
    instrument. The order book reveals the market depth throughout the day by listing
    the number of shares being bid or offered at each price point. It may also identify
    the market participant responsible for specific buy and sell orders unless it
    is placed anonymously. Market depth is a key indicator of liquidity and the potential
    price impact of sizable market orders.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to matching market and limit orders, the Nasdaq also operates auctions
    or crosses that execute a large number of trades at market opening and closing.
    Crosses are becoming more important as passive investing continues to grow and
    traders look for opportunities to execute larger blocks of stock. TotalView also
    disseminates the **Net Order Imbalance Indicator **(**NOII**) for the Nasdaq opening
    and closing crosses and Nasdaq IPO/Halt cross.
  prefs: []
  type: TYPE_NORMAL
- en: Parsing binary ITCH messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ITCH v5.0 specification declares over 20 message types related to system
    events, stock characteristics, the placement and modification of limit orders,
    and trade execution. It also contains information about the net order imbalance
    before the open and closing cross.
  prefs: []
  type: TYPE_NORMAL
- en: The Nasdaq offers samples of daily binary files for several months. The GitHub
    repository for this chapter contains a notebook, `build_order_book.ipynb` that
    illustrates how to parse a sample file of ITCH messages and reconstruct both the
    executed trades and the order book for any given tick.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table shows the frequency of the most common message types for
    the sample file date March 29, 2018:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Message type** | **Order book impact** | **Number of messages** |'
  prefs: []
  type: TYPE_TB
- en: '| `A` | New unattributed limit order | 136,522,761 |'
  prefs: []
  type: TYPE_TB
- en: '| `D` | Order canceled | 133,811,007 |'
  prefs: []
  type: TYPE_TB
- en: '| `U` | Order canceled and replaced | 21,941,015 |'
  prefs: []
  type: TYPE_TB
- en: '| `E` | Full or partial execution; possibly multiple messages for the same
    original order | 6,687,379 |'
  prefs: []
  type: TYPE_TB
- en: '| `X` | Modified after partial cancellation | 5,088,959 |'
  prefs: []
  type: TYPE_TB
- en: '| `F` | Add attributed order | 2,718,602 |'
  prefs: []
  type: TYPE_TB
- en: '| `P` | Trade Message (non-cross) | 1,120,861 |'
  prefs: []
  type: TYPE_TB
- en: '| `C` | Executed in whole or in part at a price different from the initial
    display price | 157,442 |'
  prefs: []
  type: TYPE_TB
- en: '| `Q` | Cross Trade Message | 17,233 |'
  prefs: []
  type: TYPE_TB
- en: 'For each message, the specification lays out the components and their respective
    length and data types:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name** | **Offset** | **Length** | **Value** | **Notes** |'
  prefs: []
  type: TYPE_TB
- en: '| Message type | 0 | 1 | F | Add Order MPID attribution message |'
  prefs: []
  type: TYPE_TB
- en: '| Stock locate | 1 | 2 | Integer | Locate code identifying the security |'
  prefs: []
  type: TYPE_TB
- en: '| Tracking number | 3 | 2 | Integer | Nasdaq internal tracking number |'
  prefs: []
  type: TYPE_TB
- en: '| Timestamp | 5 | 6 | Integer | Nanoseconds since midnight |'
  prefs: []
  type: TYPE_TB
- en: '| Order reference number | 11 | 8 | Integer | Unique reference number of the
    new order |'
  prefs: []
  type: TYPE_TB
- en: '| Buy/sell indicator  | 19 | 1 | Alpha | The type of order: B = Buy Order,
    S = Sell Order |'
  prefs: []
  type: TYPE_TB
- en: '| Shares | 20 | 4 | Integer | Number of shares for the order being added to
    the book |'
  prefs: []
  type: TYPE_TB
- en: '| Stock | 24 | 8 | Alpha | Stock symbol, right-padded with spaces |'
  prefs: []
  type: TYPE_TB
- en: '| Price | 32 | 4 | Price (4) | The display price of the new order |'
  prefs: []
  type: TYPE_TB
- en: '| Attribution | 36 | 4 | Alpha | Nasdaq Market participant identifier associated
    with the order |'
  prefs: []
  type: TYPE_TB
- en: Python provides the `struct` module to parse binary data using format strings
    that identify the message elements by indicating length and type of the various
    components of the byte string as laid out in the specification.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s walk through the critical steps to parse the trading messages and reconstruct
    the order book:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The ITCH parser relies on the message specifications provided as a `.csv` file
    (created by `create_message_spec.py`) and assembles format strings according to
    the `formats` dictionary:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The parser translates the message specs into format strings and `namedtuples`
    that capture the message content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Fields of the `alpha` type require post-processing as defined in the `format_alpha` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The binary file for a single day contains over 300,000,000 messages worth over
    9 GB. The script appends the parsed result iteratively to a file in the fast `HDF5` format
    to avoid memory constraints (see last section in this chapter for more on this
    format). The following (simplified) code processes the binary file and produces
    the parsed orders stored by message type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'As expected, a small number of the over 8,500 equity securities traded on this
    day account for most trades:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following plot for the graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8c45c4c9-a8f7-4de6-a016-5477c54496ff.png)'
  prefs: []
  type: TYPE_IMG
- en: Reconstructing trades and the order book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The parsed messages allow us to rebuild the order flow for the given day. The
    `'R'` message type contains a listing of all stocks traded during a given day,
    including information about **initial public offerings** (**IPOs**) and trading
    restrictions.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout the day, new orders are added, and orders that are executed and canceled
    are removed from the order book. The proper accounting for messages that reference
    orders placed on a prior date would require tracking the order book over multiple
    days, but we are ignoring this aspect here.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `get_messages()` function illustrates how to collect the orders for a single
    stock that affects trading (refer to the ITCH specification for details about
    each message, slightly simplified, see notebook):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Reconstructing successful trades, that is, orders that are executed as opposed
    to those that were canceled from trade-related message types, `C`, `E`, `P`, and
    `Q`, is relatively straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The order book keeps track of limit orders, and the various price levels for
    buy and sell orders constitute the depth of the order book. To reconstruct the
    order book for a given level of depth requires the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `add_orders()` function accumulates sell orders in ascending, and buy orders
    in descending order for a given timestamp up to the desired level of depth:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We iterate over all ITCH messages and process orders and their replacements
    as required by the specification:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The number of orders at different price levels, highlighted in the following
    screenshot using different intensities for buy and sell orders, visualizes the
    depth of liquidity at any given point in time. The left panel shows how the distribution
    of limit order prices was weighted toward buy orders at higher prices. The right
    panel plots the evolution of limit orders and prices throughout the trading day:
    the dark line tracks the prices for executed trades during market hours, whereas
    the red and blue dots indicate individual limit orders on a per-minute basis (see
    notebook for details):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2f64334a-4a92-4902-bf8d-d5a61104c0a5.png)'
  prefs: []
  type: TYPE_IMG
- en: Regularizing tick data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The trade data is indexed by nanoseconds and is very noisy. The bid-ask bounce,
    for instance, causes the price to oscillate between the bid and ask prices when
    trade initiation alternates between buy and sell market orders. To improve the
    noise-signal ratio and improve the statistical properties, we need to resample
    and regularize the tick data by aggregating the trading activity.
  prefs: []
  type: TYPE_NORMAL
- en: We typically collect the open (first), low, high, and closing (last) price for
    the aggregated period, alongside the **volume-weighted average price** (**VWAP**),
    the number of shares traded, and the timestamp associated with the data.
  prefs: []
  type: TYPE_NORMAL
- en: See the `normalize_tick_data.ipynb` notebook in the folder for this chapter
    on GitHub for additional detail.
  prefs: []
  type: TYPE_NORMAL
- en: Tick bars
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A plot of the raw tick price and volume data for `AAPL` looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following plot for the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5a63ce51-4fad-4eba-b448-ae98df632403.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The tick returns are far from normally distributed, as evidenced by the low
    p-value of `scipy.stats.normaltest`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Time bars
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Time bars involve trade aggregation by period:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We can display the result as a price-volume chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following plot for the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cdd1c52c-efd5-4cb4-b3bd-ccb428d1d8a3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Or as a candlestick chart using the `bokeh` plotting library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4bf657de-4968-44c5-a739-513ba1196957.png)'
  prefs: []
  type: TYPE_IMG
- en: Plotting AAPL Candlestick
  prefs: []
  type: TYPE_NORMAL
- en: Volume bars
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Time bars smooth some of the noise contained in the raw tick data but may fail
    to account for the fragmentation of orders. Execution-focused algorithmic trading
    may aim to match the **volume weighted average price** (**VWAP**) over a given
    period, and will divide a single order into multiple trades and place orders according
    to historical patterns. Time bars would treat the same order differently, even
    though no new information has arrived in the market.
  prefs: []
  type: TYPE_NORMAL
- en: 'Volume bars offer an alternative by aggregating trade data according to volume.
    We can accomplish this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following plot for the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3c287a33-d849-40bb-baa5-2fa25aafb781.png)'
  prefs: []
  type: TYPE_IMG
- en: Dollar bars
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When asset prices change significantly or after stock splits, the value of a
    given amount of shares changes. Volume bars do not correctly reflect this and
    can hamper the comparison of trading behavior for different periods that reflect
    such changes. In these cases, the volume bar method should be adjusted to utilize
    the product of shares and price to produce dollar bars.
  prefs: []
  type: TYPE_NORMAL
- en: API access to market data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are several options to access market data via API using Python. We first
    present a few sources built into the `pandas` library. Then we briefly introduce
    the trading platform Quantopian, the data provider Quandl and the backtesting
    library that we will use later in the book, and list several additional options
    to access various types of market data. The folder directory `data_providers` on
    GitHub contains several notebooks that illustrate the usage of these options.
  prefs: []
  type: TYPE_NORMAL
- en: Remote data access using pandas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `pandas` library enables access to data displayed on websites using the **`read_html`** function
    and access to the API endpoints of various data providers through the related `pandas-datareader` library.
  prefs: []
  type: TYPE_NORMAL
- en: Reading html tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The download of the content of one or more `html` tables works as follows,
    for instance for the constituents of the `S&P500` index from Wikipedia:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: pandas-datareader for market data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'pandas used to facilitate access to data providers'' APIs directly, but this
    functionality has moved to the related `pandas-datareader` library. The stability
    of the APIs varies with provider policies, and as of June 2o18 at version 0.7,
    the following sources are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Source** | **Scope** | **Comment** |'
  prefs: []
  type: TYPE_TB
- en: '| Yahoo! Finance | EOD price, dividends, split data for stock and FX pairs
    | Unstable |'
  prefs: []
  type: TYPE_TB
- en: '| Tiingo | EOD prices on equities, mutual funds, and ETFs | Free registration
    required |'
  prefs: []
  type: TYPE_TB
- en: '| The **Investors Exchange** (**IEX**) | Historical stock prices, order-book
    data | Limited to five years |'
  prefs: []
  type: TYPE_TB
- en: '| Robinhood | EOD equity prices | Limited to one year |'
  prefs: []
  type: TYPE_TB
- en: '| Quandl | Marketplace for a broad range of asset prices | Premium data require
    a subscription |'
  prefs: []
  type: TYPE_TB
- en: '| Nasdaq | Latest ticker symbols traded on Nasdaq with some additional info
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| Stooq | Some stock market index data |  |'
  prefs: []
  type: TYPE_TB
- en: '| MOEX | Moscow Stock Exchange Data |  |'
  prefs: []
  type: TYPE_TB
- en: '| Alpha Vantage | EOD stock prices and FX pairs |  |'
  prefs: []
  type: TYPE_TB
- en: '| Fama/French | Factor returns and research portfolios from the FF Data Library
    |  |'
  prefs: []
  type: TYPE_TB
- en: 'Access and retrieval of data follow a similar API for all sources, as illustrated
    for Yahoo! Finance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The Investor Exchange
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IEX is an alternative exchange started in response to the HFT controversy and
    portrayed in Michael Lewis' controversial Flash Boys. It aims to slow down the
    speed of trading to create a more level playing field and has been growing rapidly
    since launch in 2016 while still small with a market share of around 2.5% in June
    2018.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to historical EOD price and volume data, IEX provides real-time
    depth of book quotations that offer an aggregated size of orders by price and
    side. This service also includes last trade price and size information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: See additional examples in the `datareader.ipynb` notebook.
  prefs: []
  type: TYPE_NORMAL
- en: Quantopian
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Quantopian is an investment firm that offers a research platform to crowd-source
    trading algorithms. Upon free registration, it enables members to research trading
    ideas using a broad variety of data sources. It also offers an environment to
    backtest the algorithm against historical data, as well forward-test it out-of-sample
    with live data. It awards investment allocations for top-performing algorithms
    whose authors are entitled to a 10% (at time of writing) profit share.
  prefs: []
  type: TYPE_NORMAL
- en: The Quantopian research platform consists of a Jupyter Notebook environment
    for research and development for alpha factor research and performance analysis.
    There is also an **Interactive Development Environment** (**IDE**) for coding
    algorithmic strategies and backtesting the result using historical data since
    2002 with minute-bar frequency.
  prefs: []
  type: TYPE_NORMAL
- en: Users can also simulate algorithms with live data, which is known as paper trading.
    Quantopian provides various market datasets, including US equity and futures price
    and volume data at a one-minute frequency, as well as US equity corporate fundamentals,
    and integrates numerous alternative datasets.
  prefs: []
  type: TYPE_NORMAL
- en: We will dive into the Quantopian platform in much more detail in [Chapter 4](31520630-da72-4cf6-8d84-6a74b7f4f259.xhtml),
    *Alpha Factor Research* and rely on its functionality throughout the book, so
    feel free to open an account right away (see GitHub repo for more details).
  prefs: []
  type: TYPE_NORMAL
- en: Zipline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Zipline is the algorithmic trading library that powers the Quantopian backtesting
    and live-trading platform. It is also available offline to develop a strategy
    using a limited number of free data bundles that can be ingested and used to test
    the performance of trading ideas before porting the result to the online Quantopian
    platform for paper and live trading.
  prefs: []
  type: TYPE_NORMAL
- en: The following code illustrates how `zipline` permits us to access daily stock
    data for a range of companies. You can run `zipline` scripts in the Jupyter Notebook
    using the magic function of the same name.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you need to initialize the context with the desired security symbols.
    We''ll also use a counter variable. Then `zipline` calls `handle_data`, where
    we use the `data.history()` method to look back a single period and append the
    data for the last day to a `.csv` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following plot for the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fc41a6c3-48e4-4e02-818c-4bf3ceb90750.png)'
  prefs: []
  type: TYPE_IMG
- en: We will explore the capabilities of `zipline`, and, in particular, the online
    Quantopian platform, in more detail in the coming chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Quandl
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Quandl provides a broad range of data sources, both free and as a subscription,
    using a Python API. Register and obtain a free API key to make more than 50 calls/day.
    Quandl data covers multiple asset classes beyond equities and includes FX, fixed
    income, indexes, futures and options, and commodities.
  prefs: []
  type: TYPE_NORMAL
- en: 'API usage is straightforward, well-documented, and flexible, with numerous
    methods beyond single-series downloads, for example, including bulk downloads
    or metadata searches. The following call obtains the oil prices since 1986 as
    quoted by the US Department of Energy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We get this plot for the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bc18e907-1a35-4d69-8643-befccabbdba2.png)'
  prefs: []
  type: TYPE_IMG
- en: Other market-data providers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A broad variety of providers offer market data for various asset classes. Examples
    in relevant categories include:'
  prefs: []
  type: TYPE_NORMAL
- en: Exchanges derive a growing share of their revenues from an ever broader range
    of data services, typically using subscription.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bloomberg and Thomson Reuters have long been the leading data aggregators with
    a combined share of over 55% in the $28.5 billion financial data market. Smaller
    rivals, such as FactSet, are growing, or emerging, such as money.net and Quandl
    as well as Trading Economics or Barchart[.](https://www.barchart.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specialist data providers abound. One example is LOBSTER, which aggregates Nasdaq
    order-book data in real-time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Free data providers include Alpha Vantage that offers Python APIs for real-time
    equity, FX, and crypto-currency market data, as well as technical indicators.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Crowd-sourced investment firms that provide research platforms with data access
    include, in addition to Quantopian, the Alpha Trading Labs, launched in March
    2018, which provide HFT infrastructure and data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to work with fundamental data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Fundamental data pertains to the economic drivers that determine the value
    of securities. The nature of the data depends on the asset class:'
  prefs: []
  type: TYPE_NORMAL
- en: For equities and corporate credit, it includes corporate financials as well
    as industry and economy-wide data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For government bonds, it includes international macro-data and foreign exchange.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For commodities, it includes asset-specific supply-and-demand determinants,
    such as weather data for crops.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will focus on equity fundamentals for the US, where data is easier to access.
    There are some 13,000+ public companies worldwide that generate 2 million pages
    of annual reports and 30,000+ hours of earnings calls. In algorithmic trading,
    fundamental data and features engineered from this data may be used to derive
    trading signals directly, for example as value indicators, and are an essential
    input for predictive models, including machine learning models.
  prefs: []
  type: TYPE_NORMAL
- en: Financial statement data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Securities and Exchange Commission** (**SEC**) requires US issuers, that
    is, listed companies and securities, including mutual funds to file three quarterly financial
    statements (Form 10-Q) and one annual report (Form 10-K), in addition to various
    other regulatory filing requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Since the early 1990s, the SEC made these filings available through its **Electronic
    Data Gathering, Analysis, and Retrieval** (**EDGAR**) system. They constitute
    the primary data source for the fundamental analysis of equity and other securities,
    such as corporate credit, where the value depends on the business prospects and
    financial health of the issuer.
  prefs: []
  type: TYPE_NORMAL
- en: Automated processing – XBRL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Automated analysis of regulatory filings has become much easier since the SEC
    introduced the XBRL, a free, open, and global standard for the electronic representation
    and exchange of business reports. XBRL is based on XML; it relies on **taxonomies**
    that define the meaning of the elements of a report and map to tags that highlight
    the corresponding information in the electronic version of the report. One such
    taxonomy represents the US **Generally Accepted Accounting Principles** (**GAAP**).
  prefs: []
  type: TYPE_NORMAL
- en: The SEC introduced voluntary XBRL filings in 2005 in response to accounting
    scandals before requiring this format for all filers since 2009 and continues
    to expand the mandatory coverage to other regulatory filings. The SEC maintains
    a website that lists the current taxonomies that shape the content of different
    filings and can be used to extract specific items.
  prefs: []
  type: TYPE_NORMAL
- en: The following datasets provide information extracted from EX-101 attachments
    submitted to the Commission in a flattened data format to assist users in consuming
    the data for analysis. The data reflects selected information from the XBRL-tagged
    financial statements. It currently includes numeric data from the quarterly and
    annual financial statements, as well as certain additional fields (for example,
    **Standard Industrial Classification** (**SIC**)).
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several avenues to track and access fundamental data reported to
    the SEC:'
  prefs: []
  type: TYPE_NORMAL
- en: As part of the EDGAR **Public** **Dissemination Service** (**PDS**), electronic
    feeds of accepted filings are available for a fee.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The SEC updates **RSS** feeds every 10 minutes, which list structured disclosure
    submissions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are public index files for the retrieval of all filings through FTP for
    automated processing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The financial statement (and notes) datasets contain parsed XBRL data from all
    financial statements and the accompanying notes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The SEC also publishes log files containing the internet search traffic for
    EDGAR filings through SEC.gov, albeit with a six-month delay.
  prefs: []
  type: TYPE_NORMAL
- en: Building a fundamental data time series
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The scope of the data in the financial statement and notes datasets consists
    of numeric data extracted from the primary financial statements (Balance sheet,
    income statement, cash flows, changes in equity, and comprehensive income) and
    footnotes on those statements. The data is available as early as 2009.
  prefs: []
  type: TYPE_NORMAL
- en: Extracting the financial statements and notes dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following code downloads and extracts all historical filings contained
    in the **Financial Statement and Notes** (**FSN**) datasets for the given range
    of quarters (see `edgar_xbrl.ipynb` for addition details):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The data is fairly large and to enable faster access than the original text
    files permit, it is better to convert the text files to binary, columnar parquet
    format (see *Efficient data storage with pandas* section in this chapter for a
    performance comparison of various data-storage options compatible with pandas
    `DataFrames`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'For each quarter, the FSN data is organized into eight file sets that contain
    information about submissions, numbers, taxonomy tags, presentation, and more.
    Each dataset consists of rows and fields and is provided as a tab-delimited text
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **File** | **Dataset** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `SUB` | Submission | Identifies each XBRL submission by company, form, date,
    and so on |'
  prefs: []
  type: TYPE_TB
- en: '| `TAG` | Tag | Defines and explains each taxonomy tag |'
  prefs: []
  type: TYPE_TB
- en: '| `DIM` | Dimension | Adds detail to numeric and plain text data |'
  prefs: []
  type: TYPE_TB
- en: '| `NUM` | Numeric | One row for each distinct data point in filing |'
  prefs: []
  type: TYPE_TB
- en: '| `TXT` | Plain text | Contains all non-numeric XBRL fields |'
  prefs: []
  type: TYPE_TB
- en: '| `REN` | Rendering | Information for rendering on SEC website |'
  prefs: []
  type: TYPE_TB
- en: '| `PRE` | Presentation | Detail on the tag and number presentation in primary
    statements |'
  prefs: []
  type: TYPE_TB
- en: '| `CAL` | Calculation | Shows arithmetic relationships among tags |'
  prefs: []
  type: TYPE_TB
- en: Retrieving all quarterly Apple filings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The submission dataset contains the unique identifiers required to retrieve
    the filings: the **Central Index Key** (**CIK**) and the Accession Number (`adsh`).
    The following shows some of the information about Apple''s 2018Q1 10-Q filing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the central index key, we can identify all historical quarterly filings
    available for `Apple`, and combine this information to obtain 26 Forms `10-Q`
    and nine annual Forms `10-K`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: With the Accession Number for each filing, we can now rely on the taxonomies
    to select the appropriate XBRL tags (listed in the `TAG` file) from the `NUM`
    and `TXT` files to obtain the numerical or textual/footnote data points of interest.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s extract all numerical data available from the 19 Apple filings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Building a price/earnings time series
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In total, the nine years of filing history provide us with over 28,000 numerical
    values. We can select a useful field, such as **Earnings per Diluted Share** (**EPS**),
    that we can combine with market data to calculate the popular **Price/Earnings**
    (**P/E**) valuation ratio.
  prefs: []
  type: TYPE_NORMAL
- en: 'We do need to take into account, however, that Apple split its stock 7:1 on
    June 4, 2014, and Adjusted Earnings per Share before the split to make earnings
    comparable, as illustrated in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use Quandl to obtain Apple stock price data since 2009:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we have the data to compute the trailing 12-month P/E ratio for the entire
    period:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following plot for the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3b81fa31-f1c9-4f16-8993-2375846844d6.png)'
  prefs: []
  type: TYPE_IMG
- en: Other fundamental data sources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are numerous other sources for fundamental data. Many are accessible using
    the `pandas_datareader` module introduced earlier. Additional data is available
    from certain organizations directly, such as the IMF, World Bank, or major national
    statistical agencies around the world (see references on GitHub).
  prefs: []
  type: TYPE_NORMAL
- en: pandas_datareader – macro and industry data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `pandas_datareader` library facilitates access according to the conventions
    introduced at the end of the preceding section on market data. It covers APIs
    for numerous global fundamental macro and industry-data sources, including the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kenneth French''s data library**: Market data on portfolios capturing size,
    value, and momentum factors, disaggregated industry'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**St.Louis FED (FRED)**: Federal Reserve data on the US economy and financial
    markets'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**World Bank**: Global database on long-term, lower-frequency economic and
    social development and demographics'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OECD**: Similar for OECD countries'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enigma**: Various datasets, including alternative sources'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Eurostat**: EU-focused economics, social and demographic data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Efficient data storage with pandas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll be using many different data sets in this book, and it''s worth comparing
    the main formats for efficiency and performance. In particular, we compare the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**CSV**: Comma-separated, standard flat text file format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HDF5**: Hierarchical data format, developed initially at the National Center
    for Supercomputing, is a fast and scalable storage format for numerical data,
    available in pandas using the `PyTables` library.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Parquet**: A binary, columnar storage format, part of the Apache Hadoop ecosystem,
    that provides efficient data compression and encoding and has been developed by
    Cloudera and Twitter. It is available for pandas through the `pyarrow` library,
    led by Wes McKinney, the original author of pandas.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `storage_benchmark.ipynb` notebook compares the performance of the preceding
    libraries using a test `DataFrame` that can be configured to contain numerical
    or text data, or both. For the `HDF5` library, we test both the `fixed` and `table`
    format. The `table` format allows for queries and can be appended to.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following charts illustrate the read and write performance for 100,000
    rows with either 1,000 columns of random floats and 1,000 columns of a random
    10-character string, or just 2,000 float columns:'
  prefs: []
  type: TYPE_NORMAL
- en: For purely numerical data, the HDF5 format performs best, and the table format
    also shares with CSV the smallest memory footprint at 1.6 GB. The fixed format
    uses twice as much space, and the parquet format uses 2 GB.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For a mix of numerical and text data, `parquet` is significantly faster, and
    HDF5 uses its advantage on reading relative to CSV (which has very low write performance
    in both cases):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/c1d319d3-a4fd-405f-9495-63e9eb2db4a8.png)'
  prefs: []
  type: TYPE_IMG
- en: The notebook illustrates how to configure, test, and collect the timing using
    the `%%timeit` cell magic, and at the same time demonstrates the usage of the
    related pandas commands required to use these storage formats.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter introduced the market and fundamental data sources that form the
    backbone of most trading strategies. You learned about numerous ways to access
    this data, and how to preprocess the raw information so that you can begin extracting
    trading signals using the machine learning techniques that we will be introducing
    shortly.
  prefs: []
  type: TYPE_NORMAL
- en: Before we move onto the design and evaluation of trading strategies and the
    use of ML models, we need to cover alternative datasets that have emerged in recent
    years and have been a significant driver of the popularity of ML for algorithmic
    trading.
  prefs: []
  type: TYPE_NORMAL
