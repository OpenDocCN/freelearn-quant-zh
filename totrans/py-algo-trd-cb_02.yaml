- en: Stock Markets - Primer on Trading
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
- en: When building algorithmic trading systems, it is essential to have an account
    open with a modern broker that provides APIs for placing and querying trades programmatically.
    This allows us to control the broking account, which is conventionally operated
    manually using the broker's website, using our Python script, which would be part
    of our larger algorithmic trading system. This chapter demonstrates various essential
    recipes that introduce the essential broker API calls needed for developing a
    complete algorithmic trading system.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following recipes:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Python connectivity with the broker
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Querying a list of instruments
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fetching an instrument
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Querying a list of exchanges
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Querying a list of segments
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Knowing other attributes supported by the broker
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Placing a simple REGULAR order
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Placing a simple BRACKET order
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Placing a simple DELIVERY order
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Placing a simple INTRADAY order
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Querying margins and funds
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculating the brokerage charged
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculating the government taxes charged
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You will need the following to successfully execute the recipes in this chapter:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Python 3.7+
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Python `pyalgotrading` package (`$ pip install pyalgotrading`)
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The latest Jupyter Notebook for this chapter can be found on GitHub at [https://github.com/PacktPublishing/Python-Algorithmic-Trading-Cookbook/tree/master/Chapter02](https://github.com/PacktPublishing/Python-Algorithmic-Trading-Cookbook/tree/master/Chapter02).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: This chapter demonstrates the APIs of a modern broker, `ZERODHA`, which is supported
    by `pyalgotrading`. You may wish to choose other brokers supported by `pyalgotrading`
    as well. The recipes in this chapter should be more or less the same for any other
    broker. The `pyalgotrading` package abstracts broker APIs behind a unified interface,
    so you don't need to worry about the underlying broker API calls.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: To set up a broking account with `ZERODHA`, please refer to the detailed steps
    provided in *Appendix I*.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Python connectivity with the broker
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing you need to set up connectivity with the broker is API keys.
    The broker provides unique keys to each customer, typically as an `api-key` and
    `api-secret` key pair. These API keys are chargeable, usually on a monthly subscription
    basis. You need to get your copies of `api-key` and `api-secret` from the broker's
    website before you start this recipe. Please refer to *Appendix I* for more details.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We execute the following steps to complete this recipe:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the necessary modules:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Get the `api_key` and `api_secret` keys from the broker. These are unique to
    you and will be used by the broker to identify your Demat account:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You will get the following result:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Get the request token from the preceding URL:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works...
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In *step 1*, you import the `BrokerConnectionZerodha` class from `pyalgotrading`.
    The `BrokerConnectionZerodha` class provides an abstraction around the broker-specific
    APIs. For *step 2*, you need your API key and API secret from the broker. If you
    do not have them, please refer to *Appendix I* for detailed instructions with
    screenshots on getting this keys. In *step 2*, you assign your API key and API
    secret to the new `api_key` and `api_secret` variables and use them to create
    `broker_connection`, an instance of the `BrokerConnectionZerodha` class. If you
    are running this for the first time and `kiteconnect` is not installed, `pyalgotrading`
    will automatically install it for you. (`kiteconnect` is the official Python package
    that talks to the Zerodha backend; `BrokerConnectionZerodha` is a wrapper on top
    of `kiteconnect`.) *Step 2* generates a login URL. Here, you need to click on
    the link and log in with your Zerodha credentials. If the authentication process
    is successful, you will see a link in your browser''s address bar that looks similar
    to the following:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'For example, the full link would be as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Copy the alphanumeric-token, `H06I6Ydv95y23D2Dp7NbigFjKweGwRP7`, and paste it
    into `request_token` as part of *step 3*. The `broker_connection` instance is
    now ready to perform API calls.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Querying a list of instruments
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the `broker_connection` handle is ready, it can be used to query the list
    containing all the financial instruments provided by the broker.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the `broker_connection` object is available in your Python namespace.
    Refer to the previous recipe in this chapter to set up this object.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We execute the following steps to complete this recipe:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: 'Display all the instruments:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You will get an output similar to the following. The exact output may differ
    for you:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Print the total number of instruments:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We get the following output (your output may differ):'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How it works…
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first step fetches all the available financial instruments using the `get_all_instruments()`
    method of `broker_connection`. This method returns a `pandas.DataFrame` object.
    This object is assigned to a new variable, `instruments`, which is shown in the
    output of *step 1*. This output may differ for you as new financial instruments
    are frequently added and existing ones expire regularly. The final step shows
    the total number of instruments provided by the broker.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: An explanation of the data that was returned by the preceding API call will
    be discussed in depth in [Chapter 3](d82aae2c-b9a8-4a79-bfea-44719adf1acf.xhtml),
    *Analyzing Financial Data*. For this recipe, it suffices to know the method for
    fetching the list of instruments.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Fetching an instrument
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Instruments**, also known as **financial instruments** or **securities**,
    are assets that can be traded in an exchange. In an exchange, there can easily
    be tens of thousands of instruments. This recipe demonstrates how to fetch an
    instrument based on its **exchange** and **trading symbol**.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**工具**，也称为**金融工具**或**证券**，是可以在交易所交易的资产。在交易所中，可以有数万种工具。本示例演示了如何根据其**交易所**和**交易符号**获取工具。'
- en: Getting ready
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Make sure the `broker_connection` object is available in your Python namespace.
    Refer to the first recipe in this chapter to set up this object.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 确保 `broker_connection` 对象在你的 Python 命名空间中可用。请参考本章第一个示例设置此对象。
- en: How to do it…
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 怎么做…
- en: 'Fetch an instrument for a specific trading symbol and exchange:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 获取特定交易符号和交易所的工具：
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You''ll get the following output:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你将得到以下输出：
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How it works…
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: The `broker_connection` object provides a handy method, `get_instrument`, for
    fetching any financial instrument. It takes `segment` and `tradingsymbol` as attributes
    before returning an instrument. The return object is an instance of the `Instrument`
    class.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`broker_connection` 对象提供了一个方便的方法，`get_instrument`，用于获取任何金融工具。在返回工具之前，它以 `segment`
    和 `tradingsymbol` 为属性。返回对象是 `Instrument` 类的一个实例。'
- en: Querying a list of exchanges
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查询交易所列表
- en: An **exchange** is a marketplace where instruments are traded. Exchanges ensure
    that the trading process is fair and happens in an orderly fashion at all times.
    Usually, a broker supports multiple exchanges. This recipe demonstrates how to
    find the list of exchanges supported by the broker.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**交易所** 是一个交易工具交易的市场。交易所确保交易过程公平且始终按规则进行。通常，经纪人支持多个交易所。本示例演示了如何查找经纪人支持的交易所列表。'
- en: Getting ready
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Make sure the `instruments` object is available in your Python namespace. Refer
    to the second recipe of this chapter to learn how to set up this object.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 确保 `instruments` 对象在你的 Python 命名空间中可用。请参考本章第二个示例以了解如何设置此对象。
- en: How to do it…
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 怎么做…
- en: 'Display the exchanges supported by the broker:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 显示经纪人支持的交易所：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You will get the following output:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你将得到以下输出：
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How it works…
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: '`instruments.exchange` returns a `pandas.Series` object. Its `unique()` method
    returns a `numpy.ndarray` object consisting of unique exchanges supported by the
    broker.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`instruments.exchange` 返回一个 `pandas.Series` 对象。其 `unique()` 方法返回一个由经纪人支持的唯一交易所组成的
    `numpy.ndarray` 对象。'
- en: Querying a list of segments
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查询分段列表
- en: A segment is essentially a categorization of instruments based on their types.
    The various types of segments that are commonly found at exchanges include cash/equities,
    futures, options, commodities, and currency. Each segment may have a different
    operating time. Usually, a broker supports multiple segments within multiple exchanges.
    This recipe demonstrates how to find the list of segments supported by the broker.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 一个分段实质上是根据其类型对工具进行分类。在交易所中常见的各种分段类型包括现金/股票、期货、期权、大宗商品和货币。每个分段可能有不同的运营时间。通常，经纪人支持多个交易所内的多个分段。本示例演示了如何查找经纪人支持的分段列表。
- en: Getting ready
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Make sure the `instruments` object is available in your Python namespace. Refer
    to the second recipe of this chapter to learn how to set up this object.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 确保 `instruments` 对象在你的 Python 命名空间中可用。请参考本章第二个示例以了解如何设置此对象。
- en: How to do it…
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 怎么做…
- en: 'Display the segments supported by the broker:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 显示经纪人支持的分段：
- en: '[PRE14]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You will get the following output:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你将得到以下输出：
- en: '[PRE15]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How it works…
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: '`instruments.segment` returns a `pandas.Series` object. Its unique method returns
    a `numpy.ndarray` object consisting of unique segments supported by the broker.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`instruments.segment` 返回一个 `pandas.Series` 对象。它的 `unique` 方法返回一个由经纪人支持的唯一分段组成的
    `numpy.ndarray` 对象。'
- en: Knowing other attributes supported by the broker
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解经纪人支持的其他属性
- en: 'For placing an order, the following attributes are needed: order transaction
    type, order variety, order type, and order code. Different brokers may support
    different types of order attributes. For example, some brokers may support just
    regular orders, while others may support regular and bracket orders. The value
    for each of the attributes supported by the broker can be queried using the broker
    specific constants provided by the `pyalgotrading` package.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 为了下订单，需要以下属性：订单交易类型、订单种类、订单类型和订单代码。不同的经纪人可能支持不同类型的订单属性。例如，一些经纪人可能仅支持普通订单，而其他经纪人可能支持普通订单和止损订单。可以使用
    `pyalgotrading` 包提供的经纪人特定常量查询经纪人支持的每个属性的值。
- en: How to do it…
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'We execute the following steps to complete this recipe:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们执行以下步骤来完成此配方：
- en: 'Import the necessary class from the `pyalgotrading` module:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`pyalgotrading`模块中导入必要的类：
- en: '[PRE16]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'List the order transaction types:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出订单交易类型：
- en: '[PRE17]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We''ll get the following output:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将得到以下输出：
- en: '[PRE18]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'List the order varieties:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出订单品种：
- en: '[PRE19]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We''ll get the following output:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将得到以下输出：
- en: '[PRE20]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'List the order types:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出订单类型：
- en: '[PRE21]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We''ll get the following output:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将得到以下输出：
- en: '[PRE22]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'List the order codes:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出订单代码：
- en: '[PRE23]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We''ll get the following output:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将得到以下输出：
- en: '[PRE24]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: How it works…
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In *step 1*, we import the `BrokerConnectionZerodha` class from `pyalgotrading`.
    This class holds the order attributes mapping between `pyalgotrading` and broker
    specific constants as dictionary objects. The next steps fetch and print these
    mappings. Step 2 shows that your broker supports both `BUY`  and `SELL` order
    transaction types.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 1* 中，我们从`pyalgotrading`导入`BrokerConnectionZerodha`类。此类保存了`pyalgotrading`和特定经纪人常量之间的订单属性映射，作为字典对象。接下来的步骤获取并打印这些映射。步骤
    2 显示您的经纪人支持`BUY`和`SELL`订单交易类型。
- en: '*Step 3* shows that your broker supports `MARKET`, `LIMIT`, `STOPLOSS_LIMIT`,
    and `STOPLOSS_MARKET` order varieties. *Step 4* shows that your broker supports
    `REGULAR`, `BRACKET`, `COVER`, and `AFTER_MARKET` order types. *Step 5* shows
    that your broker supports `INTRADAY` and `DELIVERY` order codes.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤 3* 显示您的经纪人支持`MARKET`、`LIMIT`、`STOPLOSS_LIMIT`和`STOPLOSS_MARKET`订单品种。*步骤
    4* 显示您的经纪人支持`REGULAR`、`BRACKET`、`COVER`和`AFTER_MARKET`订单类型。*步骤 5* 显示您的经纪人支持`INTRADAY`和`DELIVERY`订单代码。'
- en: The outputs may differ from broker to broker, so consult your broker documentation
    if you are using a different broker. A detailed explanation of all these types
    of parameters will be covered in [Chapter 6](077b54a1-c9c4-424c-912a-11f28db3797f.xhtml),
    *Placing Trading Orders on the Exchange*. This recipe is to just give an overview
    of the parameters, as they are needed in the subsequent recipes of this chapter.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 输出可能因经纪人而异，因此如果您使用不同的经纪人，请查阅您的经纪人文档。所有这些类型参数的详细解释将在[第 6 章](077b54a1-c9c4-424c-912a-11f28db3797f.xhtml)
    *在交易所下订单* 中涵盖。本配方仅概述这些参数，因为它们在本章后续配方中需要。
- en: Placing a simple REGULAR order
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 放置一个简单的常规订单
- en: This recipe demonstrates how to place a `REGULAR` order on the exchange via
    the broker. `REGULAR` orders are the simplest types of orders. After trying out
    this recipe, check your broking account by logging into the broker's website;
    you will find that an order has been placed there. You can match the order ID
    with the one that's returned in the last code snippet shown in this recipe.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方演示了如何通过经纪人在交易所上放置`REGULAR`订单。`REGULAR`订单是最简单的订单类型。尝试完此配方后，通过登录经纪人网站检查您的经纪人账户；您会发现一个订单已经被放置在那里。您可以将订单
    ID 与本配方中显示的最后一个代码片段中返回的订单 ID 匹配。
- en: Getting ready
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Make sure the `broker_connection` object is available in your Python namespace.
    Refer to the first recipe of this chapter to learn how to set up this object.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 确保`broker_connection`对象在你的Python命名空间中可用。参考本章第一个配方，了解如何设置此对象。
- en: How to do it…
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'We execute the following steps to complete this recipe:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们执行以下步骤来完成此配方：
- en: 'Import the necessary constants from `pyalgotrading`:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`pyalgotrading`中导入必要的常量：
- en: '[PRE25]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Fetch an instrument for a specific trading symbol and exchange:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取特定交易符号和交易所的金融工具：
- en: '[PRE26]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Place a simple regular order – a `BUY`, `REGULAR`, `INTRADAY`, `MARKET` order:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 放置一个简单的常规订单 - 一个`BUY`、`REGULAR`、`INTRADAY`、`MARKET`订单：
- en: '[PRE27]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We''ll get the following output:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将得到以下输出：
- en: '[PRE28]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: How it works…
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'In *step 1*, you import constants from `pyalgotrading`. In *step 2*, you fetch
    the financial instrument with `segment = ''NSE''` and `tradingsymbol = ''TATASTEEL''`
    using the `get_instrument()` method of `broker_connection`. In *step 3*, you place
    a `REGULAR` order using the `place_order()` method of `broker_connection`. The
    descriptions of the parameters accepted by the `place_order()` method are as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 1* 中，您从`pyalgotrading`导入常量。在*步骤 2* 中，您使用`broker_connection`的`get_instrument()`方法以`segment
    = 'NSE'`和`tradingsymbol = 'TATASTEEL'`获取金融工具。在*步骤 3* 中，您使用`broker_connection`的`place_order()`方法放置一个`REGULAR`订单。`place_order()`方法接受的参数描述如下：
- en: '`instrument`: The financial instrument for which the order must be placed.
    Should an instance of the `Instrument` class. You pass `instrument` here.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instrument`：必须放置订单的金融工具。应该是`Instrument`类的实例。您在这里传递`instrument`。'
- en: '`order_transaction_type`: The order transaction type. Should be an enum of
    type `BrokerOrderTransactionTypeConstants`. You pass `BrokerOrderTransactionTypeConstants.BUY`
    here.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order_transaction_type`: 订单交易类型。应为`BrokerOrderTransactionTypeConstants`类型的枚举。在这里，你传递了`BrokerOrderTransactionTypeConstants.BUY`。'
- en: '`order_type`: The order type. Should be an enum of type `BrokerOrderTypeConstants`.
    You pass `BrokerOrderTypeConstants.REGULAR` here.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order_type`: 订单类型。应为`BrokerOrderTypeConstants`类型的枚举。在这里，你传递了`BrokerOrderTypeConstants.REGULAR`。'
- en: '`order_code`: The order code. Should be an enum of type `BrokerOrderCodeConstants`.
    You pass `BrokerOrderCodeConstants.INTRADAY` here.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order_code`: 订单代码。应为`BrokerOrderCodeConstants`类型的枚举。在这里，你传递了`BrokerOrderCodeConstants.INTRADAY`。'
- en: '`order_variety`: The order variety. Should be an enum of type `BrokerOrderVarietyConstants`.
    You pass `BrokerOrderVarietyConstants.MARKET` here.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order_variety`: 订单种类。应为`BrokerOrderVarietyConstants`类型的枚举。在这里，你传递了`BrokerOrderVarietyConstants.MARKET`。'
- en: '`quantity`: The number of shares to be traded for the given instrument. Should
    be a positive integer. We pass `1` here.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quantity`: 要交易的股票数量。应为正整数。我们在这里传递了`1`。'
- en: If the order placement is successful, the method returns an order ID which you
    can use at any point in time later on for querying the status of the order.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果订单放置成功，该方法将返回一个订单ID，您可以随时以后用于查询订单状态。
- en: A detailed explanation of the different types of parameters will be covered
    in [Chapter 6](077b54a1-c9c4-424c-912a-11f28db3797f.xhtml), *Placing Trading Orders
    on the Exchange*. This recipe is intended to give you an idea of how to place
    a `REGULAR` order, one of the various types of possible orders.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 不同类型参数的详细解释将在[第六章](077b54a1-c9c4-424c-912a-11f28db3797f.xhtml)中介绍，*在交易所上下订单*。这个配方旨在让你了解如何下达`REGULAR`订单，这是各种可能订单类型之一的想法。
- en: Placing a simple BRACKET order
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下达一个简单的BRACKET订单
- en: This recipe demonstrates how to place a `BRACKET` order on the exchange via
    the broker. `BRACKET` orders are two-legged orders. Once the first order is executed,
    the broker automatically places two new orders – a `STOPLOSS` order and a `TARGET`
    order. Only one of them is executed at any time; the other is canceled when the
    first order is completed. After trying out this recipe, check your broking account
    by logging into the broker's website; you will find that an order has been placed
    there. You can match the order ID with the one that's returned in the last code
    snippet shown in this recipe.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方演示了如何通过经纪人在交易所上下达一个`BRACKET`订单。`BRACKET`订单是两腿订单。一旦第一个订单执行完毕，经纪人会自动下达两个新订单
    – 一个`STOPLOSS`订单和一个`TARGET`订单。在任何时候只有一个订单被执行；当第一个订单完成时，另一个订单将被取消。在尝试了此配方后，通过登录经纪人的网站，您可以在您的经纪账户中找到已下达的订单。您可以将订单ID与本配方中显示的最后一个代码片段中返回的订单ID进行匹配。
- en: Getting ready
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Make sure the `broker_connection` object is available in your Python namespace.
    Refer to the first recipe of this chapter to learn how to set up this object.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 确保`broker_connection`对象在你的Python命名空间中可用。参考本章的第一个配方，学习如何设置此对象。
- en: How to do it…
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We execute the following steps to complete this recipe:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们执行以下步骤完成此配方：
- en: 'Import the necessary modules:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入必要的模块：
- en: '[PRE29]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Fetch an instrument for a specific trading symbol and exchange:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取特定交易符号和交易所的工具：
- en: '[PRE30]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Fetch the last traded price of the instrument:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取工具的最新交易价格：
- en: '[PRE31]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Place a simple `BRACKET` order – a `BUY`, `BRACKET`, `INTRADAY`, `LIMIT` order:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下达一个简单的`BRACKET`订单 – 一个`BUY`，`BRACKET`，`INTRADAY`，`LIMIT`订单：
- en: '[PRE32]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We''ll get the following output:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将得到以下输出：
- en: '[PRE33]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'If you get the following error while executing this code, it would mean that
    Bracket orders are blocked by the broker due to high volatility in the markets:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在执行此代码时收到以下错误，则意味着由于市场波动性较高，经纪人阻止了Bracket订单：
- en: '`InputException: Due to expected higher volatility in the markets, Bracket
    orders are blocked temporarily.`'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`InputException: 由于市场预期波动性较高，Bracket订单暂时被阻止。`'
- en: You should try the recipe later when the broker starts allowing Bracket orders.
    You can check for updates on the Broker site from time to time to know when Bracket
    orders would be allowed.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 当经纪人开始允许Bracket订单时，你应该稍后尝试该配方。你可以不时地查看经纪人网站以了解Bracket订单何时被允许。
- en: How it works…
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'In *step 1*, you import the constants from `pyalgotrading`. In *step 2*, you
    fetch the financial instrument with `segment = ''NSE''` and `tradingsymbol = ''ICICBANK''`
    using the `get_instrument()` method of `broker_connection`. In *step 3*, you fetch
    the **last traded price** or **LTP** of the instrument. (LTP will be explained
    in more detail in the *Last traded price of a financial instrument* recipe of [Chapter
    3](d82aae2c-b9a8-4a79-bfea-44719adf1acf.xhtml), *Analyzing Financial Data.*) In
    *step 4*, you place a `BRACKET` order using the `place_order()` method of `broker_connection`.
    The descriptions of the parameters accepted by the `place_order()` method are
    as follows:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤1*中，您从`pyalgotrading`导入常量。在*步骤2*中，您使用`broker_connection`的`get_instrument()`方法获取`segment
    = 'NSE'`和`tradingsymbol = 'ICICBANK'`的金融工具。在*步骤3*中，您获取工具的**最后交易价格**或**LTP**。（LTP将在[第3章](d82aae2c-b9a8-4a79-bfea-44719adf1acf.xhtml)的*分析金融数据*中更详细地解释。）在*步骤4*中，您使用`broker_connection`的`place_order()`方法放置一个`BRACKET`订单。`place_order()`方法接受的参数的描述如下：
- en: '`instrument`: The financial instrument for which the order must be placed.
    Should be an instance of the `Instrument` class. You pass `instrument` here.'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instrument`: 必须放置订单的金融工具。应该是`Instrument`类的实例。你在这里传递`instrument`。'
- en: '`order_transaction_type`: The order transaction type. Should be an enum of
    type `BrokerOrderTransactionTypeConstants`. You pass `BrokerOrderTransactionTypeConstants.BUY`
    here.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order_transaction_type`: 订单交易类型。应该是`BrokerOrderTransactionTypeConstants`类型的枚举。你在这里传递`BrokerOrderTransactionTypeConstants.BUY`。'
- en: '`order_type`: The order type. Should be an enum of type `BrokerOrderTypeConstants`.
    You pass `BrokerOrderTypeConstants.BRACKET` here.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order_type`: 订单类型。应该是`BrokerOrderTypeConstants`类型的枚举。你在这里传递`BrokerOrderTypeConstants.BRACKET`。'
- en: '`order_code`: The order code. Should be an enum of type `BrokerOrderCodeConstants`.
    You pass `BrokerOrderCodeConstants.INTRADAY` here.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order_code`: 订单代码。应该是`BrokerOrderCodeConstants`类型的枚举。你在这里传递`BrokerOrderCodeConstants.INTRADAY`。'
- en: '`order_variety`: The order variety. Should be an enum of type `BrokerOrderVarietyConstants`.
    You pass `BrokerOrderVarietyConstants.LIMIT` here.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order_variety`: 订单种类。应该是`BrokerOrderVarietyConstants`类型的枚举。你在这里传递`BrokerOrderVarietyConstants.LIMIT`。'
- en: '`quantity`: The number of shares to be traded for the given instrument. Should
    be a positive integer. You pass `1` here.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quantity`: 给定工具要交易的股份数量。应为正整数。你在这里传递`1`。'
- en: '`price`: The limit price at which the order should be placed. You pass `ltp-1`
    here, which means 1 unit price below the `ltp` value.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`price`: 应该放置订单的限价。你在这里传递`ltp-1`，这意味着低于`ltp`值的1个单位价格。'
- en: '`stoploss`: The price difference from the initial order price, at which the
    stoploss order should be placed. Should be a positive integer or float value.
    You pass `2` here.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stoploss`: 初始订单价格的价格差，应该放置止损订单的价格。应为正整数或浮点值。你在这里传递`2`。'
- en: '`target`: The price difference from the initial price, at which the target
    order should be placed. Should be a positive integer or float value. You pass
    `2` here.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target`: 初始价格的价格差，应该放置目标订单的价格。应为正整数或浮点值。你在这里传递`2`。'
- en: If the order placement is successful, the method returns an order ID which you
    can use at any point in time later on for querying the status of the order.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如果订单放置成功，该方法会返回一个订单ID，您可以随时稍后用于查询订单的状态。
- en: A detailed explanation of the different types of parameters will be covered
    in [Chapter 6](077b54a1-c9c4-424c-912a-11f28db3797f.xhtml), *Placing Trading Orders
    on the Exchange*. This recipe is intended to give you an idea of how to place
    a `BRACKET` order, one of the various types of possible orders.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 对不同类型参数的详细解释将在[第6章](077b54a1-c9c4-424c-912a-11f28db3797f.xhtml)中进行，*在交易所上放置交易订单*。本示例旨在向您展示如何放置`BRACKET`订单，这是各种可能订单类型之一。
- en: Placing a simple DELIVERY order
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 放置一个简单的DELIVERY订单
- en: This recipe demonstrates how to place a `DELIVERY` order on the exchange via
    the broker. A `DELIVERY` order is delivered to the user's Demat account and exists
    until it is explicitly squared-off by the user. Positions created by delivery
    orders at the end of a trading session are carried forwarded to the next trading
    session. They are not explicitly squared-off by the broker. After trying out this
    recipe, check your broking account by logging into the broker's website; you will
    find that an order has been placed there. You can match the order ID with the
    one that's returned in the last code snippet shown in this recipe.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例演示了如何通过经纪人在交易所下达 `DELIVERY` 订单。`DELIVERY` 订单将传递到用户的 Demat 账户，并存在直到用户明确平仓为止。在交易会话结束时由交货订单创建的仓位将转移到下一个交易会话。它们不会由经纪人明确平仓。尝试完这个示例后，通过登录经纪人的网站检查你的经纪账户；你会发现已经有一个订单被下达了。你可以将订单
    ID 与此示例中最后显示的代码片段返回的订单 ID 进行匹配。
- en: Getting ready
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure the `broker_connection` object is available in your Python namespace.
    Refer to the first recipe of this chapter to learn how to set up this object.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在你的 Python 命名空间中可用 `broker_connection` 对象。请参考本章第一个示例来学习如何设置此对象。
- en: How to do it…
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作方法…
- en: 'We execute the following steps to complete this recipe:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们执行以下步骤来完成此示例：
- en: 'Import the necessary modules:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入必要的模块：
- en: '[PRE34]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Fetch an instrument for a specific trading symbol and exchange:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取特定交易符号和交易所的金融工具：
- en: '[PRE35]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Place a simple `DELIVERY` order – a `SELL`, `REGULAR`, `DELIVERY`, `MARKET`
    order:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下达一个简单的 `DELIVERY` 订单 - 一个 `SELL`、`REGULAR`、`DELIVERY`、`MARKET` 订单：
- en: '[PRE36]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'We''ll get the following output:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将得到以下输出：
- en: '[PRE37]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: How it works…
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'In *step 1*, you import the constants from `pyalgotrading`. In *step 2*, you
    fetch the financial instrument with `segment = ''NSE''` and `tradingsymbol = ''AXISBANK''`
    using the `get_instrument()` method of `broker_connection`. In *step 3*, you place
    a `DELIVERY` order using the `place_order()` method of `broker_connection`. This
    method accepts the following arguments:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *第 1 步* 中，你从 `pyalgotrading` 导入常量。在 *第 2 步* 中，你使用 `broker_connection` 的 `get_instrument()`
    方法，通过 `segment = 'NSE'` 和 `tradingsymbol = 'AXISBANK'` 获取金融工具。在 *第 3 步* 中，你使用
    `broker_connection` 的 `place_order()` 方法下达 `DELIVERY` 订单。此方法接受以下参数：
- en: '`instrument`: The financial instrument for which the order must be placed.
    Should be an instance of the `Instrument` class. You pass `instrument` here.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instrument`：必须下订单的金融工具。应该是 `Instrument` 类的实例。你在这里传递 `instrument`。'
- en: '`order_transaction_type`: The order transaction type. Should be an enum of
    type `BrokerOrderTransactionTypeConstants`. You pass `BrokerOrderTransactionTypeConstants.SELL`
    here.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order_transaction_type`：订单交易类型。应该是 `BrokerOrderTransactionTypeConstants` 类型的枚举。你在这里传递
    `BrokerOrderTransactionTypeConstants.SELL`。'
- en: '`order_type`: The order type. Should be an enum of type `BrokerOrderTypeConstants`.
    You pass `BrokerOrderTypeConstants.REGULAR` here.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order_type`：订单类型。应该是 `BrokerOrderTypeConstants` 类型的枚举。你在这里传递 `BrokerOrderTypeConstants.REGULAR`。'
- en: '`order_code`: The order code. Should be an enum of type `BrokerOrderCodeConstants`.
    You pass `BrokerOrderCodeConstants.DELIVERY` here.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order_code`：订单代码。应该是 `BrokerOrderCodeConstants` 类型的枚举。你在这里传递 `BrokerOrderCodeConstants.DELIVERY`。'
- en: '`order_variety`: The order variety. Should be an enum of type `BrokerOrderVarietyConstants`.
    You pass `BrokerOrderVarietyConstants.MARKET` here.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order_variety`：订单类型。应该是 `BrokerOrderVarietyConstants` 类型的枚举。你在这里传递 `BrokerOrderVarietyConstants.MARKET`。'
- en: '`quantity:` The number of shares to be traded for the given instrument. Should
    be a positive integer. We pass `1` here.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quantity:` 要为给定金融工具交易的股票数量。应该是正整数。我们在这里传递 `1`。'
- en: If the order placement is successful, the method returns an order ID which you
    can use at any point in time later on for querying the status of the order.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 如果订单下达成功，该方法会返回一个订单 ID，你随时可以使用它查询订单的状态。
- en: A detailed explanation of the different types of parameters will be covered
    in [Chapter 6](077b54a1-c9c4-424c-912a-11f28db3797f.xhtml), *Placing Trading Orders
    on the Exchange*. This recipe is intended to give you an idea of how to place
    a `DELIVERY` order, one of the various types of possible orders.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 关于不同类型参数的详细解释将在 [第 6 章](077b54a1-c9c4-424c-912a-11f28db3797f.xhtml) *在交易所上下达交易订单*
    中介绍。此示例旨在让你了解如何下达 `DELIVERY` 订单，这是各种可能订单中的一种。
- en: Placing a simple INTRADAY order
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下达一个简单的 INTRADAY 订单
- en: This recipe demonstrates how to place an `INTRADAY` order via the broker API.
    An `INTRADAY` order is not delivered to the user's Demat account. Positions created
    by intraday orders have a lifetime of a single day. The positions are explicitly
    squared off by the broker at the end of a trading session and are not carried
    forward to the next trading session. After trying out this recipe, check your
    broking account by logging into the broker's website; you will find that an order
    has been placed there. You can match the order ID with the one that's returned
    in the last code snippet shown in this recipe.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方演示如何通过经纪人 API 下达 `INTRADAY` 订单。`INTRADAY` 订单不会传送到用户的 Demat 账户。由日内订单创建的头寸具有一天的生命周期。这些头寸在交易会话结束时由经纪人明确平仓，并不转入下一个交易会话。尝试完此配方后，通过登录经纪人网站查看您的经纪账户；您会发现已经有了一个订单。您可以将订单
    ID 与此配方中显示的最后一个代码片段返回的订单 ID 进行匹配。
- en: Getting ready
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure the `broker_connection` object is available in your Python namespace.
    Refer to the first recipe of this chapter to learn how to set up this object.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 确保 `broker_connection` 对象在您的 Python 命名空间中可用。请参考本章的第一个配方，了解如何设置此对象。
- en: How to do it…
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'We execute the following steps to complete this recipe:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们执行以下步骤来完成此配方：
- en: 'Import the necessary modules:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入必要的模块：
- en: '[PRE38]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Fetch an instrument for a specific trading symbol and exchange:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取特定交易符号和交易所的工具：
- en: '[PRE39]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Fetch the last traded price of the instrument:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取工具的最近成交价：
- en: '[PRE40]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Place a simple `INTRADAY` order – a `SELL`, `BRACKET`, `INTRADAY`, `LIMIT`
    order:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下达一个简单的 `INTRADAY` 订单 —— 一个 `SELL`，`BRACKET`，`INTRADAY`，`LIMIT` 订单：
- en: '[PRE41]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'We''ll get the following output:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将获得以下输出：
- en: '[PRE42]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'If you get the following error while executing this code, it would mean that
    Bracket orders are blocked by the broker due to high volatility in the markets:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在执行此代码时出现以下错误，则意味着经纪人由于市场波动性较高而阻止了 Bracket 订单：
- en: '`InputException: Due to expected higher volatility in the markets, Bracket
    orders are blocked temporarily.`'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '`InputException: 由于市场预期波动率较高，Bracket 订单暂时被阻止。`'
- en: You should try the recipe later when the broker starts allowing Bracket orders.
    You can check for updates on the Broker site from time to time to know when Bracket
    orders would be allowed.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 当经纪人开始允许 Bracket 订单时，您应该稍后尝试此配方。您可以不时地在经纪人网站上查看更新，了解何时允许 Bracket 订单。
- en: How it works…
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'In *step 1*, you import the constants from `pyalgotrading`. In *step 2*, you
    fetch the financial instrument with `segment = ''NSE''` and `tradingsymbol = ''HDFCBANK''`
    using the `get_instrument()` method of `broker_connection`. In *step 3*, you fetch
    the LTP of the instrument. (LTP will be explained in detail in the *Last traded
    price of a financial instrument* recipe of [Chapter 3](d82aae2c-b9a8-4a79-bfea-44719adf1acf.xhtml), *Analyzing
    Financial Data.*) In *step 4*, you place a `BRACKET` order using the `place_order()`
    method of the `broker_connection`. The descriptions of the parameters accepted
    by the `place_order()` method are as follows:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 1* 中，您从 `pyalgotrading` 导入常量。在 *步骤 2* 中，您使用 `broker_connection` 的 `get_instrument()`
    方法通过 `segment = 'NSE'` 和 `tradingsymbol = 'HDFCBANK'` 获取金融工具。在 *步骤 3* 中，您获取该工具的
    LTP。（LTP 将在 [第 3 章](d82aae2c-b9a8-4a79-bfea-44719adf1acf.xhtml) 的 *金融工具的最近成交价*
    配方中详细解释。）在 *步骤 4* 中，您使用 `broker_connection` 的 `place_order()` 方法下达 `BRACKET` 订单。`place_order()`
    方法接受的参数描述如下：
- en: '`instrument`: The financial instrument for which the order must be placed.
    Should be an instance of the `Instrument` class. You pass `instrument` here.'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instrument`：必须下达订单的金融工具。应为 `Instrument` 类的实例。在这里传递 `instrument`。'
- en: '`order_transaction_type`: The order transaction type. Should be an enum of
    type `BrokerOrderTransactionTypeConstants`. You pass `BrokerOrderTransactionTypeConstants.SELL`
    here.'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order_transaction_type`：订单交易类型。应为 `BrokerOrderTransactionTypeConstants` 类型的枚举。在这里传递
    `BrokerOrderTransactionTypeConstants.SELL`。'
- en: '`order_type`: The order type. Should be an enum of type `BrokerOrderTypeConstants`.
    You pass `BrokerOrderTypeConstants.BRACKET` here.'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order_type`：订单类型。应为 `BrokerOrderTypeConstants` 类型的枚举。在这里传递 `BrokerOrderTypeConstants.BRACKET`。'
- en: '`order_code`: The order code. Should be an enum of type `BrokerOrderCodeConstants`.
    You pass `BrokerOrderCodeConstants.INTRADAY` here.'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order_code`：订单代码。应为 `BrokerOrderCodeConstants` 类型的枚举。在这里传递 `BrokerOrderCodeConstants.INTRADAY`。'
- en: '`order_variety`: The order variety. Should be an enum of type `BrokerOrderVarietyConstants`.
    You pass `BrokerOrderVarietyConstants.LIMIT` here.'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order_variety`：订单种类。应为 `BrokerOrderVarietyConstants` 类型的枚举。在这里传递 `BrokerOrderVarietyConstants.LIMIT`。'
- en: '`quantity`: The number of shares to be traded for the given instrument. Should
    be a positive integer. You pass `1` here.'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quantity`：给定工具要交易的股票数量。应该是正整数。这里你传递了`1`。'
- en: '`price`: The limit price at which the order should be placed. You pass `ltp+1`
    here, which means 1 unit price above the `ltp` value.'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`price`：应该下订单的限价。这里你传递了`ltp+1`，表示高于`ltp`值的1个单位价格。'
- en: '`stoploss`: The price difference from the initial order price, at which the
    stoploss order should be placed. Should be a positive integer or float value.
    You pass `2` here.'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stoploss`：与初始订单价格的价格差，应在该价格处放置止损订单。应该是正整数或浮点数值。这里你传递了`2`。'
- en: '`target`: The price difference from the initial order price, at which the target
    order should be placed. Should be a positive integer or float value. You pass
    `2` here.'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target`：与初始订单价格的价格差，应在该价格处放置目标订单。应该是正整数或浮点数值。这里你传递了`2`。'
- en: If the order placement is successful, the method returns an order ID which you
    can use at any point in time later on for querying the status of the order.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 如果下单成功，该方法将返回一个订单ID，您随时可以在以后的任何时间使用它来查询订单的状态。
- en: A detailed explanation of the different types of parameters will be covered
    in [Chapter 6](077b54a1-c9c4-424c-912a-11f28db3797f.xhtml), *Placing Trading Orders
    on the Exchange*. This recipe is intended to give you an idea of how to place
    an `INTRADAY` order, one of the various types of possible orders.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 不同类型参数的详细解释将在[第6章](077b54a1-c9c4-424c-912a-11f28db3797f.xhtml)，*在交易所下订单* 中介绍。本示例旨在让您了解如何下达
    `INTRADAY` 订单，这是各种可能订单类型之一。
- en: Querying margins and funds
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查询保证金和资金
- en: Before placing orders, it is important to ensure that you have enough margins
    and funds available in your broking account to place the orders successfully.
    A lack of sufficient funds would result in the rejection of any orders placed
    by the broker, which means the others would never get placed on the exchange.
    This recipe shows you how to find the available margins and funds in your broking
    account at any point in time.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在下单之前，重要的是要确保您的经纪账户中有足够的保证金和资金可用以成功下单。资金不足会导致经纪拒绝任何下单，这意味着其他人将永远不会在交易所下单。本示例向您展示了如何随时查找您的经纪账户中可用的保证金和资金。
- en: Getting ready
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Make sure the `broker_connection` object is available in your Python namespace.
    Refer to the first recipe of this chapter to learn how to set it up.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 确保 `broker_connection` 对象在您的 Python 命名空间中可用。请参考本章的第一个示例来学习如何设置它。
- en: How to do it…
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'We execute the following steps to complete this recipe:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我们执行以下步骤完成此示例：
- en: 'Display the equity margins:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示股票保证金：
- en: '[PRE43]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'We''ll get the following output (your output may differ):'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将得到以下输出（您的输出可能有所不同）：
- en: '[PRE44]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Display the equity funds:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示股票资金：
- en: '[PRE45]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'We''ll get the following output (your output may differ):'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将得到以下输出（您的输出可能有所不同）：
- en: '[PRE46]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Display the commodity margins:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示商品保证金：
- en: '[PRE47]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'We''ll get the following output (your output may differ):'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将得到以下输出（您的输出可能有所不同）：
- en: '[PRE48]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Display the commodity funds:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示商品资金：
- en: '[PRE49]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'We''ll get the following output (your output may differ):'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将得到以下输出（您的输出可能有所不同）：
- en: '[PRE50]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: How it works…
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'The `broker_connection` object provides methods for fetching the available
    margins and funds for your broking account:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '`broker_connection`对象提供了用于获取经纪账户可用保证金和资金的方法：'
- en: '`get_margins()`'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_margins()`'
- en: '`get_funds()`'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_funds()`'
- en: The broker Zerodha keeps track of margins and funds separately for `equity`
    and `commodity` products. If you are using a different broker supported by `pyalgotrading`,
    it may or may not track the funds and margins separately for `equity` and `commodity`.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 经纪公司 Zerodha 分别跟踪 `equity` 和 `commodity` 产品的保证金和资金。如果您使用的是 `pyalgotrading` 支持的其他经纪公司，则可能会将资金和保证金分别跟踪
    `equity` 和 `commodity`。
- en: '*Step 1* shows how margins can be queried for the `equity` product using the
    `get_margins()` method of the `broker_connection` object, with `equity` as an
    argument. *Step 2* shows how funds can be queried for the `equity` product using
    the `get_funds()` method of the `broker_connection` object, with the `equity` string
    as an argument.'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤 1* 展示了如何使用`broker_connection`对象的`get_margins()`方法查询`equity`产品的保证金，参数为`equity`。*步骤
    2* 展示了如何使用`broker_connection`对象的`get_funds()`方法查询`equity`产品的资金，参数为`equity`字符串。'
- en: '*Steps 3* and *4* show how margins and funds can be queried for the `commodity`
    product in a similar way with the `commodity` string as an argument.'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤 3* 和 *4* 展示了如何查询以`commodity`字符串为参数的`commodity`产品的保证金和资金情况。'
- en: Calculating the brokerage charged
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算收取的佣金
- en: For every order completed successfully, the broker may charge a certain fee,
    which is usually a small fraction of the price at which the instrument was bought
    or sold. While the amount may seem small, it is important to keep track of the
    brokerage as it may end up eating a significant chunk of your profit at the end
    of the day.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 每次成功完成的订单，经纪人可能会收取一定的费用，这通常是买卖工具价格的一小部分。虽然金额看似不大，但重要的是要跟踪佣金，因为它最终可能会吃掉你一天结束时的可观利润的一大部分。
- en: The brokerage that's charged varies from broker to broker and also from segment
    to segment. For the purpose of this recipe, we will consider a brokerage of 0.01%.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 收取的佣金因经纪人而异，也因交易段而异。针对这个方案，我们将考虑佣金为 0.01%。
- en: How to do it…
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'We execute the following steps to complete this recipe:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 我们执行以下步骤完成这个方案：
- en: 'Calculate the brokerage that''s charged per trade:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算每笔交易收取的佣金：
- en: '[PRE51]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'We''ll get the following output:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将获得以下输出：
- en: '[PRE52]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Calculate the total brokerage that''s charged for 10 trades:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算 10 笔交易的总佣金：
- en: '[PRE53]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'We''ll get the following output:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将获得以下输出：
- en: '[PRE54]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: How it works…
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: In *step 1*, we start with the price at which a trade was bought or sold, `entry_price`.
    For this recipe, we have used `1245`. Next, we calculate 0.01% of the price, which
    comes to `0.1245`. Then, we calculate the total brokerage for 10 such trades,
    which comes out as `10 * 0.1245 = 1.245`.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *第 1 步* 中，我们从交易买入或卖出的价格`entry_price`开始。对于这个方案，我们使用了`1245`。接下来，我们计算价格的 0.01%，即`0.1245`。然后，我们计算
    10 笔这样的交易的总佣金，结果为`10 * 0.1245 = 1.245`。
- en: For every order, the brokerage is charged twice. The first time is when the
    order has entered a position, while the second time is when it has exited the
    position. To get the exact details of the brokerage that's been charged for your
    trades, please refer to the list of charges offered by your broker.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 每个订单，佣金都会收取两次。第一次是当订单进入持仓时，而第二次是当订单退出持仓时。要获取所收取的佣金的确切细节，请参考您的经纪人提供的费用清单。
- en: Calculating the government taxes charged
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算收取的政府税费
- en: For every order that's completed successfully, the government may charge a certain
    fee, which is a fraction of the price at which the instrument was bought or sold.
    While the amount may seem small, it is important to keep track of government taxes
    as they may end up eating a significant chunk of your profit at the end of the
    day.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个成功完成的订单，政府可能会收取一定的费用，这是买卖工具价格的一小部分。虽然金额看似不大，但重要的是要跟踪政府税费，因为它最终可能会吃掉你一天结束时的可观利润的一大部分。
- en: The government charge depends on the location of the exchange, and varies from
    segment to segment. For the purpose of this recipe, we will consider government
    taxes at a rate of 0.1%.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 政府的收费取决于交易所的位置，并且从一个交易段到另一个交易段都有所不同。针对这个方案，我们将考虑政府税费的费率为 0.1%。
- en: How to do it…
  id: totrans-278
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'We execute the following steps to complete this recipe:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 我们执行以下步骤完成这个方案：
- en: 'Calculate the government taxes that are charged per trade:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算每笔交易收取的政府税费：
- en: '[PRE55]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'We''ll get the following output:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将获得以下输出：
- en: '[PRE56]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Calculate the total government taxes that are charged for 10 trades:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算 10 笔交易收取的总政府税费：
- en: '[PRE57]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'We''ll get the following output:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将获得以下输出：
- en: '[PRE58]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: How it works…
  id: totrans-288
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: In *step 1*, we start with the price at which a trade was bought or sold, `entry_price`.
    For this recipe, we have used `1245`. Next, we calculate 0.1% of the price, which
    comes to `1.245`. Then, we calculate the total brokerage for 10 such trades, which
    comes out as `10 * 1.245 = 12.245`.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *第 1 步* 中，我们从交易买入或卖出的价格`entry_price`开始。对于这个方案，我们使用了`1245`。接下来，我们计算价格的 0.1%，即`1.245`。然后，我们计算
    10 笔这样的交易的总佣金，结果为`10 * 1.245 = 12.245`。
- en: For every order, government taxes are charged twice. The first time is when
    the order has entered a position, while the second time is when it has exited
    the position. To get the exact details of the government taxes that are charged
    for your trades, please refer to the list of government taxes provided by your
    exchange.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个订单，政府税费会收取两次。第一次是当订单进入持仓时，而第二次是当订单退出持仓时。要获取所收取的政府税费的确切细节，请参考交易所提供的政府税费清单。
