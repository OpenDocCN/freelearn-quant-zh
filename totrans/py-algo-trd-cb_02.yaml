- en: Stock Markets - Primer on Trading
  prefs: []
  type: TYPE_NORMAL
- en: When building algorithmic trading systems, it is essential to have an account
    open with a modern broker that provides APIs for placing and querying trades programmatically.
    This allows us to control the broking account, which is conventionally operated
    manually using the broker's website, using our Python script, which would be part
    of our larger algorithmic trading system. This chapter demonstrates various essential
    recipes that introduce the essential broker API calls needed for developing a
    complete algorithmic trading system.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Python connectivity with the broker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Querying a list of instruments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fetching an instrument
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Querying a list of exchanges
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Querying a list of segments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Knowing other attributes supported by the broker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Placing a simple REGULAR order
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Placing a simple BRACKET order
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Placing a simple DELIVERY order
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Placing a simple INTRADAY order
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Querying margins and funds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculating the brokerage charged
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculating the government taxes charged
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You will need the following to successfully execute the recipes in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Python 3.7+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Python `pyalgotrading` package (`$ pip install pyalgotrading`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The latest Jupyter Notebook for this chapter can be found on GitHub at [https://github.com/PacktPublishing/Python-Algorithmic-Trading-Cookbook/tree/master/Chapter02](https://github.com/PacktPublishing/Python-Algorithmic-Trading-Cookbook/tree/master/Chapter02).
  prefs: []
  type: TYPE_NORMAL
- en: This chapter demonstrates the APIs of a modern broker, `ZERODHA`, which is supported
    by `pyalgotrading`. You may wish to choose other brokers supported by `pyalgotrading`
    as well. The recipes in this chapter should be more or less the same for any other
    broker. The `pyalgotrading` package abstracts broker APIs behind a unified interface,
    so you don't need to worry about the underlying broker API calls.
  prefs: []
  type: TYPE_NORMAL
- en: To set up a broking account with `ZERODHA`, please refer to the detailed steps
    provided in *Appendix I*.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Python connectivity with the broker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing you need to set up connectivity with the broker is API keys.
    The broker provides unique keys to each customer, typically as an `api-key` and
    `api-secret` key pair. These API keys are chargeable, usually on a monthly subscription
    basis. You need to get your copies of `api-key` and `api-secret` from the broker's
    website before you start this recipe. Please refer to *Appendix I* for more details.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We execute the following steps to complete this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the necessary modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Get the `api_key` and `api_secret` keys from the broker. These are unique to
    you and will be used by the broker to identify your Demat account:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Get the request token from the preceding URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In *step 1*, you import the `BrokerConnectionZerodha` class from `pyalgotrading`.
    The `BrokerConnectionZerodha` class provides an abstraction around the broker-specific
    APIs. For *step 2*, you need your API key and API secret from the broker. If you
    do not have them, please refer to *Appendix I* for detailed instructions with
    screenshots on getting this keys. In *step 2*, you assign your API key and API
    secret to the new `api_key` and `api_secret` variables and use them to create
    `broker_connection`, an instance of the `BrokerConnectionZerodha` class. If you
    are running this for the first time and `kiteconnect` is not installed, `pyalgotrading`
    will automatically install it for you. (`kiteconnect` is the official Python package
    that talks to the Zerodha backend; `BrokerConnectionZerodha` is a wrapper on top
    of `kiteconnect`.) *Step 2* generates a login URL. Here, you need to click on
    the link and log in with your Zerodha credentials. If the authentication process
    is successful, you will see a link in your browser''s address bar that looks similar
    to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, the full link would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Copy the alphanumeric-token, `H06I6Ydv95y23D2Dp7NbigFjKweGwRP7`, and paste it
    into `request_token` as part of *step 3*. The `broker_connection` instance is
    now ready to perform API calls.
  prefs: []
  type: TYPE_NORMAL
- en: Querying a list of instruments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the `broker_connection` handle is ready, it can be used to query the list
    containing all the financial instruments provided by the broker.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the `broker_connection` object is available in your Python namespace.
    Refer to the previous recipe in this chapter to set up this object.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We execute the following steps to complete this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Display all the instruments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get an output similar to the following. The exact output may differ
    for you:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Print the total number of instruments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output (your output may differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first step fetches all the available financial instruments using the `get_all_instruments()`
    method of `broker_connection`. This method returns a `pandas.DataFrame` object.
    This object is assigned to a new variable, `instruments`, which is shown in the
    output of *step 1*. This output may differ for you as new financial instruments
    are frequently added and existing ones expire regularly. The final step shows
    the total number of instruments provided by the broker.
  prefs: []
  type: TYPE_NORMAL
- en: An explanation of the data that was returned by the preceding API call will
    be discussed in depth in [Chapter 3](d82aae2c-b9a8-4a79-bfea-44719adf1acf.xhtml),
    *Analyzing Financial Data*. For this recipe, it suffices to know the method for
    fetching the list of instruments.
  prefs: []
  type: TYPE_NORMAL
- en: Fetching an instrument
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Instruments**, also known as **financial instruments** or **securities**,
    are assets that can be traded in an exchange. In an exchange, there can easily
    be tens of thousands of instruments. This recipe demonstrates how to fetch an
    instrument based on its **exchange** and **trading symbol**.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the `broker_connection` object is available in your Python namespace.
    Refer to the first recipe in this chapter to set up this object.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Fetch an instrument for a specific trading symbol and exchange:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You''ll get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `broker_connection` object provides a handy method, `get_instrument`, for
    fetching any financial instrument. It takes `segment` and `tradingsymbol` as attributes
    before returning an instrument. The return object is an instance of the `Instrument`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Querying a list of exchanges
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An **exchange** is a marketplace where instruments are traded. Exchanges ensure
    that the trading process is fair and happens in an orderly fashion at all times.
    Usually, a broker supports multiple exchanges. This recipe demonstrates how to
    find the list of exchanges supported by the broker.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the `instruments` object is available in your Python namespace. Refer
    to the second recipe of this chapter to learn how to set up this object.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Display the exchanges supported by the broker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`instruments.exchange` returns a `pandas.Series` object. Its `unique()` method
    returns a `numpy.ndarray` object consisting of unique exchanges supported by the
    broker.'
  prefs: []
  type: TYPE_NORMAL
- en: Querying a list of segments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A segment is essentially a categorization of instruments based on their types.
    The various types of segments that are commonly found at exchanges include cash/equities,
    futures, options, commodities, and currency. Each segment may have a different
    operating time. Usually, a broker supports multiple segments within multiple exchanges.
    This recipe demonstrates how to find the list of segments supported by the broker.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the `instruments` object is available in your Python namespace. Refer
    to the second recipe of this chapter to learn how to set up this object.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Display the segments supported by the broker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`instruments.segment` returns a `pandas.Series` object. Its unique method returns
    a `numpy.ndarray` object consisting of unique segments supported by the broker.'
  prefs: []
  type: TYPE_NORMAL
- en: Knowing other attributes supported by the broker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For placing an order, the following attributes are needed: order transaction
    type, order variety, order type, and order code. Different brokers may support
    different types of order attributes. For example, some brokers may support just
    regular orders, while others may support regular and bracket orders. The value
    for each of the attributes supported by the broker can be queried using the broker
    specific constants provided by the `pyalgotrading` package.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We execute the following steps to complete this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the necessary class from the `pyalgotrading` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'List the order transaction types:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'List the order varieties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'List the order types:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'List the order codes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *step 1*, we import the `BrokerConnectionZerodha` class from `pyalgotrading`.
    This class holds the order attributes mapping between `pyalgotrading` and broker
    specific constants as dictionary objects. The next steps fetch and print these
    mappings. Step 2 shows that your broker supports both `BUY`  and `SELL` order
    transaction types.
  prefs: []
  type: TYPE_NORMAL
- en: '*Step 3* shows that your broker supports `MARKET`, `LIMIT`, `STOPLOSS_LIMIT`,
    and `STOPLOSS_MARKET` order varieties. *Step 4* shows that your broker supports
    `REGULAR`, `BRACKET`, `COVER`, and `AFTER_MARKET` order types. *Step 5* shows
    that your broker supports `INTRADAY` and `DELIVERY` order codes.'
  prefs: []
  type: TYPE_NORMAL
- en: The outputs may differ from broker to broker, so consult your broker documentation
    if you are using a different broker. A detailed explanation of all these types
    of parameters will be covered in [Chapter 6](077b54a1-c9c4-424c-912a-11f28db3797f.xhtml),
    *Placing Trading Orders on the Exchange*. This recipe is to just give an overview
    of the parameters, as they are needed in the subsequent recipes of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Placing a simple REGULAR order
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe demonstrates how to place a `REGULAR` order on the exchange via
    the broker. `REGULAR` orders are the simplest types of orders. After trying out
    this recipe, check your broking account by logging into the broker's website;
    you will find that an order has been placed there. You can match the order ID
    with the one that's returned in the last code snippet shown in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the `broker_connection` object is available in your Python namespace.
    Refer to the first recipe of this chapter to learn how to set up this object.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We execute the following steps to complete this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the necessary constants from `pyalgotrading`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch an instrument for a specific trading symbol and exchange:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Place a simple regular order – a `BUY`, `REGULAR`, `INTRADAY`, `MARKET` order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In *step 1*, you import constants from `pyalgotrading`. In *step 2*, you fetch
    the financial instrument with `segment = ''NSE''` and `tradingsymbol = ''TATASTEEL''`
    using the `get_instrument()` method of `broker_connection`. In *step 3*, you place
    a `REGULAR` order using the `place_order()` method of `broker_connection`. The
    descriptions of the parameters accepted by the `place_order()` method are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`instrument`: The financial instrument for which the order must be placed.
    Should an instance of the `Instrument` class. You pass `instrument` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_transaction_type`: The order transaction type. Should be an enum of
    type `BrokerOrderTransactionTypeConstants`. You pass `BrokerOrderTransactionTypeConstants.BUY`
    here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_type`: The order type. Should be an enum of type `BrokerOrderTypeConstants`.
    You pass `BrokerOrderTypeConstants.REGULAR` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_code`: The order code. Should be an enum of type `BrokerOrderCodeConstants`.
    You pass `BrokerOrderCodeConstants.INTRADAY` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_variety`: The order variety. Should be an enum of type `BrokerOrderVarietyConstants`.
    You pass `BrokerOrderVarietyConstants.MARKET` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`quantity`: The number of shares to be traded for the given instrument. Should
    be a positive integer. We pass `1` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the order placement is successful, the method returns an order ID which you
    can use at any point in time later on for querying the status of the order.
  prefs: []
  type: TYPE_NORMAL
- en: A detailed explanation of the different types of parameters will be covered
    in [Chapter 6](077b54a1-c9c4-424c-912a-11f28db3797f.xhtml), *Placing Trading Orders
    on the Exchange*. This recipe is intended to give you an idea of how to place
    a `REGULAR` order, one of the various types of possible orders.
  prefs: []
  type: TYPE_NORMAL
- en: Placing a simple BRACKET order
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe demonstrates how to place a `BRACKET` order on the exchange via
    the broker. `BRACKET` orders are two-legged orders. Once the first order is executed,
    the broker automatically places two new orders – a `STOPLOSS` order and a `TARGET`
    order. Only one of them is executed at any time; the other is canceled when the
    first order is completed. After trying out this recipe, check your broking account
    by logging into the broker's website; you will find that an order has been placed
    there. You can match the order ID with the one that's returned in the last code
    snippet shown in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the `broker_connection` object is available in your Python namespace.
    Refer to the first recipe of this chapter to learn how to set up this object.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We execute the following steps to complete this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the necessary modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch an instrument for a specific trading symbol and exchange:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch the last traded price of the instrument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Place a simple `BRACKET` order – a `BUY`, `BRACKET`, `INTRADAY`, `LIMIT` order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'If you get the following error while executing this code, it would mean that
    Bracket orders are blocked by the broker due to high volatility in the markets:'
  prefs: []
  type: TYPE_NORMAL
- en: '`InputException: Due to expected higher volatility in the markets, Bracket
    orders are blocked temporarily.`'
  prefs: []
  type: TYPE_NORMAL
- en: You should try the recipe later when the broker starts allowing Bracket orders.
    You can check for updates on the Broker site from time to time to know when Bracket
    orders would be allowed.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In *step 1*, you import the constants from `pyalgotrading`. In *step 2*, you
    fetch the financial instrument with `segment = ''NSE''` and `tradingsymbol = ''ICICBANK''`
    using the `get_instrument()` method of `broker_connection`. In *step 3*, you fetch
    the **last traded price** or **LTP** of the instrument. (LTP will be explained
    in more detail in the *Last traded price of a financial instrument* recipe of [Chapter
    3](d82aae2c-b9a8-4a79-bfea-44719adf1acf.xhtml), *Analyzing Financial Data.*) In
    *step 4*, you place a `BRACKET` order using the `place_order()` method of `broker_connection`.
    The descriptions of the parameters accepted by the `place_order()` method are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`instrument`: The financial instrument for which the order must be placed.
    Should be an instance of the `Instrument` class. You pass `instrument` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_transaction_type`: The order transaction type. Should be an enum of
    type `BrokerOrderTransactionTypeConstants`. You pass `BrokerOrderTransactionTypeConstants.BUY`
    here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_type`: The order type. Should be an enum of type `BrokerOrderTypeConstants`.
    You pass `BrokerOrderTypeConstants.BRACKET` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_code`: The order code. Should be an enum of type `BrokerOrderCodeConstants`.
    You pass `BrokerOrderCodeConstants.INTRADAY` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_variety`: The order variety. Should be an enum of type `BrokerOrderVarietyConstants`.
    You pass `BrokerOrderVarietyConstants.LIMIT` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`quantity`: The number of shares to be traded for the given instrument. Should
    be a positive integer. You pass `1` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`price`: The limit price at which the order should be placed. You pass `ltp-1`
    here, which means 1 unit price below the `ltp` value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stoploss`: The price difference from the initial order price, at which the
    stoploss order should be placed. Should be a positive integer or float value.
    You pass `2` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`target`: The price difference from the initial price, at which the target
    order should be placed. Should be a positive integer or float value. You pass
    `2` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the order placement is successful, the method returns an order ID which you
    can use at any point in time later on for querying the status of the order.
  prefs: []
  type: TYPE_NORMAL
- en: A detailed explanation of the different types of parameters will be covered
    in [Chapter 6](077b54a1-c9c4-424c-912a-11f28db3797f.xhtml), *Placing Trading Orders
    on the Exchange*. This recipe is intended to give you an idea of how to place
    a `BRACKET` order, one of the various types of possible orders.
  prefs: []
  type: TYPE_NORMAL
- en: Placing a simple DELIVERY order
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe demonstrates how to place a `DELIVERY` order on the exchange via
    the broker. A `DELIVERY` order is delivered to the user's Demat account and exists
    until it is explicitly squared-off by the user. Positions created by delivery
    orders at the end of a trading session are carried forwarded to the next trading
    session. They are not explicitly squared-off by the broker. After trying out this
    recipe, check your broking account by logging into the broker's website; you will
    find that an order has been placed there. You can match the order ID with the
    one that's returned in the last code snippet shown in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the `broker_connection` object is available in your Python namespace.
    Refer to the first recipe of this chapter to learn how to set up this object.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We execute the following steps to complete this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the necessary modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch an instrument for a specific trading symbol and exchange:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Place a simple `DELIVERY` order – a `SELL`, `REGULAR`, `DELIVERY`, `MARKET`
    order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In *step 1*, you import the constants from `pyalgotrading`. In *step 2*, you
    fetch the financial instrument with `segment = ''NSE''` and `tradingsymbol = ''AXISBANK''`
    using the `get_instrument()` method of `broker_connection`. In *step 3*, you place
    a `DELIVERY` order using the `place_order()` method of `broker_connection`. This
    method accepts the following arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '`instrument`: The financial instrument for which the order must be placed.
    Should be an instance of the `Instrument` class. You pass `instrument` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_transaction_type`: The order transaction type. Should be an enum of
    type `BrokerOrderTransactionTypeConstants`. You pass `BrokerOrderTransactionTypeConstants.SELL`
    here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_type`: The order type. Should be an enum of type `BrokerOrderTypeConstants`.
    You pass `BrokerOrderTypeConstants.REGULAR` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_code`: The order code. Should be an enum of type `BrokerOrderCodeConstants`.
    You pass `BrokerOrderCodeConstants.DELIVERY` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_variety`: The order variety. Should be an enum of type `BrokerOrderVarietyConstants`.
    You pass `BrokerOrderVarietyConstants.MARKET` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`quantity:` The number of shares to be traded for the given instrument. Should
    be a positive integer. We pass `1` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the order placement is successful, the method returns an order ID which you
    can use at any point in time later on for querying the status of the order.
  prefs: []
  type: TYPE_NORMAL
- en: A detailed explanation of the different types of parameters will be covered
    in [Chapter 6](077b54a1-c9c4-424c-912a-11f28db3797f.xhtml), *Placing Trading Orders
    on the Exchange*. This recipe is intended to give you an idea of how to place
    a `DELIVERY` order, one of the various types of possible orders.
  prefs: []
  type: TYPE_NORMAL
- en: Placing a simple INTRADAY order
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe demonstrates how to place an `INTRADAY` order via the broker API.
    An `INTRADAY` order is not delivered to the user's Demat account. Positions created
    by intraday orders have a lifetime of a single day. The positions are explicitly
    squared off by the broker at the end of a trading session and are not carried
    forward to the next trading session. After trying out this recipe, check your
    broking account by logging into the broker's website; you will find that an order
    has been placed there. You can match the order ID with the one that's returned
    in the last code snippet shown in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the `broker_connection` object is available in your Python namespace.
    Refer to the first recipe of this chapter to learn how to set up this object.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We execute the following steps to complete this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the necessary modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch an instrument for a specific trading symbol and exchange:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch the last traded price of the instrument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Place a simple `INTRADAY` order – a `SELL`, `BRACKET`, `INTRADAY`, `LIMIT`
    order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'If you get the following error while executing this code, it would mean that
    Bracket orders are blocked by the broker due to high volatility in the markets:'
  prefs: []
  type: TYPE_NORMAL
- en: '`InputException: Due to expected higher volatility in the markets, Bracket
    orders are blocked temporarily.`'
  prefs: []
  type: TYPE_NORMAL
- en: You should try the recipe later when the broker starts allowing Bracket orders.
    You can check for updates on the Broker site from time to time to know when Bracket
    orders would be allowed.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In *step 1*, you import the constants from `pyalgotrading`. In *step 2*, you
    fetch the financial instrument with `segment = ''NSE''` and `tradingsymbol = ''HDFCBANK''`
    using the `get_instrument()` method of `broker_connection`. In *step 3*, you fetch
    the LTP of the instrument. (LTP will be explained in detail in the *Last traded
    price of a financial instrument* recipe of [Chapter 3](d82aae2c-b9a8-4a79-bfea-44719adf1acf.xhtml), *Analyzing
    Financial Data.*) In *step 4*, you place a `BRACKET` order using the `place_order()`
    method of the `broker_connection`. The descriptions of the parameters accepted
    by the `place_order()` method are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`instrument`: The financial instrument for which the order must be placed.
    Should be an instance of the `Instrument` class. You pass `instrument` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_transaction_type`: The order transaction type. Should be an enum of
    type `BrokerOrderTransactionTypeConstants`. You pass `BrokerOrderTransactionTypeConstants.SELL`
    here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_type`: The order type. Should be an enum of type `BrokerOrderTypeConstants`.
    You pass `BrokerOrderTypeConstants.BRACKET` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_code`: The order code. Should be an enum of type `BrokerOrderCodeConstants`.
    You pass `BrokerOrderCodeConstants.INTRADAY` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_variety`: The order variety. Should be an enum of type `BrokerOrderVarietyConstants`.
    You pass `BrokerOrderVarietyConstants.LIMIT` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`quantity`: The number of shares to be traded for the given instrument. Should
    be a positive integer. You pass `1` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`price`: The limit price at which the order should be placed. You pass `ltp+1`
    here, which means 1 unit price above the `ltp` value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stoploss`: The price difference from the initial order price, at which the
    stoploss order should be placed. Should be a positive integer or float value.
    You pass `2` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`target`: The price difference from the initial order price, at which the target
    order should be placed. Should be a positive integer or float value. You pass
    `2` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the order placement is successful, the method returns an order ID which you
    can use at any point in time later on for querying the status of the order.
  prefs: []
  type: TYPE_NORMAL
- en: A detailed explanation of the different types of parameters will be covered
    in [Chapter 6](077b54a1-c9c4-424c-912a-11f28db3797f.xhtml), *Placing Trading Orders
    on the Exchange*. This recipe is intended to give you an idea of how to place
    an `INTRADAY` order, one of the various types of possible orders.
  prefs: []
  type: TYPE_NORMAL
- en: Querying margins and funds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before placing orders, it is important to ensure that you have enough margins
    and funds available in your broking account to place the orders successfully.
    A lack of sufficient funds would result in the rejection of any orders placed
    by the broker, which means the others would never get placed on the exchange.
    This recipe shows you how to find the available margins and funds in your broking
    account at any point in time.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the `broker_connection` object is available in your Python namespace.
    Refer to the first recipe of this chapter to learn how to set it up.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We execute the following steps to complete this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Display the equity margins:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll get the following output (your output may differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the equity funds:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll get the following output (your output may differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the commodity margins:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll get the following output (your output may differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the commodity funds:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll get the following output (your output may differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `broker_connection` object provides methods for fetching the available
    margins and funds for your broking account:'
  prefs: []
  type: TYPE_NORMAL
- en: '`get_margins()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_funds()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The broker Zerodha keeps track of margins and funds separately for `equity`
    and `commodity` products. If you are using a different broker supported by `pyalgotrading`,
    it may or may not track the funds and margins separately for `equity` and `commodity`.
  prefs: []
  type: TYPE_NORMAL
- en: '*Step 1* shows how margins can be queried for the `equity` product using the
    `get_margins()` method of the `broker_connection` object, with `equity` as an
    argument. *Step 2* shows how funds can be queried for the `equity` product using
    the `get_funds()` method of the `broker_connection` object, with the `equity` string
    as an argument.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Steps 3* and *4* show how margins and funds can be queried for the `commodity`
    product in a similar way with the `commodity` string as an argument.'
  prefs: []
  type: TYPE_NORMAL
- en: Calculating the brokerage charged
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For every order completed successfully, the broker may charge a certain fee,
    which is usually a small fraction of the price at which the instrument was bought
    or sold. While the amount may seem small, it is important to keep track of the
    brokerage as it may end up eating a significant chunk of your profit at the end
    of the day.
  prefs: []
  type: TYPE_NORMAL
- en: The brokerage that's charged varies from broker to broker and also from segment
    to segment. For the purpose of this recipe, we will consider a brokerage of 0.01%.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We execute the following steps to complete this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Calculate the brokerage that''s charged per trade:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Calculate the total brokerage that''s charged for 10 trades:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *step 1*, we start with the price at which a trade was bought or sold, `entry_price`.
    For this recipe, we have used `1245`. Next, we calculate 0.01% of the price, which
    comes to `0.1245`. Then, we calculate the total brokerage for 10 such trades,
    which comes out as `10 * 0.1245 = 1.245`.
  prefs: []
  type: TYPE_NORMAL
- en: For every order, the brokerage is charged twice. The first time is when the
    order has entered a position, while the second time is when it has exited the
    position. To get the exact details of the brokerage that's been charged for your
    trades, please refer to the list of charges offered by your broker.
  prefs: []
  type: TYPE_NORMAL
- en: Calculating the government taxes charged
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For every order that's completed successfully, the government may charge a certain
    fee, which is a fraction of the price at which the instrument was bought or sold.
    While the amount may seem small, it is important to keep track of government taxes
    as they may end up eating a significant chunk of your profit at the end of the
    day.
  prefs: []
  type: TYPE_NORMAL
- en: The government charge depends on the location of the exchange, and varies from
    segment to segment. For the purpose of this recipe, we will consider government
    taxes at a rate of 0.1%.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We execute the following steps to complete this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Calculate the government taxes that are charged per trade:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Calculate the total government taxes that are charged for 10 trades:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *step 1*, we start with the price at which a trade was bought or sold, `entry_price`.
    For this recipe, we have used `1245`. Next, we calculate 0.1% of the price, which
    comes to `1.245`. Then, we calculate the total brokerage for 10 such trades, which
    comes out as `10 * 1.245 = 12.245`.
  prefs: []
  type: TYPE_NORMAL
- en: For every order, government taxes are charged twice. The first time is when
    the order has entered a position, while the second time is when it has exited
    the position. To get the exact details of the government taxes that are charged
    for your trades, please refer to the list of government taxes provided by your
    exchange.
  prefs: []
  type: TYPE_NORMAL
