- en: Computing Candlesticks and Historical Data
  prefs: []
  type: TYPE_NORMAL
- en: The historical data of a financial instrument is data about all the past prices
    at which a financial instrument was brought or sold. An algorithmic trading strategy
    is always vpot_candlestickirtually executed on historical data to evaluate its
    past performance before it's deployed with real money. This process is called
    **backtesting**. Historical data is quintessential for backtesting (covered in
    detail in [Chapter 8](b415aed0-c473-48ba-8e52-5914c7f0de87.xhtml), *Backtesting
    Strategies*). Also, historical data is needed for computing technical indicators
    (covered in detail in [Chapter 5](16529fe4-d3ea-4017-a6f9-bad85a41d8a0.xhtml),
    *Computing and Plotting Technical Indicators*), which help in making buy-or-sell
    decisions in real-time. Candlestick patterns are widely used tools for stock analysis.
    Various types of candlestick patterns are commonly used by analysts. This chapter
    provides recipes that show you how to fetch historical data using broker APIs,
    how to fetch and compute multiple candlestick patterns – Japanese (**open-high-low-close**
    (**OHLC**)), Line Break, Renko, and Heikin-Ashi – and how to fetch historical
    data using a third-party tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Fetching historical data using the broker API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fetching historical data with the Japanese (OHLC) candlestick pattern
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fetching the Japanese candlestick pattern with variations in candle intervals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fetching historical data with the Line Break candlestick pattern
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fetching historical data with the Renko candlestick pattern
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fetching historical data with the Heikin-Ashi candlestick pattern
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fetching historical data using Quandl
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You will need the following to successfully execute the recipes in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Python 3.7+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Python packages:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pyalgotrading` (`$ pip install pyalgotrading`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`quandl` (`$pip install quandl`) this is optional and only needed for the last
    recipe'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The latest Jupyter Notebook for this chapter can be found on GitHub at [https://github.com/PacktPublishing/Python-Algorithmic-Trading-Cookbook/tree/master/Chapter04](https://github.com/PacktPublishing/Python-Algorithmic-Trading-Cookbook/tree/master/Chapter04).
  prefs: []
  type: TYPE_NORMAL
- en: The following code will help you set up the broker connection with Zerodha,
    which will be used by all the recipes in this chapter. Please make sure you have
    followed these steps before trying out any of the recipes provided.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing you need to do to set connectivity with the broker is to gather
    the required API keys. The broker provides unique keys to each customer, typically
    as `api-key` and `api-secret` key pairs. These API keys are chargeable, usually
    on a monthly subscription basis. You need to get your copies of `api-key` and
    `api-secret` from the broker website before you start this chapter. You can refer
    to *Appendix I* for more details.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the necessary modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Get the `api_key` and `api_secret` keys from the broker. These are unique to
    you and will be used by the broker to identify your Demat account:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If you are running this for the first time and `kiteconnect` is not installed,
    `pyalgotrading` will automatically install it for you. The final output of *step
    2* will be a link. Click on the link and log in with your Zerodha credentials.
    If the authentication is successful, you will see a link in your browser's address
    bar similar to `https://127.0.0.1/?request_token=&action=login&status=success`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the alphanumeric token and paste it into `request_token`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `broker_connection` instance is now ready for performing API calls.
  prefs: []
  type: TYPE_NORMAL
- en: The `pyalgotrading` package supports multiple brokers and provides a connection
    object class per broker, with the same methods. It abstracts broker APIs behind
    a unified interface so that users don't need to worry about the underlying broker
    API calls and use all the recipes in this chapter as-is.
  prefs: []
  type: TYPE_NORMAL
- en: Only the procedure of setting up the broker connection will vary from broker
    to broker. You can refer to the pyalgotrading documentation to learn how to set
    up the broker connection if you are not using Zerodha as your broker. For Zerodha
    users, the aforementioned steps will suffice.
  prefs: []
  type: TYPE_NORMAL
- en: Fetching historical data using the broker API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The historical data of a financial instrument is time-series data for the timestamps
    in the past. It can be fetched using the Broker API for a given duration. This
    recipe demonstrates how to set up a broker connection and how to fetch historical
    data for a financial instrument for the duration of a single day.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the `broker_connection` object is available in your Python namespace.
    Refer to the *Technical requirements* section of this chapter to learn how to
    set it up.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Execute the following steps to complete this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fetch the historical data for an instrument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/acda6f4a-bf25-4f75-8056-4d98504ae96d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Print the available columns of the `historical_data` DataFrame:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In *step 1*, you use the `get_instrument()` method of `broker_connection` to
    fetch an instrument and assign it to a new attribute, `instrument`. This object
    is an instance of the `Instrument` class. The two parameters needed to call `get_instrument()`
    are the exchange (`''NSE''`) and the trading symbol (`''TATASTEEL''`). Next, you
    fetch the historical data for `instrument` using the `get_historical_data()` method.
    This method takes four arguments, which are described as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`instrument`: The financial instrument for which the historical data must be
    placed. Should be an instance of the `Instrument` class. You pass `instrument`
    here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`candle_interval`: A valid string that denotes the duration of each candlestick
    in the historical data. You pass `minute` here. (Possible values can be `minute`,
    `3minute`, `5minute`, `10minute`, `30minute`, `60minute`, and `day`.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`start_date`: The date from which the historical data must be fetched. Should
    be a string in the `YYYY-MM-DD` format. You pass `2020-01-01` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`end_date:` The date until which the historical data must be fetched, inclusive
    of this date. Should be a string in the `YYYY-MM-DD` format. You pass `2020-01-01`
    here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In *step 2*, you fetch and print the available columns of `historical_data`.
    You get the columns as `timestamp`, `open`, `high`, `low`, `close`, and `volume`.
  prefs: []
  type: TYPE_NORMAL
- en: More information on candlesticks will be covered in the next recipe, *Fetching
    historical data using the Japanese (OHLC) candlestick pattern*, and the third
    recipe in this chapter, *Fetching the Japanese candlestick pattern with variations
    in candle intervals*.
  prefs: []
  type: TYPE_NORMAL
- en: Fetching historical data using the Japanese (OHLC) candlestick pattern
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The historical data of a financial instrument is an array of candlesticks. Each
    entry in the historical data is a single candlestick. There are various types
    of candlestick patterns.
  prefs: []
  type: TYPE_NORMAL
- en: 'This recipe demonstrates the most commonly used candlestick pattern – the Japanese
    candlestick pattern. It is a type of candlestick pattern where each candlestick
    holds a duration and indicates all the prices the instrument would have taken
    on during that duration. This data is represented using four parameters – Open,
    High, Low, and Close. These can be described as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Open**: The price of the financial instrument at the beginning of the candle''s
    duration'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**High**: The highest recorded price of the financial instrument during the
    entire duration of the candle'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Low**: The lowest recorded price of the financial instrument during the entire
    duration of the candle'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Close**: The price of the financial instrument at the end of the candle''s
    duration'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Japanese candlestick pattern is also known as the **OHLC candlestick pattern**
    based on these parameters. All the timestamps in a Japanese candlestick pattern
    are equally spaced (within market hours). For example, the timestamps on a trading
    day would look like 9:15 a.m., 9:16 a.m., 9:17 a.m., 9:18 a.m., and so on for
    a 1-minute candle interval, where each timestamp is equally spaced at intervals
    of 1 minute.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the `broker_connection` and `historical_data` objects are available
    in your Python namespace. Refer to the *Technical requirements* section of this
    chapter to set up `broker_connection`. Refer to the previous recipe to set up
    `historical_data`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We execute the following steps to for this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the necessary modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a green candle from one of the rows of `historical_data`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8c19dad2-8126-49bf-842b-530183ad8d42.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a red candle from one of the rows of `historical_data`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This will give you the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/273fcc9f-7f5f-4d06-b72e-96705752369e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Plot a chart for the historical data of an instrument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This will give you the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ca1f393a-ad16-4126-b989-d3512a4872e9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Plot a chart for the historical data of another instrument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This will give you the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d8f3fb78-1547-4855-ac79-6d610afa48a0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Plot a chart for the historical data of yet another instrument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This will give you the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9bccb883-f64f-471e-beee-521109686b74.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *step 1*, you import `plot_candlestick_chart`, a quick utility function for
    plotting candlestick pattern charts, and `PlotType`, an enum for various types
    of candlestick patterns. The next two steps introduce two types of candlesticks,
    or simply **candles** – a green candle and a red candle. As we mentioned earlier,
    each entry in historical data is a candle. These two steps selectively extract
    a green and red candle from the data. (Please note that the indices that are passed
    to `historical_data.iloc` will be different if you choose a different duration
    for `historical_data`, as in the *Fetching historical data using the broker API*
    recipe). A Japanese candle is green in color if its **close** price is above its
    **open** price. A green candle is also called a **bullish** candle as it is indicative
    that the price was bullish, meaning rising, during that duration. A Japanese candle
    is red in color if its **close** price is below its **open** price. A red candle
    is also called a **bearish** candle as it is indicative that the price was bearish,
    meaning falling, during that duration.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 4*, you plot the complete historical data held by `historical_data`
    using the `plot_candlestick_chart()` function. The chart is a combination of multiple
    candlesticks, each with a different length. Hence, such a chart is called a **candlestick
    pattern chart**. Note that the candle interval is 1 minute, meaning that the timestamps
    are equally spaced in intervals of 1 minute. *Steps 5* and *6* demonstrate similar
    1-minute candle interval candlestick pattern charts for the `NSE:INFY` and `NSE:ICICIBANK`
    instruments.
  prefs: []
  type: TYPE_NORMAL
- en: If you are new to candlestick pattern charts, I would recommend that you interact
    with the charts that can be found in this chapter's Jupyter Notebook at [https://github.com/PacktPublishing/Python-Algorithmic-Trading-Cookbook/blob/master/Chapter04/CHAPTER%204.ipynb](https://github.com/PacktPublishing/Python-Algorithmic-Trading-Cookbook/blob/master/Chapter04/CHAPTER%204.ipynb).
    Try hovering over multiple candles to see their values and zoom in/out or pan
    to various durations to see the candles more clearly. Try to relate the color
    of these candles with their descriptions from this recipe. If the charts in the
    Jupyter Notebook do not render automatically for you due to some reason, you can
    download this html file, for the same Jupyter Notebook, open it in your browser
    and interact with it: [https://github.com/PacktPublishing/Python-Algorithmic-Trading-Cookbook/blob/master/Chapter04/CHAPTER%204.ipynb](https://github.com/PacktPublishing/Python-Algorithmic-Trading-Cookbook/blob/master/Chapter04/CHAPTER%204.ipynb).
  prefs: []
  type: TYPE_NORMAL
- en: Fetching the Japanese candlestick pattern with variations in candle intervals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The historical data of a financial instrument can be analyzed in the form of
    Japanese candlesticks pattern with varying candle intervals. Brokers typically
    support candle intervals of 1 minute, 3 minutes, 5 minutes, 10 minutes, 15 minutes,
    30 minutes, 1 hour, 1 day, and so on. A shorter candle interval hints at a localized
    price movement trend, while a larger candle interval indicates an overall price
    movement trend. Depending on the algorithmic trading strategy, you may need a
    shorter candle interval or a larger one. A candle interval of 1 minute is often
    the smallest available candle interval. This recipe demonstrates the historical
    data of a financial instrument for a duration of a day in various candle intervals.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the `broker_connection` object is available in your Python namespace.
    Refer to the *Technical requirements* section of this chapter to learn how to
    set up `broker_connection`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We execute the following steps for this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the necessary modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch an instrument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Plot a chart for the historical data of the instrument with a 1-minute candle
    interval:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/95db5fe7-032e-431c-a91d-1bab7dcc19de.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Plot a chart for the historical data of the instrument with a 3-minute candle
    interval:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/70cf68b1-6358-40ff-8404-687350291dcf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Plot a chart for the historical data of the instrument with a 5-minute candle
    interval:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fac26bb3-cdc9-4686-b462-394525e7ec62.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Plot a chart for the historical data of the instrument with a 10-minute candle
    interval:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b9295ac1-a6e7-44c4-8918-4f0168111e5a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Plot a chart for the historical data of the instrument with a 15-minute candle
    interval:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1c18a46f-d277-4c9a-b95b-a507df515b57.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Plot a chart for the historical data of the instrument with a 30-minute candle
    interval:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aab74cf9-be65-415f-a12f-3ea3a8d714ef.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Plot a chart for the historical data of the instrument with a 1-hour candle
    interval:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Plot a chart for the historical data of the instrument with a 1-day candle
    interval:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output, which is a single candle:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/38ff4849-3913-40bf-8224-4a02f01b7414.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In *step 1*, you import `plot_candlestick_chart`, a quick utility function
    for plotting candlestick pattern charts, and `PlotType`, an enum for various types
    of candlestick patterns. In *step 2*, the `get_instrument()` method of `broker_connection`
    to fetch an instrument and assign it to a new attribute, `instrument`. This object
    is an instance of the `Instrument` class. The two parameters needed to call `get_instrument()`
    are the exchange (`''NSE''`) and the trading symbol (`''TATASTEEL''`). *Steps
    3* and *4* fetch and plot the historical data for the candle intervals; that is,
    1 minute, 3 minutes, 5 minutes, 10 minutes, 15 minutes, 30 minutes, 1 hour, and
    1 day. You use the `get_historical_data()` method to fetch historical data for
    the same instruments and the same start and end dates, with only a different candle
    interval. You use the `plot_candlestick_chart()` function to plot Japanese candlestick
    pattern charts. You can observe the following differences between the charts as
    the candle interval increases:'
  prefs: []
  type: TYPE_NORMAL
- en: The total number of candlesticks decreases.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The spikes in the charts due to sudden price movement are minimized. Smaller
    candle interval charts have more spikes as they focus on local trends, while larger
    candle interval charts have fewer spikes and are smoother.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A long-term trend in the stock price becomes visible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decision-making may become slower because you have to wait longer to get new
    candle data. Slower decisions may or may not be desirable, depending on the strategy.
    For example, for confirming trends, using a combination of data with a smaller
    candle interval, say 3 minutes, and data with a larger candle interval, say 15
    minutes, would be desirable. On the other hand, for grabbing opportunities in
    intraday trading, data with larger candle intervals, such as 1 hour or 1 day,
    would not be desirable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The price range (y-axis spread) of adjacent candles may or may not overlap.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the timestamps are equally spaced in time (within market hours).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fetching historical data using the Line Break candlestick pattern
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The historical data of a financial instrument can be analyzed in the form of
    the Line Break candlestick pattern, a candlestick pattern that focuses on price
    movement. This differs from the Japanese candlestick pattern, which focuses on
    the time movement. Brokers typically do not provide historical data for the Line
    Break candlestick pattern via APIs. Brokers usually provide historical data using
    the Japanese candlestick pattern that needs to be converted into the Line Break
    candlestick pattern. A shorter candle interval hints at a localized price movement
    trend, while a larger candle interval indicates an overall price movement trend.
    Depending on your algorithmic trading strategy, you may need the candle interval
    to be small or large. A candle interval of 1 minute is often the smallest available
    candle interval.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Line Break candlestick pattern works as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Each candle has only `open` and `close` attributes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user defines a `Number of Lines` (*n*) setting, which is usually taken as
    `3`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the end of each candle interval, a green candle is formed if the stock price
    goes higher than the highest of the previous *n* Line Break candles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the end of each candle interval, a red candle is formed if the stock price
    goes lower than the lowest of the previous *n* Line Break candles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the end of each candle interval, if neither point 3 nor point 4 are satisfied,
    no candle is formed. Hence, the timestamps don't need to be equally spaced.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This recipe shows how we can fetch historical data using the Japanese candlestick
    pattern using the broker API, convert the historical data into a Line Break candlestick
    pattern, and plot it. This is done for multiple candle intervals.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the `broker_connection` object is available in your Python namespace.
    Refer to the *Technical requirements* section of this chapter to learn how to
    set up `broker_connection`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We execute the following steps for this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the necessary modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch the historical data for an instrument and convert it into Line Break
    data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a green Line Break candle from one of the rows of `historical_data`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/06737560-972b-4dbd-9b8a-5b7aac0a6328.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a red Line Break candle from one of the rows of `historical_data`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d6d4e6ed-0f78-4724-aabf-811cdc67fefb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Plot a chart for the historical data of the instrument with a 1-minute candle
    interval:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c333ea93-46e7-422f-96b4-7c3ca48f36f1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Plot a chart for the historical data of the instrument with a 3-minute candle
    interval:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/358d7a35-6c70-4fd2-926a-b862425cd1e3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Plot a chart for the historical data of the instrument with a 5-minute candle
    interval:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/213fbad2-9746-4e31-b123-74fba6ad388f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Plot a chart for the historical data of the instrument with a 10-minute candle
    interval:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a254d5c7-8fd3-49d5-baca-a6aa57188f94.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Plot a chart for the historical data of the instrument with a 15-minute candle
    interval:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0ae9f5d4-a6ae-48a7-8ff5-46a76a1bdf2c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Plot a chart for the historical data of the instrument with a 30-minute candle
    interval:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/27be9a13-bb54-48af-b49f-67ed03514393.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Plot a chart for the historical data of the instrument with a 1-hour candle
    interval:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0a9cd917-6d6b-4e2c-8257-5eab8c5ca531.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Plot a chart for the historical data of the instrument with a 1-day candle
    interval:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dd6aece0-c34a-4bd5-b686-780fe2336e03.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *step 1*, you import `plot_candlestick_chart`, a quick utility function for
    plotting candlestick pattern charts, `PlotType`, an enum for various types of
    candlestick patterns, and the `Linebreak` function, which can convert historical
    data from the Japanese candlestick pattern in the Line Break candlestick pattern.
    In *step 2*, you use the `get_instrument()` method of `broker_connection` to fetch
    an instrument and assign it to a new attribute, `instrument`. This object is an
    instance of the `Instrument` class. The two parameters needed to call get_instrument()
    are the exchange (`'NSE'`) and the trading symbol (`'TATASTEEL'`). Next, you use
    the `get_historical_data()` method of the `broker_connection` object to fetch
    the historical data for the instrument for the duration of December 2019, with
    a candle interval of 1 minute. The time-series data returned is in the form of
    the Japanese candlestick pattern. The `Linebreak()` function converts this data
    into a Line Break candlestick pattern, another `pandas.DataFrame` object. You
    assign it to `historical_data_1minute_linebreak`. Observe that `historical_data_1minute_linebreak` has
    only `timestamp`, `open`, and `close` columns. Also, observe that the timestamps
    are not equidistant as the Line Break candles are based on price movement and
    not time. In *steps 3* and *4*, you selectively extract a green and a red candle
    from the data. (Please note, the indices passed to `historical_data.iloc` would
    be different if you choose a different duration for `historical_data` fetched
    in the first recipe of this chapter.) Observe that the candles have no shadows
    (lines extending on either side of the main candle body) as the candles only have `open` and
    `close` attributes. In *steps 5*, you plot the complete historical data held by
    `historical_data` using the `plot_candlestick_chart()` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'In *steps 6* until *12*, you fetch the historical data using the Japanese candlestick
    pattern, convert it into the Line Break candlestick pattern, and plot the converted
    data for candle intervals of 3 minutes, 5 minutes, 10 minutes, 15 minutes, 30
    minutes, 1 hour, and 1 day. Observe the following differences and similarities
    among the charts as the candle interval increases:'
  prefs: []
  type: TYPE_NORMAL
- en: The total number of candlesticks decreases.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The spikes in the charts due to sudden price movement are minimized. Smaller
    candle interval charts have more spikes as they focus on local trends, while larger
    candle interval charts have fewer spikes and are smoother.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A long-term trend in the stock price becomes visible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decision-making may become slower because you have to wait longer to get new
    candle data. Slower decisions may or may not be desirable, depending on the strategy.
    For example, to confirm trends, using a combination of data with a smaller candle
    interval, say 3 minutes, and data with a larger candle interval, say 15 minutes,
    would be desirable. On the other hand, to grab opportunities in intraday trading,
    data with larger candle intervals, say 1 hour or 1 day, would not be desirable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The price ranges (y-axis spread) of two adjacent candles don't overlap with
    each other. Adjacent candles always share one of their ends.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: None of the timestamps need to be equally spaced in time (unlike the Japanese
    candlestick pattern) as candles are formed based on price movement and not time
    movement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are interested in finding out about the Math and implementation of Line
    Break candles, please refer to its source code in the `pyalgotrading` package
    at [https://github.com/algobulls/pyalgotrading/blob/master/pyalgotrading/utils/candlesticks/linebreak.py](https://github.com/algobulls/pyalgotrading/blob/master/pyalgotrading/utils/candlesticks/linebreak.py).
  prefs: []
  type: TYPE_NORMAL
- en: Fetching historical data using the Renko candlestick pattern
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The historical data of a financial instrument can be analyzed in the form of
    the Renko candlestick pattern, a candlestick pattern that focuses on price movement.
    This differs from the Japanese candlestick pattern, which focuses on time movement.
    Brokers typically do not provide historical data as the Renko candlestick pattern
    via APIs. Brokers usually provide historical data by using the Japanese candlestick
    pattern, which needs to be converted into the Renko candlestick pattern. A shorter
    candle interval hints at a localized price movement trend, while a larger candle
    interval indicates an overall price movement trend. Depending on your algorithmic
    trading strategy, you may need the candle interval to be small or large. A candle
    interval of 1 minute is often the smallest available candle interval.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Renko candlestick pattern works as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Each candle only has `open` and `close` attributes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You define a **Brick Count** (`b`) setting, which is usually set to `2`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Each candle is always fixed and is equal to `Brick Count`. Hence, a candle is
    also called a **brick** here.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the end of every candle interval, a green brick is formed if the stock price
    goes `b` points higher than the highest of the previous brick. If the price goes
    much higher than `b` points in a single candle interval, as many Renko bricks
    are formed to account for the price change.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For example, say the price goes 21 points higher than the high of the previous
    brick. If the brick size is `2`, 10 Renko bricks would be formed with the same
    timestamp to account for the 20-point change. For the remaining 1-point change
    (21-20), no brick would be formed until the price goes at least 1 point higher.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: At the end of every candle interval, a red candle is formed if the stock price
    goes `b` points lower than the lowest of the previous Renko candle. If the price
    goes much lower than `b` points in a single candle interval, as many Renko bricks
    are formed to account for the price change.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For example, say the price goes 21 points lower than the highest previous brick.
    If the brick size is `2`, 10 Renko bricks would be formed with the same timestamp
    to account for the 20-point change. For the remaining 1-point change (21-20),
    no brick would be formed until the price goes at least 1 point lower.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: No two adjacent candles overlap with each other. Adjacent candles always share
    one of their ends.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: None of the timestamps need to be equally spaced (unlike the Japanese candlestick
    pattern) as candles are formed based on price movement and not time movement.
    Also, unlike other patterns, there may be multiple candles with the same timestamp.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This recipe shows how you can fetch historical data as the Japanese candlestick
    pattern using the broker API, as well as how to convert and plot the historical
    data using the Renko candlestick pattern for various candle intervals.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the `broker_connection` object is available in your Python namespace.
    Refer to the *Technical requirements* section of this chapter to learn how to
    set up `broker_connection`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We execute the following steps for this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the necessary modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch the historical data for an instrument and convert it into Renko data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a green Renko candle from one of the rows of `historical_data`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e3f2e456-99b7-4440-b1f7-2834c11e72f0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a red Renko candle from one of the rows of `historical_data`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/40c86799-c091-4379-af1e-32dcc5cb6aea.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Plot a chart for the historical data of the instrument with a 1-minute candle
    interval:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c7ae00df-e7a1-4cee-936c-c06338e2528b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Plot a chart for the historical data of the instrument with a 3-minute candle
    interval:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d85d0255-9503-47a1-aa7e-41f1d314296a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Plot a chart for the historical data of the instrument with a 5-minute candle
    interval:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5bd0dda9-a247-47ba-b7fc-ec1e9bf98a86.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Plot a chart for the historical data of the instrument with a 10-minute candle
    interval:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5896de8b-9d3b-4f30-9b7c-4082f3872c21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Plot a chart for the historical data of the instrument with a 15-minute candle
    interval:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/78259599-5668-4f55-8d2f-ed81435c6360.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Plot a chart for the historical data of the instrument with a 30-minute candle
    interval:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/17aba6c5-ed1d-431d-a73a-a66e44c3d57b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Plot a chart for the historical data of the instrument with a 1-hour candle
    interval:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3625da45-cc9e-4910-8b7d-6d6c93f6b51f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Plot a chart for the historical data of the instrument with a 1-day candle
    interval:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4051a346-dcb6-4ba4-b78f-73ff2fda08c6.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *step 1*, you import `plot_candlestick_chart`, a quick utility function for
    plotting candlestick pattern charts, `PlotType`, an enum for various types of
    candlestick patterns, and the `Renko` function, which can convert historical data
    from the Japanese candlestick pattern into the Renko candlestick pattern. In *step
    2*, you use the `get_instrument()` method of `broker_connection` to fetch an instrument
    and assign it to a new attribute, `instrument`. This object is an instance of
    the `Instrument` class. The two parameters needed to call get_instrument() are
    the exchange (`'NSE'`) and the trading symbol (`'TATASTEEL'`). Next, you use the
    `get_historical_data()` method of the `broker_connection` object to fetch the
    historical data for the duration of December 2019, with a candle interval of 1
    minute. The time-series data returned is in the form of Japanese candlestick pattern.
    The `Renko()` function converts this data into a Renko candlestick pattern, another `pandas.DataFrame` object.
    You assign it to `historical_data_1minute_renko`. Observe that `historical_data_1minute_renko`
    has `timestamp`, `open`, and `close` columns. Also, observe that the timestamps
    are not equidistant as the Renko candles are based on price movement and not time.
    In *step 3* and *4*, you selectively extract a green and a red candle from the
    data (Please note, the indices passed to `historical_data.iloc` fetched in the
    first recipe of this chapter.) Observe that the candles have no shadows (lines
    extending on either side of the main candle body) as the candles only have `open` and
    `close` attributes. In *step 5*, you plot the complete historical data held by
    `historical_data` using the `plot_candlestick_chart()` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'In *steps 6* until *12*, you fetch the historical data using the Japanese candlestick
    pattern, convert it into the Renko candlestick pattern, and plot the converted
    data for candle intervals of 3 minutes, 5 minutes, 10 minutes, 15 minutes, 30
    minutes, 1 hour, and 1 day. Observe the following differences and similarities
    among the charts as the candle interval increases:'
  prefs: []
  type: TYPE_NORMAL
- en: The total number of candlesticks decreases.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The spikes in the charts due to sudden price movement are minimized. Smaller
    candle interval charts have more spikes as they focus on local trends, while larger
    candle interval charts have fewer spikes and are smoother.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A long-term trend in the stock price becomes visible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decision-making may become slower because you have to wait longer to get new
    candle data. Slower decisions may or may not be desirable, depending on the strategy.
    For example, to confirm trends, using a combination of data with a smaller candle
    interval, say 3 minutes, and data with a larger candle interval, say 15 minutes,
    would be desirable. On the other hand, to grab opportunities in intraday trading,
    data with larger candle intervals, say 1 hour or 1 day, would not be desirable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The price ranges (y-axis spread) of two adjacent candles don't overlap with
    each other. Adjacent candles always share one of their ends.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: None of the timestamps need to be equally spaced in time (unlike in the Japanese
    candlestick pattern) as candles are formed based on price movement and not time
    movement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are interested in finding out about the Math and implementation of Renko
    candles, please refer to its source code in the `pyalgotrading` package at [https://github.com/algobulls/pyalgotrading/blob/master/pyalgotrading/utils/candlesticks/renko.py](https://github.com/algobulls/pyalgotrading/blob/master/pyalgotrading/utils/candlesticks/renko.py).
  prefs: []
  type: TYPE_NORMAL
- en: Fetching historical data using the Heikin-Ashi candlestick pattern
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The historical data of a financial instrument can be analyzed in the form of
    the Heikin-Ashi candlestick pattern. Brokers typically do not provide historical
    data using the Heikin-Ashi candlestick pattern via APIs. Brokers usually provide
    historical data using the Japanese candlestick pattern, which needs to be converted
    to the Heikin-Ashi candlestick pattern. A shorter candle interval hints at a localized
    price movement trend, while a larger candle interval indicates an overall price
    movement trend. Based on your algorithmic trading strategy, you may need the candle
    interval to be small or large. A candle interval of 1 minute is often the smallest
    available candle interval.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Heikin-Ashi candlestick pattern works as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Each candle has `Close`, `Open`, `High`, and `Low` attributes. For each candle,
    the following occurs:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Close` is calculated as the average of the `Open`, `High`, `Low`, and `Close` attributes
    of the current Japanese candle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Open` is the average of the `Open` and `Close` attributes of the previous
    Heikin-Ashi candle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`High` is max of:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Open` of current Heikin-Ashi candle'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Close` of current Heikin-Ashi candle'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`High` of current Japanese candle'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Low` is the min of:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Open` of current Heikin-Ashi candle'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Close` of current Heikin-Ashi candle'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Low` of current Japanese Candle'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A green candle is formed when `Close` is higher than `Open`. (This is the same
    as the green candle in the Japanese candlestick pattern.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A red candle is formed when `Close` is lower than `Open`. (This is the same
    as the red candle in the Japanese candlestick pattern.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the timestamps are equally spaced (within market hours).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This recipe shows you how to fetch historical data using Japanese candlestick
    pattern when using the broker API, as well as how to convert and plot the historical
    data using the Heikin-Ashi candlestick pattern for various candle intervals.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the `broker_connection` object is available in your Python namespace.
    Refer to the *Technical requirements* section of this chapter to learn how to
    set up `broker_connection`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We execute the following steps for this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the necessary modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch the historical data for an instrument and convert it into Heikin-Ashi
    data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e6ce20c1-3076-4026-956e-e551d4e769d9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a green Heikin-Ashi candle for one row of data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6d87f35f-5267-4821-817a-4788a36977fb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a red Heikin-Ashi candle for one row of data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/59a36b0a-c1da-4a2c-a26d-40aed004707a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Plot a chart for the historical data of the instrument with a 1-minute candle
    interval:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/93d8dcab-2716-4f4a-a5ff-69622ad7720b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Plot a chart for the historical data of the instrument with a 3-minute candle
    interval:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2b9e5c4a-1f20-4ff8-b655-cb450ec4b51d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Plot a chart for the historical data of the instrument with a 5-minute candle
    interval:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/43712f77-438b-4284-8391-ff59e6dce24c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Plot a chart for the historical data of the instrument with a 10-minute candle
    interval:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ca2c179b-4020-49ae-aed3-13ade0abd2fe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Plot a chart for the historical data of the instrument with a 15-minute candle
    interval:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3d3462b5-0b58-4a56-b97b-031f2523d8ca.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Plot a chart for the historical data of the instrument with a 30-minute candle
    interval:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f18afad9-d8a5-4bff-9f26-e0e6d0d4234c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Plot a chart for the historical data of the instrument with a 1-hour candle
    interval:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bd8109ae-7421-4c0d-a7fa-268be204c0fb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Plot a chart for the historical data of the instrument with a 1-day candle
    interval:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dfc0ca08-a2ff-4cfe-acbd-b0cd7c5e99e5.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *step 1*, you import `plot_candlestick_chart`, a quick utility function for
    plotting candlestick pattern charts, `PlotType`, an enum for various types of
    candlestick patterns, and the `HeikinAshi` function, which can convert historical
    data from the Japanese candlestick pattern into data that's applicable to the
    Heikin-Ashi candlestick pattern. In *step 2*, you use the `get_instrument()` method
    of `broker_connection` to fetch an instrument and assign it to a new attribute,
    `instrument`. This object is an instance of the `Instrument` class. The two parameters
    needed to call `get_instrument()` are the exchange (`'NSE'`) and the trading symbol
    (`'TATASTEEL'`). Next, you use the `get_historical_data()` method of the `broker_connection`
    object to fetch the historical data for the duration of December 2019, with a
    candle interval of 1 minute. The time-series data returned is in the form of Japanese
    candlestick pattern. The `HeikinAshi()` function converts this data to Heikin-Ashi
    candlestick pattern, another `pandas.DataFrame` object. You assign it to `historical_data_1minute_heikinashi`.
    Observe that `historical_data_1minute_heikinashi` has `timestamp`, `close`, `open`,
    `high`, and `low` columns. Also, observe that the timestamps are equidistant as
    the Heikin-Ashi candles are based on the average values of the Japanese candles.
    In *steps 3* and *4*, you selectively extract a green and a red candle from the
    data. (Please note, this indices passed to `historical_data.iloc` would be different
    if you choose a different duration for `historical_data` fetched in the first
    recipe of this chapter.) Observe that the candles have shadows (lines extending
    on either side of the main candle body) as the candle have `high` and `low` attributes,
    along with the `open` and `close` attributes. In *step 5*, you plot the complete
    historical data held by `historical_data` using the `plot_candlstick_charts()`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: 'In *steps 6* until *12*, you fetch the historical data using the Japanese candlestick
    pattern, converts it into the Heikin-Ashi candlestick pattern, and plots the converted
    data for candle intervals of 3 minutes, 5 minutes, 10 minutes, 15 minutes, 30
    minutes, 1 hour, and 1 day, respectively. Observe the following differences and
    similarities among the charts as the candle interval increases:'
  prefs: []
  type: TYPE_NORMAL
- en: The total number of candlesticks decreases.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The spikes in the charts due to sudden price movement are minimized. Smaller
    candle interval charts have more spikes as they focus on local trends, while larger
    candle interval charts have fewer spikes and are smoother.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A long-term trend in the stock price becomes visible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decision-making may become slower because you have to wait longer to get new
    candle data. Slower decisions may or may not be desirable, depending on the strategy.
    For example, to confirm trends, using a combination of data with a smaller candle
    interval, say 3 minutes, and data with a larger candle interval, say 15 minutes,
    would be desirable. On the other hand, to grab opportunities in intraday trading,
    data with larger candle intervals, say 1 hour or 1 day, would not be desirable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The price ranges (y-axis spread) of adjacent candles may or may not overlap.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the timestamps are equally spaced in time (within market hours).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are interested in finding out about the Math and implementation of Heikin-Ashi
    candles, please refer to the source code in the `pyalgotrading` package at [https://github.com/algobulls/pyalgotrading/blob/master/pyalgotrading/utils/candlesticks/heikinashi.py](https://github.com/algobulls/pyalgotrading/blob/master/pyalgotrading/utils/candlesticks/heikinashi.py).
  prefs: []
  type: TYPE_NORMAL
- en: Fetching historical data using Quandl
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, in all the recipes in this chapter, you have used the broker connection
    to fetch historical data. In this recipe, you will fetch historical data using
    a third-party tool, Quandl ([https://www.quandl.com/tools/python](https://www.quandl.com/tools/python)).
    It has a free to use Python version which can be easily installed using `pip`.
    This recipe demonstrates the use of `quandl` to fetch historical data of **FAAMG**
    stock prices (Facebook, Amazon, Apple, Microsoft, and Google).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Make sure you have installed the Python `quandl` package. If you haven''t,
    you can install it using the following `pip` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We execute the following steps for this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the necessary modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Plot a chart for the historical data of Facebook with a 1-day candle interval:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2d71218d-450a-465e-b7ab-93d85be55eeb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Plot a chart for the historical data of Amazon with a 1-day candle interval:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2c9e01c8-7e1f-4424-bc21-e3f37d3710e1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Plot a chart for the historical data of Apple with a 1-day candle interval:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f1be033d-d543-45e8-9bed-524fb25c4131.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Plot a chart for the historical data of Microsoft with a 1-day candle interval:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eb2909f1-4625-4284-8944-c6eb0112fe0d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Plot a chart for the historical data of Google with a 1-day candle interval:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1c9ce622-24a8-4866-9855-e70e553dc739.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *step 1*, you import `plot_candlestick_chart`, a quick utility function for
    plotting candlestick pattern charts, `PlotType`, an enum for various types of
    candlestick patterns, and the `quandl` module. In the remaining steps, historical
    data for the Facebook, Amazon, Apple, Microsoft, and Google stocks are fetched
    using `quandl.get()` and plotted using the `plot_candlestick_chart()` method.
    The data that's returned by the `quandl` is in the OHLC (open, high, low, close)
    format.
  prefs: []
  type: TYPE_NORMAL
- en: The upside of such third-party modules is that they are free and you don't need
    to set up a broker connection to fetch the historical data. The downside is that
    this data from the free package has its limitations. For example, the data cannot
    be fetched in real-time and the data cannot be fetched for intraday trading (1-minute
    candle, 3-minute candle, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: So, whether you want to use this data depends on your requirements. It may be
    good for testing or flow flushing the existing code base, but not good enough
    for providing live data feeds, which are needed during real trading sessions.
  prefs: []
  type: TYPE_NORMAL
