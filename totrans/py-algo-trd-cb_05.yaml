- en: Computing and Plotting Technical Indicators
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 计算和绘制技术指标
- en: Technical analysis is a discipline in trading that employs mathematical functions,
    called **technical indicators**, to predict and find profitable opportunities
    in stock markets. Technical indicators analyze data based on past and current
    prices and volumes of a financial instrument and give out statistical information.
    This helps in predicting where the future prices of a financial instrument may
    go (either up or down). With this knowledge, you as a trader can make informed
    decisions when trading and hence increase your odds of success.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 技术分析是交易中使用数学函数（称为**技术指标**）来预测并找到股票市场中盈利机会的一门学科。 技术指标分析基于金融工具的过去和现在的价格和成交量的数据，并提供统计信息。
    这有助于预测金融工具未来的价格可能会上涨或下跌。 作为交易者，您可以在交易时做出知情决策，从而提高成功的几率。
- en: Technical indicators do not take into account any of the fundamental aspects
    of the business of the underlying financial instrument, such as revenue, earnings,
    profit, and so on. However, they do take past and current prices and volumes into
    account, which helps in predicting short-term price movements.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 技术指标不考虑底层金融工具业务的任何基本方面，如收入、收益、利润等。 但是，它们确实考虑了过去和现在的价格和成交量，这有助于预测短期价格变动。
- en: 'Most brokers provide technical indicator charts, superimposed on historical
    data plots, in real time. This helps in visually predicting trends in price movements.
    However, there are a few limitations to only doing visual analysis:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数经纪人提供实时在历史数据图上叠加技术指标图表。 这有助于直观地预测价格变动的趋势。 但是，仅进行视觉分析也有一些限制：
- en: You can view and analyze only a handful of charts at a time, while there could
    potentially be thousands of charts you may want to analyze to help search for
    a profitable opportunity.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您一次只能查看和分析少量图表，而您可能希望分析数千张图表以帮助寻找盈利机会。
- en: Analyzing multiple charts visually is tedious and subject to delay and human
    error. Delays and errors are not viable when we want to instantly and accurately
    grab a good trading opportunity.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对多个图表进行视觉分析是繁琐的，并且容易出现延迟和人为错误。 当我们希望立即准确抓住一个良好的交易机会时，延迟和错误是不可行的。
- en: Hence, it is best to let a computer analyze historical data for a large number
    of financial instruments in real time. For this reason, it is important to learn
    to compute technical indicators for a given financial instrument using its historical
    data. This chapter has recipes that introduce code for computing various technical
    indicators using Python.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，最好让计算机实时分析大量金融工具的历史数据。 出于这个原因，学习如何使用其历史数据计算给定金融工具的技术指标非常重要。 本章提供了使用Python计算各种技术指标的示例代码。
- en: There may be scenarios where you would want to plot complex charts. However,
    it may not be possible to do so with the tools provided by most brokers. For example,
    you may want to plot a **simple moving average** (**SMA**) on the **relative strength
    index** (**RSI**) of the close of historical data (mathematically, this is *SMA(RSI(close,
    timeperiod=10), timeperiod=5)*) and analyze it over a period of, say, 3 months,
    to aid in the development of your trading strategy. On these occasions, it would
    help to know how to plot technical indicators for a given financial instrument.
    The recipes of this chapter also include code to plot technical indicators using
    Python.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会出现您希望绘制复杂图表的情况。 但是，使用大多数经纪人提供的工具可能不可能这样做。 例如，您可能希望在历史数据的收盘价上绘制**简单移动平均线**（**SMA**）以及其**相对强度指数**（**RSI**）上的线（数学上是*SMA(RSI(close,
    timeperiod=10), timeperiod=5)*)，并在某个时期内进行分析，比如说3个月，以帮助制定您的交易策略。 在这些情况下，了解如何为给定的金融工具绘制技术指标将会有所帮助。
    本章的示例还包括使用Python绘制技术指标的代码。
- en: 'Every technical indicator belongs to one of the following two mentioned categories:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 每个技术指标都属于以下两类之一：
- en: '**Leading**: This category of indicators gives trade signals when the trend
    is about to start or a reversal is about to happen. In other words, they *lead*
    the trend. So, these indicators are helpful in predicting the upcoming trend.
    (The trend can be **bullish** if the prices are going up, or **bearish** if they
    are going down.)'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**领先**：这类指标在趋势即将开始或即将发生反转时提供交易信号。 换句话说，它们*引领*了趋势。 因此，这些指标有助于预测即将到来的趋势。（如果价格上涨，则趋势可能是**看涨的**，如果价格下跌，则可能是**看跌的**。）'
- en: '**Lagging**: This category of indicators gives trade signals after a trend
    has started or after a reversal has happened. So, these indicators are helpful
    in finding out the current trend.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**滞后**：这类指标在趋势开始后或逆转发生后提供交易信号。因此，这些指标有助于找出当前趋势。'
- en: 'Technical indicators can also be broadly classified into four types, based
    on the insight they give:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 技术指标也可以根据它们提供的见解广泛分类为四种类型：
- en: '**Trend indicators** **or oscillators**: These indicators indicate the trend
    in the market, if there is a trend. These indicators are also called **oscillators**
    as they often oscillate between high and low values with time, like an oscillating
    wave. Such indicators are usually *lagging*, but can sometimes be *leading* as
    well.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**趋势指标** **或振荡器**：这些指标指示市场的趋势，如果有的话。这些指标也被称为**振荡器**，因为它们通常随着时间在高值和低值之间振荡，就像一个振荡的波一样。这种指标通常是*滞后*的，但有时也可以是*领先*的。'
- en: '**Momentum indicators**: These indicators tell us how strong the current trend
    is and also if a reversal in the current trend is likely to occur. These indicators
    are usually *leading* indicators.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动量指标**：这些指标告诉我们当前趋势有多强劲，以及当前趋势是否可能发生逆转。这些指标通常是*领先*的。'
- en: '**Volatility indicators**: These indicators measure the rate of change of price
    movement, irrespective of the direction (that is, **bearish** or **bullish**).
    These indicators help us understand how fast or slow prices are changing. A very
    volatile market might not be good for your trading strategy, as by the time you
    query the market and place an order at a particular price, the price might have
    moved significantly away from the specified price. These indicators are usually
    *lagging* indicators.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**波动率指标**：这些指标衡量价格变动的速率，无论方向如何（即**看跌**或**看涨**）。这些指标帮助我们了解价格变动的速度快慢。一个非常波动的市场可能不适合你的交易策略，因为在你查询市场并以特定价格下订单时，价格可能已经明显偏离指定价格。这些指标通常是*滞后*指标。'
- en: '**Volume indicators**: These are indicators that indicate how fast or slow
    the volume is changing with time. The higher the volume, the stronger the current
    trend would be, so these indicators help in finding the strength of the current
    trend. These indicators can be both *leading* and *lagging*.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**成交量指标**：这些指标指示成交量随时间的变化速度。成交量越大，当前趋势就越强劲，因此这些指标有助于找出当前趋势的强度。这些指标既可以是*领先*也可以是*滞后*。'
- en: 'This chapter discusses 10 technical indicators across all the previously mentioned
    categories and types. Each recipe does the following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论了所有先前提到的类别和类型中的10个技术指标。每个配方都会执行以下操作：
- en: Introduces a new technical indicator
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 介绍了一个新的技术指标
- en: Shows how it can be computed on given historical data using Python
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展示如何使用给定的历史数据在Python上计算它
- en: Shows how it can be plotted on a Japanese candlestick pattern chart using Python
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展示如何使用Python在日本蜡烛图模式图表上绘制它
- en: Explains the insight provided by the indicator from the plot
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解释了从图表中提供的指标的见解
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下配方：
- en: Trend indicators – simple moving average
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 趋势指标 – 简单移动平均线
- en: Trend indicators – exponential moving average
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 趋势指标 – 指数移动平均线
- en: Trend indicators – moving average convergence divergence
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 趋势指标 – 移动平均收敛差离
- en: Trend indicators – parabolic stop and reverse
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 趋势指标 – 抛物线转向止损
- en: Momentum indicators – relative strength index
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动量指标 – 相对强弱指数
- en: Momentum indicators – stochastic oscillator
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动量指标 - 随机振荡器
- en: Volatility indicators – Bollinger Bands
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 波动率指标 – 布林带
- en: Volatility indicators – average true range
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 波动率指标 – 平均真实范围
- en: Volume indicators – on balance volume
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成交量指标 – 在平衡成交量
- en: Volume indicators – volume-weighted average price
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成交量指标 – 成交量加权平均价格
- en: The main focus of this chapter is to demonstrate how the most commonly used
    technical indicators can be computed and plotted. Although each technical indicator
    is introduced at the beginning of every recipe, understanding them in depth is
    beyond the scope of this book. If you are interested in this, please refer to
    the work of renowned personalities, such as Jack Schwager, Martin Pring, John
    Murphy, Steve Nison, and Thomas Bulkowski, to name a few. You can also use widely
    accepted web resources, such as [https://www.investopedia.com/](https://www.investopedia.com/).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主要重点是演示如何计算和绘制最常用的技术指标。尽管每个技术指标在每个示例的开头都有介绍，但深入理解它们超出了本书的范围。如果您对此感兴趣，请参考杰克·施瓦格（Jack
    Schwager）、马丁·普林格（Martin Pring）、约翰·墨菲（John Murphy）、史蒂夫·尼森（Steve Nison）和托马斯·布尔科夫斯基（Thomas
    Bulkowski）等知名人士的作品。您也可以使用广泛接受的网络资源，例如 [https://www.investopedia.com/](https://www.investopedia.com/)。
- en: Technical requirements
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'You will need the following to successfully execute the recipes in this chapter:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了成功执行本章的示例，您将需要以下内容：
- en: Python 3.7+
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3.7+
- en: 'The following Python packages:'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下Python包：
- en: '`pyalgotrading` (`$ pip install pyalgotrading`)'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pyalgotrading`（`$ pip install pyalgotrading`）'
- en: '`TA-Lib` (`$ pip install TA-Lib`)'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TA-Lib`（`$ pip install TA-Lib`）'
- en: 'If you face errors while installing `TA-Lib`, it will mostly be due to missing
    dependencies. You can follow these instructions to fix the issue:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在安装`TA-Lib`时遇到错误，主要是由于缺少依赖项。您可以按照以下说明解决问题：
- en: '**For Mac OS X, use the following**:'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对于Mac OS X，请使用以下**：'
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**For Windows, use the following instructions**:'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对于Windows，请使用以下说明**：'
- en: You can install the latest `TA-Lib` binary from [https://www.lfd.uci.edu/~gohlke/pythonlibs/#ta-lib](https://www.lfd.uci.edu/~gohlke/pythonlibs/#ta-lib)
    based on your Windows build (32 bit/64 bit) and Python version. So, for example,
    this link on the site [TA_Lib‑0.4.18‑cp38‑cp38‑win_amd64.whl](https://download.lfd.uci.edu/pythonlibs/w3jqiv8s/TA_Lib-0.4.18-cp39-cp39-win_amd64.whl),
    is for `TA-Lib` version 0.4.18 (`TA_Lib-0.4.18`) and Python version 3.8 (`cp38`)
    and is Windows 64-bit-compatible (`win_amd64`).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以根据您的Windows版本（32位/64位）和Python版本从 [https://www.lfd.uci.edu/~gohlke/pythonlibs/#ta-lib](https://www.lfd.uci.edu/~gohlke/pythonlibs/#ta-lib)
    下载最新的`TA-Lib`二进制文件。因此，例如，此网站上的此链接 [TA_Lib‑0.4.18‑cp38‑cp38‑win_amd64.whl](https://download.lfd.uci.edu/pythonlibs/w3jqiv8s/TA_Lib-0.4.18-cp39-cp39-win_amd64.whl)，适用于`TA-Lib`版本0.4.18（`TA_Lib-0.4.18`）和Python版本3.8（`cp38`），是Windows
    64位兼容的（`win_amd64`）。
- en: '**For Linux, take the following steps**:'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对于Linux，请执行以下步骤**：'
- en: 'Download the `gzip` file from [http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz](http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz) and
    run the following commands from your Linux Terminal:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 从 [http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz](http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz)
    下载`gzip`文件，并从您的Linux终端运行以下命令：
- en: 'Extract the downloaded `gzip` file containing the source code for `TA-Lib`:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解压下载的包含`gzip`文件的`TA-Lib`源代码：
- en: '[PRE1]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Change your current working directory to the extracted folder:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将当前工作目录更改为已提取的文件夹：
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Run the `configure` command to configure `TA-Lib` for your machine:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`configure`命令为您的机器配置`TA-Lib`：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Run the `make` command to build `TA-Lib` from the downloaded source code:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`make`命令从下载的源代码构建`TA-Lib`：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Run the `install` command to install built executables and libraries to specific
    directories on your machine:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`install`命令以将构建的可执行文件和库安装到机器上的特定目录：
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If this doesn't help and you still get errors, please refer to the official
    `TA-Lib` GitHub page at [https://github.com/mrjbq7/ta-lib#dependencies](https://github.com/mrjbq7/ta-lib#dependencies).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这没有帮助，您仍然遇到错误，请参阅官方的`TA-Lib` GitHub页面 [https://github.com/mrjbq7/ta-lib#dependencies](https://github.com/mrjbq7/ta-lib#dependencies)。
- en: The latest Jupyter notebook for this chapter can be found on GitHub at [https://github.com/PacktPublishing/Python-Algorithmic-Trading-Cookbook/tree/master/Chapter05](https://github.com/PacktPublishing/Python-Algorithmic-Trading-Cookbook/tree/master/Chapter05).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的最新Jupyter笔记本可以在GitHub上找到 [https://github.com/PacktPublishing/Python-Algorithmic-Trading-Cookbook/tree/master/Chapter05](https://github.com/PacktPublishing/Python-Algorithmic-Trading-Cookbook/tree/master/Chapter05)。
- en: It is recommended that you try out the recipes of this chapter in a Jupyter
    notebook. All of the recipes have a plot as an output. You can interact with those
    plots conveniently in Jupyter Notebook using its features such as select, pan,
    zoom, and so on.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 建议您在Jupyter笔记本中尝试本章的示例。所有示例都有一个图表作为输出。您可以使用Jupyter Notebook的功能（如选择、平移、缩放等）方便地与这些图表交互。
- en: The first thing needed for setting connectivity with the broker is getting the
    API keys. The broker will provide unique keys to each customer, typically as an
    `api-key` and `api-secret` key pair. These API keys are chargeable, usually on
    a monthly subscription basis. You need to get your copy of `api-key` and `api-secret`
    from the broker website before starting this. You can refer to *Appendix I* for
    more details.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 与经纪人建立连接所需的第一件事是获取API密钥。经纪人将为每个客户提供唯一的密钥，通常作为一个`api-key`和`api-secret`密钥对。这些API密钥通常是按月订阅的方式收费的。在开始之前，您需要从经纪人网站获取您的`api-key`和`api-secret`。您可以参考*附录I*以获取更多详情。
- en: 'The following steps will help you import the necessary modules, set up the
    broker connection with Zerodha, and fetch and keep some historical data handy,
    which will be used by all the recipes in this chapter. Please make sure you have
    followed these steps before trying out any of the recipes:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助您导入必要的模块，设置与 Zerodha 的经纪人连接，并获取并保留一些历史数据，这些数据将由本章中的所有配方使用。请确保在尝试任何配方之前已经执行了这些步骤：
- en: 'Import the necessary modules:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入必要的模块：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: These modules will be needed throughout this chapter.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这些模块将在本章中需要。
- en: 'The `plot_candlesticks_chart` function is used in every recipe. It takes the
    following arguments:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`plot_candlesticks_chart`函数在每个配方中都使用。它接受以下参数：'
- en: '`data`: The historical data to be plotted, which should be a `pandas.DataFrame`
    object with `timestamp`, `open`, `high`, `low`, and `close` columns.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data`：要绘制的历史数据，应为具有`timestamp`、`open`、`high`、`low`和`close`列的`pandas.DataFrame`对象。'
- en: '`plot_type`: An instance of the `pyalgotrading.plot_type` enum class specifying
    the type of candlesticks pattern chart.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`plot_type`：一个`pyalgotrading.plot_type`枚举类的实例，指定蜡烛图模式图表的类型。'
- en: '`indicators` (optional): A list of dictionaries, specifying the indicator that
    should also be plotted along with the candlesticks pattern chart. Each `dict`
    should have the following key-value pairs:'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`indicators`（可选）：一个字典列表，指定应与蜡烛图模式图表一起绘制的指标。每个`dict`应具有以下键值对：'
- en: '`name`: The name of the plot for the legend'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`：图例中的图的名称。'
- en: '`data`: The `pandas.Series` object representing the indicator data to be plotted'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data`：表示要绘制的指标数据的`pandas.Series`对象'
- en: '`extra` (optional): The `dict` of attributes, which will be passed to the `plotly.graph_objects.Scatter`
    constructor (more information on this class can be found at [https://plot.ly/python-api-reference/generated/plotly.graph_objects.Scatter.html](https://plot.ly/python-api-reference/generated/plotly.graph_objects.Scatter.html))'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`extra`（可选）：属性的字典，将传递给`plotly.graph_objects.Scatter`构造函数（关于此类的更多信息可以在[https://plot.ly/python-api-reference/generated/plotly.graph_objects.Scatter.html](https://plot.ly/python-api-reference/generated/plotly.graph_objects.Scatter.html)找到）。'
- en: '`plot_indicators_separately` (optional): If `False`, indicators will be plotted
    on the same plot as the historical data. If `True`, indicators will be plotted
    separately. The default value is `False`.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`plot_indicators_separately`（可选）：如果为`False`，则指标将绘制在与历史数据相同的图上。如果为`True`，则指标将单独绘制。默认值为`False`。'
- en: '`caption` (optional): Add a string caption to the plot.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`caption`（可选）：向图添加字符串标题。'
- en: 'Get the `api_key` and `api_secret` keys from the broker. These are unique to
    you and will be used by the broker to identify your Demat account:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从经纪人那里获取`api_key`和`api_secret`密钥。这些对您来说是唯一的，并且经纪人将使用它们来识别您的证券账户：
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We get the following output:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If you are running this for the first time and `kiteconnect` is not installed,
    `pyalgotrading` will automatically install it for you. The final output of *step
    2* will be a link. Click on the link and log in with your Zerodha credentials.
    If the authentication is successful, you will see a link in your browser's address
    bar similar to `https://127.0.0.1/?request_token=<aplphanumeric-token>&action=login&status=success`—for
    example, `https://127.0.0.1/?request_token=H06I6Ydv95y23D2Dp7NbigFjKweGwRP7&action=login&status=success`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是第一次运行此程序并且未安装`kiteconnect`，`pyalgotrading`将自动为您安装。*第2步*的最终输出将是一个链接。点击链接并使用您的
    Zerodha 凭据登录。如果身份验证成功，您将在浏览器的地址栏中看到一个类似于`https://127.0.0.1/?request_token=<aplphanumeric-token>&action=login&status=success`的链接，例如`https://127.0.0.1/?request_token=H06I6Ydv95y23D2Dp7NbigFjKweGwRP7&action=login&status=success`。
- en: 'Copy the alphanumeric token and paste it in `request_token`:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制字母数字令牌并将其粘贴到`request_token`中：
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Fetch and print the historical data for an instrument and assign it to `historical_data`:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取并打印一个工具的历史数据，并将其分配给`historical_data`：
- en: '[PRE10]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We get the following output:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE11]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This step uses the `get_instrument()` method of the `BrokerConnectionZerodha`
    class to fetch an instrument and assign it to a new attribute, `instrument`. This
    object is an instance of the `Instrument` class. The two parameters needed to
    call `get_instrument` are the exchange (`''NSE''`) and the trading-symbol (`''TATASTEEL''`).
    Next, historical data is fetched and printed for `instrument` using the `get_historical_data()`
    method. This method takes four arguments, described as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 此步骤使用`BrokerConnectionZerodha`类的`get_instrument()`方法获取一个工具并将其分配给一个新属性`instrument`。该对象是`Instrument`类的一个实例。调用`get_instrument`所需的两个参数是交易所（`'NSE'`）和交易符号（`'TATASTEEL'`）。接下来，使用`get_historical_data()`方法为`instrument`获取并打印历史数据。此方法接受四个参数，描述如下：
- en: '`instrument` (`Instrument`): The object returned by the `get_instrument()`
    method of `broker_connection`.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instrument`（`Instrument`）：由`broker_connection`的`get_instrument()`方法返回的对象。'
- en: '`candle_interval` (`str`): A valid string that denotes the duration of each
    candlestick in the historical data. Possible values can be `''minute''`, `''3minute''`,
    `''5minute''`, `''10minute''`, `''15minute''`, `''30minute''`, `''60minute''`,
    and `''day''`. We pass `''minute''` to this argument in *step 4*.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`candle_interval`（`str`）：表示历史数据中每个蜡烛图的持续时间的有效字符串。可能的值可以是`''minute''`，`''3minute''`，`''5minute''`，`''10minute''`，`''15minute''`，`''30minute''`，`''60minute''`和`''day''`。我们在*步骤4*中将`''minute''`传递给此参数。'
- en: '`start_date` (`str`): Historical data will be fetched starting from this timestamp.
    We pass `''2020-01-01 12:00:00''` to this argument in *step 4*.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`start_date`（`str`）：历史数据将从此时间戳开始获取。我们在*步骤4*中将`''2020-01-01 12:00:00''`传递给此参数。'
- en: '`end_date` (`str`): Historical data will be fetched up to this timestamp. We
    pass `''2020-01-01 14:00:00''` to this argument in *step 4*.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`end_date`（`str`）：历史数据将在此时间戳之前获取。我们在*步骤4*中将`''2020-01-01 14:00:00''`传递给此参数。'
- en: The `historical_data` object will be needed throughout this chapter.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中将需要`historical_data`对象。
- en: The `pyalgotrading` package supports multiple brokers and provides a connection
    object class per broker, with the same methods. It abstracts broker APIs behind
    a unified interface, so you need not worry about the underlying broker API calls
    and can use all the recipes in this chapter as it is. Only the procedure to set
    up the broker connection will vary from broker to broker. You can refer to the
    `pyalgotrading` documentation for information on setting up the broker connection
    if you are not using Zerodha as your broker. For Zerodha users, the steps mentioned
    in the preceding section will suffice.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`pyalgotrading`包支持多个经纪人，并为每个经纪人提供一个连接对象类，具有相同的方法。它在统一接口后面抽象了经纪人API，因此您无需担心底层经纪人API调用，并且可以像使用现有的方法一样使用本章中的所有示例。从经纪人到经纪人的经纪人连接设置程序将有所不同。如果您不是使用Zerodha作为经纪人，则可以参考`pyalgotrading`文档了解有关设置经纪人连接的信息。对于Zerodha用户，前面部分提到的步骤就足够了。'
- en: Trend indicators – simple moving average
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 趋势指标 - 简单移动平均线
- en: SMA is a **lagging trend indicator**. It is used to smooth the price data by
    eliminating noise and thus identifying trends.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: SMA是**滞后趋势指标**。它用于通过消除噪音平滑价格数据并因此识别趋势。
- en: SMA is the simplest form of a moving average. Each output value is the average
    of the previous *n* values of the historical data. You can define the value of
    *n*, which is also called the **time period**. In SMA, each value in the time
    period carries the same weight, and values outside the time period are not included.
    This makes it less responsive to recent changes compared to previous changes in
    the data, and is thus useful for smoothing out the prices' data. A consecutive
    rise in SMA indicates a clear bullish trend, while a consecutive fall indicates
    a **bearish** trend. Thus, it is a **trend indicator**. Also, since it indicates
    the trend after it has started, it is a **lagging indicator**.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: SMA是移动平均线的最简单形式。每个输出值是历史数据的前*n*个值的平均值。您可以定义*n*的值，也称为**时间周期**。在SMA中，时间段内的每个值具有相同的权重，并且不包括时间段之外的值。这使其对数据中的最近变化的响应较低，因此对于平滑价格数据非常有用。SMA的连续上升表明明显的牛市趋势，而连续下降则表明**熊市**趋势。因此，它是**趋势指标**。此外，由于它指示趋势在开始之后，它是**滞后指标**。
- en: SMA is widely used in technical analysis. It is also used for calculating other
    technical indicators, either in combination with itself or other indicators, with
    the same or different time periods.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: SMA在技术分析中被广泛使用。它也用于计算其他技术指标，无论是与自身还是其他指标结合使用，时间周期相同或不同。
- en: 'The formula for calculating SMA is as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 计算SMA的公式如下：
- en: '![](img/3c143f97-a859-4337-94c6-4bed5beec3a6.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c143f97-a859-4337-94c6-4bed5beec3a6.png)'
- en: (*n >= 1*), and here, *n* is the time period and has to be defined by the user.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: （*n >= 1*），这里，*n*是时间段，必须由用户定义。
- en: Although it is a good idea to know the mathematics behind how this works, this
    recipe does not require you to understand or remember the given formula. We use
    a third-party Python package, `talib`, which provides a ready function for calculating
    SMA.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然了解其背后的数学原理是个好主意，但这个方法不要求你理解或记住给定的公式。我们使用第三方Python包`talib`，它提供了一个用于计算SMA的准备好的函数。
- en: Getting started
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 入门指南
- en: 'Make sure your Python namespace has the following objects:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你的Python命名空间具有以下对象：
- en: '`talib` (package)'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`talib`（软件包）'
- en: '`plot_candlesticks_chart` (function)'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`plot_candlesticks_chart`（函数）'
- en: '`PlotType` (enum)'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`PlotType`（枚举）'
- en: '`historical_data` (a `pandas` DataFrame)'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`historical_data`（一个`pandas` DataFrame）'
- en: Refer to the *Technical requirements* section of this chapter to set up these
    objects.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 参考本章的*技术要求*部分设置这些对象。
- en: How to do it…
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'We will execute the following steps for this recipe:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将执行以下步骤来完成这个方法：
- en: 'Calculate the SMA on `historical_data`. Assign it to `sma_9` and print it:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`historical_data`上计算SMA。将其分配给`sma_9`并打印它：
- en: '[PRE12]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We get the following output:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE13]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Plot `sma_9` on `historical_data`:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`historical_data`上绘制`sma_9`：
- en: '[PRE14]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We get the following output:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '![](img/e5d7eeeb-cfb2-4165-8c18-e4bd52c79ae2.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e5d7eeeb-cfb2-4165-8c18-e4bd52c79ae2.png)'
- en: The `plotly` Python package ([https://github.com/plotly/plotly.py](https://github.com/plotly/plotly.py))
    is required for plotting charts. The `plot_candlesticks_chart` function will install
    it for you if you don't have it installed already.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制图表需要`plotly` Python包（[https://github.com/plotly/plotly.py](https://github.com/plotly/plotly.py)）。如果你还没有安装它，`plot_candlesticks_chart`函数将为你安装它。
- en: How it works...
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The `talib` package provides a ready-to-use `talib.SMA` function. We use this
    in *step 1* to compute SMA on `historical_data` and assign it to a new attribute, `sma_9`.
    Along with the close series of `historical_data`, this function takes `timeperiod`
    as a parameter, which should be an `int` value. We use `9` as the parameter here.
    The `sma_9` object is a `pandas.Series` object. This is printed in *step 1*. We
    plot `sma_9` on `historical_data` in *step 2* using the `plot_candlesticks_chart`
    function.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`talib`软件包提供了一个可用的`talib.SMA`函数。我们在*步骤1*中使用它来计算`historical_data`上的SMA，并将其分配给一个新属性`sma_9`。除了`historical_data`的close系列外，此函数还接受`timeperiod`作为参数，它应该是一个`int`值。我们在这里使用`9`作为参数。`sma_9`对象是一个`pandas.Series`对象。这在*步骤1*中打印出来。我们使用`plot_candlesticks_chart`函数在`historical_data`上绘制`sma_9`。'
- en: 'Observe the following points regarding the SMA indicator values and chart:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 关于SMA指标值和图表的注意事项如下：
- en: The SMA plot is missing for the first eight timestamp values as the output values
    are `NaN` (the index starts from `0`, so indices `0` to `7` are the first eight
    values). This is because the `talib.SMA` function requires at least a time period
    number of entries to compute the SMA, which is `9` in our case. From the ninth row
    onward, we can see the computed values of the **Simple moving average** (**SMA**) and
    the corresponding timestamp of the `historical_data` object.
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于输出值为`NaN`（索引从`0`开始，因此索引`0`到`7`是前八个值），在前八个时间戳值中缺少SMA图表。这是因为`talib.SMA`函数需要至少一个时间段数量的条目来计算SMA，在我们的情况下为`9`。从第九行开始，我们可以看到计算的**简单移动平均**（**SMA**）的值以及`historical_data`对象的相应时间戳。
- en: The SMA increases as the prices go up and decreases as the prices go down, though
    not immediately in the next timestamp.
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当价格上涨时，简单移动平均（SMA）增加，当价格下跌时减少，尽管不会立即在下一个时间戳中体现。
- en: The rise or fall of the SMA plot follows the rise and fall in the corresponding
    prices. Hence, it's a lagging indicator. In other words, it doesn't predict the
    trend outcome in advance.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SMA图表的上升或下降遵循相应价格的上升和下降。因此，它是一种滞后指标。换句话说，它不会提前预测趋势结果。
- en: The SMA plot is smooth, without any sudden spikes, unlike the historical data
    plot. Hence, SMA is often used to smoothen out the prices.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SMA图表是平滑的，没有突然的尖峰，不像历史数据图表那样。因此，SMA经常用于平滑价格。
- en: Trend indicators – exponential moving average
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 趋势指标 – 指数移动平均
- en: EMA is a lagging trend indicator. It is used to smooth the price data by eliminating
    noise and thus identifying trends, with more weightage to recent values.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: EMA是一种滞后的趋势指标。它用于通过消除噪音平滑价格数据，从而识别趋势，对最近的值赋予更多的权重。
- en: The EMA technical indicator calculation is cumulative and includes all the data
    with decreasing weights. Past values have a lower contribution to the average,
    while recent values have a greater contribution. The further away the value, the
    smaller the contribution. Thus, EMA is a moving average that is more responsive
    to recent changes in the data.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: EMA 技术指标的计算是累积的，并且包括所有数据，其权重递减。过去的值对平均值的贡献较小，而最近的值贡献较大。值与当前时间越远，其贡献越小。因此，EMA
    是一种移动平均，对数据的最近变化更为敏感。
- en: The EMA technical indicator is not like the SMA technical indicator, where each
    value in the time period carries equal weight and values outside of the time period
    are not included in the calculation.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: EMA 技术指标不像 SMA 技术指标，其中时间周期内的每个值具有相等的权重，而时间周期外的值不包括在计算中。
- en: EMA is widely used in technical analysis. It is also used for calculating other
    technical indicators, either in combination with itself or other indicators, with
    the same or different time periods.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: EMA 在技术分析中被广泛使用。它还用于计算其他技术指标，无论是与自身还是其他指标组合使用，时间周期相同或不同。
- en: 'A recursive formula for calculating EMA is as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 用于计算 EMA 的递归公式如下：
- en: '![](img/b3d300e3-7187-4b37-9f17-d85509baa262.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b3d300e3-7187-4b37-9f17-d85509baa262.png)'
- en: (n >= 1), and here, *n* is the **time period** and has to be defined by the
    user. *K* is sometimes called the **smoothing** or **weighting factor**.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: （n >= 1），这里，*n* 是 **时间周期**，必须由用户定义。*K* 有时被称为 **平滑度** 或 **加权系数**。
- en: Although it is a good idea to know the mathematics of how this works, this recipe
    does not require you to understand or remember the given formula. We use a third-party
    Python package, `talib`, which provides a ready function for calculating EMA.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然了解其原理的数学原理是个好主意，但是这个示例不要求你理解或记住给定的公式。我们使用第三方 Python 包 `talib`，它提供了一个用于计算 EMA
    的即用型函数。
- en: Getting started
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 入门
- en: 'Make sure your Python namespace has the following objects:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你的 Python 命名空间包含以下对象：
- en: '`talib` (package)'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`talib`（包）'
- en: '`plot_candlesticks_chart` (function)'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`plot_candlesticks_chart`（函数）'
- en: '`PlotType` (enum)'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`PlotType`（枚举）'
- en: '`historical_data` (a `pandas` DataFrame)'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`historical_data`（一个 `pandas` DataFrame）'
- en: Refer to the *Technical requirements* section of this chapter to set up these
    objects.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 参考本章的 *技术要求* 部分来设置这些对象。
- en: How to do it…
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'We will execute the following steps for this recipe:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将对这个示例执行以下步骤：
- en: 'Calculate the EMA on `historical_data`. Assign it to `ema_9` and print it:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算 `historical_data` 上的 EMA。将其赋值给 `ema_9` 并打印出来：
- en: '[PRE16]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We get the following output:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE17]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Plot `ema_9` on `historical_data`:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `historical_data` 上绘制 `ema_9`：
- en: '[PRE18]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We get the following output:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '![](img/0bd9831e-9365-4d97-8b83-084fa7a21058.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0bd9831e-9365-4d97-8b83-084fa7a21058.png)'
- en: How it works…
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: The `talib` package provides a ready-to-use `talib.EMA` function. We use this
    in *step 1* to compute the EMA on `historical_data` and assign it to a new attribute, `ema_9`.
    Along with the close series of `historical_data`, this function takes `timeperiod`
    as a parameter, which should be an `int` value. We use `9` as the parameter here.
    The `ema_9` object is a `pandas.Series` object. This is printed in *step 1*. We
    plot `ema_9` on `historical_data` in *step 2* using the `plot_candlesticks_chart`
    function.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`talib` 包提供了一个即用型的 `talib.EMA` 函数。我们在 *step 1* 中使用它来计算 `historical_data` 上的
    EMA，并将其赋值给一个新属性 `ema_9`。除了 `historical_data` 的收盘价序列外，这个函数还接受一个 `timeperiod` 作为参数，这应该是一个
    `int` 值。我们在这里使用 `9` 作为参数。`ema_9` 对象是一个 `pandas.Series` 对象。这在 *step 1* 中打印出来。我们在
    *step 2* 中使用 `plot_candlesticks_chart` 函数在 `historical_data` 上绘制 `ema_9`。'
- en: 'Observe the following points regarding the EMA indicator values and chart:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 观察 EMA 指标值和图表的以下要点：
- en: The EMA plot is missing for the first eight timestamp values as the output values
    are `NaN` (the index starts from `0`, so indices `0` to `7` are first eight values).
    This is because the `talib.EMA` function requires at least a time period number
    of entries to compute EMA, which is `9` in our case. From the ninth row onward,
    we can see the EMA computed, each entry being the EMA for the corresponding timestamp
    of the `historical_data` object.
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于输出值为 `NaN`（索引从 `0` 开始，因此索引 `0` 到 `7` 是前八个值），第一批时间戳值的 EMA 图表缺失。这是因为 `talib.EMA`
    函数需要至少一个时间周期的条目才能计算 EMA，在我们的情况下是 `9`。从第九行开始，我们可以看到计算的 EMA，每个条目都是 `historical_data`
    对象相应时间戳的 EMA。
- en: The EMA increases as the prices go up and decreases as the prices go down, closely
    following the prices. Hence, it's a trend indicator.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随着价格的上涨，EMA 增加，随着价格的下跌而减少，紧密跟随价格。因此，它是一种趋势指标。
- en: The rise or fall of the EMA plot follows the rise and fall in the corresponding
    prices. Hence, it's a lagging indicator. In other words, it doesn't predict the
    trend outcome in advance.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The EMA plot is smooth, without any sudden spikes, unlike the historical data
    plot. Hence, EMA is used to smooth out the prices.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The EMA plot, when compared to the SMA plot from the *Plotting trend indicator
    – simple moving average* recipe, shows that the EMA plot follows the price trend
    more closely than the SMA plot. That is because EMA gives more weightage to recent
    values, unlike SMA, where each bit of data used for computation has equal weightage.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information on the usage of the `plot_candlesticks_chart` function,
    please refer to the *How it works…* section of the *Plotting trend indicator –
    simple moving average* recipe of this chapter.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: Trend indicators – moving average convergence divergence
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Moving average convergence divergence** (**MACD**) is a lagging trend indicator. MACD
    has three components: the MACD line, MACD signal, and MACD histogram. The MACD
    line helps in identifying trend changes as it signals the start of a new trend
    direction. Large positive values of the MACD line indicate that the shorter EMA
    is much larger than the longer EMA. This suggests that there is an *overbought*
    condition in the market, which means prices will be going up. Similarly, large
    negative values of the MACD line indicate that the shorter EMA is much smaller
    than the longer EMA. This suggests that there is an *oversold* condition in the
    market, which means the prices will be going down. When the MACD line crosses
    above the MACD signal and is positive, a **buy** signal is generated; and the
    MACD line crosses below the MACD signal and becomes negative, a **sell** signal
    is generated.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: 'The formulae for computing the three components of MACD are given as follows:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: 'The MACD line is the difference between two different time period EMAs—the
    EMA of a shorter time period, *m*, and the EMA of a longer time period, *n*:'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/d25cbbb4-ccff-4528-af59-9df39ffc2c3d.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
- en: 'The MACD signal is the EMA of the MACD line, with time period *p*:'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/9ef40683-8f5c-42ab-a2a3-249d80e62ec2.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
- en: 'The MACD histogram is the difference between the MACD line and the MACD signal:'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/913d02dd-4eb7-4237-9ffb-7c0aca1e3244.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
- en: The time periods for the MACD line are often given as `12` (*m*) and `26` (*n*)
    and the time period for the MACD signal is often given as `9` (*p*).
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: Although it is a good idea to know the mathematics of how this works, this recipe
    does not require you to understand or remember the given formula. We use a third-party
    Python package, `talib`, which provides a ready function for calculating MACD.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Make sure your Python namespace has the following objects:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '`talib` (package)'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`pd` (module)'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`plot_candlesticks_chart` (function)'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`PlotType` (enum)'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`historical_data` (a `pandas` DataFrame)'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Refer to the *Technical requirements* section of this chapter to set up these
    objects.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考本章的 *技术要求* 部分设置这些对象。
- en: How to do it…
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到…
- en: 'We will execute the following steps for this recipe:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为此配方执行以下步骤：
- en: 'Calculate MACD on `historical_data`. Assign it to `macd_line`, `macd_signal`,
    and `macd_historgram`. Also, print it:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `historical_data` 上计算 MACD。将其分配给 `macd_line`、`macd_signal` 和 `macd_histogram`。另外，打印它：
- en: '[PRE19]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We get the following output:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE20]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Plot `macd_line`, `macd_signal`, and `macd_histogram`, along with `historical_data`:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绘制 `macd_line`、`macd_signal` 和 `macd_histogram`，以及 `historical_data`：
- en: '[PRE21]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We get the following output:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '![](img/3e22ecf0-348e-4020-b7bb-3d7222e47329.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3e22ecf0-348e-4020-b7bb-3d7222e47329.png)'
- en: How it works…
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运作原理…
- en: The `talib` package provides a ready-to-use `talib.MACD` function. We use this
    in *step 1* to compute MACD on `historical_data`. Along with the close series
    of `historical_data`, this function takes `fastperiod`, `slowperiod`, and `signalperiod`
    as parameters, all of which should be objects of the `int` type. We use `26`,
    `12`, and `9` as the respective parameters here. The `talib.MACD` function returns
    three `pandas.Series` objects, which we assign to new attributes: `macd_line`,
    `macd_signal`, and `macd_histogram`. These three objects are concatenated into
    a `pandas.DataFrame` object and printed in *step 1*. We plot `macd_line`, `macd_signal`,
    and `macd_histogram` along with `historical_data` in *step 2* using the `plot_candlesticks_chart`
    function.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`talib` 包提供了一个可供使用的 `talib.MACD` 函数。我们在 *步骤 1* 中使用它来计算 `historical_data` 上的
    MACD。除了 `historical_data` 的收盘序列外，此函数还接受 `fastperiod`、`slowperiod` 和 `signalperiod`
    作为参数，所有这些参数都应该是 `int` 类型的对象。在这里，我们将分别使用 `26`、`12` 和 `9` 作为参数。`talib.MACD` 函数返回三个
    `pandas.Series` 对象，我们将它们分配给新的属性：`macd_line`、`macd_signal` 和 `macd_histogram`。这三个对象被连接成一个
    `pandas.DataFrame` 对象，并在 *步骤 1* 中打印出来。我们使用 `plot_candlesticks_chart` 函数在 *步骤 2*
    中将 `macd_line`、`macd_signal` 和 `macd_histogram` 与 `historical_data` 一起绘制。'
- en: 'Observe the following points regarding the MACD indicator values and chart:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 注意以下关于 MACD 指标值和图表的要点：
- en: The MACD plot is missing for the first 34 timestamp values and starts appearing
    only at the 35^(th) timestamp. This is because it takes 26 data points for the
    first long EMA data to come (the short EMA data comes in the first 12 data points),
    and 9 of these points for the MACD signal to appear. So, 26 + 9 make it 35 data
    points.
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MACD 图表在前 34 个时间戳值处缺失，仅在第 35 个时间戳处开始出现。这是因为第一个长期 EMA 数据需要 26 个数据点才能出现（短期 EMA
    数据在前 12 个数据点出现），并且需要 9 个这些点才能出现 MACD 信号。因此，26 + 9 使其达到 35 个数据点。
- en: The MACD line is negative when the prices are going up and is positive when
    the prices are going down. Hence, it's a trend indicator.
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当价格上涨时，MACD 线为负数，当价格下跌时，MACD 线为正数。因此，它是一个趋势指标。
- en: The rise or fall of the MACD line plot follows the rise and fall in the corresponding
    prices. Hence, it's a lagging indicator. In other words, it doesn't predict the
    trend outcome in advance.
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MACD 线图的上升或下降跟随相应价格的上升和下降。因此，它是一个滞后指标。换句话说，它不能预测趋势结果。
- en: The MACD line plot is smooth, without any sudden spikes, unlike the historical
    data plot. The MACD signal is even smoother, as it is an EMA of the MACD line.
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MACD 线图平稳，没有突然的波动，不像历史数据图。MACD 信号更加平滑，因为它是 MACD 线的 EMA。
- en: When the MACD histogram is positive, the trend is **bullish**, which means prices
    are going up. When the MACD histogram is negative, the trend is **bearish**, which
    means the prices are going down.
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当 MACD 柱状图为正时，趋势为 **牛市**，这意味着价格上涨。当 MACD 柱状图为负时，趋势为 **熊市**，这意味着价格下跌。
- en: For usage of the `plot_candlesticks_chart` function, please refer to the *How
    it works…* section of the *Plotting trend indicator – simple moving average* recipe
    of this chapter.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 如何使用 `plot_candlesticks_chart` 函数，请参考本章的 *How it works…* 部分的 *绘制趋势指标 - 简单移动平均*
    配方。
- en: Trend indicators – parabolic stop and reverse
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 趋势指标 - 抛物线停止和反转
- en: Parabolic **stop and reverse** (**SAR**) is a leading trend indicator.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 抛物 **停止和反转** (**SAR**) 是一个领先的趋势指标。
- en: 'The parabolic SAR computes a trailing stop loss for every data point. As the
    data points are stop-loss points, they are away from the prices when there is
    a trend and cross the price line during a trend reversal. The parabolic SAR takes
    two parameters as input: the `acceleration factor` and the `maximum` point.'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 抛物线 SAR 为每个数据点计算一个跟踪止损。由于数据点是止损点，在趋势时它们远离价格，在趋势反转时穿过价格线。抛物线 SAR 接受两个参数作为输入：`加速因子`
    和 `最大` 点。
- en: The formula for computing the parabolic SAR is not straightforward and is hence
    not mentioned here. If you are interested in the underlying math, please refer
    to the official documentation of `TA-Lib` on parabolic SAR at [http://www.tadoc.org/indicator/SAR.htm](http://www.tadoc.org/indicator/SAR.htm).
    Although it is a good idea to know the mathematics of how this works, this recipe
    does not require you to understand or remember the given formula. We use a third-party
    Python package, `talib`, which provides a ready function for calculating the parabolic
    SAR.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 计算抛物线 SAR 的公式不直接，因此此处未提及。如果您对底层数学感兴趣，请参阅 [http://www.tadoc.org/indicator/SAR.htm](http://www.tadoc.org/indicator/SAR.htm)
    上抛物线 SAR 的 `TA-Lib` 官方文档。虽然了解其工作原理的数学是个好主意，但本食谱不要求您理解或记住给定的公式。我们使用第三方 Python 包
    `talib`，它提供了一个用于计算抛物线 SAR 的现成函数。
- en: Getting started
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始
- en: 'Make sure your Python namespace has the following objects:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您的 Python 命名空间具有以下对象：
- en: '`talib` (package)'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`talib`（包）'
- en: '`plot_candlesticks_chart` (function)'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`plot_candlesticks_chart`（函数）'
- en: '`PlotType` (enum)'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`PlotType`（枚举）'
- en: '`historical_data`  (a `pandas` DataFrame)'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`historical_data`（一个`pandas` DataFrame）'
- en: Refer to the *Technical requirements* section of this chapter to set up these
    objects.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅本章的*技术要求*部分设置这些对象。
- en: How to do it…
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We will execute the following steps for this recipe:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为此食谱执行以下步骤：
- en: 'Calculate the parabolic SAR on `historical_data`. Assign it to `psar` and print
    it:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`historical_data`上计算抛物线 SAR。将其赋值给`psar`并打印出来：
- en: '[PRE22]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We get the following output:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE23]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Plot `psar` on `historical_data`:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`historical_data`上绘制`psar`：
- en: '[PRE24]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We get the following output:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '![](img/2f594d3d-4584-47dc-8007-4a9a1ddcad7a.png)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2f594d3d-4584-47dc-8007-4a9a1ddcad7a.png)'
- en: How it works…
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `talib` package provides a ready-to-use `talib.SAR` function. We use this
    in *step 1* to compute the parabolic SAR on `historical_data` and assign it to
    a new attribute, `psar`. Along with the high and low series of `historical_data`,
    this function takes `acceleration` and `maximum` as parameters, both of which
    should be objects of the `float` type. We use `0.02` and `0.2` as the respective
    parameters here. The `psar` object is a `pandas.Series` object. This is printed
    in *step 1*. We plot `psar`, along with `historical_data`, in *step 2* using the
    `plot_candlesticks_chart` function.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '`talib` 包提供了一个现成的 `talib.SAR` 函数。我们在*步骤 1*中使用它来计算`historical_data`上的抛物线 SAR，并将其分配给一个新属性`psar`。除了`historical_data`的高低系列外，此函数还接受`加速度`和`最大值`作为参数，这两个参数都应该是`float`类型的对象。我们在这里分别使用`0.02`和`0.2`作为参数。`psar`对象是一个`pandas.Series`对象。这在*步骤
    1*中打印出来。我们在*步骤 2*中使用`plot_candlesticks_chart`函数绘制`psar`以及`historical_data`。'
- en: 'Observe the following points regarding the parabolic SAR indicator values and
    chart:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 关于抛物线 SAR 指标值和图表的以下观察点：
- en: The parabolic SAR is plotted as discrete points, as each point represents the
    stop loss. The stop loss point changes every time. So, it is a *trailing* stop
    loss.
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 抛物线 SAR 被绘制为离散点，因为每个点代表止损点。止损点每次都会变化。所以，它是一个*追踪*止损。
- en: When the parabolic SAR plot is below the OHLC plot, the trend is **bullish**,
    and when it is above the OHLC plot, the trend is **bearish**. Hence, it's a trend
    indicator.
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当抛物线 SAR 图在 OHLC 图下方时，趋势是**看涨**的；当它在 OHLC 图上方时，趋势是**看跌**的。因此，它是一个趋势指标。
- en: For more information on the usage of the `plot_candlesticks_chart` function,
    please refer to the *How it works…* section of the *Plotting trend indicator –
    simple moving average* recipe of this chapter.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`plot_candlesticks_chart`函数用法的更多信息，请参阅本章*绘制趋势指标 - 简单移动平均*食谱中的*它是如何工作的...*部分。
- en: Momentum indicators – relative strength index
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动量指标 - 相对强度指数
- en: RSI is a leading momentum indicator. The RSI is a ratio of the recent upward
    price movement to the absolute price movement. The RSI is always between `0` and
    `100`. It can be interpreted to indicate an overbought condition when the value
    is above `70` and an oversold condition when the value is below `30`. The RSI
    indicates a reversal when the prices are making new highs or new lows.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: RSI 是一个领先的动量指标。RSI 是最近上升价格运动与绝对价格运动的比率。RSI 始终在`0`和`100`之间。当值高于`70`时，它可以解释为表示超买条件，当值低于`30`时，它可以解释为表示超卖条件。当价格正在创造新的高点或新的低点时，RSI
    表示反转。
- en: The formula for computing the RSI is not straightforward and is hence not mentioned
    here. If you are interested in the underlying math, please refer to the official
    documentation of `TA-Lib` on RSI at [http://www.tadoc.org/indicator/RSI.htm](http://www.tadoc.org/indicator/RSI.htm).
    Although it is a good idea to know the mathematics of how this works, this recipe
    does not require you to understand or remember the given formula. We use a third-party
    Python package, `talib`, which provides a ready function for calculating the RSI.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 计算 RSI 的公式并不直接，因此在这里没有提及。如果您对底层数学感兴趣，请参考官方 `TA-Lib` 关于 RSI 的文档 [http://www.tadoc.org/indicator/RSI.htm](http://www.tadoc.org/indicator/RSI.htm)。尽管了解这种工作方式的数学是一个好主意，但此示例不需要您理解或记住给定的公式。我们使用第三方
    Python 包 `talib`，它提供了一个计算 RSI 的现成函数。
- en: Getting started
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 入门
- en: 'Make sure your Python namespace has the following objects:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你的 Python 命名空间具有以下对象：
- en: '`talib` (package)'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`talib`（包）'
- en: '`plot_candlesticks_chart` (function)'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`plot_candlesticks_chart`（函数）'
- en: '`PlotType` (enum)'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`PlotType`（枚举）'
- en: '`historical_data`  (a `pandas` DataFrame)'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`historical_data`（一个 `pandas` DataFrame）'
- en: Refer to the *Technical requirements* section of this chapter to set up these
    objects.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考本章的 *技术要求* 部分设置这些对象。
- en: How to do it…
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何执行…
- en: 'We will execute the following steps for this recipe:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将执行以下步骤来完成此过程：
- en: 'Calculate the RSI on `historical_data`. Assign it to `rsi_14` and print it:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算 `historical_data` 上的 RSI。将其分配给 `rsi_14` 并打印出来：
- en: '[PRE25]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We get the following output:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE26]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Plot `rsi_14` along with `historical_data`:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绘制 `rsi_14` 与 `historical_data` 的图表：
- en: '[PRE27]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We get the following output:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '![](img/6ba35fc0-875b-4a7e-948a-f1376c767f7c.png)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: '![示例图片](img/6ba35fc0-875b-4a7e-948a-f1376c767f7c.png)'
- en: How it works…
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: The `talib` package provides a ready-to-use `talib.RSI` function. We use this
    in *step 1* to compute the RSI on `historical_data` and assign it to a new attribute, `rsi_14`.
    Along with the close series of `historical_data`, this function takes `timeperiod`
    as a parameter, which should be an `int` value. We use `14` as the parameter here.
    The `rsi_14` object is a `pandas.Series` object. This is printed in *step 1*.
    We plot `rsi_14` on `historical_data` in *step 2* using the `plot_candlesticks_chart`
    function.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '`talib` 包提供了一个现成的 `talib.RSI` 函数。我们在 *步骤 1* 中使用它来计算 `historical_data` 上的 RSI，并将其赋值给一个新属性
    `rsi_14`。除了 `historical_data` 的收盘价系列外，此函数还接受 `timeperiod` 作为参数，该参数应为一个 `int` 值。我们在此处使用
    `14` 作为参数。`rsi_14` 对象是一个 `pandas.Series` 对象。这在 *步骤 1* 中打印出来。我们使用 `plot_candlesticks_chart`
    函数在 *步骤 2* 中绘制 `rsi_14` 在 `historical_data` 上的图表。'
- en: 'Observe the following points regarding the RSI indicator values and chart:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 观察关于 RSI 指标值和图表的以下要点：
- en: The first 13 values in the output are `NaN` (the index starts from `0`, so indices
    `0` to `12` are the first 13 values) because the function requires at least a
    time period number of entries to compute the RSI, which is `14` in our case. From
    the 14^(th) row onward, we can see the RSI computed, each entry being the RSI
    for the corresponding timestamp of the `historical_data` object.
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输出中的前 13 个值为 `NaN`（索引从 `0` 开始，因此索引 `0` 到 `12` 是前 13 个值），因为函数至少需要一个时间段的条目来计算
    RSI，在我们的情况下是 `14`。从第 `14` 行开始，我们可以看到计算的 RSI，每个条目都是 `historical_data` 对象对应时间戳的
    RSI。
- en: The RSI is always between `0` and `100`.
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RSI 始终介于 `0` 和 `100` 之间。
- en: For the given plot, the price peaks suddenly between 12:45 P.M. to 1:00 P.M.,
    and the RSI moves above `70`. Thus, it correctly indicates an *overbought* condition.
    Also, since it indicates the strength of the price movement, it is a momentum
    indicator.
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于给定的图表，价格在下午 12:45 至 1:00 之间突然达到峰值，并且 RSI 移动到 `70` 以上。因此，它正确地指示了 *超买* 条件。另外，由于它指示了价格走势的强度，它是一个动量指标。
- en: For more information on the usage of the `plot_candlesticks_chart` function,
    please refer to the *How it works…* section of the *Plotting trend indicator –
    simple moving average* recipe of this chapter.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 `plot_candlesticks_chart` 函数的更多信息，请参考本章 *绘制趋势指标 – 简单移动平均* 食谱中的 *工作原理…* 部分。
- en: Momentum indicators – stochastic oscillator
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动量指标 – 随机震荡器
- en: The stochastic oscillator is a leading momentum indicator. It is also called
    **STOCH** for short. STOCH compares the latest close with the recent trading range.
    *Fast K* is a ratio and has a value between `0` and `100`. *Fast K* can have haphazard
    movement, and hence it is smoothed using a moving average, which is the *slow
    K*. *Slow K* is further smoothed using another moving average, which is the *slow
    D*. Values of *slow K* over `75` indicate an overbought condition, while values
    below `25` indicate an oversold condition. When *slow K* crosses above *slow D*,
    it is considered a **buy** signal. Similarly, when *slow K* crosses below *slow
    D*, it is considered a **sell** signal.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 随机震荡器是一种领先的动量指标。它也被简称为 **STOCH**。STOCH 比较最新的收盘价与最近的交易范围。*Fast K* 是一个比率，取值在 `0`
    和 `100` 之间。*Fast K* 可以有杂乱的运动，因此它使用移动平均进行平滑，即 *slow K*。*Slow K* 进一步使用另一个移动平均进行平滑，即
    *slow D*。*Slow K* 大于 `75` 的值表示超买条件，而小于 `25` 的值表示超卖条件。当 *slow K* 穿过 *slow D* 向上时，被认为是一个
    **买入** 信号。类似地，当 *slow K* 穿过 *slow D* 向下时，被认为是一个 **卖出** 信号。
- en: 'The formula for computing STOCH is as follows:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 计算 STOCH 的公式如下：
- en: '![](img/6d35c4a3-a7d2-48ab-ae08-1891bf14a7e8.png)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6d35c4a3-a7d2-48ab-ae08-1891bf14a7e8.png)'
- en: '**MA** stands for **moving average**, and can be either SMA or EMA. For this
    recipe, we have used SMA. This formula needs three time periods: one of them is
    *n* and the other two are the time periods of the MAs. The range over which we
    analyze data is defined by *n*.'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '**MA** 代表 **移动平均**，可以是 SMA 或 EMA。对于这个配方，我们使用了 SMA。这个公式需要三个时间段：其中一个是 *n*，另外两个是
    MAs 的时间段。我们分析数据的范围由 *n* 定义。'
- en: Although it is a good idea to know the mathematics of how this works, this recipe
    does not require you to understand or remember the given formula. We use a third-party
    Python package, `talib`, which provides a ready function for calculating STOCH.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管了解这个工作原理的数学是个好主意，但这个配方不要求你理解或记住给定的公式。我们使用了一个第三方的 Python 包，`talib`，它提供了一个用于计算
    STOCH 的现成函数。
- en: Getting started
  id: totrans-258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 入门
- en: 'Make sure your Python namespace has the following objects:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你的 Python 命名空间具有以下对象：
- en: '`talib` (package)'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`talib`（包）'
- en: '`pd` (module)'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pd`（模块）'
- en: '`plot_candlesticks_chart` (function)'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`plot_candlesticks_chart`（函数）'
- en: '`PlotType` (enum)'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`PlotType`（枚举）'
- en: '`historical_data`  (a `pandas` DataFrame)'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`historical_data`（一个 `pandas` DataFrame）'
- en: Refer to the *Technical requirements* section of this chapter to set up these
    objects.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考本章的 *技术要求* 部分设置这些对象。
- en: How to do it…
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We will execute the following steps for this recipe:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将按照以下步骤执行这个配方：
- en: 'Calculate the stochastic oscillator on `historical_data`. Assign it to `slowk`
    and `slowd`. Also, print it:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `historical_data` 上计算随机震荡器。将其赋值给 `slowk` 和 `slowd`。并打印出来：
- en: '[PRE28]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We get the following output:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了以下输出：
- en: '[PRE29]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Plot `slowk` and `slowd`, along with `historical_data`:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绘制`slowk`和`slowd`，以及`historical_data`：
- en: '[PRE30]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We get the following output:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了以下输出：
- en: '![](img/ced4ad45-b411-492a-bb14-652014848bce.png)'
  id: totrans-275
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ced4ad45-b411-492a-bb14-652014848bce.png)'
- en: How it works…
  id: totrans-276
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理是这样的...
- en: 'The `talib` package provides a ready-to-use `talib.STOCH` function. We use
    this in *step 1* to compute the stochastic oscillator on `historical_data`. Along
    with the high, low, and close series of `historical_data`, this function takes
    the following parameters:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '`talib` 包提供了一个现成的 `talib.STOCH` 函数。我们在 *步骤 1* 中使用它来计算 `historical_data` 上的随机震荡器。除了`historical_data`的高、低和收盘系列外，此函数还接受以下参数：'
- en: '`fastk_period` (`int`): The range over which we analyze the data. Here, we
    took the value as `5`.'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fastk_period`（`int`）：我们分析数据的范围。在这里，我们将值取为 `5`。'
- en: '`slowk_period` (`int`): The time period for calculating the moving average
    on *fast K*. Here, we took the value as `3`.'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`slowk_period`（`int`）：计算 *fast K* 上的移动平均的时间段。在这里，我们将值取为 `3`。'
- en: '`slowk_matype` (`int`): The moving average type. A value of `0` implies SMA
    and `1` implies EMA. Here, we took the value as `0`.'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`slowk_matype`（`int`）：移动平均类型。值为 `0` 表示 SMA，值为 `1` 表示 EMA。在这里，我们将值取为 `0`。'
- en: '`slowd_period` (`int`): The time period for calculating the moving average
    on *slow K*. Here, we took the value as `3`.'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`slowd_period`（`int`）：计算 *slow K* 上的移动平均的时间段。在这里，我们将值取为 `3`。'
- en: '`slowd_matype` (`int`): The moving average type. A value of `0` implies SMA
    and `1` implies EMA. Here, we took the value as `0`.'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`slowd_matype`（`int`）：移动平均类型。值为 `0` 表示 SMA，值为 `1` 表示 EMA。在这里，我们将值取为 `0`。'
- en: The `talib.STOCH` function returns two `pandas.Series` objects, which we assign
    to new attributes: `slowk` and `slowd`. These two objects are concatenated into
    a `pandas.DataFrame` object and printed in *step 1*. We plot `slowk` and `slowd`,
    along with `historical_data`, in *step 2* using the `plot_candlesticks_chart`
    function.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '`talib.STOCH`函数返回两个`pandas.Series`对象，我们将它们分配给新属性：`slowk`和`slowd`。这两个对象被连接成一个`pandas.DataFrame`对象，并在*步骤1*中打印出来。我们使用`plot_candlesticks_chart`函数在*步骤2*中绘制`slowk`和`slowd`，以及`historical_data`。'
- en: 'Observe the following points regarding the STOCH indicator values and chart:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 观察以下关于STOCH指标值和图表的要点：
- en: The first eight values in the output are `NaN` (the index starts from `0`, so
    indices `0` to `7` are the first 8 values). That's because it takes the first
    five values to get a *fast K*, three *fast K*s to get a *slow K*, and three *slow
    K*s to get a *slow D*. So, that's 5 + (3 - 1) + (2 - 1) = 9\. (We subtract `1`
    twice as the last value for previous computation is the first value for the next
    computation, so that's already counted once.) From the ninth row onward, we can
    see the computed values of *slow K* and *slow D* and the corresponding timestamp
    of the `historical_data` object.
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输出中的前八个值为`NaN`（索引从`0`开始，因此索引`0`到`7`是前8个值）。这是因为获取*快速K*需要前五个值，获取*慢K*需要三个*快速K*，获取*慢D*需要三个*慢K*。因此，这是5
    +（3-1）+（2-1）= 9。（我们两次减去`1`，因为先前计算的最后一个值是下一个计算的第一个值，因此已经计算了一次。）从第九行开始，我们可以看到*慢K*和*慢D*的计算值以及`historical_data`对象的相应时间戳。
- en: The *slow K* and *slow D* values are always between `0` and `100`.
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*慢K*和*慢D*的值始终在`0`和`100`之间。'
- en: The rise or fall of the *slow K* and *slow D* plot is followed by the rise and
    fall in the corresponding prices for most of the time, particularly evident in
    the plot after 12:45 P.M. Hence, it's a leading indicator. In other words, it
    predicts the trend outcome in advance.
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*慢K*和*慢D*图的上升或下降随后往往伴随着相应价格的上升和下降，尤其是在下午12:45后的图表中尤为明显。因此，它是一个领先指标。换句话说，它可以提前预测趋势结果。'
- en: Since it's a leading indicator, it reacts to prices quickly. This often results
    in false signals, as can be seen in the plot between 12:30 P.M. to 12:45P.M. (To
    safeguard yourself from these scenarios, you can use more indicators in your strategy
    to get additional confirmation of trends or reversals.)
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于它是一个领先指标，它对价格的反应很快。这经常导致错误信号，就像在下午12:30到12:45之间的图表中所看到的那样。（为了保护自己免受这些情况的影响，您可以在策略中使用更多的指标来获取趋势或反转的额外确认。）
- en: Volatility indicators – Bollinger Bands
  id: totrans-289
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 波动率指标 - 布林带
- en: Bollinger Bands are a lagging volatility indicator. Bollinger Bands consist
    of three lines, or bands—the **middle band**, the **lower band**, and the **upper
    band**. The gap between the bands widens when the price volatility is high and
    reduces when the price volatility is low.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 布林带是滞后的波动率指标。布林带由三条线或带组成 - **中带**、**下带**和**上带**。当价格波动性较高时，带之间的间隙扩大，而价格波动性较低时，带之间的间隙缩小。
- en: Bollinger Bands are an indicator of overbought or oversold conditions. When
    the price is near the upper band or the lower band, this indicator predicts that
    a reversal will happen soon. The middle band acts as a support or resistance level.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 布林带（Bollinger Bands）是一种超买或超卖条件的指标。当价格接近上带或下带时，该指标预测反转很快就会发生。中带充当支撑或阻力水平。
- en: The upper band and lower band can also be interpreted as price targets. When
    the price bounces off of the upper band and crosses the middle band, the lower
    band becomes the price target, and vice versa.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 上带和下带也可以解释为价格目标。当价格从上带反弹并穿过中带时，下带成为价格目标，反之亦然。
- en: The formulae for computing the Bollinger Bands are as follows.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 计算布林带的公式如下。
- en: 'Bollinger Bands define the **typical price** (**TP**) as the average of the
    high, low, and close of a candle. The TP is used for computing the middle band,
    lower band, and upper band:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 布林带将**典型价格**（**TP**）定义为蜡烛的高、低和收盘价的平均值。TP用于计算中带、下带和上带：
- en: '![](img/94086493-4606-4040-8e54-6b4d7503c72c.png)'
  id: totrans-295
  prefs: []
  type: TYPE_IMG
  zh: '![](img/94086493-4606-4040-8e54-6b4d7503c72c.png)'
- en: 'The middle band is the SMA of the TP:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 中带是TP的SMA：
- en: '![](img/12b6b158-7b7a-4a03-b585-cfee8dfed6b5.png)'
  id: totrans-297
  prefs: []
  type: TYPE_IMG
  zh: '![](img/12b6b158-7b7a-4a03-b585-cfee8dfed6b5.png)'
- en: 'The upper band and lower band are an integer (*F*) number of the standard deviation
    above and below the middle band. The typical value of *F* is 2:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 上带和下带是中带上下标准差的整数(*F*)倍数。*F*的典型值为2：
- en: '![](img/e0986bcb-5643-46d3-8def-90386797ba56.png)'
  id: totrans-299
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e0986bcb-5643-46d3-8def-90386797ba56.png)'
- en: Although it is a good idea to know the mathematics of how this works, this recipe
    does not require you to understand or remember the given formula. We use a third-party
    Python package, `talib`, which provides a ready function for calculating the Bollinger
    Bands.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  id: totrans-301
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Make sure your Python namespace has the following objects:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: '`talib` (package)'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`pd` (module)'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`plot_candlesticks_chart` (function)'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`PlotType` (enum)'
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`historical_data` (a `pandas` DataFrame)'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Refer to the *Technical requirements* section of this chapter to set up these
    objects.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-309
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We execute the following steps for this recipe:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: 'Calculate the Bollinger Bands on `historical_data`. Assign it to `upperband`,
    `middleband`, and `lowerband`. Also, print it:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We get the following output:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Plot `upperband`, `middleband`, and `lowerband` on `historical_data`:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We get the following output:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/366a4661-d589-4d80-87f0-f3187c9701c7.png)'
  id: totrans-318
  prefs: []
  type: TYPE_IMG
- en: How it works…
  id: totrans-319
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `talib` package provides a ready-to-use `talib.BBANDS` function. We use
    this in *step 1* to compute the Bollinger Bands on `historical_data`. Along with
    the close series of `historical_data`, this function takes the following parameters:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: '`timeperiod` (`int`): The time period for calculating the SMA on the TP. The
    TP is the average of the high, low, and close prices. Here, we took the value
    as `5`.'
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nbdevup` (`int`): The number of unbiased standard deviations from the mean
    for the upper band. Here, we took the value as `2`.'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nbdevdn` (`int`): The number of unbiased standard deviations from the mean
    for the lower band. Here, we took the value as `2`.'
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`matype` (`int`): The moving average type. A value of `0` implies SMA and `1`
    implies EMA. Here, we took the value as `0`.'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `talib.BBANDS` function returns three `pandas.Series` objects, which we
    assign to new attributes: `upperband`, `middleband`, and `lowerband`. These three
    objects are concatenated into a `pandas.DataFrame` object and printed in *step
    1*. We plot `upperband`, `middleband`, and `lowerband` on `historical_data` in
    *step 2* using the `plot_candlesticks_chart` function.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: 'Observe the following points regarding the Bollinger Bands indicator values
    and chart:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: The first four values in the output are `NaN` (the index starts from `0`, so
    indices `0` to `3` are the first four values) because the `talib.BBANDS` function
    requires at least a time period number of entries to compute the Bollinger Bands,
    which is `5` in our case. From the fifth row onward, we can see all the computed
    values of all three bands and the corresponding timestamp of the `historical_data`
    object.
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The rise or fall of the bands follow the rise and fall in the corresponding
    prices. Hence, Bollinger Bands are a lagging indicator. In other words, they don't
    predict the trend outcome in advance.
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Around 12:45 P.M. in the plot, we see that the bands have become narrow. This
    is because of low volatility (slow rate of price change) around that time.
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Just before 1 P.M. in the plot, we see that the gap between the bands has widened
    drastically. This is because of high volatility (rapid rate of price change) around
    that time.
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在图中1点前，我们看到带宽之间的差距急剧扩大。这是因为那个时间点周围的波动性很高（价格变化速度快）。
- en: Most of the time, when the price touches the upper band, it starts moving downward
    (the opposite direction). You can use these instances as **sell** signals for
    your strategy.
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大多数情况下，当价格触及上轨时，它开始向下移动（相反的方向）。你可以将这些情况用作你的策略的**卖出**信号。
- en: Most of the time, when the price touches the lower band, it starts moving upward
    (the opposite direction). You can use these instances as **buy** signals for your
    strategy.
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大多数情况下，当价格触及下轨时，它开始向上移动（相反的方向）。你可以将这些情况用作你的策略的**买入**信号。
- en: Volatility indicators – average true range
  id: totrans-333
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 波动性指标 – 平均真实波动幅度
- en: '**Average true range** (**ATR**) is a lagging volatility indicator. ATR is
    a measure of volatility. High ATR values indicate high volatility, and low values
    indicate low volatility.'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '**平均真实波动幅度**（**ATR**）是一种滞后的波动性指标。ATR是波动性的一种度量。高ATR值表示高波动性，低值表示低波动性。'
- en: The formula for computing ATR is not straightforward and is hence not mentioned
    here. If you are interested in the underlying math, please refer to the official
    documentation of `TA-Lib` on ATR at [http://www.tadoc.org/indicator/ATR.htm](http://www.tadoc.org/indicator/ATR.htm).
    Although it is a good idea to know the mathematics of how this works, this recipe
    does not require you to understand or remember the given formula. We use a third-party
    Python package, `talib`, which provides a ready function for calculating ATR.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 计算ATR的公式不是直接的，因此此处未提及。如果你对底层数学感兴趣，请参考`TA-Lib`关于ATR的官方文档，网址为[http://www.tadoc.org/indicator/ATR.htm](http://www.tadoc.org/indicator/ATR.htm)。虽然了解这个工作原理的数学是个好主意，但这个示例不需要你理解或记住给定的公式。我们使用第三方Python包`talib`，它提供了一个用于计算ATR的现成函数。
- en: Getting started
  id: totrans-336
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 入门
- en: 'Make sure your Python namespace has the following objects:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你的Python命名空间中有以下对象：
- en: '`talib` (package)'
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`talib`（包）'
- en: '`pd` (module)'
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pd`（模块）'
- en: '`plot_candlesticks_chart` (function)'
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`plot_candlesticks_chart`（函数）'
- en: '`PlotType` (enum)'
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`PlotType`（枚举）'
- en: '`historical_data` (a `pandas` DataFrame)'
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`historical_data`（一个`pandas` DataFrame）'
- en: Refer to the *Technical requirements* section of this chapter to set up these
    objects.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考本章的*技术要求*部分来设置这些对象。
- en: How to do it…
  id: totrans-344
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何执行…
- en: 'We will execute the following steps for this recipe:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将执行以下步骤来完成这个示例：
- en: 'Calculate the ATR on `historical_data`. Assign it to `atr_14` and print it:'
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`historical_data`上计算ATR。将其赋值给`atr_14`并打印出来：
- en: '[PRE34]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'We get the following output:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE35]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Plot `atr_14`, along with `historical_data`:'
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绘制`atr_14`，以及`historical_data`：
- en: '[PRE36]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'We get the following output:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '![](img/d560f849-1311-443c-93e2-c236febbc27a.png)'
  id: totrans-353
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d560f849-1311-443c-93e2-c236febbc27a.png)'
- en: How it works…
  id: totrans-354
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何运作…
- en: The `talib` package provides a ready-to-use `talib.ATR` function. We use this
    in *step 1* to compute the ATR on `historical_data` and assign it to a new attribute, `atr_14`.
    Along with the high, low, and close series of `historical_data`, this function
    takes `timeperiod` as a parameter, which should be an `int` value. We use `14`
    as the parameter here. The `rsi_14` object is a `pandas.Series` object. This is
    printed in *step 1*. We plot `atr_14` on `historical_data` in *step 2* using the
    `plot_candlesticks_chart` function.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '`talib`包提供了一个现成的`talib.ATR`函数。我们在*步骤1*中使用它来计算`historical_data`上的ATR，并将其赋值给一个新属性，`atr_14`。除了`historical_data`的高、低和收盘系列之外，该函数还将`timeperiod`作为参数，它应该是一个`int`值。我们在这里使用`14`作为参数。`rsi_14`对象是一个`pandas.Series`对象。这在*步骤1*中打印出来。我们使用`plot_candlesticks_chart`函数在*步骤2*中将`atr_14`绘制在`historical_data`上。'
- en: 'Observe the following points regarding the ATR indicator values and chart:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 观察关于ATR指标值和图表的以下要点：
- en: The first 14 values in the output are `NaN` (the index starts from `0`, so indices
    `0` to `13` are the first 14 values) because the `talib.ATR` function requires
    at least one more than the time period number of entries to compute the ATR, which
    is `14` in our case. From the 15^(th) row onward, we can see all the computed
    values of the ATR and the corresponding timestamp of the `historical_data` object.
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输出中的前14个值是`NaN`（索引从`0`开始，所以索引`0`到`13`是前14个值），因为`talib.ATR`函数需要至少比时间周期数多一个条目来计算ATR，而在我们的情况下是`14`。从第15行开始，我们可以看到所有计算出的ATR值以及`historical_data`对象的相应时间戳。
- en: When there is high volatility (rapid rate of price change), the ATR starts increasing.
    This can be seen in the chart around 1 P.M.
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当波动性较高（价格变化速度快）时，ATR 开始上升。这可以在图表中午 1 点左右看到。
- en: When there is low volatility (slow rate of price change), the ATR starts decreasing.
    This can be seen around the end of the chart.
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当波动性较低（价格变化速度较慢）时，ATR 开始下降。这可以在图表末尾附近看到。
- en: Volume indicators – on balance volume
  id: totrans-360
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 成交量指标 – 平衡量
- en: '**On balance volume** (**OBV**) is a leading volume indicator. The OBV is a
    cumulative total of the up and down volume. When the close is higher than the
    previous close, the volume is added to the running total, and when the close is
    lower than the previous close, the volume is subtracted from the running total.'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '**平衡量**（**OBV**）是一个领先的量度指标。OBV 是上升量和下降量的累积总和。当收盘价高于前一个收盘价时，将成交量加到累积总和中，而当收盘价低于前一个收盘价时，则将成交量从累积总和中减去。'
- en: To interpret the OBV, you can observe the movement of the OBV and the price.
    If the price moves before the OBV, then it is a non-confirmed move. A series of
    rising peaks, or falling troughs, in the OBV indicates a strong trend. If the
    OBV is flat, then the market is not trending.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 要解释 OBV，可以观察 OBV 和价格的运动。如果价格在 OBV 之前移动，则它是一个非确认的移动。OBV 中一系列上升峰或下降谷指示着强劲的趋势。如果
    OBV 是平的，则市场没有趋势。
- en: 'The formulae for computing the OBV are as follows:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 计算 OBV 的公式如下：
- en: If *close > close[-1]*, then *OBV = OBV[-1] + volume*
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 *close > close[-1]*，那么 *OBV = OBV[-1] + volume*
- en: If *close < close[-1]*, then *OBV = OBV[-1] - volume*
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 *close < close[-1]*，那么 *OBV = OBV[-1] - volume*
- en: If *close = close[-1]*, then *OBV = OBV[-1]*
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 *close = close[-1]*，那么 *OBV = OBV[-1]*
- en: Although it is a good idea to know the mathematics of how this works, this recipe
    does not require you to understand or remember the given formula. We use a third-party
    Python package, `talib`, which provides a ready function for calculating the OBV.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然了解其工作原理的数学知识是个好主意，但本示例不要求你理解或记住给定的公式。我们使用第三方 Python 包`talib`，它提供了一个用于计算 OBV
    的现成函数。
- en: Getting started
  id: totrans-368
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 入门
- en: 'Make sure your Python namespace has the following objects:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你的 Python 命名空间拥有以下对象：
- en: '`talib` (package)'
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`talib`（包）'
- en: '`pd` (module)'
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pd`（模块）'
- en: '`plot_candlesticks_chart` (function)'
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`plot_candlesticks_chart`（函数）'
- en: '`PlotType` (enum)'
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`PlotType`（枚举）'
- en: '`historical_data` (a `pandas` DataFrame)'
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`historical_data`（一个`pandas` DataFrame）'
- en: Refer to the *Technical requirements* section of this chapter to set up these
    objects.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考本章的*技术要求*部分设置这些对象。
- en: How to do it…
  id: totrans-376
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'We will execute the following steps for this recipe:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为此示例执行以下步骤：
- en: 'Calculate the OBV on `historical_data`. Assign it to `obv` and print it:'
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算`historical_data`上的OBV。将其赋值给`obv`并打印出来：
- en: '[PRE37]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'We get the following output:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE38]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Plot `obv`, along with `historical_data`:'
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在图中绘制`obv`，以及`historical_data`：
- en: '[PRE39]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'We get the following output:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '![](img/0f5a1a56-f8ed-46fc-8584-6ac5141410f5.png)'
  id: totrans-385
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0f5a1a56-f8ed-46fc-8584-6ac5141410f5.png)'
- en: How it works…
  id: totrans-386
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: The `talib` package provides a ready-to-use `talib.OBV` function. We use this
    in *step 1* to compute the OBV on `historical_data` and assign it to a new attribute, `obv`.
    This function takes the close and volume series of `historical_data` as parameters.
    The `obv` object is a `pandas.Series` object. This is printed in *step 1*. We
    plot `obv`, along with `historical_data`, in *step 2* using the `plot_candlesticks_chart`
    function.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '`talib`包提供了一个现成的`talib.OBV`函数。我们在*步骤 1*中使用它来计算`historical_data`上的OBV，并将其赋值给一个新的属性`obv`。该函数以`historical_data`的收盘价和成交量序列作为参数。`obv`对象是一个`pandas.Series`对象。这在*步骤
    1*中打印出来。我们使用`plot_candlesticks_chart`函数在*步骤 2*中绘制`obv`和`historical_data`。'
- en: 'Observe the following points regarding the OBV indicator values and chart:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 OBV 指标值和图表的观察要点如下：
- en: There are no `NaN` outputs in the table. From the first row itself, we can see
    all the computed values of the OBV and the corresponding timestamp of the `historical_data`
    object. One single data point is sufficient to calculate the OBV.
  id: totrans-389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在表中没有`NaN`输出。从第一行起，我们就可以看到所有计算得出的 OBV 值以及`historical_data`对象的相应时间戳。一个数据点就足以计算
    OBV。
- en: The values are always positive.
  id: totrans-390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些值始终为正数。
- en: The rise or fall of the OBV plot is closely followed by the rise and fall of
    the corresponding prices for most of the time. Hence, it's a leading indicator.
    In other words, it predicts the trend outcome in advance. (Since it's a leading
    indicator, it reacts to prices quickly. This often results in false signals. To
    safeguard yourself from these scenarios, you can use more indicators in your strategy
    to get additional confirmation of trends or reversals.)
  id: totrans-391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Volume indicators – volume-weighted average price
  id: totrans-392
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Volume-weighted average price** (**VWAP**) is a lagging volume indicator.
    The VWAP is a weighted moving average that uses the volume as the weighting factor
    so that higher volume days have more weight. It is a non-cumulative moving average,
    so only data within the time period is used in the calculation.'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
- en: Although this function is available in `talib`, we will show you how to compute
    an indicator manually here by creating its formula. This will help you create
    your own indicators at times when you may use customer technical indicators or
    not-so-popular indicators that are missing from `talib`.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
- en: 'The formula for calculating VWAP is as follows:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6a87a3f6-a0bd-49d2-b2f4-d0b404fbc5c9.png)'
  id: totrans-396
  prefs: []
  type: TYPE_IMG
- en: Here, *n* is the *time period* and has to be defined by the user.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  id: totrans-398
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Make sure your Python namespace has the following objects:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
- en: '`pd` (module)'
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`plot_candlesticks_chart` (function)'
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`PlotType` (enum)'
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`historical_data` (a `pandas` DataFrame)'
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Refer to the *Technical requirements* section of this chapter to set up these
    objects.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-405
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will execute the following steps for this recipe:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: 'Define a function for computing `VWAP`:'
  id: totrans-407
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Calculate `VWAP` on `historical_data`. Assign it to `vwap` and print it:'
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'We get the following output:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Plot `vwap` along with `historical_data`:'
  id: totrans-413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'We get the following output:'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e6c39547-a09a-45bf-96c4-4130ac94e861.png)'
  id: totrans-416
  prefs: []
  type: TYPE_IMG
- en: How it works…
  id: totrans-417
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We define a function that calculates `VWAP` in *step 1* for the given historical
    data as a `pandas.DataFrame` object. It works as follows:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
- en: Finds all the unique dates in the historical data
  id: totrans-419
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Iterates over all the unique dates:'
  id: totrans-420
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extracts `day_df`, a `pandas.DataFrame` object with entries from `historical_data`
    that fall on the unique date
  id: totrans-421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculates `typical_price_day_df`, the typical price, which is the average of
    the high, low, and close prices for the day
  id: totrans-422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculates `vwap_day`, which is a list of the typical price-weighted averages
    of the volumes for all the entries in `day_df`
  id: totrans-423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns all the `vwap_day` values appended together as a `pandas.Series` object
  id: totrans-424
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We compute `VWAP` in *step 2* on `historical_data` using the `VWAP` function
    and assign it to a new attribute, `vwap`. The `vwap` object is a `pandas.Series`
    object. We plot `vwap` along with `historical_data` in *step 3* using the `plot_candlesticks_chart`
    function.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
- en: 'Observe the following points regarding the `VWAP` indicator values and chart:'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
- en: There are no `NaN` outputs in the table. From the first row itself, we can see
    all the computed values of `VWAP` and the corresponding timestamp of the `historical_data`
    object. One single data point is sufficient to calculate `VWAP`.
  id: totrans-427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表格中没有`NaN`输出。从第一行开始，我们就可以看到`VWAP`的所有计算值以及`historical_data`对象的相应时间戳。一个单独的数据点足以计算`VWAP`。
- en: The values are always positive.
  id: totrans-428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 值始终为正。
- en: The rise or fall of the `VWAP` plot follows the rise and fall in the corresponding
    prices. Hence, it's a lagging indicator. In other words, it doesn't predict the
    trend outcome in advance.
  id: totrans-429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VWAP`图的上升或下降遵循相应价格的上升和下降。因此，它是滞后指标。换句话说，它不会提前预测趋势结果。'
