["```py\n>>> from pyalgotrading.algobulls import AlgoBullsConnection\n```", "```py\n>>> algobulls_connection = AlgoBullsConnection()\n```", "```py\n>>> algobulls_connection.get_authorization_url()\n```", "```py\nPlease login to this URL with your AlgoBulls credentials and get your developer access token: https://app.algobulls.com/user/login\n'https://app.algobulls.com/user/login'\n```", "```py\n>>> algobulls_connection.set_access_token(\n                    '80b7a69b168c5b3f15d56688841a8f2da5e2ab2c')\n```", "```py\n>>> all_strategies = algobulls_connection.get_all_strategies()\n>>> all_strategies\n```", "```py\n>>> strategy_code1 = all_strategies.iloc[0]['strategyCode']\n>>> strategy_code1\n```", "```py\n'49287246f9704bbcbad76ade9e2091d9'\n```", "```py\n>>> strategy_details1 = \\\n         algobulls_connection.get_strategy_details(strategy_code1)\n>>> print(strategy_details1)\n```", "```py\nclass StrategyEMARegularOrder(StrategyBase):\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n        self.timeperiod1 = self.strategy_parameters['timeperiod1']\n        self.timeperiod2 = self.strategy_parameters['timeperiod2']\n\n        self.main_order = None\n\n    def initialize(self):\n        self.main_order = {}\n\n    @staticmethod\n    def name():\n        return 'EMA Regular Order Strategy'\n    ....\n    def strategy_exit_position(self, candle, instrument, \n                               sideband_info):\n        if sideband_info['action'] == 'EXIT':\n            self.main_order[instrument].exit_position()\n            self.main_order[instrument] = None\n            return True\n\n        return False\n```", "```py\n>>> from datetime import time\n>>> from pyalgotrading.constants import *\n```", "```py\n>>> instruments = algobulls_connection.search_instrument('SBIN')\n>>> instruments\n```", "```py\n[{'id': 7, 'value': 'NSE:SBIN'}]\n```", "```py\n>>> instrument = instruments[0]['value']\n>>> instrument\n```", "```py\n'NSE:SBIN'\n```", "```py\n>>> algobulls_connection.realtrade(\n        strategy_code=strategy_code1, \n        start_time=time(hour=9, minute=15), \n        end_time=time(hour=15, minute=30),\n        instrument=instrument, \n        lots=1,\n        strategy_parameters={\n            'timeperiod1': 5,\n            'timeperiod2': 12\n        }, \n        candle_interval=CandleInterval.MINUTES_15)\n```", "```py\nSetting Strategy Config... Success.\nSubmitting REALTRADING job... Success.\n```", "```py\n>>> algobulls_connection.get_realtrading_job_status(strategy_code1)\n```", "```py\n{'data': 'STARTING'}\n```", "```py\n>>> algobulls_connection.get_realtrading_job_status(strategy_code1)\n```", "```py\n{'data': 'STARTED'}\n```", "```py\n>>> algobulls_connection.stop_realtrading_job(strategy_code1)\n Stopping REALTRADING job... Success.\n```", "```py\n>>> algobulls_connection.get_realtrading_job_status(strategy_code1)\n{'data': 'STOPPING'}\n```", "```py\n>>> algobulls_connection.get_realtrading_job_status(strategy_code1)\n{'data': 'STOPPED'} \n```", "```py\n>>> logs = algobulls_connection.get_realtrading_logs(\n                                                strategy_code1)\n>>> print(logs)\n```", "```py\n[2020-07-09 09:12:25] Logs not available yet. Please retry in sometime.\n```", "```py\n>>> logs = algobulls_connection.get_realtrading_logs(\n                                                strategy_code1)\n>>> print(logs)\n```", "```py\nâ€¦\n########################################\n INITIALIZING ALGOBULLS CORE (v3.2.0)... \n########################################\n[2020-07-09 09:13:05] Welcome PUSHPAK MAHAVIR DAGADE!\n[2020-07-09 09:13:05] Reading strategy...\n[2020-07-09 09:13:05] STARTING ALGOBULLS CORE...\n...\n[2020-07-09 10:30:00] [CRITICAL] [order] [PLACING NEW ORDER] [2020-07-09 10:30:00] [2b079bc873f64f53a33f91b6ceec707b] [BUY] [NSE:SBIN] [QTY:1] [QTY PENDING: 1] [ENTRY PRICE: 194.7] [PRICE:None] [TRIGGER PRICE:None] [ORDER_TYPE_REGULAR] [ORDER_CODE_INTRADAY] [ORDER_VARIETY_MARKET] [ORDER_POSITION_ENTER]\n...\n[2020-07-09 15:30:00] [INFO] [clock] Candle generation has been stopped...\n[2020-07-09 15:30:00] [INFO] [tls] Received event END OF MARKET. Stopping Trading Core Engine...\n[2020-07-09 15:30:00] [INFO] [tls] Exiting all open positions with order code: ORDER_CODE_INTRADAY (if any)...\n[2020-07-09 15:30:00] [CRITICAL] [tls] [User: PUSHPAK MAHAVIR DAGADE] Trading session completed\n...\n```", "```py\n>>> algobulls_connection.get_realtrading_report_pnl_table(strategy_code1)\n```", "```py\n>>> algobulls_connection.get_realtrading_report_statistics(strategy_code1)\n```", "```py\n>>> from pyalgotrading.algobulls import AlgoBullsConnection\n```", "```py\n>>> algobulls_connection = AlgoBullsConnection()\n```", "```py\n>>> algobulls_connection.get_authorization_url()\n```", "```py\nPlease login to this URL with your AlgoBulls credentials and get your developer access token: https://app.algobulls.com/user/login\n'https://app.algobulls.com/user/login'\n```", "```py\n>>> algobulls_connection.set_access_token('\n                        80b7a69b168c5b3f15d56688841a8f2da5e2ab2c')\n```", "```py\n>>> all_strategies = algobulls_connection.get_all_strategies()\n>>> all_strategies\n```", "```py\n>>> strategy_code2 = all_strategies.iloc[1]['strategyCode']\n>>> strategy_code2\n```", "```py\n'49287246f9704bbcbad76ade9e2091d9'\n```", "```py\n>>> strategy_details2 = \\\n        algobulls_connection.get_strategy_details(strategy_code2)\n>>> print(strategy_details2)\n```", "```py\nclass StrategyMACDBracketOrder(StrategyBase):\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n        self.fastMA_period = \\\n            self.strategy_parameters['fastma_period']\n        self.slowMA_period = \\\n            self.strategy_parameters['slowma_period']\n        self.signal_period = \\\n            self.strategy_parameters['signal_period']\n        self.stoploss = \\\n            self.strategy_parameters['stoploss_trigger']\n        self.target = self.strategy_parameters['target_trigger']\n        self.trailing_stoploss = \\\n            self.strategy_parameters['trailing_stoploss_trigger']\n\n        self.main_order = None\n\n    def initialize(self):\n        self.main_order = {}\n\n    @staticmethod\n    def name():\n        return 'MACD Bracket Order Strategy'\n    ....\n    def strategy_exit_position(self, candle, instrument, \\\n                               sideband_info):\n        if sideband_info['action'] == 'EXIT':\n            self.main_order[instrument].exit_position()\n            self.main_order[instrument] = None\n            return True\n\n        return False\n```", "```py\n>>> from datetime import time\n>>> from pyalgotrading.constants import *\n```", "```py\n>>> instrument = algobulls_connection.search_instrument('\n                                                    TATASTEEL')\n>>> instrument\n```", "```py\n[{'id': 1, 'value': 'NSE:TATASTEEL'}]\n```", "```py\n>>> instrument = instrument[0]['value']\n>>> instrument\n```", "```py\n'NSE:TATASTEEL'\n```", "```py\n>>> algobulls_connection.realtrade(\n        strategy_code=strategy_code2,     \n        start_time=time(hour=9, minute=15),\n        end_time=time(hour=15, minute=30),\n        instrument=instrument,\n        lots=1,\n        strategy_parameters={\n            'fastma_period': 26, \n            'slowma_period': 6, \n            'signal_period': 9,\n            'target_trigger': 0.01, \n            'stoploss_trigger': 0.01, \n            'trailing_stoploss_trigger': 1\n        },\n        candle_interval=CandleInterval.MINUTES_15)\n```", "```py\nSetting Strategy Config... Success.\nSubmitting REALTRADING job... Success.\n```", "```py\n>>> algobulls_connection.get_realtrading_job_status(strategy_code2)\n{'data': 'STARTING'} \n```", "```py\n>>> algobulls_connection.get_realtrading_job_status(strategy_code2)\n{'data': 'STARTED'}\n```", "```py\n>>> algobulls_connection.stop_realtrading_job(strategy_code2)\n Stopping REALTRADING job... Success.\n```", "```py\n>>> algobulls_connection.get_realtrading_job_status(strategy_code2)\n{'data': 'STOPPING'}\n```", "```py\n>>> algobulls_connection.get_realtrading_job_status(strategy_code2)\n{'data': 'STOPPED'}\n```", "```py\n>>> logs = algobulls_connection.get_realtrading_logs(\n                                                strategy_code2)\n>>> print(logs)\n```", "```py\n[2020-07-09 09:13:45] Logs not available yet. Please retry in sometime.\n```", "```py\n>>> logs = algobulls_connection.get_realtrading_logs(\n                                                strategy_code2)\n>>> print(logs)\n```", "```py\n...\n########################################\n INITIALIZING ALGOBULLS CORE (v3.2.0)... \n########################################\n[2020-07-09 09:14:09] Welcome PUSHPAK MAHAVIR DAGADE!\n[2020-07-09 09:14:09] Reading strategy...\n[2020-07-09 09:14:09] STARTING ALGOBULLS CORE...\n...\n[2020-07-09 09:45:00] [CRITICAL] [order] [PLACING NEW ORDER] [2020-07-09 09:45:00][577e6b4cb646463282ae98ec1c0e6c25] [BUY] [NSE:TATASTEEL] [QTY:1] [QTY PENDING: 1] [ENTRY PRICE: 345.0] [PRICE:345.0] [TRIGGER PRICE:None] [ORDER_TYPE_BRACKET] [ORDER_CODE_INTRADAY] [ORDER_VARIETY_LIMIT] [ORDER_POSITION_ENTER] [STOPLOSS TRIGGER:341.55] [TARGET TRIGGER:348.45] [TRAILING STOPLOSS TRIGGER:345.0]\n...\n[2020-07-09 15:30:00] [INFO] [clock] Candle generation has been stopped...\n[2020-07-09 15:30:00] [INFO] [tls] Received event END OF MARKET. Stopping Trading Core Engine...\n[2020-07-09 15:30:00] [INFO] [tls] Exiting all open positions with order code: ORDER_CODE_INTRADAY (if any)...\n[2020-07-09 15:30:00] [CRITICAL] [tls] [User: PUSHPAK MAHAVIR DAGADE] Trading session completed\n...\n```", "```py\n>>> algobulls_connection.get_realtrading_report_pnl_table(strategy_code2)\n```", "```py\n>>> algobulls_connection.get_realtrading_report_statistics(strategy_code2)\n```"]