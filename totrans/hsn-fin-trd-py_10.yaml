- en: '*Chapter 7*: Financial Market Data Access in Python'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter outlines several key market data sources, ranging from free to
    paid data sources. A more complete list of available resources can be obtained
    from [https://github.com/wilsonfreitas/awesome-quant#data-sources](https://github.com/wilsonfreitas/awesome-quant#data-sources).
  prefs: []
  type: TYPE_NORMAL
- en: The quality of algorithmic trading models' signals fundamentally depends on
    the quality of market data being analyzed. Has the market data been cleaned of
    erroneous records and is there a quality assurance process in place to rectify
    any errors as they occur? If there is a problem with the market data feed, how
    quickly can the data be corrected?
  prefs: []
  type: TYPE_NORMAL
- en: The following free data sources described are suitable for learning purposes,
    but not fit for purpose as regards professional trading – there may be a very
    low limit on the number of API calls per day, the APIs may be slow, and there
    is no support and no rectification of the data should it not be correct. In addition,
    when using any of these data providers, be aware of their terms of use.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to cover the following key topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the yahoofinancials Python library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the pandas_datareader Python library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the Quandl data source
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the IEX Cloud data source
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the MarketStack data source
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Python code used in this chapter is available in the `Chapter07/marketdata.ipynb`
    notebook in the book's code repository.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the yahoofinancials Python library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The yahoofinancials Python library provides free access to the market data available
    from Yahoo Finance, whose provider is ICE Data Services. The library repository
    is available at [https://github.com/JECSand/yahoofinancials](https://github.com/JECSand/yahoofinancials).
  prefs: []
  type: TYPE_NORMAL
- en: 'It provides access to historical and, for most assets, also real-time pricing
    data for the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Currencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Indexes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stocks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Commodities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ETFs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mutual funds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: US Treasuries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cryptocurrencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To find the right ticker, use the lookup at [https://finance.yahoo.com/](https://finance.yahoo.com/).
  prefs: []
  type: TYPE_NORMAL
- en: There is a very strict limit on the number of calls per hour per IP address
    (about 1,000-2,000 requests per hour per IP address) and once you reach it, your
    IP address gets blocked for an extensive period of time. In addition, the functionality
    provided constantly changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Installation of the library is standard:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Access to the data is very straightforward, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The library supports both single-ticker retrieval and multiple-tickers retrieval.
  prefs: []
  type: TYPE_NORMAL
- en: Single-ticker retrieval
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps regarding single-ticker retrieval are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we define the `AAPL` ticker object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, there is the issue of historical data retrieval. Let''s print all historical
    daily price data for the year of 2020:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output starts with the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can change the frequency from `'daily'` to `'weekly'` or `'monthly'`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, let''s inspect the weekly data results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we check the monthly data results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The nested JSON can easily be converted to a pandas'' DataFrame:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 7.1 – Nested JSON converted to a pandas'' DataFrame](img/Figure_7.1_B15029.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.1 – Nested JSON converted to a pandas' DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: Notice the two columns – `adjclose` and `close`. The adjusted close is the close
    price adjusted for dividends, stock splits, and other corporate events.
  prefs: []
  type: TYPE_NORMAL
- en: Real-time data retrieval
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To get real-time stock price data, use the `get_stock_price_data()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Real-time data for free data sources is usually delayed by 10 to 30 minutes.
  prefs: []
  type: TYPE_NORMAL
- en: 'As regards the retrieval of financial statements, let''s get financial statements
    for Apple''s stock – the income statement, cash flow, and balance sheet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: There are multiple uses of financial statement data in relation to algorithmic
    trading. First, it can be used to determine the totality of stocks to trade in.
    Second, the creation of algorithmic trading signals from non-price data adds additional
    value.
  prefs: []
  type: TYPE_NORMAL
- en: Summary data retrieval
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Summary data is accessible via the `get_summary_data` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Summary data retrieved using this function is a summary of the financial statements
    function and the real-time data function.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple-tickers retrieval
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Multiple-tickers retrieval, also known as **a bulk retrieval**, is far more
    efficient and faster than single-ticker retrieval since most of the time associated
    with each download request is spent on establishing and closing the network connection.
  prefs: []
  type: TYPE_NORMAL
- en: Historical data retrieval
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s retrieve the historical prices for these FX pairs: `EURCHF`, `USDEUR`,
    and `GBPUSD`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: We see that the historical data does not contain any data from the financial
    statements.
  prefs: []
  type: TYPE_NORMAL
- en: 'The full list of methods supported by the library at the time of writing this
    book is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`get_200day_moving_avg()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_50day_moving_avg()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_annual_avg_div_rate()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_annual_avg_div_yield()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_beta()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_book_value()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_cost_of_revenue()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_currency()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_current_change()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_current_percent_change()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_current_price()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_current_volume()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_daily_dividend_data(start_date, end_date)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_daily_high()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_daily_low()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_dividend_rate()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_dividend_yield()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_earnings_per_share()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_ebit()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_exdividend_date()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_financial_stmts(frequency, statement_type, reformat=True)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_five_yr_avg_div_yield()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_gross_profit()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_historical_price_data(start_date, end_date, time_interval)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_income_before_tax()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_income_tax_expense()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_interest_expense()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_key_statistics_data()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_market_cap()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_net_income()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_net_income_from_continuing_ops()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_num_shares_outstanding(price_type=''current'')`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_open_price()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_operating_income()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_payout_ratio()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_pe_ratio()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_prev_close_price()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_price_to_sales()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_research_and_development()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_stock_earnings_data(reformat=True)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_stock_exchange()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_stock_price_data(reformat=True)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_stock_quote_type_data()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_summary_data(reformat=True)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_ten_day_avg_daily_volume()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_three_month_avg_daily_volume()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_total_operating_expense()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_total_revenue()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_yearly_high()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_yearly_low()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will explore the `pandas_datareader` library in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the pandas_datareader Python library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`pandas_datareader` is one of the most advanced libraries for financial data
    and offers access to multiple data sources.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the data sources supported are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Yahoo Finance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Federal Reserve Bank of St Louis' FRED
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IEX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quandl
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kenneth French's data library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: World Bank
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OECD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eurostat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Econdb
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nasdaq Trader symbol definitions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to [https://pandas-datareader.readthedocs.io/en/latest/remote_data.html](https://pandas-datareader.readthedocs.io/en/latest/remote_data.html)
    for a full list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Installation is simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s now set up the basic data retrieval parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The general access method for downloading the data is `data.DataReader(ticker,
    data_source, start_date, end_date)`.
  prefs: []
  type: TYPE_NORMAL
- en: Access to Yahoo Finance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s download the last 10 years'' worth of Apple stock prices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The output is virtually identical to the output from the `yahoofinancials` library
    in the preceding section.
  prefs: []
  type: TYPE_NORMAL
- en: Access to EconDB
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The list of available tickers is available at [https://www.econdb.com/main-indicators](https://www.econdb.com/main-indicators).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s download the time series of monthly oil production in the US for the
    last 10 years:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Each data source has different output columns.
  prefs: []
  type: TYPE_NORMAL
- en: Access to the Federal Reserve Bank of St Louis' FRED
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The list of available data, along with tickers, can be inspected at [https://fred.stlouisfed.org/](https://fred.stlouisfed.org/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s download the last 10 years of real gross domestic product of the USA:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'We restricted the output to just two rows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s study 5 years of the 20-year constant maturity yields on U.S. government
    bonds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The Federal Reserve Bank of St Louis' FRED data is one of the cleanest data
    sources available, offering complimentary support.
  prefs: []
  type: TYPE_NORMAL
- en: Caching queries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the key advantages of the library is its implementation of caching the
    results of queries, thereby saving bandwidth, speeding up code execution, and
    preventing the banning of IPs due to the overuse of APIs.
  prefs: []
  type: TYPE_NORMAL
- en: 'By way of an example, let''s download the entire history of Apple stock:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s now access just one data point:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Caching can be enabled for all previous examples, too.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the Quandl data source
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Quandl is one of the largest repositories of economic/financial data on the
    internet. Its data sources can be accessed free of charge. It also offers premium
    data sources, for which there is a charge.
  prefs: []
  type: TYPE_NORMAL
- en: 'Installation is straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'To access the data, you have to provide an access key (apply for one at [https://quandl.com](https://quandl.com)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: To find a ticker and data source, use [https://www.quandl.com/search](https://www.quandl.com/search).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now download the `Monthly average consumer prices in metropolitan France
    - Apples (1 Kg); EUR` data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s now download Apple''s fundamental data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The difference between Yahoo and Quandl data is that the Quandl data is more
    reliable and more complete.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the IEX Cloud data source
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IEX Cloud is one of the commercial offerings. It offers a plan for individuals
    at USD 9 per month. It also offers a free plan, with a limit of 50,000 API calls
    per month.
  prefs: []
  type: TYPE_NORMAL
- en: 'The installation of the Python library is standard:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The full library's documentation is available at [https://addisonlynch.github.io/iexfinance/stable/index.html](https://addisonlynch.github.io/iexfinance/stable/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code is designed to retrieve all symbols:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code is designed to obtain Apple''s balance sheet (not available
    for free accounts):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code is designed to get the current price (not available for
    free accounts):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code is designed to get the sector performance report (not available
    for free accounts):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code is designed to get historical market data for Apple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: We can see that each data source offers a slightly different set of output columns.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the MarketStack data source
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MarketStack offers an extensive database of real-time, intra-day, and historical
    market data across major global stock exchanges. It offers free access for up
    to 1,000 monthly API requests.
  prefs: []
  type: TYPE_NORMAL
- en: While there is no official MarketStack Python library, the REST JSON API provides
    comfortable access to all its data in Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s download the adjusted close data for Apple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s now download all tickers on the Nasdaq stock exchange:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The ticket universe retrieval function is one of the most valuable functions
    of MarketStack. One of the first steps for all backtesting is determining the
    universe (that is, the complete list) of the stocks to trade. Then, you restrict
    yourself to a subset of that list, for example, by trading only stocks with certain
    trends, or certain volumes.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have outlined different ways to obtain financial and economic
    data in Python. In practice, you usually use multiple data sources at the same
    time. We explored the `yahoofinancials` Python library and saw single- and multiple-tickers
    retrievals. We then explored the `pandas_datareader` Python library to access
    Yahoo Finance, EconDB, and Fed’s Fred data and cache queries. We then explored
    the Quandl, IEX Cloud and MarketStack data sources.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we introduce the backtesting library, Zipline, as well
    as the trading portfolio performance and risk analysis library, PyFolio.
  prefs: []
  type: TYPE_NORMAL
