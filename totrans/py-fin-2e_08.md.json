["```py\nfrom matplotlib.finance import quotes_historical_yahoo_ochl as getData\nx = getData(\"IBM\",(2016,1,1),(2016,1,21),asobject=True, adjusted=True)\nprint(x[0:4])\n```", "```py\nimport pandas as pd\nGDP=pd.read_pickle(\"c:/temp/usGDPquarterly.pkl\")\nff=pd.read_pickle(\"c:/temp/ffMonthly.pkl\")\nprint(GDP.head())\nprint(ff.head())\n```", "```py\nimport pandas_datareader.data as web\nimport datetime\nticker='MSFT'\nbegdate = datetime.datetime(2012, 1, 2)\nenddate = datetime.datetime(2017, 1, 10)\na = web.DataReader(ticker, 'google',begdate,enddate)\nprint(a.head(3))\nprint(a.tail(2))\n```", "```py\nimport pandas_datareader.data as web\nticker='AMZN'\nprint(web.get_quote_yahoo(ticker))\n```", "```py\nimport pandas_datareader.data as web\nimport datetime\nbegdate = datetime.datetime(1900, 1, 1)\nenddate = datetime.datetime(2017, 1, 27)\nx= web.DataReader(\"GDP\", \"fred\", begdate,enddate)\nprint(x.head(2))\nprint(x.tail(3))\n```", "```py\nimport pandas as pd\nimport scipy as sp\nsp.random.seed(1257)\nmean=0.10\nstd=0.2\nddate = pd.date_range('1/1/2016', periods=252) \nn=len(ddate)\nrets=sp.random.normal(mean,std,n)\ndata = pd.DataFrame(rets, index=ddate,columns=['RET'])\nprint(data.head())\n```", "```py\n                 RET\n2016-01-01  0.431031\n2016-01-02  0.279193\n2016-01-03  0.002549\n2016-01-04  0.109546\n2016-01-05  0.068252\n```", "```py\nimport pandas as pd\nurl='http://canisius.edu/~yany/data/ibm.csv' \nx=pd.read_csv(url,index_\ncol=0,parse_dates=True)\nprint(x.head())\n```", "```py\n>>>x[0:1]\n```", "```py\n>>>x[0:1].index\n```", "```py\nfrom matplotlib.finance import quotes_historical_yahoo_ochl as getData\nx = getData(\"IBM\",(2016,1,1),(2016,1,21),asobject=True, adjusted=True)\nprint(x[0:4])\n```", "```py\n>>>x[0][0]\n  datetime.date(2016, 1, 4)\n>>>x[0][0].strftime(\"%Y\")\n '2016'\n```", "```py\nimport datetime\ntoday=datetime.date.today()\nyear=today.strftime(\"%Y\")\nyear2=today.strftime(\"%y\")\nmonth=today.strftime(\"%m\")\nday=today.strftime(\"%d\")\nprint(year,month,day,year2)\n('2017', '01', '24', '17')\n```", "```py\n>>>p=[1,1.1,0.9,1.05]\n```", "```py\n>>>print(p[:-1]) \n>>>print(p[1:]) \n[ 1\\. 1.1 0.9] \n[ 1.1 0.9 1.05]\n```", "```py\n>>>ret=(p[1:]-p[:-1])/p[:-1] \n>>>print(ret )\n[ 0.1 -0.18181818 0.16666667]\n```", "```py\n>>>ret=p[:-1]/p[1:]-1 \n>>>print(ret )\n[-0.09090909 0.22222222 -0.14285714] \n>>>\n```", "```py\nimport pandas as pd\nimport scipy as sp\np=[1,1.1,0.9,1.05] \na=pd.DataFrame({'Price':p})\na['Ret']=a['Price'].diff()/a['Price'].shift(1)\nprint(a)\n```", "```py\nPrice       Ret\n0   1.00       NaN\n1   1.10  0.100000\n2   0.90 -0.181818\n3   1.05  0.166667\n```", "```py\n>>>from matplotlib.finance import quotes_historical_yahoo_ochl as getData \n>>>ticker='IBM' \n>>>begdate=(2013,1,1) \n>>>enddate=(2013,11,9) \n>>>x =getData(ticker, begdate, enddate,asobject=True, adjusted=True) \n>>>ret=x.aclose[1:]/x.aclose[:-1]-1\n```", "```py\n>>>x.date[0:3] \narray([datetime.date(2013, 1, 2), datetime.date(2013, 1, 3), \ndatetime.date(2013, 1, 4)], dtype=object) \n>>>x.aclose[0:3] \narray([ 192.61, 191.55, 190.3 ]) \n>>>ret[0:2] \narray([-0.00550335, -0.00652571]) \n>>>(191.55-192.61)/192.61 \n-0.005503348735787354 \n>>>\n```", "```py\nfrom matplotlib.finance import quotes_historical_yahoo_ochl as getData\nimport numpy as np\nimport pandas as pd \n#\nticker='IBM' \nbegdate=(2013,1,1) \nenddate=(2013,11,9)\n#\nx = getData(ticker, begdate, enddate,asobject=True, adjusted=True)\nlogret = np.log(x.aclose[1:]/x.aclose[:-1])\nyyyymm=[]\nd0=x.date\n#\nfor i in range(0,np.size(logret)): \n    yyyymm.append(''.join([d0[i].strftime(\"%Y\"),d0[i].strftime(\"%m\")]))\n\ny=pd.DataFrame(logret,yyyymm,columns=['retMonthly']) \nretMonthly=y.groupby(y.index).sum()\n\nprint(retMonthly.head())\n```", "```py\nfrom matplotlib.finance import quotes_historical_yahoo_ochl as getData\nimport numpy as np \nimport pandas as pd \nticker='IBM' \nbegdate=(2016,1,2) \nenddate=(2017,1,9) \nx =getData(ticker, begdate, enddate,asobject=True, adjusted=True) \nmyName=ticker+'_adjClose'\nx2=pd.DataFrame(x['aclose'],x.date,columns=[myName]) \nff=pd.read_pickle('c:/temp/ffDaily.pkl') \nfinal=pd.merge(x2,ff,left_index=True,right_index=True)\nprint(final.head())\n```", "```py\n            IBM_adjClose  MKT_RF     SMB     HML   RF\n2016-01-04    130.959683 -0.0159 -0.0083  0.0053  0.0\n2016-01-05    130.863362  0.0012 -0.0021  0.0000  0.0\n2016-01-06    130.208315 -0.0135 -0.0013  0.0001  0.0\n2016-01-07    127.983111 -0.0244 -0.0028  0.0012  0.0\n2016-01-08    126.798264 -0.0111 -0.0047 -0.0004  0.0\n```", "```py\nimport pandas as pd \nimport numpy as np \nnn=np.nan\nx=pd.Series([1,2,nn,nn,6]) \nprint(x.interpolate())\n```", "```py\n0    1.000000\n1    2.000000\n2    3.333333\n3    4.666667\n4    6.000000\ndtype: float64\n```", "```py\n>>>import numpy as np\n>>>import pandas as pd\n>>>nn=np.nan\n>>>x=pd.Series([0.29,0.57,nn,1.34,nn,nn,nn,nn,2.7])\n>>>y=x.interpolate()\n>>>print(y)\n0 0.290\n1 0.570\n2 0.955\n3 1.340\n4 1.612\n5 1.884\n6 2.156\n7 2.428\n8 2.700\ndtype: float64\n>>>\n```", "```py\nimport pandas as pd\nimport pandas_datareader.data as web\nimport datetime\nbegdate = datetime.datetime(1900, 1, 1)\nenddate = datetime.datetime(2017, 1, 27)\nGDP= web.DataReader(\"GDP\", \"fred\", begdate,enddate)\nff=pd.read_pickle(\"c:/temp/ffMonthly.pkl\")\nfinal=pd.merge(ff,GDP,left_index=True,right_index=True,how='left') \ntt=final['GDP']\nGDP2=pd.Series(tt).interpolate()\nfinal['GDP2']=GDP2\n```", "```py\nprint(final.head())\nprint(final.tail(10))\n        MKT_RF     SMB     HML      RF      GDP  GDP2\n1926-07-01  0.0296 -0.0230 -0.0287  0.0022  NaN   NaN\n1926-08-01  0.0264 -0.0140  0.0419  0.0025  NaN   NaN\n1926-09-01  0.0036 -0.0132  0.0001  0.0023  NaN   NaN\n1926-10-01 -0.0324  0.0004  0.0051  0.0032  NaN   NaN\n1926-11-01  0.0253 -0.0020 -0.0035  0.0031  NaN   NaN\n            MKT_RF     SMB     HML      RF      GDP          GDP2\n2016-02-01 -0.0007  0.0083 -0.0048  0.0002      NaN  18337.766667\n2016-03-01  0.0696  0.0086  0.0111  0.0002      NaN  18393.933333\n2016-04-01  0.0092  0.0068  0.0325  0.0001  18450.1  18450.100000\n2016-05-01  0.0178 -0.0027 -0.0179  0.0001      NaN  18525.166667\n2016-06-01 -0.0005  0.0061 -0.0149  0.0002      NaN  18600.233333\n2016-07-01  0.0395  0.0290 -0.0098  0.0002  18675.3  18675.300000\n2016-08-01  0.0050  0.0094  0.0318  0.0002      NaN  18675.300000\n2016-09-01  0.0025  0.0200 -0.0134  0.0002      NaN  18675.300000\n2016-10-01 -0.0202 -0.0440  0.0415  0.0002      NaN  18675.300000\n2016-11-01  0.0486  0.0569  0.0844  0.0001      NaN  18675.300000\n2016-07-01  0.0395  0.0290 -0.0098  0.0002  18675.3  18675.300000\n2016-08-01  0.0050  0.0094  0.0318  0.0002      NaN  18675.300000\n2016-09-01  0.0025  0.0200 -0.0134  0.0002      NaN  18675.300000\n2016-10-01 -0.0202 -0.0440  0.0415  0.0002      NaN  18675.300000\n2016-11-01  0.0486  0.0569  0.0844  0.0001      NaN  18675.300000\n```", "```py\nimport pandas as pd\nimport pandas_datareader.data as web\nimport datetime\nimport scipy as sp\nimport numpy as np\ncycle=pd.read_pickle(\"c:/temp/businessCycle.pkl\")\nbegdate = datetime.datetime(1947, 1, 1)\nenddate = datetime.datetime(2017, 1, 27)\nGDP= web.DataReader(\"GDP\", \"fred\", begdate,enddate)\nfinal=pd.merge(cycle,GDP,left_index=True,right_index=True,how='right')\n```", "```py\nprint(cycle.head())\nprint(GDP.head())\nprint(final.head())\n          cycle\ndate             \n1926-10-01  1.000\n1926-11-01  0.846\n1926-12-01  0.692\n1927-01-01  0.538\n1927-02-01  0.385\n1947-07-01  0.135  250.1\n1947-10-01  0.297  260.3\n1948-01-01  0.459  266.2\n              GDP\nDATE             \n1947-01-01  243.1\n1947-04-01  246.3\n1947-07-01  250.1\n1947-10-01  260.3\n1948-01-01  266.2\n            cycle    GDP\nDATE                    \n1947-01-01 -0.189  243.1\n1947-04-01 -0.027  246.3\n```", "```py\nfrom scipy import stats \nimport scipy as sp\nsp.random.seed(12345)\nmean=0.1\nstd=0.2\nn=5000\nret=sp.random.normal(loc=0,scale=std,size=n)\nprint 'W-test, and P-value' \nprint(stats.shapiro(ret))\nW-test, and P-value\n(0.9995986223220825, 0.4129064679145813)\n```", "```py\nfrom scipy import stats\nimport scipy as sp\nsp.random.seed(12345)\nn=5000\nret=sp.random.uniform(size=n)\nprint 'W-test, and P-value' \nprint(stats.shapiro(ret)) \nW-test, and P-value\n(0.9537619352340698, 4.078975800593137e-37)\n```", "```py\nfrom scipy import stats \nfrom matplotlib.finance import quotes_historical_yahoo_ochl as getData \nimport numpy as np \n\nticker='IBM' \nbegdate=(2012,1,1) \nenddate=(2016,12,31) \n\np =getData(ticker, begdate, enddate,asobject=True, adjusted=True) \nret = (p.aclose[1:] - p.aclose[:-1])/p.aclose[1:] \nprint 'ticker=',ticker,'W-test, and P-value' \nprint(stats.shapiro(ret))\nticker= IBM W-test, and P-value\n(0.9213278889656067, 4.387053202198418e-25)\n```", "```py\nprint( stats.anderson(ret) )\nAndersonResult(statistic=12.613658863646833, critical_values=array([ 0.574,  0.654,  0.785,  0.915,  1.089]), significance_level=array([ 15\\. ,  10\\. ,   5\\. ,   2.5,   1\\. ]))\n```", "```py\n>>>from scipy import stats \n>>>help(stats.anderson)\nanderson(x, dist='norm')\nAnderson-Darling test for data coming from a particular distribution\ndist : {'norm','expon','logistic','gumbel','extreme1'}, optional the type of distribution to test against.  The default is 'norm'  and 'extreme1' is a synonym for 'gumbel'\n```", "```py\nfrom scipy import stats,random\nimport numpy as np\nnp.random.seed(12345)\nret = random.normal(0,1,500000)\nprint('mean    =', np.mean(ret))\nprint('std     =',np.std(ret))\nprint('skewness=',stats.skew(ret))\nprint('kurtosis=',stats.kurtosis(ret))\n```", "```py\nfrom scipy import stats\nfrom matplotlib.finance import quotes_historical_yahoo_ochl as getData\nimport numpy as np\nticker='^GSPC'\nbegdate=(1926,1,1)\nenddate=(2016,12,31)\np = getData(ticker, begdate, enddate,asobject=True, adjusted=True)\nret = p.aclose[1:]/p.aclose[:-1]-1\nprint( 'S&P500  n       =',len(ret))\nprint( 'S&P500  mean    =',round(np.mean(ret),8))\nprint('S&P500  std     =',round(np.std(ret),8))\nprint('S&P500  skewness=',round(stats.skew(ret),8))\nprint('S&P500  kurtosis=',round(stats.kurtosis(ret),8))\n```", "```py\n>>>from scipy import stats \n>>>import numpy as np\n>>>np.random.seed(1235) \n>>>x = stats.norm.rvs(size=10000) \n>>>print(\"T-value P-value (two-tail)\") \n>>>print(stats.ttest_1samp(x,0.5)) \n>>>print(stats.ttest_1samp(x,0)) \nT-value P-value (two-tail)\nTtest_1sampResult(statistic=-49.763471231428966, pvalue=0.0)\nTtest_1sampResult(statistic=-0.26310321925083019, pvalue=0.79247644375164861)\n```", "```py\nfrom scipy import stats \nimport scipy as sp\nfrom matplotlib.finance import quotes_historical_yahoo_ochl as getData \nticker='ibm' \nbegdate=(2013,1,1) \nenddate=(2013,12,31) \np=getData(ticker,begdate,enddate,asobject=True, adjusted=True) \nret=p.aclose[1:]/p.aclose[:-1]-1\nprint(' Mean T-value P-value ' ) \nprint(round(sp.mean(ret),5), stats.ttest_1samp(ret,0))\nMean T-value P-value \n(-4e-05, Ttest_1sampResult(statistic=-0.049698422671935881, pvalue=0.96040239593479948))\n```", "```py\nimport scipy as sp \nfrom matplotlib.finance import quotes_historical_yahoo_ochl as getData \nbegdate=(2012,1,1) \nenddate=(2016,12,31) \ndef ret_f(ticker,begdate,enddate): \n    p = getData(ticker,begdate, enddate,asobject=True,adjusted=True) \n    return p.aclose[1:]/p.aclose[:-1]-1\ny=ret_f('IBM',begdate,enddate) \nx=ret_f('DELL',begdate,enddate) \nprint(sp.stats.bartlett(x,y)) \nBartlettResult(statistic=108.07747537504794, pvalue=2.5847436899908763e-25)\n```", "```py\nfrom matplotlib.finance import quotes_historical_yahoo_ochl as getData \nimport numpy as np \nimport scipy as sp \nimport pandas as pd\nfrom datetime import datetime \nticker='IBM' \nbegdate=(1962,1,1) \nenddate=(2016,12,31) \nx =getData(ticker, begdate, enddate,asobject=True, adjusted=True) \nlogret = sp.log(x.aclose[1:]/x.aclose[:-1]) \ndate=[] \nd0=x.date \nfor i in range(0,sp.size(logret)): \n    t1=''.join([d0[i].strftime(\"%Y\"),d0[i].strftime(\"%m\"),\"01\"]) \n    date.append(datetime.strptime(t1,\"%Y%m%d\")) \n\ny=pd.DataFrame(logret,date,columns=['logret']) \nretM=y.groupby(y.index).sum() \nret_Jan=retM[retM.index.month==1] \nret_others=retM[retM.index.month!=1] \nprint(sp.stats.ttest_ind(ret_Jan.values,ret_others.values)) \nTtest_indResult(statistic=array([ 1.89876245]), pvalue=array([ 0.05803291]))\n>>>\n```", "```py\nimport numpy as np\nfrom datetime import datetime \nfrom dateutil.relativedelta import relativedelta \nfrom matplotlib.finance import quotes_historical_yahoo_ochl as getData\n#\nticker='IBM' \nenddate=datetime(2016,12,31)\n#\nbegdate=enddate-relativedelta(years=1) \np =getData(ticker, begdate, enddate,asobject=True, adjusted=True) \nx=p[-1] \ny=np.array(p.tolist())[:,-1] \nhigh=max(y) \nlow=min(y) \nprint(\" Today, Price High Low, % from low \") \nprint(x[0], x[-1], high, low, round((x[-1]-low)/(high-low)*100,2))\n```", "```py\nfrom matplotlib.finance import quotes_historical_yahoo_ochl as getData\nimport scipy as sp \nticker='IBM' \nbegdate=(2013,9,1) \nenddate=(2013,11,11) \ndata= getData(ticker, begdate, enddate,asobject=True, adjusted=True) \np=data.aclose \nd=sp.diff(p)\ncov_=sp.cov(d[:-1],d[1:]) \nif cov_[0,1]<0: \n    print(\"Roll spread for \", ticker, 'is', round(2*sp.sqrt(-cov_[0,1]),3)) \nelse: \n    print(\"Cov is positive for \",ticker, 'positive', round(cov_[0,1],3))\n```", "```py\n>>>x=np.array([1,2,3],dtype='float') \n>>>y=np.array([2,2,4],dtype='float') \n>>>np.divide(x,y) \narray([ 0.5 , 1\\. , 0.75]) \n>>>\n```", "```py\nimport numpy as np \nimport statsmodels.api as sm \nfrom matplotlib.finance import quotes_historical_yahoo_ochl as getData \nbegdate=(2013,10,1) \nenddate=(2013,10,30) \nticker='IBM'                   # or WMT  \ndata= getData(ticker, begdate, enddate,asobject=True, adjusted=True) \np=np.array(data.aclose) \ndollar_vol=np.array(data.volume*p) \nret=np.array((p[1:] - p[:-1])/p[1:]) \nilliq=np.mean(np.divide(abs(ret),dollar_vol[1:])) \nprint(\"Aminud illiq for =\",ticker,illiq) \n'Aminud illiq for =', 'IBM', 1.2117639237103875e-11)\n ('Aminud illiq for =', 'WMT', 1.5185471291382207e-11)\n```", "```py\nimport numpy as np \nfrom matplotlib.finance import quotes_historical_yahoo_ochl as getData\nimport numpy as np \nimport pandas as pd \nimport statsmodels.api as sm \nticker='IBM' \nbegdate=(2013,1,1) \nenddate=(2013,1,31) \n\ndata =getData(ticker, begdate, enddate,asobject=True, adjusted=True) \nret = data.aclose[1:]/data.aclose[:-1]-1 \ndollar_vol=np.array(data.aclose[1:])*np.array(data.volume[1:]) \nd0=data.date \n\ntt=pd.DataFrame(ret,index=d0[1:],columns=['ret']) \ntt2=pd.DataFrame(dollar_vol,index=d0[1:],columns=['dollar_vol']) \nff=pd.read_pickle('c:/temp/ffDaily.pkl') \ntt3=pd.merge(tt,tt2,left_index=True,right_index=True) \nfinal=pd.merge(tt3,ff,left_index=True,right_index=True) \ny=final.ret[1:]-final.RF[1:] \nx1=final.MKT_RF[:-1] \nx2=np.sign(np.array(final.ret[:-1]-final.RF[:-1]))*np.array(final.dollar_vol[:-1]) \nx3=[x1,x2] \nn=np.size(x3) \nx=np.reshape(x3,[n/2,2]) \nx=sm.add_constant(x) \nresults=sm.OLS(y,x).fit() \nprint(results.params)\n```", "```py\nconst    2.702020e-03\nx1      -1.484492e-13\nx2       6.390822e-12\ndtype: float64\n```", "```py\nfrom datetime import datetime \nimport numpy as np \nimport pandas as pd \nn = 252 \nnp.random.seed(12345) \nbegdate=datetime(2013, 1, 2) \ndateRange = pd.date_range(begdate, periods=n) \nx0= pd.DataFrame(np.random.randn(n, 1),columns=['ret'],index=dateRange) \ny0=pd.Series(np.random.randn(n), index=dateRange) \nprint pd.ols(y=y0, x=x0)\n```", "```py\nimport numpy as np \nimport pandas as pd \nimport statsmodels.api as sm\nfrom datetime import datetime \n#\nn = 252 \nnp.random.seed(12345) \nbegdate=datetime(2013, 1, 2) \ndateRange = pd.date_range(begdate, periods=n) \ndef makeDataFrame(): \n    data=pd.DataFrame(np.random.randn(n,7),columns=['A','B','C','D','E',' F','G'],\n    index=dateRange) \n    return data \n#\ndata = { 'A': makeDataFrame(), 'B': makeDataFrame(), 'C': makeDataFrame() }\nY = makeDataFrame() \nprint(pd.fama_macbeth(y=Y,x=data))\n```", "```py\nimport pandas as pd\nfrom scipy import stats \nimport statsmodels.formula.api as sm\nimport statsmodels.stats.stattools as tools \nfrom matplotlib.finance import quotes_historical_yahoo_ochl as getData\n#\nbegdate=(2012,1,1)\nenddate=(2016,12,31)\n#\ndef dailyRet(ticker,begdate,enddate):\n    p =getData(ticker, begdate, enddate,asobject=True,adjusted=True)\n    return p.aclose[1:]/p.aclose[:-1]-1\n\nretIBM=dailyRet('IBM',begdate,enddate)\nretMkt=dailyRet('^GSPC',begdate,enddate)\n\ndf = pd.DataFrame({\"Y\":retIBM, \"X\": retMkt})\nresult = sm.ols(formula=\"Y ~X\", data=df).fit()\nprint(result.params)\nresiduals=result.resid\nprint(\"Durbin Watson\")\nprint(tools.durbin_watson(residuals))\n```", "```py\nimport tempfile\nimport re, string \nimport pandas as pd \nticker='AAPL'                    # input a ticker \nf1=\"c:/temp/ttt.txt\"             # ttt will be replace with above sticker\nf2=f1.replace(\"ttt\",ticker) \noutfile=open(f2,\"w\") \n#path=\"http://www.google.com/finance/getprices?q=ttt&i=300&p=10d&f=d,o, h,l,c,v\" \npath=\"https://www.google.com/finance/getprices?q=ttt&i=300&p=10d&f=d,o,%20h,l,c,v\"\npath2=path.replace(\"ttt\",ticker) \ndf=pd.read_csv(path2,skiprows=8,header=None) \nfp = tempfile.TemporaryFile()\ndf.to_csv(fp) \nprint(df.head())\nfp.close()\n```", "```py\nEXCHANGE%3DNASDAQ\nMARKET_OPEN_MINUTE=570\nMARKET_CLOSE_MINUTE=960\nINTERVAL=300\nCOLUMNS=DATE,CLOSE,LOW,OPEN,VOLUME\nDATA=\nTIMEZONE_OFFSET=-300\na1484145000,118.75,118.7,118.74,415095\n1,119.1975,118.63,118.73,1000362\n2,119.22,119.05,119.2,661651\n3,118.96,118.91,119.225,487105\n4,118.91,118.84,118.97,399730\n5,118.985,118.82,118.91,334648\n```", "```py\nimport tempfile\nimport pandas as pd, numpy as np, datetime \nticker='AAPL' \npath=\"https://www.google.com/finance/getprices?q=ttt&i=300&p=10d&f=d,o,%20h,l,c,v\"\nx=np.array(pd.read_csv(path.replace('ttt',ticker),skiprows=7,header=None)) \n#\ndate=[] \nfor i in np.arange(0,len(x)): \n    if x[i][0][0]=='a': \n        t= datetime.datetime.fromtimestamp(int(x[i][0].replace('a',''))) \n        print ticker, t, x[i][1:] \n        date.append(t) \n    else: \n        date.append(t+datetime.timedelta(minutes =int(x[i][0]))) \n\nfinal=pd.DataFrame(x,index=date) \nfinal.columns=['a','CLOSE','LOW','OPEN','VOL'] \ndel final['a'] \nfp = tempfile.TemporaryFile()\n#final.to_csv('c:/temp/abc.csv'.replace('abc',ticker)) \nfinal.to_csv(fp) \nprint(final.head())\n```", "```py\n%run \"c:\\users\\yany\\appdata\\local\\temp\\tmppuuqpb.py\"\nAAPL 2017-01-11 09:30:00 [118.75 118.7 118.74 415095L]\nAAPL 2017-01-17 09:30:00 [118.27 118.22 118.34 665157L]\nAAPL 2017-01-23 09:30:00 [119.96 119.95 120.0 506837L]\n```", "```py\n>>>final.head() \n                       CLOSE     LOW     OPEN      VOL\n2017-01-11 09:30:00   118.75   118.7   118.74   415095\n2017-01-11 09:31:00  119.198  118.63   118.73  1000362\n2017-01-11 09:32:00   119.22  119.05    119.2   661651\n2017-01-11 09:33:00   118.96  118.91  119.225   487105\n2017-01-11 09:34:00   118.91  118.84   118.97   399730\n>>>final.tail() \n                      CLOSE      LOW     OPEN     VOL\n2017-01-23 20:05:00  121.86   121.78   121.79  343711\n2017-01-  23 20:06:00  121.84  121.815   121.86  162673\n2017-01-23 20:07:00  121.77   121.75   121.84  166523\n2017-01-23 20:08:00   121.7   121.69   121.78   68754\n2017-01-23 20:09:00  121.82  121.704  121.707  103578\n```", "```py\nimport pandas as pd\nimport pandas as pd\nimport scipy as sp\nx=pd.read_pickle(\"c:/temp/TORQct.pkl\")\nprint(x.head())\nprint(x.tail())\nprint(sp.shape(x))\n```", "```py\ndate      time  price  siz  g127  tseq cond ex\nsymbol                                                    \nAC      19901101  10:39:06   13.0  100     0  1587       N\nAC      19901101  10:39:36   13.0  100     0     0       M\nAC      19901101  10:39:38   13.0  100     0     0       M\nAC      19901101  10:39:41   13.0  100     0     0       M\nAC      19901101  10:41:38   13.0  300     0  1591       N\n            date      time   price    siz  g127    tseq cond ex\nsymbol                                                         \nZNT     19910131  11:03:31  12.375   1000     0  237884       N\nZNT     19910131  12:47:21  12.500   6800     0  237887       N\nZNT     19910131  13:16:59  12.500  10000     0  237889       N\nZNT     19910131  14:51:52  12.500    100     0  237891       N\nZNT     19910131  14:52:27  12.500   3600     0       0    Z  T\n(728849, 8)\n```", "```py\nimport numpy as np\nimport pandas as pd\nct=pd.read_pickle(\"c:/temp/TORQct.pkl\")\nprint(np.unique(np.array(ct.index)))\n```", "```py\n['AC' 'ACN' 'ACS' 'ADU' 'AL' 'ALL' 'ALX' 'AMD' 'AMN' 'AMO' 'AR' 'ARX' 'ATE'\n 'AYD' 'BA' 'BG' 'BMC' 'BRT' 'BZF' 'CAL' 'CL' 'CLE' 'CLF' 'CMH' 'CMI' 'CMY'\n 'COA' 'CP' 'CPC' 'CPY' 'CU' 'CUC' 'CUE' 'CYM' 'CYR' 'DBD' 'DCN' 'DI' 'DLT'\n 'DP' 'DSI' 'EFG' 'EHP' 'EKO' 'EMC' 'FBO' 'FDX' 'FFB' 'FLP' 'FMI' 'FNM'\n 'FOE' 'FPC' 'FPL' 'GBE' 'GE' 'GFB' 'GLX' 'GMH' 'GPI' 'GRH' 'HAN' 'HAT'\n 'HE' 'HF' 'HFI' 'HTR' 'IBM' 'ICM' 'IEI' 'IPT' 'IS' 'ITG' 'KFV' 'KR' 'KWD'\n 'LOG' 'LPX' 'LUK' 'MBK' 'MC' 'MCC' 'MCN' 'MDP' 'MNY' 'MO' 'MON' 'MRT'\n 'MTR' 'MX' 'NI' 'NIC' 'NNP' 'NSI' 'NSO' 'NSP' 'NT' 'OCQ' 'OEH' 'PCO' 'PEO'\n 'PH' 'PIM' 'PIR' 'PLP' 'PMI' 'POM' 'PPL' 'PRI' 'RDA' 'REC' 'RPS' 'SAH'\n 'SJI' 'SLB' 'SLT' 'SNT' 'SPF' 'SWY' 'T' 'TCI' 'TEK' 'TUG' 'TXI' 'UAM'\n 'UEP' 'UMG' 'URS' 'USH' 'UTD' 'UWR' 'VCC' 'VRC' 'W' 'WAE' 'WBN' 'WCS'\n 'WDG' 'WHX' 'WIN' 'XON' 'Y' 'ZIF' 'ZNT']\n```", "```py\nimport pandas as pd \ncq=pd.read_pickle(\"c:/temp/TORQcq.pkl\") \nprint(cq.head() )\n```", "```py\n           date      time     bid     ofr  bidsiz  ofrsiz  mode  qseq\nsymbol                                                                \nAC      19901101   9:30:44  12.875  13.125      32       5    10    50\nAC      19901101   9:30:47  12.750  13.250       1       1    12     0\nAC      19901101   9:30:51  12.750  13.250       1       1    12     0\nAC      19901101   9:30:52  12.750  13.250       1       1    12     0\nAC      19901101  10:40:13  12.750  13.125       2       2    12     0\n>>>cq.tail() \n            date      time     bid     ofr  bidsiz  ofrsiz  mode  qseq\nsymbol                                                                \nZNT     19910131  13:31:06  12.375  12.875       1       1    12     0\nZNT     1  9910131  13:31:06  12.375  12.875       1       1    12     0\nZNT     19910131  16:08:44  12.500  12.750       1       1     3    69\nZNT     19910131  16:08:49  12.375  12.875       1       1    12     0\nZNT     19910131  16:16:54  12.375  12.875       1       1     3     0\n```", "```py\n>>>x=cq[cq.index=='MO'] \n>>>x.head() \n            date     time     bid     ofr  bidsiz  ofrsiz  mode  qseq\nsymbol                                                               \nMO      19901101  9:30:33  47.000  47.125     100       4    10    50\nMO      19901101  9:30:35  46.750  47.375       1       1    12     0\nMO      19901101  9:30:38  46.875  47.750       1       1    12     0\nMO      19901101  9:30:40  46.875  47.250       1       1    12     0\nMO      19901101  9:30:47  47.000  47.125     100       3    12    51\n```", "```py\n>>>x.head().ofr-x.head().bid \nsymbol \nMO 0.125 \nMO 0.625 \nMO 0.875 \nMO 0.375 \nMO 0.125 \ndtype: float64 \n>>>\n```", "```py\nimport pandas as pd \nimport scipy as sp\ncq=pd.read_pickle('c:/temp/TORQcq.pkl') \nx=cq[cq.index=='MO'] \nspread=sp.mean(x.ofr-x.bid) \nrel_spread=sp.mean(2*(x.ofr-x.bid)/(x.ofr+x.bid)) \nprint(round(spread,5) )\nprint(round(rel_spread,5) )\n0.39671 \n0.00788\n```", "```py\nimport pandas as pd\nx=pd.read_pickle(\"c:/temp/crspInfo.pkl\")\nprint(x.head(3))\nprint(x.tail(2))\n```", "```py\n   PERMNO  PERMCO     CUSIP                       FIRMNAME TICKER  EXCHANGE  \\\n0   10001    7953  36720410                GAS NATURAL INC   EGAS         2   \n1   10002    7954  05978R10  BANCTRUST FINANCIAL GROUP INC   BTFG         3   \n2   10003    7957  39031810     GREAT COUNTRY BK ASONIA CT   GCBK         3   \n    BEGDATE   ENDDATE  \n0  19860131  20151231  \n1  19860131  20130228  \n2  19860131  19951229  \n\n       PERMNO  PERMCO     CUSIP               FIRMNAME TICKER  EXCHANGE  \\\n31216   93435   53452  82936G20  SINO CLEAN ENERGY INC   SCEI         3   \n31217   93436   53453  88160R10       TESLA MOTORS INC   TSLA         3   \n        BEGDATE   ENDDATE  \n31216  20100630  20120531  \n31217  20100630  20151231  \n```", "```py\nimport pandas as pd\nx=pd.read_pickle(\"c:/temp/indexMonthly.pkl\")\nprint(x.head())\n    DATE    VWRETD    VWRETX    EWRETD    EWRETX  SP500RET  SP500INDEX  \\\n0  19251231       NaN       NaN       NaN       NaN       NaN       12.46   \n1  19260130  0.000561 -0.001390  0.023174  0.021395  0.022472       12.74   \n2  19260227 -0.033040 -0.036580 -0.053510 -0.055540 -0.043950       12.18   \n3  19260331 -0.064000 -0.070020 -0.096820 -0.101400 -0.059110       11.46   \n4  19260430  0.037019  0.034031  0.032946  0.030121  0.022688       11.72   \n   TOTALVAL  TOTALN     USEDVAL  USEDN  \n0  27487487     503         NaN    NaN  \n1  27624240     506  27412916.0  496.0  \n2  26752064     514  27600952.0  500.0  \n3  25083173     519  26683758.0  507.0  \n4  25886743     521  24899755.0  512.0  \n```", "```py\nimport pandas_datareader.data as web\nimport datetime\nbegdate = datetime.datetime(1900, 1, 1)\nenddate = datetime.datetime(2017, 1, 27)\n\nx= web.DataReader(\"GDP\", \"fred\", begdate,enddate)\nx.to_pickle(\"c:/temp/ugGDPquarterly2.pkl\")\n```", "```py\nimport pandas as pd\na=pd.read_pickle(\"c:/temp/usGDPquarterly2.pkl\")\nprint(a.head())\nprint(a.tail())\n\n              GDP\nDATE             \n1947-01-01  243.1\n1947-04-01  246.3\n1947-07-01  250.1\n1947-10-01  260.3\n1948-01-01  266.2\n                GDP\nDATE               \n2015-07-01  18141.9\n2015-10-01  18222.8\n2016-01-01  18281.6\n2016-04-01  18450.1\n2016-07-01  18675.3\n```", "```py\nimport scipy.stats as stats\nalpha=0.05\ndfNumerator=5\ndfDenominator=10\nf=stats.f.ppf(q=1-alpha, dfn=dfNumerator, dfd=dfDenominator)\nprint(f)\n3.32583453041\n```", "```py\n    import pandas as pd\n    import scipy as sp\n    p=[1,1.1,0.9,1.05] \n    a=pd.DataFrame({'Price':p})\n    a['Ret']=a['Price'].diff()/a['Price'].shift(1)\n    print(a)\n       Price       Ret\n    0   1.00       NaN\n    1   1.10  0.100000\n    2   0.90 -0.181818\n    3   1.05  0.166667\n    ```", "```py\n    import scipy.stats as stats\n    alpha=0.05\n    dfNumerator=5\n    dfDenominator=10\n    stats.f.ppf(q=1-alpha, dfn=dfNumerator, dfd=dfDenominator)\n    ```", "```py\n    >>>import pandas as pd\n    >>>x=pd.read_pickle(\"c:/temp/tradingDaysMonthly.pk\")\n    >>>print(x.head())\n      tradingDays\n    0  1925-12-31\n    1  1926-01-30\n    2  1926-02-27\n    3  1926-03-31\n    4  1926-04-30\n    ```"]