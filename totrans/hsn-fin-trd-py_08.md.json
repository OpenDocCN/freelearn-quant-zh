["```py\nfrom statsmodels.graphics.api import qqplot\nimport numpy as np\nfig = qqplot(np.random.uniform(size=10000), line='s')\nfig.set_size_inches(12, 6)\n```", "```py\nfig = qqplot(np.random.exponential(size=10000), line='s')\nfig.set_size_inches(12, 6)\n```", "```py\nfig = qqplot(np.random.normal(size=10000), line='s')\nfig.set_size_inches(12, 6)\n```", "```py\nimport statsmodels.api as sm\nsm.tsa.datetools.dates_from_range('2010', length=12)\n```", "```py\n [datetime.datetime(2010, 12, 31, 0, 0),\n  datetime.datetime(2011, 12, 31, 0, 0),\n ...\n  datetime.datetime(2020, 12, 31, 0, 0),\n  datetime.datetime(2021, 12, 31, 0, 0)]\n```", "```py\nsm.tsa.datetools.dates_from_range('2010m1', length=120)\n```", "```py\n [datetime.datetime(2010, 1, 31, 0, 0),\n  datetime.datetime(2010, 2, 28, 0, 0),\n ...\n  datetime.datetime(2019, 11, 30, 0, 0),\n  datetime.datetime(2019, 12, 31, 0, 0)]\n```", "```py\nimport pandas as pd\nn_obs = 12 * 20\nlinear_trend = np.linspace(100, 200, num=n_obs)\ncycle = np.sin(linear_trend) * 10\nerror_noise = np.random.randn(n_obs)\ndataset = \\\npd.DataFrame(\n    linear_trend + cycle + error_noise, \n    index=sm.tsa.datetools.dates_from_range('2000m1', \n                                            length=n_obs), \n    columns=['Price'])\ndataset\n```", "```py\n                   Price\n2000-01-31     96.392059\n2000-02-29     99.659426\n       ...           ...\n2019-11-30    190.067039\n2019-12-31    190.676568\n240 rows × 1 columns\n```", "```py\nimport matplotlib.pyplot as plt\ndataset.plot(figsize=(12, 6), color='black')\n```", "```py\nhp_cycle, hp_trend = \\\nsm.tsa.filters.hpfilter(dataset['Price'], lamb=129600)\ndecomp = dataset[['Price']]\ndecomp['HP_Cycle'] = hp_cycle\ndecomp['HP_Trend'] = hp_trend\ndecomp\n```", "```py\n                   Price     HP_Cycle      HP_Trend\n2000-01-31     96.392059    -4.731153    101.123212\n2000-02-29     99.659426    -1.839262    101.498688\n       ...           ...          ...           ...\n2019-11-30    190.067039    -8.350371    198.417410\n2019-12-31    190.676568    -8.107701    198.784269\n240 rows × 3 columns\n```", "```py\nuc = sm.tsa.UnobservedComponents(dataset['Price'], \n                                 level='lltrend', \n                                 cycle=True, \n                                 stochastic_cycle=True)\nres_uc = uc.fit(method='powell', disp=True)\nres_uc.summary()\n```", "```py\nOptimization terminated successfully.\n         Current function value: 2.014160\n         Iterations: 6\n         Function evaluations: 491\nUnobserved Components Results\nDep. Variable:              Price No. Observations:    240\n        Model: local linear trend  Log Likelihood  -483.399\n               + stochastic cycle             AIC   976.797\n         Date:   Fri, 12 Jun 2020             BIC   994.116\n         Time:           08:09:46            HQIC  983.779\n       Sample:         01-31-2000        \n                     - 12-31-2019        \nCovariance Type:              opg        \n                   coef std err      z  P>|z| [0.025 0.975]\nsigma2.irregular  0.4962  0.214  2.315  0.021  0.076  0.916\nsigma2.level  6.954e-17  0.123  5.63e-16 1.000 -0.242 0.242\nsigma2.trend  2.009e-22 4.03e-05 4.98e-18 1.000 -7.91e-05  7.91e-05\nsigma2.cycle     1.5485  0.503   3.077  0.002  0.562  2.535\nfrequency.cycle  0.3491  0.013  27.768  0.000  0.324  0.374\nLjung-Box (Q):         347.56    Jarque-Bera (JB):    0.42\nProb(Q):                 0.00            Prob(JB):    0.81\nHeteroskedasticity (H):  0.93                Skew:   -0.09\nProb(H) (two-sided):     0.73            Kurtosis:    2.91\n```", "```py\ndecomp['UC_Cycle'] = res_uc.cycle.smoothed\ndecomp['UC_Trend'] = res_uc.level.smoothed\ndecomp['UC_Error'] = res_uc.resid\ndecomp\n```", "```py\n              ...        UC_Cycle    UC_Trend    UC_Error\n2000-01-31    ...       -3.358954   99.743814   96.392059\n2000-02-29    ...       -0.389834  100.163434    6.173967\n       ...    ...             ...         ...         ...\n2019-11-30    ...       -9.725420  199.613395    1.461497\n2019-12-31    ...       -9.403885  200.033015    0.306881\n240 rows × 6 columns\n```", "```py\nfrom statsmodels.tsa.seasonal import seasonal_decompose\ns_dc = seasonal_decompose(dataset['Price'], \n                          model='additive')\ndecomp['SDC_Cycle'] = s_dc.seasonal\ndecomp['SDC_Trend'] = s_dc.trend\ndecomp['SDC_Error'] = s_dc.resid\ndecomp[118:122]\n```", "```py\n              ...    SDC_Cycle     SDC_Trend    SDC_Error\n2009-11-30    ...     0.438633    146.387392    -8.620342\n2009-12-31    ...     0.315642    147.240112    -6.298764\n2010-01-31    ...     0.228229    148.384061    -3.538544\n2010-02-28    ...     0.005062    149.912202    -0.902362\n```", "```py\nplt.title('Trend components')\ndecomp['Price'].plot(figsize=(12, 6), color='black', \n                     linestyle='-', legend='Price')\ndecomp['HP_Trend'].plot(figsize=(12, 6), color='darkgray', \n                        linestyle='--', lw=2, \n                        legend='HP_Trend')\ndecomp['UC_Trend'].plot(figsize=(12, 6), color='black', \n                        linestyle=':', lw=2, \n                        legend='UC_Trend')\ndecomp['SDC_Trend'].plot(figsize=(12, 6), color='black', \n                         linestyle='-.', lw=2, \n                         legend='SDC_Trend')\n```", "```py\nplt.title('Cycle/Seasonal components')\ndecomp['HP_Cycle'].plot(figsize=(12, 6), color='darkgray', \n                        linestyle='--', lw=2, \n                        legend='HP_Cycle')\ndecomp['UC_Cycle'].plot(figsize=(12, 6), color='black', \n                        linestyle=':', lw=2, \n                        legend='UC_Cycle')\ndecomp['SDC_Cycle'].plot(figsize=(12, 6), color='black', \n                        linestyle='-.', lw=2, \n                        legend='SDC_Cycle')\n```", "```py\nplt.title('Error components')\nplt.ylim((-20, 20))\ndecomp['UC_Error'].plot(figsize=(12, 6), color='black', \n                        linestyle=':', lw=2, \n                        legend='UC_Error')\ndecomp['SDC_Error'].plot(figsize=(12, 6), color='black',\n                         linestyle='-.', lw=2, \n                         legend='SDC_Error')\n```", "```py\nfrom statsmodels.tsa.stattools import adfuller\nresult = adfuller(dataset['Price'])\nprint('Test Stat: {}\\np value: {}\\nLags: {}\\nNum \\\n       observations: {}'.format(result[0], result[1], \n                                result[2], result[3]))\n```", "```py\nTest Stat: 0.47882793726850786\np value: 0.9842151821849324\nLags: 14\nNum observations: 225\n```", "```py\nprice_diff = \\\n(dataset['Price'].shift(-1) - dataset['Price']).fillna(0)\nprice_diff\n```", "```py\n2000-01-31    4.951062\n2000-02-29    5.686832\n                 ...\n2019-11-30    3.350694\n2019-12-31    0.000000\nName: Price, Length: 240, dtype: float64\n```", "```py\nresult = adfuller(price_diff)\nprint('Test Stat: {}\\np value: {}\\nLags: {}\\nNum \\\n      observations: {}'.format(result[0], result[1], \n                               result[2], result[3]))\n```", "```py\nTest Stat: -7.295184662866956\np value: 1.3839111942229784e-10\nLags: 15\nNum observations: 224\n```", "```py\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfig = plot_acf(dataset['Price'], lags=100)\nfig.set_size_inches(12, 6)\n```", "```py\nfig = plot_pacf(dataset['Price'], lags=100)\nfig.set_size_inches(12, 6)\n```", "```py\nfrom statsmodels.tsa.arima.model import ARIMA\narima = ARIMA(dataset['Price'], order=(36,1,2))\nres_ar = arima.fit()\nres_ar.summary()\n```", "```py\nSARIMAX Results\nDep. Variable:           Price  No. Observations:       240\n        Model:  ARIMA(36, 1, 2)    Log Likelihood  -360.195\n         Date: Sat, 13 Jun 2020               AIC   798.391\n         Time:       09:18:46                 BIC   933.973\n       Sample:     01-31-2000                HQIC   853.027\n                 - 12-31-2019        \nCovariance Type:          opg        \n          coef  std err      z   P>|z|   [0.025    0.975]\nar.L1  -0.8184    0.821  -0.997  0.319   -2.428     0.791\nar.L2  -0.6716    0.495  -1.358  0.175   -1.641     0.298\n...\nar.L35  0.3125    0.206   1.514  0.130   -0.092     0.717\nar.L36  0.1370    0.161   0.851  0.395   -0.178     0.452\nma.L1  -0.0244    0.819  -0.030  0.976   -1.630     1.581\nma.L2   0.1694    0.454   0.373  0.709   -0.721     1.060\nsigma2  1.0911    0.144   7.586  0.000    0.809     1.373\n           Ljung-Box (Q):  13.99  Jarque-Bera (JB):  1.31\n                 Prob(Q):  1.00           Prob(JB):  0.52\n  Heteroskedasticity (H):  1.15               Skew:  0.09\n     Prob(H) (two-sided):  0.54           Kurtosis:  2.69\n```", "```py\ndataset['PredPrice'] = res_ar.predict(dataset.index[0], \n                                      dataset.index[-1])\ndataset\n```", "```py\n                  Price        PredPrice\n2000-01-31    95.317833         0.000000\n2000-02-29    100.268895       95.317901\n       ...           ...             ...\n2019-11-30    188.524009      188.944216\n2019-12-31    191.874704      190.614641\n240 rows × 2 columns\n```", "```py\nplt.ylim(70, 250)\ndataset['Price'].plot(figsize=(12, 6), color='darkgray',\n                      linestyle='-', lw=4, legend='Price')\ndataset['PredPrice'].plot(figsize=(12, 6), color='black', \n                          linestyle='-.', \n                          legend='PredPrice')\n```", "```py\nextended_dataset = pd.DataFrame(index=sm.tsa.datetools.dates_from_range('2020m1', length=48))\nextended_dataset = dataset.append(extended_dataset)\nextended_dataset\n                  Price        PredPrice\n2000-01-31    95.317833         0.000000\n2000-02-29    100.268895       95.317901\n       ...           ...             ...\n2023-11-30           NaN             NaN\n2023-12-31           NaN             NaN\n288 rows × 2 columns\n```", "```py\nextended_dataset['PredPrice'] = \\\nres_ar.predict(extended_dataset.index[0], \n               extended_dataset.index[-1])\nextended_dataset\n                  Price        PredPrice\n2000-01-31     95.317833        0.000000\n2000-02-29    100.268895       95.317901\n       ...           ...             ...\n2023-11-30           NaN      215.441777\n2023-12-31           NaN      220.337355\n288 rows × 2 columns\n```", "```py\nextended_dataset['Price'].iloc[-100:].plot(figsize=(12, 6), \n                                          color='darkgray', \n                                          linestyle='-', \n                                          lw=4, \n                                          legend='Price')\nextended_dataset['PredPrice'].iloc[-100:].plot(figsize=(12, 6), \n                                        color='black', \n                                        linestyle='-.', \n                                        legend='PredPrice')\n```", "```py\npip install pmdarima\n```", "```py\nimport pmdarima as pm\nmodel = pm.auto_arima(dataset['Price'], seasonal=True, \n                      stepwise=True, m=12)\nprint(model.summary())\nextended_dataset = \\\npd.DataFrame(\n    index=sm.tsa.datetools.dates_from_range('2020m1', \n    length=48))\nextended_dataset['PredPrice'], conf_int = \\\nmodel.predict(48, return_conf_int=True, alpha=0.05)\nplt.plot(dataset['Price'], c='blue')\nplt.plot(extended_dataset['PredPrice'], c='green')\nplt.show()\nprint(extended_dataset)\nprint(conf_int)\n```", "```py\n             PredPrice\n2020-01-31  194.939195\n       ...         ...\n2023-12-31  222.660698\n[48 rows x 1 columns]\n```", "```py\n[[192.39868933 197.4797007 ]\n [196.80033117 202.32443987]\n [201.6275806  207.60042584]\n...\n [212.45091331 225.44676173]\n [216.11548707 229.20590827]]\n```", "```py\nconda install -c conda-forge fbprophet\n```", "```py\nfrom fbprophet import Prophet\nprophet_dataset = \\\ndataset.rename(columns={'Price' : 'y'}).rename_axis('ds')\\\n.drop('PredPrice', 1).reset_index()\nprint(prophet_dataset)\nmodel = Prophet()\nmodel.fit(prophet_dataset)\ndf_forecast = model.make_future_dataframe(periods=48, \n                                          freq='M')\ndf_forecast = model.predict(df_forecast)\nprint(df_forecast[['ds', 'yhat', 'yhat_lower', \n                   'yhat_upper']].tail())\nmodel.plot(df_forecast, xlabel='Date', ylabel='Value')\nmodel.plot_components(df_forecast)\n```", "```py\nimport numpy as np\nimport pandas as pd\ndf = pd.DataFrame(index=pd.date_range('2000', '2020'))\ndf['BookPressure'] = np.random.randn(len(df)) * 2\ndf['TradePressure'] = np.random.randn(len(df)) * 100\ndf['RelativeValue'] = np.random.randn(len(df)) * 50\ndf['Microstructure'] = np.random.randn(len(df)) * 10\ntrue_coefficients = np.random.randint(low=-100, high=101,\n                                      size=4) / 10\ndf['PriceChange'] = ((df['BookPressure'] * true_coefficients[0])\n+ (df['TradePressure'] * true_coefficients[1])\n+ (df['RelativeValue'] * true_coefficients[2])\n+ (df['Microstructure'] * true_coefficients[3])\n+ (np.random.randn(len(df)) * 200))\ndf['Price'] = df['PriceChange'].cumsum(0) + 100000\n```", "```py\ntrue_coefficients\narray([10\\. ,  6.2, -0.9,  5\\. ])\n```", "```py\nDf\n            BookPressure  TradePressure  RelativeValue  Microstructure  PriceChange  Price\n2000-01-01  4.545869  -2.335894  5.953205  -15.025576  -263.749500  99736.250500\n2000-01-02  -0.302344  -186.764283  9.150213  13.795346  -758.298833  98977.951667\n...    ...      ...      ...      ...      ...      ...\n2019-12-31  -1.890265  -113.704752  60.258456  12.229772  -295.295108  182827.332185\n2020-01-01  1.657811  -77.354049  -39.090108  -3.294086  -204.576735  182622.755450\n7306 rows × 6 columns\n```", "```py\ndf['Price'].plot(figsize=(12, 6), color='black',\n                 legend='Price')\n```", "```py\npd.plotting.scatter_matrix(df.drop('Price', axis=1), \n                           color='black', alpha=0.2, \n                           grid=True, diagonal='kde', \n                           figsize=(10, 10))\n```", "```py\nfeatures = df[['BookPressure', 'TradePressure', \n               'RelativeValue', 'Microstructure']]\ntarget = df['PriceChange']\n```", "```py\nfrom sklearn.linear_model import RidgeCV\nridge = RidgeCV()\nridge.fit(features, target)\n```", "```py\nRidgeCV(alphas=array([ 0.1,  1\\. , 10\\. ]), cv=None,\n                     fit_intercept=True, gcv_mode=None, \n                     normalize=False, scoring=None, \n                     store_cv_values=False)\n```", "```py\ntrue_coefficients, ridge.coef_\n```", "```py\n(array([10\\. ,  6.2, -0.9,  5\\. ]),\n array([11.21856334, 6.20641632, -0.93444009, 4.94581522]))\n```", "```py\nridge.score(features, target)\n```", "```py\n0.9076861352499385\n```", "```py\ndf['PredPrice'] = \\\nridge.predict(features).cumsum(0) + 100000; df\n```", "```py\n            ...         Price       PredPrice\n2000-01-01  ...  99736.250500    99961.011495\n2000-01-02  ...  98977.951667    98862.549185\n    ...     ...           ...             ...\n2019-12-31  ...  182827.332185  183059.625653\n2020-01-01  ...  182622.755450  182622.755450\n7306 rows × 7 columns\n```", "```py\ndf['Price'].plot(figsize=(12, 6), color='gray', \n                 linestyle='--', legend='Price')\ndf['PredPrice'].plot(figsize=(12, 6), color='black', \n                     linestyle='-.', legend='PredPrice')\n```", "```py\ndf['Price'].loc['2010-01-01':'2010-03-31']\\\n.plot(figsize=(12, 6), color='darkgray', linestyle='-', \n      legend='Price')\ndf['PredPrice'].loc['2010-01-01':'2010-03-31']\\\n.plot(figsize=(12, 6), color='black', linestyle='-.', \n      legend='PredPrice')\n```", "```py\ndf['Errors'] = df['Price'] - df['PredPrice']\ndf['Errors'].plot(figsize=(12, 6), kind='kde', \n                  color='black', legend='Errors')\n```", "```py\ntarget_discrete = pd.cut(target, bins=5, \n                         labels = \\\n                         [-2, -1, 0, 1, 2]).astype(int);\ntarget_discrete\n```", "```py\n2000-01-01    0\n2000-01-02   -1\n            ...\n2019-12-28   -1\n2019-12-29    0\n2019-12-30    0\n2019-12-31    0\n2020-01-01    0\nFreq: D, Name: PriceChange, Length: 7306, dtype: int64\n```", "```py\ntarget_discrete.plot(figsize=(12, 6), kind='hist', \n                     color='black')\n```", "```py\nfrom sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(max_depth=5)\nrf.fit(features, target_discrete)\n```", "```py\nRandomForestClassifier(\n        bootstrap=True, ccp_alpha=0.0, class_weight=None,\n        criterion='gini', max_depth=5, max_features='auto',\n        max_leaf_nodes=None, max_samples=None,\n        min_impurity_decrease=0.0, min_impurity_split=None,\n        min_samples_leaf=1, min_samples_split=2,\n        min_weight_fraction_leaf=0.0, n_estimators=100,\n        n_jobs=None, oob_score=False, random_state=None,\n        verbose=0, warm_start=False)\n```", "```py\nrf.score(features, target_discrete)\n```", "```py\n0.835340815767862\n```", "```py\ndf['DiscretePriceChange'] = target_discrete\ndf['PredDiscretePriceChange'] = rf.predict(features)\ndf\n```", "```py\n            ... DiscretePriceChange PredDiscretePriceChange\n2000-01-01  ...                   0                       0\n2000-01-02  ...                  -1                      -1\n       ...  ...                 ...                     ...\n2019-12-31  ...                   0                      -1\n2020-01-01  ...                   0                      -1\n7306 rows × 10 columns\n```", "```py\ndf['DiscretePriceChange'].loc['2010-01-01':'2010-03-31'].plot(figsize=(12, 6), color='darkgray', linestyle='-', legend='DiscretePriceChange')\ndf['PredDiscretePriceChange'].loc['2010-01-01':'2010-03-31'].plot(figsize=(12, 6), color='black', linestyle='-.', legend='PredDiscretePriceChange')\n```", "```py\ndf['ClassificationErrors'] = \\\ndf['DiscretePriceChange'] - df['PredDiscretePriceChange']\ndf['ClassificationErrors'].plot(figsize=(12, 6), \n                             kind='kde', color='black', \n                             legend='ClassificationErrors')\n```"]