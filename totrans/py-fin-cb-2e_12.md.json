["```py\n    import pandas as pd\n    import yfinance as yf\n    import numpy as np \n    ```", "```py\n    df = yf.download(\"AAPL\",\n                     start=\"2016-01-01\",\n                     end=\"2021-12-31\",\n                     progress=False)\n    df = df[[\"Adj Close\"]] \n    ```", "```py\n    df[\"log_rtn\"] = df[\"Adj Close\"].apply(np.log).diff(1)\n    df[\"sma_20\"] = df[\"Adj Close\"].rolling(window=20).mean() \n    ```", "```py\n    df[\"position\"] = (df[\"Adj Close\"] > df[\"sma_20\"]).astype(int) \n    ```", "```py\n    sum((df[\"position\"] == 1) & (df[\"position\"].shift(1) == 0)) \n    ```", "```py\n    fig, ax = plt.subplots(2, sharex=True)\n    df.loc[\"2021\", [\"Adj Close\", \"sma_20\"]].plot(ax=ax[0])\n    df.loc[\"2021\", \"position\"].plot(ax=ax[1])\n    ax[0].set_title(\"Preview of our strategy in 2021\") \n    ```", "```py\n    df[\"strategy_rtn\"] = df[\"position\"].shift(1) * df[\"log_rtn\"]\n    df[\"strategy_rtn_cum\"] = (\n        df[\"strategy_rtn\"].cumsum().apply(np.exp)\n    ) \n    ```", "```py\n    df[\"bh_rtn_cum\"] = df[\"log_rtn\"].cumsum().apply(np.exp) \n    ```", "```py\n    (\n        df[[\"bh_rtn_cum\", \"strategy_rtn_cum\"]]\n        .plot(title=\"Cumulative returns\")\n    ) \n    ```", "```py\n    TRANSACTION_COST = 0.01\n    df[\"tc\"] = df[\"position\"].diff(1).abs() * TRANSACTION_COST \n    ```", "```py\n    df[\"strategy_rtn_cum_tc\"] = (\n        (df[\"strategy_rtn\"] - df[\"tc\"]).cumsum().apply(np.exp)\n    ) \n    ```", "```py\n    STRATEGY_COLS = [\"bh_rtn_cum\", \"strategy_rtn_cum\", \n                     \"strategy_rtn_cum_tc\"]\n    (\n        df\n        .loc[:, STRATEGY_COLS]\n        .plot(title=\"Cumulative returns\")\n    ) \n    ```", "```py\npip install git+https://github.com/mementum/backtrader.git#egg=backtrader \n```", "```py\n    from datetime import datetime\n    import backtrader as bt\n    from backtrader_strategies.strategy_utils import * \n    ```", "```py\n    data = bt.feeds.YahooFinanceData(dataname=\"AAPL\",\n                                     fromdate=datetime(2021, 1, 1),\n                                     todate=datetime(2021, 12, 31)) \n    ```", "```py\n    class  SmaStrategy(bt.Strategy):\n        params = ((\"ma_period\", 20), )\n        def  __init__(self):\n            # some code\n\n        def  log(self, txt):\n            # some code\n        def  notify_order(self, order):\n            # some code\n        def  notify_trade(self, trade):\n            # some code\n        def  next(self):\n            # some code\n        def  start(self):\n            # some code\n        def  stop(self):\n            # some code \n    ```", "```py\n        def  __init__(self):\n            # keep track of close price in the series\n            self.data_close = self.datas[0].close\n            # keep track of pending orders\n            self.order = None\n            # add a simple moving average indicator\n            self.sma = bt.ind.SMA(self.datas[0],\n                                  period=self.params.ma_period) \n        ```", "```py\n        def  log(self, txt):\n            dt = self.datas[0].datetime.date(0).isoformat()\n            print(f\"{dt}: {txt}\") \n        ```", "```py\n        def  notify_order(self, order):\n            if order.status in [order.Submitted, order.Accepted]:\n                # order already submitted/accepted\n         # no action required\n                return\n            # report executed order\n            if order.status in [order.Completed]:\n                direction = \"b\" if order.isbuy() else \"s\"\n                log_str = get_action_log_string(\n                    dir=direction,\n                    action=\"e\",\n                    price=order.executed.price,\n                    size=order.executed.size,\n                    cost=order.executed.value,\n                    commission=order.executed.comm\n                )\n                self.log(log_str)\n            # report failed order\n            elif order.status in [order.Canceled, order.Margin,\n                                  order.Rejected]:\n                self.log(\"Order Failed\")\n            # reset order -> no pending order\n            self.order = None \n        ```", "```py\n        def  notify_trade(self, trade): \n            if not trade.isclosed: \n                return \n\n            self.log( \n                get_result_log_string(\n                    gross=trade.pnl, net=trade.pnlcomm\n                ) \n            ) \n        ```", "```py\n        def  next(self):\n            # do nothing if an order is pending\n            if self.order:\n                return\n\n            # check if there is already a position\n            if not self.position:\n                # buy condition\n                if self.data_close[0] > self.sma[0]:\n                    self.log(\n                        get_action_log_string(\n                            \"b\", \"c\", self.data_close[0], 1\n                        )\n                    )\n                    self.order = self.buy()\n            else:\n                # sell condition\n                if self.data_close[0] < self.sma[0]:\n                    self.log(\n                        get_action_log_string(\n                            \"s\", \"c\", self.data_close[0], 1\n                        )\n                    )      \n                    self.order = self.sell() \n        ```", "```py\n        def  start(self):\n            print(f\"Initial Portfolio Value: {self.broker.get_value():.2f}\")\n        def  stop(self):\n            print(f\"Final Portfolio Value: {self.broker.get_value():.2f}\") \n        ```", "```py\n    cerebro = bt.Cerebro(stdstats=False)\n    cerebro.adddata(data)\n    cerebro.broker.setcash(1000.0)\n    cerebro.addstrategy(SmaStrategy)\n    cerebro.addobserver(MyBuySell)\n    cerebro.addobserver(bt.observers.Value) \n    ```", "```py\n    cerebro.run() \n    ```", "```py\n    Initial Portfolio Value: 1000.00\n    2021-02-01: BUY CREATED - Price: 133.15, Size: 1.00\n    2021-02-02: BUY EXECUTED - Price: 134.73, Size: 1.00, Cost: 134.73, Commission: 0.00\n    2021-02-11: SELL CREATED - Price: 134.33, Size: 1.00\n    2021-02-12: SELL EXECUTED - Price: 133.56, Size: -1.00, Cost: 134.73, Commission: 0.00\n    2021-02-12: OPERATION RESULT - Gross: -1.17, Net: -1.17\n    2021-03-16: BUY CREATED - Price: 124.83, Size: 1.00\n    2021-03-17: BUY EXECUTED - Price: 123.32, Size: 1.00, Cost: 123.32, Commission: 0.00\n    ...\n    2021-11-11: OPERATION RESULT - Gross: 5.39, Net: 5.39\n    2021-11-12: BUY CREATED - Price: 149.80, Size: 1.00\n    2021-11-15: BUY EXECUTED - Price: 150.18, Size: 1.00, Cost: 150.18, Commission: 0.00\n    Final Portfolio Value: 1048.01 \n    ```", "```py\n    cerebro.plot(iplot=True, volume=False) \n    ```", "```py\n    cerebro.optstrategy(SmaStrategy, ma_period=range(10, 31)) \n    ```", "```py\n    cerebro.run(maxcpus=4) \n    ```", "```py\n2021-12-30: (ma_period = 10) --- Terminal Value: 1018.82\n2021-12-30: (ma_period = 11) --- Terminal Value: 1022.45\n2021-12-30: (ma_period = 12) --- Terminal Value: 1022.96\n2021-12-30: (ma_period = 13) --- Terminal Value: 1032.44\n2021-12-30: (ma_period = 14) --- Terminal Value: 1027.37\n2021-12-30: (ma_period = 15) --- Terminal Value: 1030.53\n2021-12-30: (ma_period = 16) --- Terminal Value: 1033.03\n2021-12-30: (ma_period = 17) --- Terminal Value: 1038.95\n2021-12-30: (ma_period = 18) --- Terminal Value: 1043.48\n2021-12-30: (ma_period = 19) --- Terminal Value: 1046.68\n2021-12-30: (ma_period = 20) --- Terminal Value: 1048.01\n2021-12-30: (ma_period = 21) --- Terminal Value: 1044.00\n2021-12-30: (ma_period = 22) --- Terminal Value: 1046.98\n2021-12-30: (ma_period = 23) --- Terminal Value: 1048.62\n2021-12-30: (ma_period = 24) --- Terminal Value: 1051.08\n2021-12-30: (ma_period = 25) --- Terminal Value: 1052.44\n2021-12-30: (ma_period = 26) --- Terminal Value: 1051.30\n2021-12-30: (ma_period = 27) --- Terminal Value: 1054.78\n2021-12-30: (ma_period = 28) --- Terminal Value: 1052.75\n2021-12-30: (ma_period = 29) --- Terminal Value: 1045.74\n2021-12-30: (ma_period = 30) --- Terminal Value: 1047.60 \n```", "```py\n    from datetime import datetime\n    import backtrader as bt\n    from backtrader_strategies.strategy_utils import * \n    ```", "```py\n    class  RsiSignalStrategy(bt.SignalStrategy):\n        params = dict(rsi_periods=14, rsi_upper=70,\n                      rsi_lower=30, rsi_mid=50)\n        def  __init__(self):       \n            # add RSI indicator\n            rsi = bt.indicators.RSI(period=self.p.rsi_periods,\n                                    upperband=self.p.rsi_upper,\n                                    lowerband=self.p.rsi_lower)\n            # add RSI from TA-lib just for reference\n            bt.talib.RSI(self.data, plotname=\"TA_RSI\")\n\n            # long condition (with exit)\n            rsi_signal_long = bt.ind.CrossUp(\n                rsi, self.p.rsi_lower, plot=False\n            )\n            self.signal_add(bt.SIGNAL_LONG, rsi_signal_long)\n            self.signal_add(\n                bt.SIGNAL_LONGEXIT, -(rsi > self.p.rsi_mid)\n            )\n\n            # short condition (with exit)\n            rsi_signal_short = -bt.ind.CrossDown(\n                rsi, self.p.rsi_upper, plot=False\n            )\n            self.signal_add(bt.SIGNAL_SHORT, rsi_signal_short)\n            self.signal_add(\n                bt.SIGNAL_SHORTEXIT, rsi < self.p.rsi_mid\n            ) \n    ```", "```py\n    data = bt.feeds.YahooFinanceData(dataname=\"META\",\n                                     fromdate=datetime(2021, 1, 1),\n                                     todate=datetime(2021, 12, 31)) \n    ```", "```py\n    cerebro = bt.Cerebro(stdstats=False)\n    cerebro.addstrategy(RsiSignalStrategy)\n    cerebro.adddata(data)\n    cerebro.addsizer(bt.sizers.SizerFix, stake=1)\n    cerebro.broker.setcash(1000.0)\n    cerebro.broker.setcommission(commission=0.001)\n    cerebro.addobserver(MyBuySell)\n    cerebro.addobserver(bt.observers.Value)\n    print(\n        f\"Starting Portfolio Value: {cerebro.broker.getvalue():.2f}\"\n    )\n    cerebro.run()\n    print(\n        f\"Final Portfolio Value: {cerebro.broker.getvalue():.2f}\"\n    ) \n    ```", "```py\n    Starting Portfolio Value: 1000.00\n    Final Portfolio Value: 1042.56 \n    ```", "```py\n    cerebro.plot(iplot=True, volume=False) \n    ```", "```py\ncerebro = bt.Cerebro(stdstats=False)\ncerebro.addstrategy(RsiSignalStrategy)\ncerebro.adddata(data)\ncerebro.addsizer(bt.sizers.AllInSizer)\ncerebro.broker.setcash(1000.0)\ncerebro.broker.setcommission(commission=0.001)\ncerebro.addobserver(bt.observers.Value)\nprint(f\"Starting Portfolio Value: {cerebro.broker.getvalue():.2f}\")\ncerebro.run()\nprint(f\"Final Portfolio Value: {cerebro.broker.getvalue():.2f}\") \n```", "```py\nStarting Portfolio Value: 1000.00\nFinal Portfolio Value: 1183.95 \n```", "```py\nclass  FixedCommissionShare(bt.CommInfoBase):\n    \"\"\"\n Scheme with fixed commission per share\n \"\"\"\n    params = (\n        (\"commission\", 0.03),\n        (\"stocklike\", True),\n        (\"commtype\", bt.CommInfoBase.COMM_FIXED),\n    )\n    def  _getcommission(self, size, price, pseudoexec):\n        return abs(size) * self.p.commission \n```", "```py\ncerebro = bt.Cerebro(stdstats=False)\ncerebro.addstrategy(RsiSignalStrategy)\ncerebro.adddata(data)\ncerebro.addsizer(bt.sizers.AllInSizer)\ncerebro.broker.setcash(1000.0)\ncerebro.broker.addcommissioninfo(FixedCommissionShare())\ncerebro.addobserver(bt.observers.Value)\nprint(f\"Starting Portfolio Value: {cerebro.broker.getvalue():.2f}\")\ncerebro.run()\nprint(f\"Final Portfolio Value: {cerebro.broker.getvalue():.2f}\") \n```", "```py\nStarting Portfolio Value: 1000.00\nFinal Portfolio Value: 1189.94 \n```", "```py\nclass  FixedCommissionOrder(bt.CommInfoBase):\n    \"\"\"\n Scheme with fixed commission per order\n \"\"\"\n    params = (\n        (\"commission\", 2.5),\n        (\"stocklike\", True),\n        (\"commtype\", bt.CommInfoBase.COMM_FIXED),\n    )\n    def  _getcommission(self, size, price, pseudoexec):\n        return self.p.commission \n```", "```py\nStarting Portfolio Value: 1000.00\nFinal Portfolio Value: 1174.70 \n```", "```py\n    import backtrader as bt\n    import datetime\n    import pandas as pd\n    from backtrader_strategies.strategy_utils import * \n    ```", "```py\n    class  BollingerBandStrategy(bt.Strategy):\n        params = ((\"period\", 20),\n                  (\"devfactor\", 2.0),)\n        def  __init__(self):\n            # some code\n        def  log(self, txt):\n            # some code\n        def  notify_order(self, order):\n            # some code\n        def  notify_trade(self, trade):\n            # some code\n        def  next_open(self):\n            # some code\n        def  start(self):\n            print(f\"Initial Portfolio Value: {self.broker.get_value():.2f}\")\n        def  stop(self):\n            print(f\"Final Portfolio Value: {self.broker.get_value():.2f}\") \n    ```", "```py\n        def  __init__(self):\n            # keep track of prices\n            self.data_close = self.datas[0].close\n            self.data_open = self.datas[0].open\n\n            # keep track of pending orders\n            self.order = None\n\n            # add Bollinger Bands indicator and track buy/sell\n         # signals\n            self.b_band = bt.ind.BollingerBands(\n                self.datas[0], \n                period=self.p.period, \n                devfactor=self.p.devfactor\n            )\n            self.buy_signal = bt.ind.CrossOver(\n                self.datas[0], \n                self.b_band.lines.bot,\n                plotname=\"buy_signal\"\n            )\n            self.sell_signal = bt.ind.CrossOver(\n                self.datas[0], \n                self.b_band.lines.top,\n                plotname=\"sell_signal\"\n            ) \n        ```", "```py\n        def  next_open(self):\n            if not self.position:\n                if self.buy_signal > 0:\n                    # calculate the max number of shares (\"all-in\")\n                    size = int(\n                        self.broker.getcash() / self.datas[0].open\n                    )\n                    # buy order\n                    log_str = get_action_log_string(\n                        \"b\", \"c\", \n                        price=self.data_close[0], \n                        size=size,\n                        cash=self.broker.getcash(),\n                        open=self.data_open[0],\n                        close=self.data_close[0]\n                    )\n                    self.log(log_str)\n                    self.order = self.buy(size=size)\n            else:\n                if self.sell_signal < 0:\n                    # sell order\n                    log_str = get_action_log_string(\n                        \"s\", \"c\", self.data_close[0], \n                        self.position.size\n                    )\n                    self.log(log_str)\n                    self.order = self.sell(size=self.position.size) \n        ```", "```py\n    data = bt.feeds.YahooFinanceData(\n        dataname=\"MSFT\",\n        fromdate=datetime.datetime(2021, 1, 1),\n        todate=datetime.datetime(2021, 12, 31)\n    ) \n    ```", "```py\n    cerebro = bt.Cerebro(stdstats=False, cheat_on_open=True)\n    cerebro.addstrategy(BollingerBandStrategy)\n    cerebro.adddata(data)\n    cerebro.broker.setcash(10000.0)\n    cerebro.broker.setcommission(commission=0.001)\n    cerebro.addobserver(MyBuySell)\n    cerebro.addobserver(bt.observers.Value)\n    cerebro.addanalyzer(\n        bt.analyzers.Returns, _name=\"returns\"\n    )\n    cerebro.addanalyzer(\n        bt.analyzers.TimeReturn, _name=\"time_return\"\n    ) \n    ```", "```py\n    backtest_result = cerebro.run() \n    ```", "```py\n    Initial Portfolio Value: 10000.00\n    2021-03-01: BUY CREATED - Price: 235.03, Size: 42.00, Cash: 10000.00, Open: 233.99, Close: 235.03\n    2021-03-01: BUY EXECUTED - Price: 233.99, Size: 42.00, Cost: 9827.58, Commission: 9.83\n    2021-04-13: SELL CREATED - Price: 256.40, Size: 42.00\n    2021-04-13: SELL EXECUTED - Price: 255.18, Size: -42.00, Cost: \n    9827.58, Commission: 10.72\n    2021-04-13: OPERATION RESULT - Gross: 889.98, Net: 869.43\n    …\n    2021-12-07: BUY CREATED - Price: 334.23, Size: 37.00, Cash: 12397.10, Open: 330.96, Close: 334.23\n    2021-12-07: BUY EXECUTED - Price: 330.96, Size: 37.00, Cost: 12245.52, Commission: 12.25\n    Final Portfolio Value: 12668.27 \n    ```", "```py\n    cerebro.plot(iplot=True, volume=False) \n    ```", "```py\n    backtest_result[0].analyzers.returns.get_analysis() \n    ```", "```py\n    OrderedDict([('rtot', 0.2365156915893157),\n                 ('ravg', 0.0009422935919893056),\n                 ('rnorm', 0.2680217199688534),\n                 ('rnorm100', 26.80217199688534)]) \n    ```", "```py\n    returns_dict = (\n        backtest_result[0].analyzers.time_return.get_analysis()\n    )\n    returns_df = (\n        pd.DataFrame(list(returns_dict.items()), \n                     columns = [\"date\", \"return\"])\n        .set_index(\"date\")\n    )\n    returns_df.plot(title=\"Strategy's daily returns\") \n    ```", "```py\nimport quantstats as qs\nqs.reports.metrics(returns_df,\n                   benchmark=\"MSFT\",\n                   mode=\"basic\") \n```", "```py\n Strategy    Benchmark\n------------------  ----------  -----------\nStart Period        2021-01-04  2021-01-04\nEnd Period          2021-12-30  2021-12-30\nRisk-Free Rate      0.0%        0.0%\nTime in Market      42.0%       100.0%\nCumulative Return   26.68%      57.18%\nCAGR﹪              27.1%       58.17%\nSharpe              1.65        2.27\nSortino             2.68        3.63\nSortino/√2          1.9         2.57\nOmega               1.52        1.52 \n```", "```py\n    import backtrader as bt\n    import datetime\n    import pandas as pd\n    from backtrader_strategies.strategy_utils import * \n    ```", "```py\n    class  FractionalTradesCommission(bt.CommissionInfo):\n        def  getsize(self, price, cash):\n            \"\"\"Returns the fractional size\"\"\"\n            return self.p.leverage * (cash / price) \n    ```", "```py\n    class  SMACrossoverStrategy(bt.Strategy):\n        params = (\n            (\"ma_fast\", 20),\n            (\"ma_slow\", 50),\n            (\"target_perc\", 0.7)\n        )\n        def  __init__(self):\n            # some code\n\n        def  log(self, txt):\n            # some code\n        def  notify_order(self, order):\n           # some code\n        def  notify_trade(self, trade):\n            # some code\n        def  next(self):\n            # some code\n        def  start(self):\n            print(f\"Initial Portfolio Value: {self.broker.get_value():.2f}\")\n        def  stop(self):\n            print(f\"Final Portfolio Value: {self.broker.get_value():.2f}\") \n    ```", "```py\n        def  __init__(self):\n            # keep track of close price in the series\n            self.data_close = self.datas[0].close\n\n            # keep track of pending orders\n            self.order = None\n\n            # calculate the SMAs and get the crossover signal \n            self.fast_ma = bt.indicators.MovingAverageSimple(\n                self.datas[0], \n                period=self.params.ma_fast\n            )\n            self.slow_ma = bt.indicators.MovingAverageSimple(\n                self.datas[0], \n                period=self.params.ma_slow\n            )\n            self.ma_crossover = bt.indicators.CrossOver(self.fast_ma, \n                                                        self.slow_ma) \n        ```", "```py\n        def  next(self):\n\n            if self.order:\n                # pending order execution. Waiting in orderbook\n                return  \n            if not self.position:\n                if self.ma_crossover > 0:\n                    self.order = self.order_target_percent(\n                        target=self.params.target_perc\n                    )\n                    log_str = get_action_log_string(\n                        \"b\", \"c\", \n                        price=self.data_close[0], \n                        size=self.order.size,\n                        cash=self.broker.getcash(),\n                        open=self.data_open[0],\n                        close=self.data_close[0]\n                    )\n                    self.log(log_str)\n            else:\n                if self.ma_crossover < 0:\n                    # sell order\n                    log_str = get_action_log_string(\n                        \"s\", \"c\", self.data_close[0], \n                        self.position.size\n                    )\n                    self.log(log_str)\n                    self.order = (\n                        self.order_target_percent(target=0)\n                    ) \n        ```", "```py\n    data = bt.feeds.YahooFinanceData(\n        dataname=\"BTC-USD\",\n        fromdate=datetime.datetime(2020, 1, 1),\n        todate=datetime.datetime(2021, 12, 31)\n    ) \n    ```", "```py\n    cerebro = bt.Cerebro(stdstats=False)\n    cerebro.addstrategy(SMACrossoverStrategy)\n    cerebro.adddata(data)\n    cerebro.broker.setcash(10000.0)\n    cerebro.broker.addcommissioninfo(\n        FractionalTradesCommission(commission=0.001)\n    )\n    cerebro.addobserver(MyBuySell)\n    cerebro.addobserver(bt.observers.Value)\n    cerebro.addanalyzer(\n        bt.analyzers.TimeReturn, _name=\"time_return\"\n    ) \n    ```", "```py\n    backtest_result = cerebro.run() \n    ```", "```py\n    Initial Portfolio Value: 10000.00\n    2020-04-19: BUY CREATED - Price: 7189.42, Size: 0.97, Cash: 10000.00, Open: 7260.92, Close: 7189.42\n    2020-04-20: BUY EXECUTED - Price: 7186.87, Size: 0.97, Cost: 6997.52, Commission: 7.00\n    2020-06-29: SELL CREATED - Price: 9190.85, Size: 0.97\n    2020-06-30: SELL EXECUTED - Price: 9185.58, Size: -0.97, Cost: 6997.52, Commission: 8.94\n    2020-06-30: OPERATION RESULT - Gross: 1946.05, Net: 1930.11\n    …\n    Final Portfolio Value: 43547.99 \n    ```", "```py\n    cerebro.plot(iplot=True, volume=False) \n    ```", "```py\n Strategy    Benchmark\n------------------  ----------  -----------\nStart Period        2020-01-01  2020-01-01\nEnd Period          2021-12-30  2021-12-30\nRisk-Free Rate      0.0%        0.0%\nTime in Market      57.0%       100.0%\nCumulative Return   335.48%     555.24%\nCAGR﹪              108.89%     156.31%\nSharpe              1.6         1.35\nSortino             2.63        1.97\nSortino/√2          1.86        1.4\nOmega               1.46        1.46 \n```", "```py\n    from datetime import datetime\n    import backtrader as bt\n    import pandas as pd\n    from pypfopt.expected_returns import mean_historical_return\n    from pypfopt.risk_models import CovarianceShrinkage\n    from pypfopt.efficient_frontier import EfficientFrontier\n    from backtrader_strategies.strategy_utils import * \n    ```", "```py\n    class  MeanVariancePortfStrategy(bt.Strategy):\n        params = ((\"n_periods\", 252), )\n        def  __init__(self):  \n            # track number of days\n            self.day_counter = 0\n\n        def  log(self, txt):\n            dt = self.datas[0].datetime.date(0).isoformat()\n            print(f\"{dt}: {txt}\")\n        def  notify_order(self, order):\n            # some code\n        def  notify_trade(self, trade):\n            # some code\n        def  next(self):\n            # some code\n        def  start(self):\n            print(f\"Initial Portfolio Value: {self.broker.get_value():.2f}\")\n        def  stop(self):\n            print(f\"Final Portfolio Value: {self.broker.get_value():.2f}\") \n    ```", "```py\n        def  next(self):\n            # check if we have enough data points\n            self.day_counter += 1\n            if self.day_counter < self.p.n_periods:\n                return\n\n            # check if the date is a Friday\n            today = self.datas[0].datetime.date()\n            if today.weekday() != 4: \n                return\n\n            # find and print the current allocation\n            current_portf = {}\n            for data in self.datas:\n                current_portf[data._name] = (\n                    self.positions[data].size * data.close[0]\n                )\n\n            portf_df = pd.DataFrame(current_portf, index=[0])\n            print(f\"Current allocation as of {today}\")\n            print(portf_df / portf_df.sum(axis=1).squeeze())\n\n            # extract the past price data for each asset\n            price_dict = {}\n            for data in self.datas:\n                price_dict[data._name] = (\n                    data.close.get(0, self.p.n_periods+1)\n                )\n            prices_df = pd.DataFrame(price_dict)\n\n            # find the optimal portfolio weights\n            mu = mean_historical_return(prices_df)\n            S = CovarianceShrinkage(prices_df).ledoit_wolf()\n            ef = EfficientFrontier(mu, S)\n            weights = ef.max_sharpe(risk_free_rate=0)\n            print(f\"Optimal allocation identified on {today}\")\n            print(pd.DataFrame(ef.clean_weights(), index=[0]))\n\n            # create orders\n            for allocation in list(ef.clean_weights().items()):\n                self.order_target_percent(data=allocation[0],\n                                          target=allocation[1]) \n        ```", "```py\n    TICKERS = [\"META\", \"AMZN\", \"AAPL\", \"NFLX\", \"GOOG\"]\n    data_list = []\n    for ticker in TICKERS:\n        data = bt.feeds.YahooFinanceData(\n            dataname=ticker,\n            fromdate=datetime(2020, 1, 1),\n            todate=datetime(2021, 12, 31)\n        )\n        data_list.append(data) \n    ```", "```py\n    cerebro = bt.Cerebro(stdstats=False)\n    cerebro.addstrategy(MeanVariancePortfStrategy)\n    for ind, ticker in enumerate(TICKERS):\n        cerebro.adddata(data_list[ind], name=ticker)\n    cerebro.broker.setcash(1000.0)\n    cerebro.broker.addcommissioninfo(\n        FractionalTradesCommission(commission=0)\n    )\n    cerebro.addobserver(MyBuySell)\n    cerebro.addobserver(bt.observers.Value) \n    ```", "```py\n    backtest_result = cerebro.run() \n    ```", "```py\nInitial Portfolio Value: 1000.00\nCurrent allocation as of 2021-01-08\n  META  AMZN  AAPL  NFLX  GOOG\n0 NaN   NaN   NaN   NaN   NaN\nOptimal allocation identified on 2021-01-08\n  META     AMZN     AAPL  NFLX  GOOG\n0  0.0  0.69394  0.30606   0.0   0.0\n2021-01-11: Order Failed: AAPL\n2021-01-11: BUY EXECUTED - Price: 157.40, Size: 4.36, Asset: AMZN, Cost: 686.40, Commission: 0.00\nCurrent allocation as of 2021-01-15\n  META  AMZN  AAPL  NFLX  GOOG\n0  0.0   1.0   0.0   0.0   0.0\nOptimal allocation identified on 2021-01-15\n  META     AMZN     AAPL  NFLX  GOOG\n0  0.0  0.81862  0.18138   0.0   0.0\n2021-01-19: BUY EXECUTED - Price: 155.35, Size: 0.86, Asset: AMZN, Cost: 134.08, Commission: 0.00\n2021-01-19: Order Failed: AAPL\nCurrent allocation as of 2021-01-22\n  META  AMZN  AAPL  NFLX  GOOG\n0  0.0   1.0   0.0   0.0   0.0\nOptimal allocation identified on 2021-01-22\n  META     AMZN     AAPL  NFLX  GOOG\n0  0.0  0.75501  0.24499   0.0   0.0\n2021-01-25: SELL EXECUTED - Price: 166.43, Size: -0.46, Asset: AMZN, Cost: 71.68, Commission: 0.00\n2021-01-25: Order Failed: AAPL\n...\n0  0.0   0.0  0.00943   0.0  0.99057\n2021-12-20: Order Failed: GOOG\n2021-12-20: SELL EXECUTED - Price: 167.82, Size: -0.68, Asset: AAPL, Cost: 110.92, Commission: 0.00\nFinal Portfolio Value: 1287.22 \n```"]