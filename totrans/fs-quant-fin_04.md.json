["```py\nopen System.Windows.Forms\n\nlet form = new Form(Text = \"First F# form\")\nlet button = new Button(Text = \"Click me to close!\", Dock = DockStyle.Fill)\n\nbutton.Click.Add(fun _ -> Application.Exit() |> ignore)\nform.Controls.Add(button)\nform.Show()\n```", "```py\nnamespace Agents\n\n    open System\n\n    // Type for our agent\n    type Agent<'T> = MailboxProcessor<'T>\n\n    // Control messages to be sent to agent\n    type CounterMessage = \n        | Update of float\n        | Reset\n\n    module Helpers =\n        let genRandomNumber (n) =\n            let rnd = new System.Random()\n            float (rnd.Next(n, 100))\n\n    module MaxAgent =\n        // Agent to keep track of max value and update GUI\n        let sampleAgent = Agent.Start(fun inbox ->\n            let rec loop m = async {\n                let! msg = inbox.Receive()\n                match msg with\n                | Reset ->\n                    return! loop 0.0\n                | Update value ->\n                    let m = max m value\n\n                    Console.WriteLine(\"Max: \" + m.ToString())\n\n                    do! Async.Sleep(1000)\n                    return! loop m\n            } \n            loop 0.0)\n```", "```py\nnamespace GUI\n\n    open System\n    open System.Drawing\n    open System.Windows.Forms\n    open Agents\n\n    // User interface form\n    type public SampleForm() as form =\n        inherit Form()\n\n        let valueLabel = new Label(Location=new Point(25,15))\n        let startButton = new Button(Location=new Point(25,50))\n        let sendButton = new Button(Location=new Point(25,75))\n        let agent = MaxAgent.sampleAgent\n        let initControls =\n            valueLabel.Text <- \"Sample Text\"\n            startButton.Text <- \"Start\"\n            sendButton.Text <- \"Send value to agent\"\n        do\n            initControls\n\n            form.Controls.Add(valueLabel)\n            form.Controls.Add(startButton)\n\n            form.Text <- \"SampleApp F#\"\n\n            startButton.Click.AddHandler(new System.EventHandler\n                (fun sender e -> form.eventStartButton_Click(sender, e)))\n\n        // Event handler(s)\n        member form.eventStartButton_Click(sender:obj, e:EventArgs) =\n            let random = Helpers.genRandomNumber 5\n            Console.WriteLine(\"Sending value to agent: \" + random.ToString())\n            agent.Post(Update random)\n            ()\n```", "```py\n// Main application entry point\nnamespace Program\n\n    open System\n    open System.Drawing\n    open System.Windows.Forms\n\n    open GUI\n\n    module Main =\n        [<STAThread>]\n        do\n            Application.EnableVisualStyles()\n            Application.SetCompatibleTextRenderingDefault(false)\n            let view = new SampleForm()\n            Application.Run(view)\n```", "```py\nstartButton.Click.AddHandler(new System.EventHandler\n                (fun sender e -> form.eventStartButton_Click(sender, e)))\n\n        // Event handler(s)\n        member form.eventStartButton_Click(sender:obj, e:EventArgs) =\n            let random = Helpers.genRandomNumber 5\n            Console.WriteLine(\"Sending value to agent: \" + random.ToString())\n            agent.Post(Update random)\n            ()\n```", "```py\n// The form\nopen System\nopen System.Drawing\nopen System.Windows.Forms\n\nlet form = new Form(Visible = true, Text = \"Displaying data in F#\",TopMost = true, Size = Drawing.Size(600,600))\n\nlet textBox = \n    new RichTextBox(Dock = DockStyle.Fill, Text = \"This is a text box that we can feed data into\", Font = new Font(\"Lucida Console\",16.0f,FontStyle.Bold), ForeColor = Color.DarkBlue)\n\nform.Controls.Add textBox\n```", "```py\nlet show x = \n   textBox.Text <- sprintf \"%30A\" x\n```", "```py\nshow (1,2)\nshow [ 0 .. 100 ]\nshow [ 0.0 .. 2.0 .. 100.0 ]\n// Using the pipe operator\n(1,2,3) |> show\n[ 0 .. 99 ] |> show\n[ for i in 0 .. 99 -> (i, i*i) ] |> show\n```", "```py\ntextBox.Clear()\n```", "```py\nopen System\nopen System.Drawing\nopen System.Windows.Forms\n\n// The form\nlet form2 = new Form(Visible = true, Text = \"Displaying data in F#\", TopMost = true, Size = Drawing.Size(600,600))\n\n// The grid\nlet data = new DataGridView(Dock = DockStyle.Fill, Text = \"Data grid\", Font = new Drawing.Font(\"Lucida Console\", 10.0f), ForeColor = Drawing.Color.DarkBlue)\n\nform2.Controls.Add(data)\n\n// Some data\ndata.DataSource <- [| (\"ORCL\", 32.2000, 31.1000, 31.1200, 0.0100);\n                      (\"MSFT\", 72.050, 72.3100, 72.4000, 0.0800);\n                      (\"EBAY\", 58.250, 58.5200, 58.5100, 0.0100)|]\n```", "```py\nopen System\nopen System.Drawing\nopen System.Windows.Forms\nopen System.Collections.Generic\n\n// The form\nlet form2 = new Form(Visible = true, Text = \"Displaying data in F#\", TopMost = true, Size = Drawing.Size(600,600))\n\n// The grid\nlet data = new DataGridView(Dock = DockStyle.Fill, Text = \"Data grid\",Font = new Drawing.Font(\"Lucida Console\", 10.0f), ForeColor = Drawing.Color.DarkBlue)\n\nform2.Controls.Add(data)\n\n// Generic list\nlet myList = new List<(string * float * float * float * float)>()\n\n// Sample data\nmyList.Add((\"ORCL\", 32.2000, 31.1000, 31.1200, 0.0200))\nmyList.Add((\"MSFT\", 72.050, 72.3100, 72.4000, 0.0100))\n\ndata.DataSource <- myList.ToArray()\n\n// Set column headers\ndo data.Columns.[0].HeaderText <- \"Symb\"\ndo data.Columns.[1].HeaderText <- \"Last sale\"\ndo data.Columns.[2].HeaderText <- \"Bid\"\ndo data.Columns.[3].HeaderText <- \"Ask\"\ndo data.Columns.[4].HeaderText <- \"Spread\"\n\ndo data.Columns.[0].Width <- 100\n```", "```py\n#r \"System.Windows.Forms.DataVisualization.dll\"\n\nopen System\nopen System.Net\nopen System.Windows.Forms\nopen System.Windows.Forms.DataVisualization.Charting\nopen Microsoft.FSharp.Control.WebExtensions\n```", "```py\n// Create chart and form\nlet chart = new Chart(Dock = DockStyle.Fill)\nlet area = new ChartArea(\"Main\")\nchart.ChartAreas.Add(area)\n```", "```py\nlet mainForm = new Form(Visible = true, TopMost = true, \n                        Width = 700, Height = 500)\n\ndo mainForm.Text <- \"Yahoo Finance data in F#\"\nmainForm.Controls.Add(chart)\n```", "```py\n// Create series for stock price\nlet stockPrice = new Series(\"stockPrice\")\ndo stockPrice.ChartType <- SeriesChartType.Line\ndo stockPrice.BorderWidth <- 2\ndo stockPrice.Color <- Drawing.Color.Red\nchart.Series.Add(stockPrice)\n// Create series for moving average\nlet movingAvg = new Series(\"movingAvg\")\ndo movingAvg.ChartType <- SeriesChartType.Line\ndo movingAvg.BorderWidth <- 2\ndo movingAvg.Color <- Drawing.Color.Blue\nchart.Series.Add(movingAvg)\n\n// Syncronous fetching (just one stock here)\n```", "```py\nlet fetchOne() =\n    let uri = new System.Uri(\"http://ichart.finance.yahoo.com/table.csv?s=ORCL&d=9&e=23&f=2012&g=d&a=2&b=13&c=1986&ignore=.csv\")\n    let client = new WebClient()\n    let html = client.DownloadString(uri)\n    html\n\n// Parse CSV\nlet getPrices() =\n    let data = fetchOne()\n    data.Split('\\n')\n    |> Seq.skip 1\n    |> Seq.map (fun s -> s.Split(','))\n    |> Seq.map (fun s -> float s.[4])\n    |> Seq.truncate 2500\n```", "```py\n// Calc moving average\nlet movingAverage n (prices:seq<float>) =\n    prices    \n    |> Seq.windowed n\n    |> Seq.map Array.sum\n    |> Seq.map (fun a -> a / float n)    \n\n// The plotting\nlet sp = getPrices()\ndo sp |> Seq.iter (stockPrice.Points.Add >> ignore)\n\nlet ma = movingAverage 100 sp\ndo ma |> Seq.iter (movingAvg.Points.Add >> ignore)\n```", "```py\n/// Another example with Bollinger Bands\n#r \"System.Windows.Forms.DataVisualization.dll\" \n\nopen System\nopen System.Net\nopen System.Windows.Forms\nopen System.Windows.Forms.DataVisualization.Charting\nopen Microsoft.FSharp.Control.WebExtensions\n// Create chart and form\nlet chart = new Chart(Dock = DockStyle.Fill)\nlet area = new ChartArea(\"Main\")\nchart.ChartAreas.Add(area)\n```", "```py\n// Add legends\nchart.Legends.Add(new Legend())\n\nlet mainForm = new Form(Visible = true, TopMost = true, \n                        Width = 700, Height = 500)\n\ndo mainForm.Text <- \"Yahoo Finance data in F# - Bollinger Bands\"\nmainForm.Controls.Add(chart)\n\n// Create series for stock price\nlet stockPrice = new Series(\"stockPrice\")\ndo stockPrice.ChartType <- SeriesChartType.Line\ndo stockPrice.BorderWidth <- 2\ndo stockPrice.Color <- Drawing.Color.DarkGray\nchart.Series.Add(stockPrice)\n\n// Create series for moving average\nlet movingAvg = new Series(\"movingAvg\")\ndo movingAvg.ChartType <- SeriesChartType.Line\ndo movingAvg.BorderWidth <- 2\ndo movingAvg.Color <- Drawing.Color.Blue\nchart.Series.Add(movingAvg)\n```", "```py\n// Create series for upper band\nlet upperBand = new Series(\"upperBand\")\ndo upperBand.ChartType <- SeriesChartType.Line\ndo upperBand.BorderWidth <- 2\ndo upperBand.Color <- Drawing.Color.Red\nchart.Series.Add(upperBand)\n\n// Create series for lower band\nlet lowerBand = new Series(\"lowerBand\")\ndo lowerBand.ChartType <- SeriesChartType.Line\ndo lowerBand.BorderWidth <- 2\ndo lowerBand.Color <- Drawing.Color.Green\nchart.Series.Add(lowerBand)\n// Syncronous fetching (just one stock here)\nlet fetchOne() =\n    let uri = new System.Uri(\"http://ichart.finance.yahoo.com/table.csv?s=ORCL&d=9&e=23&f=2012&g=d&a=2&b=13&c=1986&ignore=.csv\")\n    let client = new WebClient()\n    let html = client.DownloadString(uri)\n    html\n\n// Parse CSV\nlet getPrices() =\n    let data = fetchOne()\n    data.Split('\\n')\n    |> Seq.skip 1\n    |> Seq.map (fun s -> s.Split(','))\n    |> Seq.map (fun s -> float s.[4])\n    |> Seq.truncate 2500\n\n// Calc moving average\nlet movingAverage n (prices:seq<float>) =\n    prices    \n    |> Seq.windowed n\n    |> Seq.map Array.sum\n    |> Seq.map (fun a -> a / float n)\n```", "```py\n// Stddev\nlet stddev2(values:seq<float>) =\n    let avg = Seq.average values\n    values    \n    |> Seq.fold (fun acc x -> acc + (1.0 / float (Seq.length values)) * (x - avg) ** 2.0) 0.0\n    |> sqrt\n\nlet movingStdDev n (prices:seq<float>) =\n    prices\n    |> Seq.windowed n\n    |> Seq.map stddev2\n\n// The plotting\nlet sp = getPrices()\ndo sp |> Seq.iter (stockPrice.Points.Add >> ignore)\nlet ma = movingAverage 100 sp\ndo ma |> Seq.iter (movingAvg.Points.Add >> ignore)\n```", "```py\n// Bollinger bands, K = 2.0\nlet ub = movingStdDev 100 sp\n// Upper\nSeq.zip ub ma |> Seq.map (fun (a,b) -> b + 2.0 * a) |> Seq.iter (upperBand.Points.Add >> ignore)\n// Lower\nSeq.zip ub ma |> Seq.map (fun (a,b) -> b - 2.0 * a) |> Seq.iter (lowerBand.Points.Add >> ignore)\n```", "```py\nInstall-Package FSharp.Charting\n```", "```py\nopen System\nopen System.Net\nopen FSharp.Charting\nopen Microsoft.FSharp.Control.WebExtensions\nopen System.Windows.Forms.DataVisualization.Charting\n```", "```py\nmodule FSharpCharting = \n    fsi.AddPrinter(fun (ch:FSharp.Charting.ChartTypes.GenericChart) ->ch.ShowChart(); \"FSharpCharting\")\n\n// Syncronous fetching (just one stock here)\nlet fetchOne() =\n    let uri = new System.Uri(\"http://ichart.finance.yahoo.com/table.csv?s=ORCL&d=9&e=23&f=2012&g=d&a=2&b=13&c=2012&ignore=.csv\")\n    let client = new WebClient()\n    let html = client.DownloadString(uri)\n    html\n```", "```py\n// Parse CSV and re-arrange O,H,L,C - > H,L,O,C\nlet getOHLCPrices() =\n    let data = fetchOne()\n    data.Split('\\n')\n    |> Seq.skip 1\n    |> Seq.map (fun s -> s.Split(','))\n    |> Seq.map (fun s -> s.[0], float s.[2], float s.[3], float s.[1], float s.[4])\n    |> Seq.truncate 50\n\n// Candlestick chart price range specified\nlet ohlcPrices = getOHLCPrices() |> Seq.toList\nChart.Candlestick(ohlcPrices).WithYAxis(Max = 34.0, Min = 30.0)\n```", "```py\nopen System\nopen MathNet.Numerics\nopen MathNet.Numerics.Distributions\nopen MathNet.Numerics.Statistics\nopen FSharp.Charting\n\nmodule FSharpCharting2 = fsi.AddPrinter(fun ch:FSharp.Charting.ChartTypes.GenericChart) -> ch.ShowChart(); \"FSharpCharting\")\n```", "```py\nlet dist = new Normal(0.0, 1.0)\nlet samples = dist.Samples() |> Seq.take 10000 |> Seq.toList\nlet histogram = new Histogram(samples, 35);\n```", "```py\nlet getValues =\n    let bucketWidth = Math.Abs(histogram.LowerBound - histogram.UpperBound) / (float histogram.BucketCount)\n    [0..(histogram.BucketCount-1)]\n    |> Seq.map (fun i -> (histogram.Item(i).LowerBound + histogram.Item(i).UpperBound)/2.0, histogram.Item(i).Count)\n\nChart.Column getValues\n```"]