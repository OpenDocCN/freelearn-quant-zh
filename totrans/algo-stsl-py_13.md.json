["```py\n# Import Libraries\nimport pandas as pd\nimport numpy as np\nimport yfinance as yf\n%matplotlib inline\nimport matplotlib.pyplot as plt \n```", "```py\nticker = 'UNG' #ETF natural gas \nvolume = yf.download(tickers= ticker,start= '2021-01-01', end = None,                     interval = \"1d\",group_by = 'column',                     auto_adjust = True, prepost = True,treads = True,                      proxy = None)['Volume']\n\ndef days_liquidation(quantity,volume,window,fraction):\n    avg_vol_fraction = volume.rolling(window).mean()* fraction\n    return round(quantity/avg_vol_fraction,2)\nquantity = 100000\nwindow = 63\nfraction =0.01\ndays_liquidation(quantity,volume,window,fraction)[-1] \n```", "```py\n3.52 \n```", "```py\nplt.plot(days_liquidation(quantity,volume,window,fraction)) \n```", "```py\n# Chapter 13: Portfolio Management System\nK = 1000000\nlot = 100\nport_tickers = ['QCOM','TSLA','NFLX','DIS','PG', 'MMM','IBM','BRK-B','UPS','F']\nbm_ticker= '^GSPC'\ntickers_list = [bm_ticker] + port_tickers\ndf_data= { \n'Beta':[1.34,2,0.75,1.2,0.41,0.95,1.23,0.9,1.05,1.15],\n'Shares':[-1900,-100,-400,-800,-5500,1600,1800,2800,1100,20800],\n'rSL':[42.75,231,156,54.2,37.5,42.75,29.97,59.97,39.97,2.10]\n}\nport = pd.DataFrame(df_data,index=port_tickers)\nport['Side'] = np.sign(port['Shares'])\n\nstart_dt = '2021-01-01'\nend_dt = '2021-07-01'\nprice_df = round( yf.download(tickers= tickers_list,start= '2021-01-01', \n                              end = '2021-07-01', interval = \"1d\",                               group_by = 'column',auto_adjust = True,                               prepost = True, treads = True,                               proxy = None)['Close'],2)\n\nbm_cost = price_df[bm_ticker][0]\nbm_price = price_df[bm_ticker][-1]\n\nport['rCost'] = round(price_df.iloc[0,:].div(bm_cost) *1000,2)\nport['rPrice'] = round(price_df.iloc[-1,:].div(bm_price) *1000,2)\nport['Cost'] = price_df.iloc[0,:]\nport['Price'] = price_df.iloc[-1,:] \n```", "```py\nprice_df['bm returns'] = round(np.exp(np.log(price_df[bm_ticker]/price_df[bm_ticker].shift()).cumsum()) - 1, 3)\nrel_price = round(price_df.div(price_df['^GSPC'],axis=0 )*1000,2)\n\nrMV = rel_price.mul(port['Shares'])\nrLong_MV = rMV[rMV >0].sum(axis=1)\nrShort_MV = rMV[rMV <0].sum(axis=1)\nrMV_Beta = rMV.mul(port['Beta'])\nrLong_MV_Beta = rMV_Beta[rMV_Beta >0].sum(axis=1) / rLong_MV\nrShort_MV_Beta = rMV_Beta[rMV_Beta <0].sum(axis=1)/ rShort_MV\n\nprice_df['rNet_Beta'] = rLong_MV_Beta - rShort_MV_Beta\nprice_df['rNet'] = round((rLong_MV + rShort_MV).div(abs(rMV).sum(axis=1)),3)\n\nprice_df['rReturns_Long'] = round(np.exp(np.log(rLong_MV/rLong_MV.shift()).cumsum())-1,3)\nprice_df['rReturns_Short'] = - round(np.exp(np.log(rShort_MV/rShort_MV.shift()).cumsum())-1,3)\nprice_df['rReturns'] = price_df['rReturns_Long'] + price_df['rReturns_Short']\n\nMV = price_df.mul(port['Shares'])\nLong_MV = MV[MV >0].sum(axis=1)\nShort_MV = MV[MV <0].sum(axis=1)\nprice_df['Gross'] = round((Long_MV - Short_MV).div(K),3)\nprice_df['Net'] = round((Long_MV + Short_MV).div(abs(MV).sum(axis=1)),3)\n\nprice_df['Returns_Long'] = round(np.exp(np.log(Long_MV/Long_MV.shift()).cumsum())-1,3)\nprice_df['Returns_Short'] = - round(np.exp(np.log(Short_MV/Short_MV.shift()).cumsum())-1,3)\nprice_df['Returns'] = price_df['Returns_Long'] + price_df['Returns_Short']\n\nMV_Beta = MV.mul(port['Beta'])\nLong_MV_Beta = MV_Beta[MV_Beta >0].sum(axis=1) / Long_MV\nShort_MV_Beta = MV_Beta[MV_Beta <0].sum(axis=1)/ Short_MV\nprice_df['Net_Beta'] = Long_MV_Beta - Short_MV_Beta \n```", "```py\nprice_df[['bm returns','Returns','Gross','rNet_Beta','rNet' ]].plot(\n    figsize=(20,8),grid=True, secondary_y=['Gross'],\n    style= ['r.-','k','g--','g-.','g:','b:','c','c:'],\n    title = 'bm returns, Returns, Gross, rNet_Beta, rNet')\n\nprice_df[['bm returns', 'Returns', 'rReturns', 'rReturns_Long',\n          'rReturns_Short']].plot(figsize=(20,8),grid=True,\n             style= ['r.-','k','b--o','b--^','b--v','g-.','g:','b:'],\n             title= 'bm returns, Returns, rReturns, rReturns_Long, rReturns_Short')\nprice_df[['bm returns','Returns','rReturns',\n          'rReturns_Long','rReturns_Short','Returns_Long',          'Returns_Short']].plot(\n            figsize=(20,8),grid=True,secondary_y=['Gross'], \n            style= ['r.-','k','b--o','b--^','b--v','k:^','k:v',],\ntitle= 'Returns: benchmark, Long / Short absolute & relative')\nprice_df[['bm returns',\n          'rReturns_Long','rReturns_Short','Returns_Long',          'Returns_Short']].plot(\n            figsize=(20,8),grid=True,secondary_y=['Gross'], \n            style= ['r.-','b--^','b--v','k:^','k:v',],\ntitle= 'Returns: benchmark, Long / Short absolute & relative') \n```", "```py\n# Chapter 13: Portfolio Management System\nadjust_long = adjust_short  =  -0.01 \n\nMV = port['Shares'] * port['Price']\nport['Weight'] = round(MV.div(abs(MV).sum()), 3)\nport['rR'] = (port['rCost'] - port['rSL'])\nport['rRisk'] = -round(np.maximum(0,(port['rR'] * port['Shares'])/K), 4)\nport['rRAR'] = round( (port['rPrice'] - port['rCost'])/port['rR'], 1)\nport['rCTR'] = round(port['Shares'] * (port['rPrice']-port['rCost'])/ K,4)\nport['CTR'] = round(port['Shares'] * (port['Price']-port['Cost'])/ K,4)\nport_long = port[port['Side'] > 0]\nport_short = port[port['Side'] < 0]\npro_rata_long = port_long['rRisk'] / (port_long['rRisk'].sum() * port_long['rRAR'])\nrisk_adj_long = (abs(adjust_long) * pro_rata_long * K / port_long['rR'] // lot) * lot\nshares_adj_long =  np.minimum(risk_adj_long, port_long['Shares'])*np.sign(adjust_long)\n\npro_rata_short = port_short['rRisk'] / (port_short['rRisk'].sum() * port_short['rRAR'])\nrisk_adj_short = (abs(adjust_short) * pro_rata_short * K / port_short['rR'] // lot)*lot\nshares_adj_short = np.maximum(risk_adj_short,port_short['Shares'])*np.sign(adjust_short)\n\nport['Qty_adj'] = shares_adj_short.append(shares_adj_long)\nport['Shares_adj'] = port['Shares'] + port['Qty_adj']\nport['rRisk_adj'] = -round(np.maximum(0,(port['rR'] * port['Shares_adj'])/K),4)\nMV_adj= port['Shares_adj'] * port['Price']\nrMV_adj = port['Shares_adj'] * port['rPrice']\nport['Weight_adj'] = round(MV_adj.div(abs(MV_adj).sum()),3)\nport.loc[port['Shares_adj'] != 0,'Shares_adj'] \n```", "```py\nQCOM     -1500 \nNFLX      -200 \nDIS       -500 \nPG       -5100 \nIBM        500 \nBRK-B     2100 \nUPS        800\nF        19200 \n```", "```py\nport = port.sort_values(by=['Side','rRAR'])\nport_cols = ['Side','Beta','Shares_adj','Weight',             'Weight_adj','CTR','rCTR',\n             'rRAR','rRisk','rRisk_adj']\nport[port_cols] \n```", "```py\nperf_cols= ['rCTR', 'CTR','rRisk', 'rRisk_adj','rRAR']\ndesc_cols= ['Side','Beta','Weight','Weight_adj',]\nsort_cols = ['Side','rRAR']\nasc = [True,True]\nport[port_cols].sort_values(by = sort_cols,ascending= asc).style.background_gradient(\n    subset = desc_cols, cmap = 'viridis_r').background_gradient(\n    subset = perf_cols, cmap = 'RdYlGn').format('{:.5g}') \n```", "```py\nbar_cols= ['Weight', 'Weight_adj','rRisk','rRisk_adj','rCTR',            'CTR','rRAR','Side']\ncol_style= ['lightgrey','dimgrey','lightcoral','red',\n            'forestgreen','lightseagreen','yellowgreen','whitesmoke']\nsort_keys= ['Weight_adj','rCTR']\nsec_y=['rRAR','Side']\nsort= ['rRAR']\nport[bar_cols].sort_values(by=sort).plot(kind='bar',\n            grid=True,figsize=(20,5),\n            secondary_y=sec_y,color=col_style, title= 'PORT, by '+str(sort))\n\nsort= ['Weight_adj','rRAR']\nport[bar_cols].sort_values(by=sort).plot(kind='bar',\n            grid=True,figsize=(20,5),\n            secondary_y=sec_y,color=col_style, title= 'PORT, by '+str(sort))\n\nsort= ['Side','rRisk_adj']\nport[bar_cols].sort_values(by=sort).plot(kind='bar',\n            grid=True,figsize=(20,5),\n            secondary_y=sec_y,color=col_style, title= 'PORT, by '+str(sort)) \n```"]