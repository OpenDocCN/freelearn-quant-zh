["```py\n# Import Libraries\nimport pandas as pd\nimport numpy as np\nimport yfinance as yf\n%matplotlib inline\nimport matplotlib.pyplot as plt\nfrom scipy.signal import find_peaks \n```", "```py\ndef target_price(price, stop_loss, r_multiplier):\n    r = price - stop_loss\n    return price + r * r_multiplier\n\ndef partial_exit(qty, r_multiplier):\n    if (qty * r_multiplier)!= 0:\n        fraction = qty / r_multiplier\n    else:\n        fraction = 0\n    return fraction\n\nprice = 100 \nstop_loss = 110 \nqty = 2000 \nr_multiplier = 2 \n\npt = target_price(price, stop_loss, r_multiplier) \nexit_qty = partial_exit(qty, r_multiplier) \nprint('target price', pt,'exit_quantity',exit_qty) \n```", "```py\ntarget price 80 exit_quantity 1000.0 \n```", "```py\ndef retracement_swing(df, _sign, _swg, _c, hh_ll_dt, hh_ll, vlty, retrace_vol, retrace_pct):\n    if _sign == 1: # swing high\n        retracement = df.loc[hh_ll_dt:, _c].min() - hh_ll\n\n        if (vlty > 0) & (retrace_vol > 0) & ((abs(retracement / vlty) - retrace_vol) > 0):\n            df.at[hh_ll_dt, _swg] = hh_ll\n        elif (retrace_pct > 0) & ((abs(retracement / hh_ll) - retrace_pct) > 0):\n            df.at[hh_ll_dt, _swg] = hh_ll\n\n    elif _sign == -1: # swing low\n        retracement = df.loc[hh_ll_dt:, _c].max() - hh_ll\n        if (vlty > 0) & (retrace_vol > 0) & ((round(retracement / vlty ,1) - retrace_vol) > 0):\n            df.at[hh_ll_dt, _swg] = hh_ll\n        elif (retrace_pct > 0) & ((round(retracement / hh_ll , 4) - retrace_pct) > 0):\n            df.at[hh_ll_dt, _swg] = hh_ll\n    else:\n        retracement = 0\n    return df \n```", "```py\ndef retest_swing(df, _sign, _rt, hh_ll_dt, hh_ll, _c, _swg):\n    rt_sgmt = df.loc[hh_ll_dt:, _rt] \n\n    if (rt_sgmt.count() > 0) & (_sign != 0): # Retests exist and distance test met    \n        if _sign == 1: # swing high\n            rt_list = [rt_sgmt.idxmax(), rt_sgmt.max(), df.loc[rt_sgmt.idxmax():, _c].cummin()]\n\n        elif _sign == -1: # swing low\n            rt_list = [rt_sgmt.idxmin(), rt_sgmt.min(), df.loc[rt_sgmt.idxmin():, _c].cummax()]\n        rt_dt,rt_hurdle, rt_px = [rt_list[h] for h in range(len(rt_list))]\n\n        if str(_c)[0] == 'r':\n            df.loc[rt_dt,'rrt'] = rt_hurdle\n        elif str(_c)[0] != 'r':\n            df.loc[rt_dt,'rt'] = rt_hurdle    \n\n        if (np.sign(rt_px - rt_hurdle) == - np.sign(_sign)).any():\n            df.at[hh_ll_dt, _swg] = hh_ll \n    return df \n```", "```py\n### STEP 1: ### Graph Regimes Combo ###\ndef graph_regime_combo(ticker,df,_c,rg,lo,hi,slo,shi,clg,flr,rg_ch,\n                       ma_st,ma_mt,ma_lt,lt_lo,lt_hi,st_lo,st_hi):\n\n#### removed for brevity: check GitHub repo for full code ####\n### Graph Regimes Combo ###\n\n### STEP 2: ### RELATIVE\ndef relative(df,_o,_h,_l,_c, bm_df, bm_col, ccy_df, ccy_col, dgt, start, end,rebase=True):\n#### removed for brevity: check GitHub repo for full code ####\n### RELATIVE ###\n\n### STEP 3: import library\nfrom scipy.signal import *\n### STEP 4: #### hilo_alternation(hilo, dist= None, hurdle= None) ####\ndef hilo_alternation(hilo, dist= None, hurdle= None):\n#### removed for brevity: check GitHub repo for full code ####\n#### hilo_alternation(hilo, dist= None, hurdle= None) ####\n\n#### historical_swings(df,_o,_h,_l,_c, dist= None, hurdle= None) #### \ndef historical_swings(df,_o,_h,_l,_c, dist= None, hurdle= None):\n\n#### removed for brevity: check GitHub repo for full code ####\n#### historical_swings(df,_o,_h,_l,_c, dist= None, hurdle= None) ####\n### STEP 5: #### cleanup_latest_swing(df, shi, slo, rt_hi, rt_lo) ####\ndef cleanup_latest_swing(df, shi, slo, rt_hi, rt_lo): \n#### removed for brevity: check GitHub repo for full code ####\n#### cleanup_latest_swing(df, shi, slo, rt_hi, rt_lo) ####\n### STEP 6: #### latest_swings(df, shi, slo, rt_hi, rt_lo, _h, _l, _c, _vol) ####\ndef latest_swing_variables(df, shi, slo, rt_hi, rt_lo, _h, _l, _c):\n#### removed for brevity: check GitHub repo for full code ####\n#### latest_swings(df, shi, slo, rt_hi, rt_lo, _h, _l, _c, _vol) ####\n### STEP 7: #### test_distance(ud, bs, hh_ll, vlty, dist_vol, dist_pct) ####\ndef test_distance(ud,bs, hh_ll, dist_vol, dist_pct): \n#### removed for brevity: check GitHub repo for full code ####\n#### test_distance(ud, bs, hh_ll, vlty, dist_vol, dist_pct) ####\n\n#### ATR ####\ndef average_true_range(df, _h, _l, _c, n):\n#### removed for brevity: check GitHub repo for full code ####\n#### ATR ####\n### STEP 8: #### retest_swing(df, _sign, _rt, hh_ll_dt, hh_ll, _c, _swg) ####\ndef retest_swing(df, _sign, _rt, hh_ll_dt, hh_ll, _c, _swg):\n    rt_sgmt = df.loc[hh_ll_dt:, _rt] \n#### removed for brevity: check GitHub repo for full code ####\n#### retest_swing(df, _sign, _rt, hh_ll_dt, hh_ll, _c, _swg) ####\n### STEP 9: #### retracement_swing(df, _sign, _swg, _c, hh_ll_dt, hh_ll, vlty, retrace_vol, retrace_pct) ####\ndef retracement_swing(df, _sign, _swg, _c, hh_ll_dt, hh_ll, vlty, retrace_vol, retrace_pct):\n#### removed for brevity: check GitHub repo for full code ####\n#### retracement_swing(df, _sign, _swg, _c, hh_ll_dt, hh_ll, vlty, retrace_vol, retrace_pct) ####\n### STEP 10: #### regime_floor_ceiling(df, hi,lo,cl, slo, shi,flr,clg,rg,rg_ch,stdev,threshold) ####\ndef regime_floor_ceiling(df, _h,_l,_c,slo, shi,flr,clg,rg,rg_ch,stdev,threshold):\n#### removed for brevity: check GitHub repo for full code ####\n#### regime_floor_ceiling(df, hi,lo,cl, slo, shi,flr,clg,rg,rg_ch,stdev,threshold) #### \n```", "```py\nparams = ['2014-12-31', None, 63, 0.05, 0.05, 1.5, 2]\nstart, end, vlty_n,dist_pct,retrace_pct,threshold,dgt= [params[h] for h in range(len(params))]\n\nrel_var = ['^GSPC','SP500', 'USD']\nbm_ticker, bm_col, ccy_col = [rel_var[h] for h in range(len(rel_var))]\nbm_df = pd.DataFrame()\nbm_df[bm_col] = round(yf.download(tickers= bm_ticker,start= start, end = end,interval = \"1d\",\n                 group_by = 'column',auto_adjust = True, prepost = True, \n                 treads = True, proxy = None)['Close'],dgt)\nbm_df[ccy_col] = 1\n\nticker = 'WFC'\ndf = round(yf.download(tickers= ticker,start= start, end = end,interval = \"1d\",\n                 group_by = 'column',auto_adjust = True, prepost = True, \n                 treads = True, proxy = None),2)\n#### removed for brevity: check GitHub repo for full code ####\n\n    rohlc = ['rOpen','rHigh','rLow','rClose']\n    _o,_h,_l,_c = [rohlc[h] for h in range(len(rohlc)) ]\n    rswing_val = ['rrg','rL1','rH1','rL3','rH3','rclg','rflr','rrg_ch']\n    rg,rt_lo,rt_hi,slo,shi,clg,flr,rg_ch = [rswing_val[s] for s in range(len(rswing_val))] \n```", "```py\nplot_abs_cols = ['Close','Hi3', 'Lo3','clg','flr','rg_ch','rg']\nplot_abs_style = ['k', 'ro', 'go', 'kv', 'k^','b:','b--']\ny2_abs = ['rg']\nplot_rel_cols = ['rClose','rH3', 'rL3','rclg','rflr','rrg_ch','rrg']\nplot_rel_style = ['grey', 'ro', 'go', 'yv', 'y^','m:','m--']\ny2_rel = ['rrg']\ndf[plot_abs_cols].plot(secondary_y= y2_abs,figsize=(20,8),\n            title = str.upper(ticker)+ ' Absolute',# grid=True,\n            style=plot_abs_style)\n\ndf[plot_rel_cols].plot(secondary_y=y2_rel,figsize=(20,8),\n            title = str.upper(ticker)+ ' Relative',# grid=True,\n            style=plot_rel_style)\n\ndf[plot_rel_cols + plot_abs_cols].plot(secondary_y=y2_rel + y2_abs,figsize=(20,8),\n            title = str.upper(ticker)+ ' Relative & Absolute',# grid=True,\n            style=plot_rel_style + plot_abs_style) \n```", "```py\nma_st = ma_mt = ma_lt = lt_lo = lt_hi = st_lo = st_hi = 0\nrg_combo = ['Close','rg','Lo3','Hi3','Lo3','Hi3','clg','flr','rg_ch']\n_c,rg,lo,hi,slo,shi,clg,flr,rg_ch=[rg_combo[r] for r in range(len(rg_combo))]\ngraph_regime_combo(ticker,df,_c,rg,lo,hi,slo,shi,clg,flr,rg_ch,ma_st,ma_mt,ma_lt,lt_lo,lt_hi,st_lo,st_hi)\n\nrrg_combo = ['rClose','rrg','rL3','rH3','rL3','rH3','rclg','rflr','rrg_ch']\n_c,rg,lo,hi,slo,shi,clg,flr,rg_ch=[rrg_combo[r] for r in range(len(rrg_combo))]\ngraph_regime_combo(ticker,df,_c,rg,lo,hi,slo,shi,clg,flr,rg_ch,ma_st,ma_mt,ma_lt,lt_lo,lt_hi,st_lo,st_hi) \n```"]