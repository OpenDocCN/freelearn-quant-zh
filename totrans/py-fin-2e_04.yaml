- en: Chapter 4. Sources of Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since our society entered a so-called information era, we have been engulfed
    by a huge amount of information or data. For this very reason, there is an increasing
    demand for persons armed with data handling skills, such as data scientists or
    graduates from business analytics programs. Kane (2006) proposed an open source
    finance concept which consists of three components:'
  prefs: []
  type: TYPE_NORMAL
- en: The use of open source software in testing hypotheses and implementing investment
    strategies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cheap access to financial data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Replication to confirm published research results
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this book, these three components are simply called: open software, open
    data, and open codes. Python is one of the best-known pieces of open source software.
    At the moment, usage of public data is quite inconsistent with the current environment.
    In this book, we use a huge amount of data, especially public data. In this chapter,
    the following topics will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Open source finance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Source of macro-economic data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Source of accounting data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Source of finance data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other data sources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Diving into deeper concepts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The focus of this chapter will be on how to retrieve economic, finance, and
    accounting related data, especially public data. For example, Yahoo Finance offers
    rich data, such as historical trading price, current price, option data, annual
    and quarterly financial statements, and bond data. Such publicly available data
    could be used to estimate β (market risk), volatility (total risk), Sharpe ratio,
    Jensen''s alpha, Treynor ratio, liquidity, transaction costs, and conduct financial
    statement analysis (ratio analysis) and performance evaluation. In future chapters,
    the topics mentioned would be discussed in more detail. For the public data related
    to economics, finance, and accounting, many wonderful sources are available, see
    the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Data types |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Yahoo Finance | Historical price, annual and quarterly financial statements,
    and so on |'
  prefs: []
  type: TYPE_TB
- en: '| Google Finance | Current, historical trading prices |'
  prefs: []
  type: TYPE_TB
- en: '| Federal Reserve Economic Data | Interest rates, rates for AAA, AA rated bonds
    |'
  prefs: []
  type: TYPE_TB
- en: '| Prof. French''s Data Library | Fama-French factor time series, market index
    returns, risk-free rate, industry classification |'
  prefs: []
  type: TYPE_TB
- en: '| Census Bureau | Census data |'
  prefs: []
  type: TYPE_TB
- en: '| US. Department of Treasury | US. Treasure yield |'
  prefs: []
  type: TYPE_TB
- en: '| Bureau of Labor Statistics | Inflation, employment, unemployment, pay and
    benefits |'
  prefs: []
  type: TYPE_TB
- en: '| Bureau of Economic Analysis | Gross Domestic Product (GDP) and so on |'
  prefs: []
  type: TYPE_TB
- en: '| National Bureau of Economic Research | Business cycles, vital statistics,
    report of presidents |'
  prefs: []
  type: TYPE_TB
- en: 'Table 4.1: A list of open data sources'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Usually, there are two ways to retrieve data:'
  prefs: []
  type: TYPE_NORMAL
- en: Manually download data from a specific location and then write a Python program
    to retrieve and process it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the functions contained in various Python modules, such as the function
    called `quotes_historical_yahoo_ohlc()` in the `matplotlib.finance` submodule
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For both methods, there are some advantages and disadvantages. The main advantage
    of the first method is that we know where to get our data. In addition, since
    we write our own programs to download and process data, the logic of those programs
    is clearer. The advantage of the second method is that it is quick and convenient
    to retrieve data. In a sense, users don't even have to know from where to retrievethe
    data and the structure of the original datasets. The disadvantage is that the
    functions used might change. This might cause certain problems. For example, the
    old version of `quotes_historical_yahoo_ohlc()` is `quotes_historical_yahoo()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to retrieve useful information from the preceding sources, two submodules
    could be used: `pandas_datareader.data` and `matplotlib.financial`. To find out
    functions included in `pandas_datareader.data`, the `dir()` function is applied:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Diving into deeper concepts](img/B06175_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: From the preceding output, it seems that we have eight functions related to
    YahooFinance, such as `YahooDailyReader()`, `YahooActionReader()`, `YahooOptions()`,
    `YahooQuotesReader()`, `get_components_yahoo()`, `get_data_yahoo()`, `get_data_yahoo_actions()`,
    and `get_quote_yahoo()`. Actually, we could use `theDataReader()` function as
    well.Similarly, a few functions are available for retrieving data from Google,
    FRED, and from Prof. French's Data Library.
  prefs: []
  type: TYPE_NORMAL
- en: 'To find the usage of individual functions, the `help()` function could be applied.
    In the following, the first function called `DataReader()` from the preceding
    output, is used as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Diving into deeper concepts](img/B06175_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'From the output, it can be seen that the function could be used to retrieve
    data from YahooFinance, Google Finance, St. Louis FED (FRED), and Prof. French''s
    data library. To find out all the functions contained in the `matplotlib.finance`
    submodules, see the following codes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Diving into deeper concepts](img/B06175_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A careful reader would find some inconsistency for the definitions of those
    names; see the last four letters of some functions, that is, `ochl`, `ohlc`, and
    `oclh`.
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving data from Yahoo!Finance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Yahoo!Finance offers historical market data, recent, several years'' financial
    statements, current quotes, analyst recommendations, options data, and more. The
    historical trading data include daily, weekly, monthly, and dividends. The historical
    data has several variables: open price, high price achieved, lowest price achieved,
    trading volume, close price, and adjusted-close price (which is adjusted for splits
    and dividends). Historical quotes typically do not go back further than 1960.Here,
    we show how to manually retrieve the monthly data for IBM:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [http://finance.yahoo.com/](http://finance.yahoo.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `IBM` in the search box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Historical Price** in the middle.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the monthly data, then click **Apply**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Download data** under **Apply**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A few lines at the beginning and at the end are shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Retrieving data from Yahoo!Finance](img/B06175_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Assume that the above downloaded data is saved under `c:/temp`, the following
    codes could be used to retrieve it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To view the first and the last few observations, the `.head()` and `.tail()`
    functions could be used. The default values of those two functions are 5\. In
    the following, the command of `x.head()` will output the first five lines, while
    `x.tail(2)`will output the last two lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Retrieving data from Yahoo!Finance](img/B06175_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'A better way is to use certain functions contained in various modules or submodules.
    Here is one of the simplest examples, just two lines to get IBM''s trading data,
    see the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, the `.head()` and `.tail()` functions could be used to show the part
    of the result, see the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If a longer time period is desired, the start and ending input variables should
    be specified, see the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, the function called `datetime.datetime()` defines a
    true date variable. Later in the chapter, it is shown how to retrieve year and
    month from such a variable. The first two observations are given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'A careful reader should find that the order of data is different. When downloading
    data manually, the order is from the latest (such as yesterday) going back in
    history. However, when retrieving data via a function, we would have the oldest
    date first. Most financial databases adopt the same sorting order: from the oldest
    to the latest.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following program uses another function called `quotes_historical_yahoo_ochl`.
    The program is the simplest one with just two lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding program, the first line imports a function called `quotes_historical_yahoo_ochl()`
    contained in the `matplotlib.finance`. In addition, to make our typing easier,
    the long function name is renamed `getData`. Users could use other more convenient
    names. The second line retrieves data from the Yahoo!Finance web page with a specific
    ticker symbol over a fixed period defined by beginning and ending dates. To show
    the first several lines, we type `p[0:4]`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The last several lines indicate the structure of the dataset. For example, `O`
    is for Python objects, `i2` is for integer, and `f8` is for floating. At the moment,
    it is not that critical to fully understand the meanings of those data types.
  prefs: []
  type: TYPE_NORMAL
- en: 'To understand how to estimate returns from a price array, let''s look at a
    simple illustration. Assume that we have five prices and their time line is `t`,
    `t+1`, `t+2`, `t+3` and `t+4`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'For a NumPy array, defined by `np.array()`, such as price defined previously,
    we use `price[1:]` for the second item to the last one, that is, all the data
    items except the first one. Recall that the subscript of a NumPy array starts
    from `0`. For `price[:-1]`, it represents all data items except the last one.
    We could manually verify those return numbers; see the following code for the
    first two returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is another example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that if the price array is sorted the other way around: from the newest
    to the oldest, then the return estimation should be `price[:-1]/price[1:]-1`.
    With the preceding logic, the following program calculates returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'To make our programs more general, in the preceding program, three new variables
    called `begdate`, `enddate,` and `ticker`are added. Please pay attention to the
    last line of commands. For a given pair of two prices, `p1` and `p2`, assume that
    `p2` is after `p1`. We could use two ways to estimate a return: `(p2-p1)/p1` or
    `p2/p1-1`. The former is conceptually clearer while the latter makes our program
    less prone to error. Again, we could verify a few returns manually:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'For the following example, daily price data for IBM from January 1, 2011 to
    December 31, 2015 is downloaded first. Then, daily returns are calculated. The
    mean daily return is 0.011%:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'To answer the question whether this mean daily return of `0.00011` is statistically
    different from zero, the function called `ttest_1samp()` contained in the stats
    module could be applied:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Since the T-value is 0.31 and the P-value is 0.76, we accept the null hypothesis.
    In other words, the daily mean return for IBM from 2011 to 2015 is statistically
    the same as zero. To get more information about this function, the `help()` function
    would be applied. To save space, only the first several lines are shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: It calculates the T-test for the mean of ONE group of scores.
  prefs: []
  type: TYPE_NORMAL
- en: This is a two-sided test for the null hypothesis that the expected value (mean)
    of a sample of independent observations, `a`, is equal to the given population
    mean, `popmean`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following program tests the equal means for two stocks: `IBM` vs. `MSFT`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The means of those two returns are shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that in the preceding code, the `.mean()` is used instead of `scipy.mean()`.
    To conduct a T-test for equal means, the function called `ttest_ind()` is called;
    see the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Assume that two prices exist, *p1* and *p2*. The following equation defines
    a percentage return (*R*) and a log return:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Retrieving data from Yahoo!Finance](img/B06175_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: ……..(1)
  prefs: []
  type: TYPE_NORMAL
- en: '![Retrieving data from Yahoo!Finance](img/B06175_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: ……..(2)
  prefs: []
  type: TYPE_NORMAL
- en: 'The relation between those two are shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Retrieving data from Yahoo!Finance](img/B06175_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: ……..(3)
  prefs: []
  type: TYPE_NORMAL
- en: '![Retrieving data from Yahoo!Finance](img/B06175_04_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: ……..(4)
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the beauties of a log return is that the return of a longer period is
    the summation of a short period. This means that annual log return is the summation
    of log quarterly returns. A log quarterly return is the summation of log monthly
    returns. This property makes our programming better. Here is a more general formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Retrieving data from Yahoo!Finance](img/B06175_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: ……..(5)
  prefs: []
  type: TYPE_NORMAL
- en: 'For a log annual return, we could apply the following formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Retrieving data from Yahoo!Finance](img/B06175_04_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: ……..(6)
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code is used to convert daily returns into monthly ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding program, the command of `strftime("%Y")` is used to extract
    the string of a year, such as `2016`.A much simpler example is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, the command of `strftime("%m")` would extract the string for a month.
    To find the first and last two monthly returns, the `.head()`and `.tail()`functions
    could be used; see the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Along the same line, the following code converts daily returns into annual
    ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'A few annual returns are shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'In finance, standard deviation and variance are used to measure risk. To tell
    which stock is riskier, their variances or standard deviations could be compared.
    The following program tests whether IBM and Microsoft have equal variances:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The function called `bartlett()` contained in `scipy.stats` is used. The following
    output shown suggests that those two companies have different variance since the
    F-value is 44.39 while the P-value is almost zero:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: To find out more information about this function, the `help()` function could
    be used.
  prefs: []
  type: TYPE_NORMAL
- en: 'To save space, only the first few lines are shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Help on function `bartlett` in module `scipy.stats.morestats`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Perform Bartlett's test for equal variances.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Bartlett's test tests the null hypothesis that all input samples are from populations
    with equal variances.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For samples from significantly non-normal populations, Levene's test, `levene`,
    is more robust.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For finance, we have a very important assumption: stock returns follow a normal
    distribution. Thus, it is a good idea to graphically show how the stock returns
    are distributed; see the following image. The code in Appendix A is relatively
    complex. In this chapter, it is not required to understand the program. This is
    true for the several programs described as well.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following graph shows how IBM''s returns distributed plus a normal distribution.
    The price moment is shown on the right and its Python program is included in Appendix
    A:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Retrieving data from Yahoo!Finance](img/B06175_04_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The so-called candle-stick picture could be used to vividly present a stock
    price or trading volume, as shown in the following screenshot. The corresponding
    Python program is in Appendix C:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Retrieving data from Yahoo!Finance](img/B06175_04_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The upper-right picture is extremely sophisticated. Since beginners don''t
    need to understand it, the program is not included in this book. If a reader is
    interested, the complete program can be found at two locations. Here are the links:
    [http://matplotlib.org/examples/pylab_examples/finance_work2.html](http://matplotlib.org/examples/pylab_examples/finance_work2.html)
    and [http://canisius.edu/~yany/python/finance_work2.txt](http://canisius.edu/~yany/python/finance_work2.txt).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is another example to retrieve IBM daily data from Yahoo! Financeby
    calling the `DataReader()` function contained in the `pandas_datareader.data`submodule:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Retrieving data from Google Finance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Like Yahoo Finance, Google Finance offers a significant amount of public information,
    such as news, option chains, related companies (good for competitor and industry
    analysis), historical prices, and financials (income statement, balance sheet,
    and cash flow statements). We could manually download data by going to Google
    Finance directly. Alternatively, to retrieve data from Google finance, the `DataReader()`
    function contained in the`pandas_datareader`submodule could be applied:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a stock''s intraday moment. The related Python
    program is included in Appendix C:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Retrieving data from Google Finance](img/B06175_04_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Retrieving data from FRED
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Federal Reserve has many datasets related to current economics and historical
    time series. For instance, they have data related to interest rates, such as Euro-dollar
    deposit rates. There are two ways to retrieve such interest rate data. First,
    we could use their Data Download Program, as seen in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the Federal Reserve Bank's web link at [https://www.federalreserve.gov/econresdata/default.html](https://www.federalreserve.gov/econresdata/default.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Dat****a Download Program** at [https://www.federalreserve.gov/data.htm](https://www.federalreserve.gov/data.htm).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose an appropriate data item.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Go to download**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For example, we choose Fed fund rate. The first couple of lines are given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The following program could be used to retrieve the downloaded data. Here the
    dataset is assumed to be saved under the `c:/temp/` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, the function called `DataReader()` contained in the`pandas_datareader`
    module could be used. One example is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Retrieving data from Prof. French's data library
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Prof. French has a very good and widely used data library.You can visit this
    link at [http://mba.tuck.dartmouth.edu/pages/faculty/ken.french/data_library.html](http://mba.tuck.dartmouth.edu/pages/faculty/ken.french/data_library.html)
    for more information. It contains the daily, weekly, and monthly Fama-French factors
    and other useful datasets. After clicking *Fama-French Factors*, a ZIPfile called
    `F-F_Research_Data_Factors.zip` can be downloaded. Unzip it, and we will have
    a text file called `F_F_Research_Data_Factors.txt` which includes both monthly
    and annual Fama-French factors starting from July 1926 onward. The first several
    lines are shown here. For more detail, see [Chapter 7](ch07.html "Chapter 7. Multifactor
    Models and Performance Measures"), *Multifactor Models and Performance Measures*,
    Sharpe ratio, Treynor ratio, and Jensen's α.
  prefs: []
  type: TYPE_NORMAL
- en: 'This file was created by `CMPT_ME_BEME_RETS` using the `201012 CRSP` database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Assume that the data is saved under `C:/temp/`. Remember to remove the annual
    data at the bottom of the file before running the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The first 10 observations are shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, we could write a Python program to retrieve the monthly Fama-French
    time series:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, the beauty of using the `pandas_datareader()` module is that we could
    use the `.head()` and `.tail()` function to view the retrieved datasets. Several
    more examples are given now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Retrieving data from the Census Bureau, Treasury, and BLS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we briefly show how to retrieve data from the US Census Bureau.You
    can learn more about it at [http://www.census.gov/compendia/statab/hist_stats.html](http://www.census.gov/compendia/statab/hist_stats.html).
    After we go to the census''s historical data, the following window will pop up.
    This is the link: [http://www.census.gov/econ/census/data/historical_data.html](http://www.census.gov/econ/census/data/historical_data.html).
    The following screenshot shows what kind of historical data we can download:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Retrieving data from the Census Bureau, Treasury, and BLS](img/B06175_04_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Assume that we are interested in **61Educational Services**. After clicking
    the link, we could choose one time series to download. After clicking the **Download**
    icon, a ZIP file which contains four files will be downloaded.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next example shows how to get data from the Bureau of Labor Statistics
    web page. First, go to the related web page at [http://www.bls.gov/](http://www.bls.gov/)
    and click **Data Tools** on the menu bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Retrieving data from the Census Bureau, Treasury, and BLS](img/B06175_04_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click **Inflation & Prices**, and **CPI**; we will be led to a location where
    we candownload related datasets, as you can see at this link: [http://download.bls.gov/pub/time.series/cu/](http://download.bls.gov/pub/time.series/cu/)'
  prefs: []
  type: TYPE_NORMAL
- en: Generating two dozen datasets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To help readers of this book, many datasets are generated. First, let's look
    at a simple example of a download and load a Python dataset called `ffMonthly.pkl`.
    For more information on the mentioned dataset, visit the following link:[http://canisius.edu/~yany/python/ffMonthly.pkl](http://canisius.edu/~yany/python/ffMonthly.pkl).
  prefs: []
  type: TYPE_NORMAL
- en: 'This dataset was generated based on the monthly Fama-French 3 factor time series.
    Assuming that the dataset is saved under `c:/temp/`, then we could use the following
    Python program to load it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'We could view the first and last several lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'A better way is to use the `.head()` and `.tail()` functions; see the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The command of `ff.head(5)` would show the first five lines while `ff.tail(3)`
    would show the last three lines.The `date` variable is vitally important for time
    series. The major reason is that we are dealing with time series. When merging
    different datasets, one of the most common variables used to merge them is the
    `date` variable. The following example shows how to define such a `date` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'To help readers of this book, the author has generated about two dozen Python
    datasets with an extension of `.pkl`. Those datasets are from the previously mentioned
    public sources, such as from the Prof. French data library, and Prof. Hasbrouck''s
    TORQ, which contains transactions, quotes, order processing data, and audit trail
    data for a sample of 144 NYSE stocks for the 3 months, November 1990 through January
    1991\. To facilitate an easy downloading, a Python program called `loadYan.py`
    is available. You will find more information on that at: [http://caniisus.edu/~yany/loadYan.py](http://http://caniisus.edu/~yany/loadYan.py).'
  prefs: []
  type: TYPE_NORMAL
- en: 'After you run the program, the `help(loadYan)` could be issued to find out
    all datasets generated; see the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Several datasets related to CRSP and Compustat
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**The Center for Research in Security Prices** (**CRSP**) contains all trading
    data, such as closing price, trading volume, shares outstanding, for all listed
    stocks in the US from 1926 onward. Because of its quality and long history, it
    has been used extensively by academic researchers and practitioners. The database
    is generated and maintained by the University of Chicago, and is available at:
    [http://www.crsp.com/](http://www.crsp.com/). About 100 Python datasets are generated;
    see the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `crspInfo.pkl` | Contains PERMNO, header cusip, stock exchange, and starting
    and ending trading dates |'
  prefs: []
  type: TYPE_TB
- en: '| `stockMonthly.pkl` | Monthly stock file, contains PERMNO, date, return, price,
    trading volume, and shares outstanding |'
  prefs: []
  type: TYPE_TB
- en: '| `indexMonthly.pkl` | Index file with a monthly frequency |'
  prefs: []
  type: TYPE_TB
- en: '| `indexDaily.pkl` | Index file with a monthly frequency |'
  prefs: []
  type: TYPE_TB
- en: '| `tradingDaysMonthly.pkl` | Trading days from 1926 to 12/31/2015 for monthly
    data |'
  prefs: []
  type: TYPE_TB
- en: '| `tradingDaysDaily.pkl` | Trading days from 1926 to 12/31/2015 for daily data
    |'
  prefs: []
  type: TYPE_TB
- en: '| `sp500add.pkl` | S&P500 constituents, that is, for each stock when it was
    added to the index and when it was removed from it |'
  prefs: []
  type: TYPE_TB
- en: '| `sp500daily.pkl` | S&P500 daily index level and return |'
  prefs: []
  type: TYPE_TB
- en: '| `sp500monthly.pkl` | S&P500 monthly index level and return |'
  prefs: []
  type: TYPE_TB
- en: '| `d1925.pkl` | Daily stock price file for 1925 |'
  prefs: []
  type: TYPE_TB
- en: '| `d1926.pkl` | Daily stock price file for 1926 |'
  prefs: []
  type: TYPE_TB
- en: '| `…` | [more here between 1926 and 2014] |'
  prefs: []
  type: TYPE_TB
- en: '| `d2014.pkl` | Daily stock price file for 2014 |'
  prefs: []
  type: TYPE_TB
- en: '| `d2015.pkl` | Daily stock price file for 2015 |'
  prefs: []
  type: TYPE_TB
- en: 'Table 4.2: A list of Python datasets related CRSP'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'To load data is quite straightforward by using the `pandas.read_pickle()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'To view the first and last couple of observations, the `.head()` and `.tail()`
    functions could be applied:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The `PERMNO` is the CRSP's stock `ID`, `PERMCO` is the firm ID, `Name` is the
    company's current name, `Ticker` is the header ticker, that is, the current ticker
    symbol, `EX` is the exchange code (1 for New York Stock Exchange, 2 for American
    Stock Exchange, 3 for Nasdaq), `BEGDATE` is the first trading day while the `ENDDATE`
    is the last trading day for one given `PERMNO`. For the `pandas` module, column
    selection is done by passing a list of column names to our DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to choose just three columns of `PERMNO`, `BEGDATE`, and `ENDDATE`,
    we have the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Compustat(CapitalIQ)` database offers financial statements such as balance
    sheet, income statement, and cash flows for public firms in the US from 1960 to
    today. The database is generated by Standard &Poor''s. You can find more about
    it at [http://marketintelligence.spglobal.com/our-capabilities/our-capabilities.html?product=compustat-research-insight](http://marketintelligence.spglobal.com/our-capabilities/our-capabilities.html?product=compustat-research-insight).
    The following table lists a few related Python datasets:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `compInfo.pkl` | Key header file for all firms |'
  prefs: []
  type: TYPE_TB
- en: '| `varDefinitions.pkl` | Definitions of all variables used in the datasets
    |'
  prefs: []
  type: TYPE_TB
- en: '| `deletionCodes.pkl` | Shows when a firm was deleted from the database and
    why |'
  prefs: []
  type: TYPE_TB
- en: '| `acc1950.pkl` | Annual financial statements for 1950 |'
  prefs: []
  type: TYPE_TB
- en: '| `acc1951.pkl` | Annual financial statements for 1951 |'
  prefs: []
  type: TYPE_TB
- en: '| `acc2014.pkl` | Annual financial statements for 2014 |'
  prefs: []
  type: TYPE_TB
- en: '| `acc2015.pkl` | Annual financial statements for 2015 |'
  prefs: []
  type: TYPE_TB
- en: 'Table 4.3: A list of Python datasets related Compustat'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Note that since both CRSP and Compustat are proprietary databases, related
    datasets willnot be available on the author''s website. If an instructor is interested
    in thatdata, please contact the author directly. A few datasets for high frequency
    data are listed in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `TORQct.pkl` | TORQ database for Consolidated Trade |'
  prefs: []
  type: TYPE_TB
- en: '| `TORQcq.pkl` | TORQ database for Consolidated Quote |'
  prefs: []
  type: TYPE_TB
- en: '| `TORQcod.pkl` | TORQ database for COD |'
  prefs: []
  type: TYPE_TB
- en: '| `DTAQibmCT` | DTAQ stands for Daily Trade and Quote, millisecond-by-millisecond
    trading data, one-day data for IBM |'
  prefs: []
  type: TYPE_TB
- en: '| `DTAQibmCQ` | One-day data for IBM, Consolidated Quote |'
  prefs: []
  type: TYPE_TB
- en: '| `DTAQ50CT` | One-day data for 50 stocks (Consolidated Trade) |'
  prefs: []
  type: TYPE_TB
- en: '| `DTAQ50CQ` | One-day data for 50 stocks (Consolidated Quote) |'
  prefs: []
  type: TYPE_TB
- en: 'Table 4.4: A list of Python datasets related high-frequency trading data'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Assume that `TORQcq.pkl` is saved under `c:/temp/`. We could view its first
    and last several observations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The following table shows a few examples of retrieving data for different formats,
    such as SAS, Matlab, and Excel:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Format | Code |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|   | `>>>import pandas as pd` |'
  prefs: []
  type: TYPE_TB
- en: '| CSV | `>>>a=pd.read_csv("c:/temp/ffMonthly.csv",skip=4)` |'
  prefs: []
  type: TYPE_TB
- en: '| Text | `>>>b=pd.read_table("c:/temp/ffMonthly.txt",skip=4)` |'
  prefs: []
  type: TYPE_TB
- en: '| Pickle | `>>>c=pd.read_pickle("c:/temp/ffMonthly.pkl")` |'
  prefs: []
  type: TYPE_TB
- en: '| SAS | `>>>d= sp.read_sas(''c:/temp/ffMonthly.sas7bdat'')` |'
  prefs: []
  type: TYPE_TB
- en: '| Matlab | `>>>import scipy.io as sio``>>>e= sio.loadmat(''c:/temp/ffMonthly.mat'')`
    |'
  prefs: []
  type: TYPE_TB
- en: '| Excel | `>>>infile=pd.ExcelFile("c:/temp/ffMonthly.xlsx")``>>>f=infile.parse("ffMonthly",header=T)`
    |'
  prefs: []
  type: TYPE_TB
- en: 'Table 4.5: Retrieving data with different formats'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'To help readers of this chapter, all input files for the preceding table are
    available. Please refer to this link for more information: [http://canisius.edu/~yany/ffMonthly.zip](http://canisius.edu/~yany/ffMonthly.zip).'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Reference**:'
  prefs: []
  type: TYPE_NORMAL
- en: Kane, David, 2006, Open Source Finance, working paper, Harvard University, SSRN
    link is at [http://papers.ssrn.com/sol3/papers.cfm?abstract_id=966354](http://papers.ssrn.com/sol3/papers.cfm?abstract_id=966354)
  prefs: []
  type: TYPE_NORMAL
- en: Appendix A – Python program for return distribution versus a normal distribution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The corresponding graph is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Appendix A – Python program for return distribution versus a normal distribution](img/B06175_04_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Appendix B – Python program to a draw candle-stick picture
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'The picture is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Appendix B – Python program to a draw candle-stick picture](img/B06175_04_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Appendix C – Python program for price movement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'The corresponding graph is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Appendix C – Python program for price movement](img/B06175_04_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Appendix D – Python program to show a picture of a stock's intra-day movement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'The corresponding graph is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Appendix D – Python program to show a picture of a stock''s intra-day movement](img/B06175_04_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Appendix E –properties for a pandas DataFrame
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First, let''s download a Python dataset called `ffMonthly.pickl` `e` from [http://canisius.edu/~yany/python/ffMonthly.pickle](http://canisius.edu/~yany/python/ffMonthly.pickle).
    Assume that the dataset is saved under `c:/temp`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'The last result shows that the type of `ff` dataset is a panda DataFrame. Because
    of this, it might be a good idea to get more information about this type of data.
    After we type `ff.`, we can see a drop-down list; see the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Appendix E –properties for a pandas DataFrame](img/B06175_04_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can find a function called `hist()`; see its usage in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '![Appendix E –properties for a pandas DataFrame](img/B06175_04_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For more detail, see the related link at: [http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Appendix F –how to generate a Python dataset with an extension of .pkl or .pickle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First, let look at the simplest dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Reading a Python dataset with an extension of `.pkl` or `.pickle`, we use the`pd.read_pickle()`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, the Python program is shown to generate the`ffMonthly.pkl` dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'The first and last several observations are shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Appendix G – data case #1 -generating several Python datasets'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this data case, students are required to generate about five Python datasets
    with an extension of `.pkl`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Please generate the following datasets with a Python format of `.pickle` (`.pkl`
    or `.pickle`):'
  prefs: []
  type: TYPE_NORMAL
- en: '| # | Dataset name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | `ffDaily` | Daily Fama and French 3 factor time series |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | `ffMonthly5` | Monthly Fama and French 5 factor time series |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | `usGDPannual` | US annual GDP (Gross Domestic Product) |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | `usGDPquarterly` | US quarterly GDP (Gross Domestic Product) |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | `dollarIndex` | US dollar index |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | `goldPriceMonthly` | Monthly gold price |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | `goldPriceDaily` | Daily Gold price |'
  prefs: []
  type: TYPE_TB
- en: '| 8 | `tradingDaysMonthly` | Trading days for monthly time series |'
  prefs: []
  type: TYPE_TB
- en: '| 9 | `tradingDaysDaily` | Trading days for daily data |'
  prefs: []
  type: TYPE_TB
- en: '| 10 | `spreadAAA` | Moody''s AAA rated bond''s spread |'
  prefs: []
  type: TYPE_TB
- en: Exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From where could we get daily stock price data?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Could we download returns data directly?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Manually download monthly and daily price data for CitiGroup.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Convert daily price data for the CitiGroup to daily returns.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Convert monthly prices to monthly returns and convert daily returns to monthly
    returns. Are they the same?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Are the following two lines equivalent?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What are advantages and disadvantages of using public stock data versus private
    stock data, for example, from some financial databases?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the annual cost of subscribing `Compustat`, related to accounting information
    and CRSP, related to trading data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download IBM monthly data from Yahoo Finance. Estimate its standard deviation
    and Sharpe ratio from January 2000 to December 2004.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the annual beta for IBM, DELL, and MSFT from 2001 to 2010?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the correlation between IBM and DELL from 2006 to 2010?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Estimate the mean weekday returns for IBM. Do you observe a weekday effect?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Does the volatility decline over the years? For example, you could select IBM,
    DELL, and MSFT to investigate this hypothesis.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'What is the correlation between S&P500 and DJI (Dow Jones Industrial average)?Note:
    `S&P500` Index ticker in Yahoo Finance is `^GSPC` and for `DJI`it''s`^DJI`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you download data for *n* given tickers?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write an R program to input *n* tickers from an input file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the correlation coefficient between the US stock market (`S&P500`) and
    the Hong Kong market (Hang Seng Index)?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Is it true that the Singaporean equity market is more strongly correlated with
    the Japanese equitymarket than with the American equity market?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How would you download daily price data for 50 stocks and save to just one text
    file?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After downloading data from Yahoo!Finance,assume that *p* vector contains all
    the daily price data. What is the meaning of the following two lines of code?
    When should we apply them?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, we have discussed various public data sources for economics,
    finance and accounting. For economics, we could go to Federal Reserve Bank's data
    library, Prof. French's Data library to retrieve many useful time series. For
    finance, we could use Yahoo!Finance and Google finance to download historical
    price data. For accounting information, such as latest several years' balance
    sheets and income statements, we could use Yahoo!Finance, Google finance, and
    SEC filings. For the next chapter, we explain many concepts related to interest
    rate. After that, we explain how to price bonds and stocks.
  prefs: []
  type: TYPE_NORMAL
