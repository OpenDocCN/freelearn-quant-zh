["```py\n# Import Libraries\nimport pandas as pd\nimport numpy as np\nimport yfinance as yf\n%matplotlib inline\nimport matplotlib.pyplot as plt \n```", "```py\ndef regime_breakout(df,_h,_l,window):\n    hl =  np.where(df[_h] == df[_h].rolling(window).max(),1,\n                                np.where(df[_l] == df[_l].rolling(window).min(), -1,np.nan))\n    roll_hl = pd.Series(index= df.index, data= hl).fillna(method= 'ffill')\n    return roll_hl\ndef turtle_trader(df, _h, _l, slow, fast):\n    _slow = regime_breakout(df,_h,_l,window = slow)\n    _fast = regime_breakout(df,_h,_l,window = fast)\n    turtle = pd. Series(index= df.index, \n                        data = np.where(_slow == 1,np.where(_fast == 1,1,0), \n                                np.where(_slow == -1, np.where(_fast ==-1,-1,0),0)))\n    return turtle\nticker = '9984.T' # Softbank\nstart = '2017-12-31'\nend = None\ndf =  round(yf.download(tickers= ticker,start= start, end = end, \n       interval = \"1d\",group_by = 'column',auto_adjust = True, \nprepost = True, treads = True, proxy = None),0)\nslow = 50\nfast = 20 \n#### removed for brevity: check GitHub page for full code ####\ndf[['Close','stop_loss','tt','tt_cumul']].plot(secondary_y=['tt','tt_cumul'],\n                                  figsize=(20,8),style= ['k','r--','b:','b'],\n                       title= str(ticker)+' Close Price, Turtle L/S entries, cumulative returns') \n```", "```py\nr_f = 0.00001 # risk free returns\n\ndef rolling_sharpe(returns, r_f, window):\n    # Calculating average returns in a rolling window\n    avg_returns = returns.rolling(window).mean()\n    # Calculating the volatility of average returns in a rolling window\n    std_returns = returns.rolling(window).std(ddof=0)\n    # Rolling Sharpe ratio function\n    return (avg_returns - r_f) / std_returns\n\ndef expanding_sharpe(returns, r_f):\n    avg_returns = returns.expanding().mean()\n    std_returns = returns.expanding().std(ddof=0)\n    return (avg_returns - r_f) / std_returns\n\nwindow = 252 \ndf['sharpe_roll'] = rolling_sharpe(returns= tt_log_returns, r_f= r_f, window= window) * 252**0.5\n\ndf['sharpe'] = expanding_sharpe(returns= tt_log_returns, r_f= r_f) * 252**0.5\n\ndf[window:][['tt_cumul','sharpe_roll','sharpe'] ].plot(figsize = (20,8),style = ['b','c-.','c'],grid=True,\ntitle = str(ticker)+' cumulative returns, Sharpe ratios: rolling & cumulative') \n```", "```py\ndef rolling_grit(cumul_returns, window):\n    tt_rolling_peak = cumul_returns.rolling(window).max()\n    drawdown_squared = (cumul_returns - tt_rolling_peak) ** 2\n    ulcer = drawdown_squared.rolling(window).sum() ** 0.5\n    return cumul_returns / ulcer\n\ndef expanding_grit(cumul_returns):\n    tt_peak = cumul_returns.expanding().max()\n    drawdown_squared = (cumul_returns - tt_peak) ** 2\n    ulcer = drawdown_squared.expanding().sum() ** 0.5\n    return cumul_returns / ulcer\n\nwindow = 252\ndf['grit_roll'] = rolling_grit(cumul_returns= df['tt_cumul'] , window = window)\ndf['grit'] = expanding_grit(cumul_returns= df['tt_cumul'])\ndf[window:][['tt_cumul','grit_roll', 'grit'] ].plot(figsize = (20,8), \n                secondary_y = 'tt_cumul',style = ['b','g-.','g'],grid=True,\n    title = str(ticker) + ' cumulative returns & Grit Ratios: rolling & cumulative '+ str(window) + ' days') \n```", "```py\ndef rolling_profits(returns,window):\n#### removed for brevity: check GitHub repo for full code ####\ndef rolling_losses(returns,window):\n#### removed for brevity: check GitHub repo for full code ####\ndef expanding_profits(returns): \n#### removed for brevity: check GitHub repo for full code ####\ndef expanding_losses(returns): \n#### removed for brevity: check GitHub repo for full code ####\ndef profit_ratio(profits, losses):    \n#### removed for brevity: check GitHub repo for full code ####\ndef rolling_tail_ratio(cumul_returns, window, percentile,limit):\n    left_tail = np.abs(cumul_returns.rolling(window).quantile(percentile))\n    right_tail = cumul_returns.rolling(window).quantile(1-percentile)\n    np.seterr(all='ignore')\n    tail = np.maximum(np.minimum(right_tail / left_tail,limit),-limit)\n    return tail\n\ndef expanding_tail_ratio(cumul_returns, percentile,limit):\n    left_tail = np.abs(cumul_returns.expanding().quantile(percentile))\n    right_tail = cumul_returns.expanding().quantile(1 - percentile)\n    np.seterr(all='ignore')\n    tail = np.maximum(np.minimum(right_tail / left_tail,limit),-limit)\n    return tail\n\ndef common_sense_ratio(pr,tr):\n    return pr * tr    \nwindow = 252\ndf['pr_roll'] = profit_ratio(profits= rolling_profits(returns = tt_log_returns,window = window), \n                             losses= rolling_losses(returns = tt_log_returns,window = window))\ndf['pr'] = profit_ratio(profits= expanding_profits(returns= tt_log_returns), \n                             losses= expanding_losses(returns = tt_log_returns))\n\ndf[window:] [['tt_cumul','pr_roll','pr'] ].plot(figsize = (20,8),secondary_y= ['tt_cumul'], \n                            style = ['r','y','y:'],grid=True) \n```", "```py\nwindow = 252\n\ndf['tr_roll'] = rolling_tail_ratio(cumul_returns= df['tt_cumul'], \n                             window= window, percentile= 0.05,limit=5)\ndf['tr'] = expanding_tail_ratio(cumul_returns= df['tt_cumul'], percentile= 0.05,limit=5)\n\ndf['csr_roll'] = common_sense_ratio(pr= df['pr_roll'],tr= df['tr_roll'])\ndf['csr'] = common_sense_ratio(pr= df['pr'],tr= df['tr'])\n\ndf[window:] [['tt_cumul','csr_roll','csr'] ].plot(secondary_y= ['tt_cumul'],style = ['b','r-.','r'], figsize = (20,8),\n    title= str(ticker)+' cumulative returns, Common Sense Ratios: cumulative &  rolling '+str(window)+ ' days') \n```", "```py\ndef expectancy(win_rate,avg_win,avg_loss):  \n    # win% * avg_win% - loss% * abs(avg_loss%) \n    return win_rate * avg_win + (1-win_rate) * avg_loss \ndef t_stat(signal_count, trading_edge): \n    sqn = (signal_count ** 0.5) * trading_edge / trading_edge.std(ddof=0) \n    return sqn \n# Trade Count\ndf['trades'] = df.loc[(df['tt'].diff() !=0) & (pd.notnull(df['tt'])),'tt'].abs().cumsum()\nsignal_count = df['trades'].fillna(method='ffill')\nsignal_roll = signal_count.diff(window)\n# Rolling t_stat\n#### removed for brevity: check GitHub repo for full code ####\n# Cumulative t-stat\n#### removed for brevity: check GitHub repo for full code ####\ndf[window:][['tt_cumul','sqn','sqn_roll'] ].plot(figsize = (20,8),\n                secondary_y= ['tt_cumul'], grid= True,style = ['b','y','y-.'], \n                 title= str(ticker)+' Cumulative Returns and SQN: cumulative & rolling'+ str(window)+' days') \n```", "```py\ndef robustness_score(grit,csr,sqn): \n    start_date = max(grit[pd.notnull(grit)].index[0],\n               csr[pd.notnull(csr)].index[0],\n               sqn[pd.notnull(sqn)].index[0])\n    score = grit * csr * sqn / (grit[start_date] * csr[start_date] *\n    sqn[start_date])\n    return score\n\ndf['score_roll'] = robustness_score(grit = df['grit_roll'], csr = df['csr_roll'],sqn= df['sqn_roll'])\ndf['score'] = robustness_score(grit = df['grit'],csr = df['csr'],sqn = df['sqn'])\ndf[window:][['tt_cumul','score','score_roll']].plot(\n    secondary_y= ['score'],figsize=(20,6),style = ['b','k','k-.'], \ntitle= str(ticker)+' Cumulative Returns and Robustness Score: cumulative & rolling '+ str(window)+' days') \n```"]