["```py\n> install.packages(\"zoo\")\n> library(\"zoo\")\n\n```", "```py\n> aapl<-read.zoo(\"aapl.csv\",+   sep=\",\", header = TRUE, format = \"%Y-%m-%d\")\n\n```", "```py\n> plot(aapl, main = \"APPLE Closing Prices on NASDAQ\",+   ylab = \"Price (USD)\", xlab = \"Date\")\n\n```", "```py\n> head(aapl)\n2000-01-03 2000-01-04 2000-01-05 2000-01-06 2000-01-07 2000-01-10\n 27.58      25.25      25.62      23.40      24.51      24.08\n> tail(aapl)\n2013-04-17 2013-04-18 2013-04-19 2013-04-22 2013-04-23 2013-04-24\n 402.80     392.05     390.53     398.67     406.13     405.46\n\n```", "```py\n> aapl[which.max(aapl)]\n2012-09-19\n 694.86\n\n```", "```py\n> ret_simple <- diff(aapl) / lag(aapl, k = -1) * 100\n> ret_cont   <- diff(log(aapl)) * 100\n\n```", "```py\n> summary(coredata(ret_simple))\n Min.   1st Qu.    Median      Mean   3rd Qu.      Max.\n-51.86000  -1.32500   0.07901   0.12530   1.55300  13.91000\n\n```", "```py\n> ret_simple[which.min(ret_simple)]\n2000-09-29\n -51.85888\n\n```", "```py\n> hist(ret_simple, breaks=100, main = \"Histogram of Simple Returns\",+  xlab=\"%\")\n\n```", "```py\n> aapl_2013 <- window(aapl, start = '2013-01-01', end = '2013-12-31')\n> aapl_2013[which.max(aapl_2013)]\n2013-01-02 \n 545.85\n\n```", "```py\n> quantile(ret_simple, probs = 0.01)\n 1% \n-7.042678\n\n```", "```py\n> install.packages(\"forecast\")\n\n```", "```py\n> library(\"forecast\")\n\n```", "```py\n> hp <- read.zoo(\"UKHP.csv\", sep = \",\",+   header = TRUE, format = \"%Y-%m\", FUN = as.yearmon)\n\n```", "```py\n> frequency(hp)\n[1] 12\n\n```", "```py\n> hp_ret <- diff(hp) / lag(hp, k = -1) * 100\n\n```", "```py\n> mod <- auto.arima(hp_ret, stationary = TRUE, seasonal = FALSE,+   ic=\"aic\")\n\n```", "```py\n> mod\nSeries: hp_ret\nARIMA(2,0,0) with non-zero mean \n\nCoefficients:\n ar1     ar2  intercept\n 0.2299  0.3491     0.4345\ns.e.  0.0573  0.0575     0.1519\n\nsigma^2 estimated as 1.105:  log likelihood=-390.97\nAIC=789.94   AICc=790.1   BIC=804.28\n\n```", "```py\n> confint(mod)\n 2.5 %    97.5 %\nar1       0.1174881 0.3422486\nar2       0.2364347 0.4617421\nintercept 0.1368785 0.7321623\n\n```", "```py\n> tsdiag(mod)\n\n```", "```py\n> plot(mod$x, lty = 1, main = \"UK house prices: raw data vs. fitted+   values\", ylab = \"Return in percent\", xlab = \"Date\")\n> lines(fitted(mod), lty = 2,lwd = 2, col = \"red\")\n\n```", "```py\n> accuracy(mod)\nME      RMSE      MAE          MPE   MAPE    MASE\n0.00120 1.0514    0.8059       -Inf  Inf     0.792980241\n\n```", "```py\n> predict(mod, n.ahead=3)\n$pred\n Apr       May       Jun\n2013 0.5490544 0.7367277 0.5439708\n\n$se\n Apr      May      Jun\n2013 1.051422 1.078842 1.158658\n\n```", "```py\n> plot(forecast(mod))\n\n```", "```py\n> library(\"zoo\")\n> install.packages(\"urca\")\n> library(\"urca\")\n\n```", "```py\n> prices <- read.zoo(\"JetFuelHedging.csv\", sep = \",\",+   FUN = as.yearmon, format = \"%Y-%m\", header = TRUE)\n\n```", "```py\n> simple_mod <- lm(diff(prices$JetFuel) ~ diff(prices$HeatingOil)+0)\n\n```", "```py\n> summary(simple_mod)\nCall:\nlm(formula = diff(prices$JetFuel) ~ diff(prices$HeatingOil) +\n 0)\nResiduals:\n Min       1Q   Median       3Q      Max\n-0.52503 -0.02968  0.00131  0.03237  0.39602\n\nCoefficients:\n Estimate Std. Error t value Pr(>|t|) \ndiff(prices$HeatingOil)  0.89059    0.03983   22.36   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.0846 on 189 degrees of freedom\nMultiple R-squared:  0.7257,   Adjusted R-squared:  0.7242\nF-statistic: 499.9 on 1 and 189 DF,  p-value: < 2.2e-16\n\n```", "```py\n> plot(prices$JetFuel, main = \"Jet Fuel and Heating Oil Prices\",+   xlab = \"Date\", ylab = \"USD\")\n> lines(prices$HeatingOil, col = \"red\")\n\n```", "```py\n> jf_adf <- ur.df(prices$JetFuel, type = \"drift\")\n> summary(jf_adf)\n###############################################\n# Augmented Dickey-Fuller Test Unit Root Test #\n###############################################\n\nTest regression drift\n\nCall:\nlm(formula = z.diff ~ z.lag.1 + 1 + z.diff.lag)\n\nResiduals:\n Min       1Q   Median       3Q      Max \n-1.06212 -0.05015  0.00566  0.07922  0.38086 \n\nCoefficients:\n Estimate Std. Error t value Pr(>|t|) \n(Intercept)  0.03050    0.02177   1.401  0.16283 \nz.lag.1     -0.01441    0.01271  -1.134  0.25845 \nz.diff.lag   0.19471    0.07250   2.686  0.00789 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.159 on 186 degrees of freedom\nMultiple R-squared:  0.04099,   Adjusted R-squared:  0.03067\nF-statistic: 3.975 on 2 and 186 DF,  p-value: 0.0204\n\nValue of test-statistic is: -1.1335 0.9865\n\nCritical values for test statistics:\n 1pct  5pct 10pct\ntau2 -3.46 -2.88 -2.57\nphi1  6.52  4.63  3.81\n\n```", "```py\n> ho_adf <- ur.df(prices$HeatingOil, type = \"drift\")\n> summary(ho_adf)\n\n```", "```py\n> mod_static <- summary(lm(prices$JetFuel ~ prices$HeatingOil))\n> error <- residuals(mod_static)\n> error_cadf <- ur.df(error, type = \"none\")\n> summary(error_cadf)\n\n```", "```py\n> djf <- diff(prices$JetFuel)\n> dho <- diff(prices$HeatingOil)\n> error_lag <- lag(error, k = -1)\n> mod_ecm <- lm(djf ~ dho + error_lag)\n> summary(mod_ecm)\n\nCall:\nlm(formula = djf ~ dho + error_lag + 0)\n\nResiduals:\n Min       1Q   Median       3Q      Max \n-0.19158 -0.03246  0.00047  0.02288  0.45117 \n\nCoefficients:\n Estimate Std. Error t value Pr(>|t|) \ndho        0.90020 \n0.03238  27.798   <2e-16 ***\nerror_lag -0.65540    0.06614  -9.909   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.06875 on 188 degrees of freedom\nMultiple R-squared:  0.8198,   Adjusted R-squared:  0.8179 \nF-statistic: 427.6 on 2 and 188 DF,  p-value: < 2.2e-16\n\n```", "```py\n> library(\"zoo\")\n> intc <- read.zoo(\"intc.csv\", header = TRUE,+   sep = \",\", format = \"%Y-%m\", FUN = as.yearmon)\n\n```", "```py\n> plot(intc, main = \"Monthly returns of Intel Corporation\",+   xlab = \"Date\", ylab = \"Return in percent\")\n\n```", "```py\n> Box.test(coredata(intc^2), type = \"Ljung-Box\", lag = 12)\n\n Box-Ljung test\n\ndata:  coredata(intc^2)\nX-squared = 79.3451, df = 12, p-value = 5.502e-12\n\n```", "```py\n> install.packages(\"FinTS\")\n> library(\"FinTS\")\n> ArchTest(coredata(intc))\n\n ARCH LM-test; Null hypothesis: no ARCH effects\n\ndata:  coredata(intc)\nChi-squared = 59.3647, df = 12, p-value = 2.946e-08\n\n```", "```py\n> install.packages(\"rugarch\")\n\n```", "```py\n> library(\"rugarch\")\n\n```", "```py\n> intc_garch11_spec <- ugarchspec(variance.model = list(+   garchOrder = c(1, 1)),+  mean.model = list(armaOrder = c(0, 0)))\n\n```", "```py\n> intc_garch11_fit <- ugarchfit(spec = intc_garch11_spec,+  data = intc)\n\n```", "```py\n> intc_garch11_roll <- ugarchroll(intc_garch11_spec, intc,+   n.start = 120, refit.every = 1, refit.window = \"moving\",+   solver = \"hybrid\", calculate.VaR = TRUE, VaR.alpha = 0.01,+   keep.coef = TRUE)\n\n```", "```py\n> report(intc_garch11_roll, type = \"VaR\", VaR.alpha = 0.01,+   conf.level = 0.99)\nVaR Backtest Report\n===========================================\nModel:            sGARCH-norm\nBacktest Length:   312\nData: \n\n==========================================\nalpha:            1%\nExpected Exceed:   3.1\nActual VaR Exceed:\t5â€©Actual %:         1.6%\n\nUnconditional Coverage (Kupiec)\nNull-Hypothesis:   Correct Exceedances\nLR.uc Statistic:   0.968\nLR.uc Critical:      6.635\nLR.uc p-value:      0.325\nReject Null:      NO\n\nConditional Coverage (Christoffersen)\nNull-Hypothesis:   Correct Exceedances and\n Independence of Failures\nLR.cc Statistic:   1.131\nLR.cc Critical:      9.21\nLR.cc p-value:      0.568\nReject Null:      O\n\n```", "```py\n> intc_VaR <- zoo(intc_garch11_roll@forecast$VaR[, 1])\n\n```", "```py\n> index(intc_VaR) <- as.yearmon(rownames(intc_garch11_roll@forecast$VaR))\n\n```", "```py\n> intc_actual <- zoo(intc_garch11_roll@forecast$VaR[, 2])\n> index(intc_actual) <- as.yearmon(rownames(intc_garch11_roll@forecast$VaR))\n\n```", "```py\n> plot(intc_actual, type = \"b\", main = \"99% 1 Month VaR Backtesting\",+   xlab = \"Date\", ylab = \"Return/VaR in percent\")\n> lines(intc_VaR, col = \"red\")\n> legend(\"topright\", inset=.05, c(\"Intel return\",\"VaR\"), col = c(\"black\",\"red\"), lty = c(1,1))\n\n```", "```py\n> intc_garch11_fcst <- ugarchforecast(intc_garch11_fit, n.ahead = 12)\n\n```", "```py\n> intc_garch11_fcst\n*------------------------------------*\n*       GARCH Model Forecast         *\n*------------------------------------*\nModel: sGARCH\nHorizon: 12\nRoll Steps: 0\nOut of Sample: 0\n\n0-roll forecast [T0=Dec 2008]:\n Series  Sigma\nT+1  0.01911 0.1168\nT+2  0.01911 0.1172\nT+3  0.01911 0.1177\nT+4  0.01911 0.1181\nT+5  0.01911 0.1184\nT+6  0.01911 0.1188\nT+7  0.01911 0.1191\nT+8  0.01911 0.1194\nT+9  0.01911 0.1197\nT+10 0.01911 0.1200\nT+11 0.01911 0.1202\nT+12 0.01911 0.1204\n\n```"]