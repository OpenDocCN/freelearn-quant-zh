- en: '*Chapter 2*: Exploratory Data Analysis in Python'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第2章*：Python中的探索性数据分析'
- en: This chapter focuses on **exploratory data analysis** (**EDA**), which is the
    first step in processing any dataset. The objective of EDA is to load data into
    data structures most suitable for further analysis to identify and rectify any
    wrong/bad data and get basic insight into the data—the types of fields there are;
    whether they are categorical or not; how many missing values there are; how the
    fields are related; and so on.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点介绍**探索性数据分析**（**EDA**），这是处理任何数据集的第一步。EDA的目标是将数据加载到最适合进一步分析的数据结构中，以识别和纠正任何错误/坏数据，并获得对数据的基本见解——字段的类型有哪些；它们是否是分类的；有多少缺失值；字段之间的关系等等。
- en: 'These are the main topics discussed in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是本章讨论的主要话题：
- en: Introduction to EDA
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EDA介绍
- en: Special Python libraries for EDA
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于EDA的特殊Python库
- en: Technical requirements
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The Python code used in this chapter is available in the `Chapter02/eda.ipynb`
    notebook in the book's code repository.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的Python代码可以在书的代码库中的`Chapter02/eda.ipynb`笔记本中找到。
- en: Introduction to EDA
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: EDA介绍
- en: EDA is the process of procuring, understanding, and deriving meaningful statistical
    insights from structured/unstructured data of interest. It is the first step before
    a more complex analysis, such as predicting future expectations from the data.
    In the case of financial data, EDA helps obtain insights used later for building
    profitable trading signals and strategies.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: EDA是从感兴趣的结构化/非结构化数据中获取、理解和得出有意义的统计见解的过程。这是在对数据进行更复杂的分析之前的第一步，例如从数据中预测未来的期望。在金融数据的情况下，EDA有助于获得后续用于构建盈利交易信号和策略的见解。
- en: EDA guides later decisions of which features/signals to use or avoid and which
    predictive models to use or avoid, and invalidates incorrect hypotheses while
    validating and introducing correct hypotheses about the nature of variables and
    the relationships between them.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: EDA指导后续决策，包括使用或避免哪些特征/信号，使用或避免哪些预测模型，并验证和引入关于变量性质和它们之间关系的正确假设，同时否定不正确的假设。
- en: EDA is also important in understanding how sample (a smaller dataset representative
    of a complete dataset) statistics differ from population (a complete dataset or
    an ultimate truth) statistics and keeping that in mind when drawing conclusions
    about the population, based on observations of samples. Thus, EDA helps cut down
    possible search spaces down the road; otherwise, we would waste a lot more time
    later on building incorrect/insignificant models or strategies.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: EDA也很重要，可以理解样本（完整数据集的代表性较小数据集）统计数据与总体（完整数据集或终极真相）统计数据之间的差异，并在绘制关于总体的结论时记住这一点，基于样本观察。因此，EDA有助于减少后续可能的搜索空间；否则，我们将浪费更多的时间后来构建不正确/不重要的模型或策略。
- en: EDA must be approached with a scientific mindset. Sometimes, we might reach
    inadequately validated conclusions based on anecdotal evidence rather than statistical
    evidence.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 必须以科学的心态来对待EDA。有时，我们可能会基于轶事证据而不是统计证据得出不充分验证的结论。
- en: 'Hypotheses based on anecdotal evidence suffer from issues stemming from the
    following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 基于轶事证据的假设受到以下问题的影响：
- en: Not being statistically significant—too low number of observations.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不具有统计学意义——观测数量太少。
- en: Selection bias—the hypothesis is only created because it was first observed.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择偏见——假设只是因为它首先被观察到而产生的。
- en: Confirmation bias—our inherent belief in the hypothesis biases our results.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确认偏见——我们对假设的内在信念会偏向于我们的结果。
- en: Inaccuracies in observations.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 观察中的不准确性。
- en: Let's explore the different steps and techniques involved in EDA, using real
    datasets.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索EDA涉及的不同步骤和技术，使用真实数据集。
- en: Steps in EDA
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: EDA的步骤
- en: 'Here is a list of steps involved in EDA (we''ll be going through each of them
    in the subsections that follow):'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是EDA涉及的步骤列表（我们将在接下来的子章节中逐个进行讨论）：
- en: Loading the necessary libraries and setting them up
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载必要的库并进行设置
- en: Data collection
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据收集
- en: Data wrangling/munging
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据整理/整理
- en: Data cleaning
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据清洗
- en: Obtaining descriptive statistics
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获得描述性统计
- en: Visual inspection of the data
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据的可视化检查
- en: Data cleaning
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据清洗
- en: Advanced visualization techniques
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 高级可视化技术
- en: Loading the necessary libraries and setting them up
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 加载必要的库并进行设置
- en: 'We will be using `numpy`, `pandas`, and `matplotlib`, and these libraries can
    be loaded with the help of the following code:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`numpy`、`pandas`和`matplotlib`，这些库可以通过以下代码加载：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We use the `mpld3` library for enabling zooming within Jupyter's `matplotlib`
    charts. The last line of the preceding code block specifies that only a maximum
    of two rows of `pandas` DataFrames should be displayed.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`mpld3`库来启用Jupyter的`matplotlib`图表内的缩放。 前面代码块的最后一行指定了应显示`pandas` DataFrame的最大行数为两行。
- en: Data collection
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据收集
- en: Data collection is usually the first step for EDA. Data may come from many different
    sources (**comma-separated values** (**CSV**) files, Excel files, web scrapes,
    binary files, and so on) and will often need to be standardized and first formatted
    together correctly.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 数据收集通常是EDA的第一步。 数据可能来自许多不同的来源（**逗号分隔值**（**CSV**）文件、Excel文件、网页抓取、二进制文件等），通常需要正确标准化和首先正确格式化在一起。
- en: For this exercise, we will use data for three different trading instruments
    for a period of 5 years, stored in `.csv` format. The identity of these instruments
    is deliberately not revealed since that might give away their expected behavior/relationships,
    but we will reveal their identity at the end of this exercise to evaluate intuitively
    how well we performed EDA on them.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个练习，我们将使用存储在`.csv`格式中的5年期间的三种不同交易工具的数据。 这些工具的身份故意没有透露，因为这可能泄露它们的预期行为/关系，但我们将在练习结束时透露它们的身份，以直观地评估我们对它们进行的EDA的表现如何。
- en: 'Let''s start by loading up our available datasets into three DataFrames (`A`,
    `B`, and `C`), as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从加载我们可用的数据集开始，将其加载到三个DataFrame（`A`，`B`和`C`）中，如下所示：
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'DataFrame `A` has the following structure:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: DataFrame `A`的结构如下所示：
- en: '![Figure 2.1 – DataFrame constructed from the A.csv file](img/Figure_2.1_B15029.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图2.1 – 从A.csv文件构造的DataFrame](img/Figure_2.1_B15029.jpg)'
- en: Figure 2.1 – DataFrame constructed from the A.csv file
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.1 – 从A.csv文件构造的DataFrame
- en: 'Similarly, let''s load DataFrame `B`, as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，让我们加载DataFrame `B`，如下所示：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'DataFrame `B` has the following structure:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: DataFrame `B`的结构如下所示：
- en: '![Figure 2.2 – DataFrame constructed from the B.csv file](img/Figure_2.2_B15029.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图2.2 – 从B.csv文件构造的DataFrame](img/Figure_2.2_B15029.jpg)'
- en: Figure 2.2 – DataFrame constructed from the B.csv file
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.2 – 从B.csv文件构造的DataFrame
- en: 'Finally, let''s load the `C` data into a DataFrame, as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们将`C`数据加载到一个DataFrame中，如下所示：
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'And we see `C` has the following fields:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到`C`有以下字段：
- en: '![Figure 2.3 – DataFrame constructed from the C.csv file](img/Figure_2.3_B15029.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图2.3 – 从C.csv文件构造的DataFrame](img/Figure_2.3_B15029.jpg)'
- en: Figure 2.3 – DataFrame constructed from the C.csv file
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.3 – 从C.csv文件构造的DataFrame
- en: As we can observe, all three data sources have the same format with `2015-05-15`
    and `2020-05-14`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，所有三个数据源的格式都是`2015-05-15`和`2020-05-14`。
- en: Data wrangling/munging
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据整理/处理
- en: Data rarely comes in a ready-to-use format. Data wrangling/munging refers to
    the process of manipulating and transforming data from its initial raw source
    into structured, formatted, and easily usable datasets.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 数据很少是以可直接使用的格式提供的。 数据整理/处理指的是从初始原始来源操纵和转换数据的过程，使其成为结构化的、格式化的和易于使用的数据集。
- en: 'Let''s use `pandas.DataFrame.join(...)` to merge the DataFrames and align them
    to have the same `DateTimeIndex` format. Using the `lsuffix=` and `rsuffix=` parameters,
    we assign the `_A`, `_B`, and `_C` suffixes to the columns coming from the three
    DataFrames, as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`pandas.DataFrame.join(...)`来合并这些DataFrame，并对齐它们以具有相同的`DateTimeIndex`格式。
    使用`lsuffix=`和`rsuffix=`参数，我们将`_A`，`_B`和`_C`后缀分配给来自三个DataFrame的列，如下所示：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We will inspect the `merged_df` DataFrame we just created and make sure it
    has all the fields we expected from all three DataFrames (displaying only the
    first seven columns). The DataFrame can be seen here:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将检查我们刚刚创建的`merged_df` DataFrame，并确保它具有我们从所有三个DataFrame中预期的所有字段（仅显示前七列）。 DataFrame可以在这里看到：
- en: '![Figure 2.4 – DataFrame constructed by joining the DataFrames A, B, and C](img/Figure_2.4_B15029.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图2.4 – 通过合并DataFrame A、B和C构造的DataFrame](img/Figure_2.4_B15029.jpg)'
- en: Figure 2.4 – DataFrame constructed by joining the DataFrames A, B, and C
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.4 – 通过合并DataFrame A、B和C构造的DataFrame
- en: Notice that the original three DataFrames (`A`, `B`, and `C`) had 1,211, 1,209
    and 1,206 rows respectively, but the combined DataFrame has 1,259 rows. This is
    because we used an outer join, which uses the union of dates across all three
    DataFrames. When it cannot find values for a specific DataFrame for a specific
    date, it places a `NaN` value there for that DataFrame's fields.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，原始三个数据框（`A`、`B` 和 `C`）分别有 1,211、1,209 和 1,206 行，但合并后的数据框有 1,259 行。这是因为我们使用了外部连接，它使用了所有三个数据框的日期的并集。当它在特定日期的特定数据框中找不到值时，它会将该数据框的字段的那个位置放置一个
    `NaN` 值。
- en: Data cleaning
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据清洗
- en: Data cleaning refers to the process of addressing data errors coming from missing
    data, incorrect data values, and outliers.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 数据清洗是指处理来自缺失数据、不正确数据值和异常值的数据错误的过程。
- en: In our example, `merged_df` has missing values for many fields coming from the
    original datasets and coming from merging DataFrames with different sets of dates.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，`merged_df` 的许多字段都缺失原始数据集和不同日期数据框合并而来的字段。
- en: 'Let''s first check if there are any rows where all values are missing (`NaN`),
    as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先检查是否存在所有值都缺失（`NaN`）的行，如下所示：
- en: '[PRE5]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The result shows that we do not have any row with all fields missing, as we
    can see here:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 结果表明，我们没有任何所有字段都缺失的行，如我们所见：
- en: '![Figure 2.5 – DataFrame showing that there are no rows with all fields missing](img/Figure_2.5_B15029.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.5 – DataFrame 表明没有所有字段都缺失的行](img/Figure_2.5_B15029.jpg)'
- en: Figure 2.5 – DataFrame showing that there are no rows with all fields missing
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.5 – DataFrame 表明没有所有字段都缺失的行。
- en: 'Now, let''s find out how many rows exist that have at least one field that
    is missing/`NaN`, as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们找出有多少行存在至少一个字段缺失/`NaN` 的，如下所示：
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'So, it turns out 148 rows out of our 1,259 rows have one or more fields with
    missing values, as shown here:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，结果显示我们的 1,259 行中有 148 行具有一个或多个字段缺失值，如下所示：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'For our further analysis, we need to have valid `Close` prices. Thus, we can
    drop all rows where the `Close` price for any of the three instruments is missing,
    by running the following code:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的进一步分析，我们需要有效的 `Close` 价格。因此，我们可以通过运行以下代码删除所有三个工具的任何 `Close` 价格缺失的行：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'After dropping the missing `Close` prices, we should have no more missing `Close`
    price fields, as illustrated in the following code snippet:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 删除缺失的 `Close` 价格后，我们不应该再有缺失的 `Close` 价格字段，如下代码段所示：
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The result confirms there are no rows left where any of the `Close_A`, `Close_B`,
    or `Close_C` fields are `NaN` values, as we can see here:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 结果证实，不再存在任何 `Close_A`、`Close_B` 或 `Close_C` 字段为 `NaN` 值的行，如我们所见：
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let''s inspect the new DataFrame, as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查新的 DataFrame，如下所示：
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here is the result (displaying only the first seven columns):'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这是结果（仅显示前七列）：
- en: '![Figure 2.6 – Resulting DataFrame with no missing/NaN values for any close
    prices](img/Figure_2.6_B15029.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.6 – 没有任何收盘价缺失/NaN 值的结果 DataFrame](img/Figure_2.6_B15029.jpg)'
- en: Figure 2.6 – Resulting DataFrame with no missing/NaN values for any close prices
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.6 – 没有任何收盘价缺失/NaN 值的结果 DataFrame
- en: As expected, we dropped the 148 rows that had missing/`NaN` values for any of
    the close prices.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期的那样，我们删除了具有任何收盘价缺失/`NaN` 值的 148 行。
- en: 'Next, let''s deal with rows that have `NaN` values for any of the other fields,
    starting with getting a sense of how many such rows exist. We can do this by running
    the following code:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们处理任何其他字段具有 `NaN` 值的行，首先了解有多少这样的行。我们可以通过运行以下代码来做到这一点：
- en: '[PRE12]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here is the output of that query:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这是该查询的输出：
- en: '[PRE13]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: So, there exist 165 rows that have at least some fields with a missing value.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，存在 165 行至少有一些字段缺失值。
- en: 'Let''s quickly inspect a few of the rows with at least some fields with a missing
    value, as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速检查一下至少有一些字段缺失值的几行，如下所示：
- en: '[PRE14]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Some of the rows with some missing values are displayed (displaying only the
    first seven columns), as shown here:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 以下显示了一些具有一些缺失值的行（仅显示前七列），如下所示：
- en: '![Figure 2.7 – DataFrame showing there are still some rows with some missing
    values](img/Figure_2.7_B15029.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.7 – DataFrame 表明仍然有一些行存在一些缺失值](img/Figure_2.7_B15029.jpg)'
- en: Figure 2.7 – DataFrame showing there are still some rows with some missing values
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.7 – DataFrame 表明仍然有一些行存在一些缺失值
- en: So, we can see that the `Low_C` field on `2015-05-18` (not visible in the preceding
    screenshot) and the `Open_B` field on `2020-05-01` have `NaN` values (among 163
    others, of course).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以看到 `2015-05-18`（在前述截屏中不可见）的 `Low_C` 字段和 `2020-05-01` 的 `Open_B` 字段有 `NaN`
    值（当然还有其他 163 个）。
- en: 'Let''s use the `pandas.DataFrame.fillna(...)` method with a method called `backfill`—this
    uses the next valid value after the missing value to fill in the missing value.
    The code is illustrated in the following snippet:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 `pandas.DataFrame.fillna(...)` 方法与一种称为 `backfill` 的方法 —— 这使用缺失值后的下一个有效值来填充缺失值。代码如下所示：
- en: '[PRE15]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Let''s see the impact of the backfilling, as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 backfilling 的影响，如下所示：
- en: '[PRE16]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, this is the output for the query:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这是查询的输出：
- en: '[PRE17]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: As we can see, after the `backfill` operation, there are no more missing/`NaN`
    values left for any field in any row.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，在进行 `backfill` 操作之后，任何行的任何字段都不再有缺失或 `NaN` 值。
- en: Obtaining descriptive statistics
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取描述性统计数据
- en: 'The next step is to generate the key basic statistics on data to build familiarity
    with each field, with the `DataFrame.describe(...)` method. The code is illustrated
    in the following snippet:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是生成数据的关键基本统计信息，以便熟悉每个字段，使用 `DataFrame.describe(...)` 方法。代码如下所示：
- en: '[PRE18]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Notice that we have increased the number of rows of a `pandas` DataFrame to
    display.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们已经增加了要显示的 `pandas` DataFrame 的行数。
- en: 'Here is the output of running `pandas.DataFrame.describe(…)`, displaying only
    the first seven columns:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这是运行 `pandas.DataFrame.describe(…)` 后的输出，仅显示了前七列：
- en: '![Figure 2.8 – Descriptive statistics of the valid_close_complete DataFrame](img/Figure_2.8_B15029.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.8 – 有效关闭完整 DataFrame 的描述统计](img/Figure_2.8_B15029.jpg)'
- en: Figure 2.8 – Descriptive statistics of the valid_close_complete DataFrame
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.8 – 有效关闭完整 DataFrame 的描述统计
- en: The preceding output provides quick summary statistics for every field in our
    DataFrame.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的输出为我们的 DataFrame 中的每个字段提供了快速摘要统计信息。
- en: 'Key observations from *Figure 2.8* are outlined here:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 从 *图 2.8* 的关键观察点可以总结如下：
- en: '`Volume_C` has all statistics values to be `0`, implying every row has the
    `Volume_C` value set to `0`. Therefore, we need to remove this column.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Volume_C` 的所有统计值都为 `0`，这意味着每一行的 `Volume_C` 值都设置为 `0`。因此，我们需要移除此列。'
- en: '`Open_C` has a minimum value of `-400`, which is unlikely to be true for the
    following reasons:'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Open_C` 的最小值为 `-400`，这不太可能是真实的，原因如下：'
- en: a) The other price fields—`High_C`, `Low_C`, `Close_C`, and `Adj Close_C`—all
    have minimum values around `9`, so it doesn't make sense for `Open_C` to have
    a minimum value of `-400`.
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a) 其他价格字段 —— `High_C`、`Low_C`、`Close_C` 和 `Adj Close_C` —— 的所有最小值都约为 `9`，因此
    `Open_C` 具有 `-400` 的最小值是没有意义的。
- en: b) Given that the 25th percentile for `Open_C` is `12.4`, it is unlikely that
    the minimum value would be so much lower than that.
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b) 考虑到 `Open_C` 的第 25 个百分位数为 `12.4`，其最小值不太可能远低于此。
- en: c) The price of an asset should be non-negative.
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c) 资产的价格应为非负数。
- en: '`Low_C` has a maximum value of `330`, which is again unlikely because of the
    following reasons:'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Low_C` 的最大值为 `330`，这同样不太可能，原因如下：'
- en: a) For the same reasons given previously to those outlined previously, as `Open_C`
    is not correct.
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a) 出于先前所述的相同原因，`Open_C` 是不正确的。
- en: b) In addition, considering that `Low_C` should always be lower than `High_C`,
    by definition, the lowest price in a day has to be lower than the highest price
    on a day.
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b) 此外，考虑到 `Low_C` 应始终低于 `High_C`，根据定义，一天中的最低价格必须低于当天的最高价格。
- en: 'Let''s put back the output of all the `pandas` DataFrames to be just two rows,
    as follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将所有 `pandas` DataFrame 的输出恢复为只有两行，如下所示：
- en: '[PRE19]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, let''s remove the `Volume` fields for all three instruments, with the
    following code:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们移除所有三个工具的 `Volume` 字段，使用以下代码：
- en: '[PRE20]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'And the `prices_only` DataFrame has the following data (displaying only the
    first seven columns):'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 而 `prices_only` DataFrame 具有以下数据（仅显示前七列）：
- en: '![Figure 2.9 – The prices_only DataFrame](img/Figure_2.9_B15029.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.9 – 仅价格的 DataFrame](img/Figure_2.9_B15029.jpg)'
- en: Figure 2.9 – The prices_only DataFrame
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.9 – 仅价格的 DataFrame
- en: As expected, after we removed the three volume columns, we reduced the DataFrame
    dimensions to `1111 × 15`—these were previously `1111 × 18`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 预期之中的是，我们移除了三个工具的交易量列之后，将 DataFrame 维度减少到 `1111 × 15` —— 这些以前是 `1111 × 18`。
- en: Visual inspection of the data
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据的视觉检查
- en: There do not seem to be any obvious errors or discrepancies with the other fields,
    so let's plot a quick visualization of the prices to see if that sits in line
    with what we learned from the descriptive statistics.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 似乎没有任何明显的错误或不一致之处，所以让我们快速可视化价格，看看这是否符合我们从描述性统计中学到的内容。
- en: 'First, we will start with the prices of `A`, since we expect those to be correct
    based on the descriptive statistics summary. The code is illustrated in the following
    snippet:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将从`A`的价格开始，因为根据描述性统计摘要，我们期望这些是正确的。代码如下所示：
- en: '[PRE21]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The output is consistent with our expectations, and we can conclude that the
    prices of `A` are valid based on the statistics and the plot shown in the following
    screenshot:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 输出与我们的期望一致，我们可以根据统计数据和下面截图中显示的图表得出`A`的价格是有效的结论：
- en: '![Figure 2.10 – Plot showing Open, Close, High, and Low prices for trading
    instrument A over 5 years](img/Figure_2.10_B15029.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.10 – 展示了交易工具 A 在 5 年内的开盘价、收盘价、最高价和最低价](img/Figure_2.10_B15029.jpg)'
- en: Figure 2.10 – Plot showing Open, Close, High, and Low prices for trading instrument
    A over 5 years
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.10 – 展示了交易工具 A 的开盘价、收盘价、最高价和最低价在 5 年内的价格
- en: 'Now, let''s plot the prices of C to see if the plot provides further evidence
    regarding our suspicions about some prices being incorrect. The code can be seen
    in the following snippet:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们绘制 C 的价格图，看看图表是否提供了关于我们怀疑某些价格不正确的进一步证据。代码如下所示：
- en: '[PRE22]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The output confirms that `Open_C` and `Low_C` have some erroneous values extremely
    far away from other values—these are the outliers. The following screenshot shows
    a plot illustrating this:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 输出证实了`Open_C`和`Low_C`具有一些与其他值极端相距甚远的错误值—这些是异常值。下面的截图显示了说明这一点的图表：
- en: '![Figure 2.11 – Plot showing large outliers in the prices of C in both positive
    and negative directions](img/Figure_2.11_B15029.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.11 – 展示了 C 价格中正负两个方向的大异常值的图表](img/Figure_2.11_B15029.jpg)'
- en: Figure 2.11 – Plot showing large outliers in the prices of C in both positive
    and negative directions
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.11 – 展示了 C 价格中正负两个方向的大异常值的图表
- en: We will need to perform some further data cleaning to eliminate these outlier
    values so that we do not derive incorrect statistical insights from our data.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要进行一些进一步的数据清理，以消除这些异常值，以便我们不从数据中得出不正确的统计见解。
- en: The two most commonly used methods to detect and remove outliers are the **interquartile
    range** (**IQR**) and the Z-score.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 检测和移除异常值最常用的两种方法是**四分位数范围**(**IQR**)和 Z 分数。
- en: IQR
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IQR
- en: The IQR method uses a percentile/quantile range of values over the entire dataset
    to identify and remove outliers.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: IQR 方法使用整个数据集上的百分位数/分位数值范围来识别和移除异常值。
- en: When applying the IQR method, we usually use extreme percentile values, such
    as 5% to 95%, to minimize the risk of removing correct data points.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用 IQR 方法时，我们通常使用极端百分位数值，例如 5% 到 95%，以最小化移除正确数据点的风险。
- en: In our example of `Open_C`, let's use the 25th percentile and 75th percentile
    and remove all data points with values outside that range. The 25th-to-75th percentile
    range is (`12.4, 17.68`), so we would remove the outlier value of `-400`.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`Open_C`示例中，让我们使用第 25 百分位数和第 75 百分位数，并移除所有数值超出该范围的数据点。第 25 到 75 百分位数范围是(`12.4,
    17.68`)，因此我们将移除异常值`-400`。
- en: Z-score
  id: totrans-144
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Z 分数
- en: The Z-score (or standard score) is obtained by subtracting the mean of the dataset
    from each data point and normalizing the result by dividing by the standard deviation
    of the dataset.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: Z 分数（或标准分数）是通过从数据集中减去每个数据点的均值，并通过数据集的标准偏差进行归一化得到的。
- en: In other words, the Z-score of a data point represents the distance in the number
    of standard deviations that the data point is away from the mean of all the data
    points.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，数据点的 Z 分数表示数据点与所有数据点的均值之间的标准偏差距离。
- en: 'For a normal distribution (applicable for large enough datasets) there is a
    distribution rule of **68-95-99**, summarized as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 对于正态分布（适用于足够大的数据集），有一个**68-95-99**的分布规则，总结如下：
- en: 68% of all data will lie in a range of one standard deviation from the mean.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有数据的 68% 将落在距离均值一个标准差的范围内。
- en: 95% of all data will lie in a range of two standard deviations from the mean.
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有数据的 95% 将落在距离均值两个标准差的范围内。
- en: 99% of all data will lie within a range of three standard deviations from the
    mean.
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有数据的 99% 将落在距离均值三个标准差的范围内。
- en: So, after computing Z-scores of all data points in our dataset (which is large
    enough), there is an approximately 1% chance of a data point having a Z-score
    larger than or equal to `3`.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在计算了数据集中所有数据点的 Z 得分（足够大的数据集）之后，存在着大约 1% 的数据点具有 Z 得分大于或等于`3`的概率。
- en: Therefore, we can use this information to filter out all observations with Z-scores
    of `3` or higher to detect and remove outliers.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以利用这些信息筛选出所有 Z 得分为`3`或更高的观察结果以检测并移除异常值。
- en: In our example, we will remove all rows with values whose Z-score is less than
    `-6` or greater than `6`—that is, six standard deviations away from the mean.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们将删除所有 Z 得分小于`-6`或大于`6`的值的行—即，与平均值相差六个标准偏差。
- en: 'First, we use `scipy.stats.zscore(...)` to compute Z-scores of each column
    in the `prices_only` DataFrame, and then we use `numpy.abs(...)` to get the magnitude
    of the Z-scores. Finally, we select rows where all fields have Z-scores lower
    than 6, and save that in a `no_outlier_prices` DataFrame. The code is illustrated
    in the following snippet:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们使用`scipy.stats.zscore(...)`计算`prices_only` DataFrame 中每列的 Z 得分，然后我们使用`numpy.abs(...)`获取
    Z 得分的大小。最后，我们选择所有字段的 Z 得分低于 6 的行，并将其保存在`no_outlier_prices` DataFrame 中。代码如下所示：
- en: '[PRE23]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Let''s see what impact this Z-score outlier removal code had on the price fields
    for instrument `C` by plotting its prices again and comparing to the earlier plot,
    as follows:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个 Z 得分异常值移除代码对仪器`C`的价格字段产生了什么影响，通过重新绘制其价格并与之前的图进行比较，如下所示：
- en: '[PRE24]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Here''s the output:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出：
- en: '![Figure 2.12 – Plot showing the prices of C after removing outliers by applying
    data cleaning](img/Figure_2.12_B15029.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.12 – 应用数据清理移除异常值后显示 C 的价格的绘图](img/Figure_2.12_B15029.jpg)'
- en: Figure 2.12 – Plot showing the prices of C after removing outliers by applying
    data cleaning
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.12 – 应用数据清理移除异常值后显示 C 的价格的绘图
- en: The plot clearly shows that the earlier observation of extreme values for `Open_C`
    and `Low_C` has been discarded; there is no longer the dip of `-400`.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 绘图清楚地显示了`Open_C`和`Low_C`的早期极端值观察已被丢弃；不再有`-400`的低谷。
- en: Note that while we removed the extreme outliers, we were still able to preserve
    the sharp spikes in prices during 2015, 2018, and 2020, thus not leading to a
    lot of data losses.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，虽然我们移除了极端异常值，但我们仍然能够保留 2015 年、2018 年和 2020 年价格的剧烈波动，因此并没有导致大量数据损失。
- en: 'Let''s also check the impact of our outlier removal work by re-inspecting the
    descriptive statistics, as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还要通过重新检查描述性统计数据来检查我们的异常值移除工作的影响，如下所示：
- en: '[PRE25]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'These statistics look significantly better—as we can see in the following screenshot,
    the `min` and `max` values for all prices now look in line with expectations and
    do not have extreme values, so we succeeded in our data cleaning task:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这些统计数据看起来明显更好—正如我们在以下截图中看到的，所有价格的`min`和`max`值现在看起来符合预期，并且没有极端值，所以我们在数据清理任务中取得了成功：
- en: '![Figure 2.13 – Descriptive statistics for the no_outlier_prices selected columns](img/Figure_2.13_B15029.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.13 – 选择的列的无异常价格的描述性统计](img/Figure_2.13_B15029.jpg)'
- en: Figure 2.13 – Descriptive statistics for the no_outlier_prices selected columns
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.13 – 选择的列的无异常价格的描述性统计
- en: 'Let''s reset back the number of rows to display for a `pandas` DataFrame, as
    follows:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将要显示的`pandas` DataFrame的行数重置回来，如下所示：
- en: '[PRE26]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Advanced visualization techniques
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 高级可视化技术
- en: In this section, we will explore univariate and multivariate statistics visualization
    techniques.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨一元和多元统计可视化技术。
- en: 'First, let''s collect the close prices for the three instruments, as follows:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们收集三个工具的收盘价格，如下所
- en: '[PRE27]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Next, let's compute the daily close price changes to evaluate if there is a
    relationship between daily price changes between the three instruments.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们计算每日收盘价格变动，以评估三个工具之间的每日价格变动是否存在关系。
- en: Daily close price changes
  id: totrans-175
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 每日收盘价格变动
- en: 'We will use the `pandas.DataFrame.shift(...)` method to shift the original
    DataFrame one period forward so that we can compute the price changes. The `pandas.DataFrame.fillna(...)`
    method here fixes the one missing value generated in the first row as a result
    of the `shift` operation. Finally, we will rename the columns to `Delta_Close_A`,
    `Delta_Close_B`, and `Delta_Close_C` to reflect the fact that these values are
    price differences and not actual prices. The code is illustrated in the following
    snippet:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `pandas.DataFrame.shift(...)` 方法将原始 DataFrame 向前移动一个周期，以便我们可以计算价格变动。这里的
    `pandas.DataFrame.fillna(...)` 方法修复了由于 `shift` 操作而在第一行生成的一个缺失值。最后，我们将列重命名为 `Delta_Close_A`、`Delta_Close_B`
    和 `Delta_Close_C`，以反映这些值是价格差异而不是实际价格。以下是代码示例：
- en: '[PRE28]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The content of the newly generated `delta_close_prices` DataFrame is shown
    in the following screenshot:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 新生成的 `delta_close_prices` DataFrame 的内容如下截图所示：
- en: '![Figure 2.14 – The delta_close_prices DataFrame](img/Figure_2.14_B15029.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.14 – delta_close_prices DataFrame](img/Figure_2.14_B15029.jpg)'
- en: Figure 2.14 – The delta_close_prices DataFrame
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.14 – delta_close_prices DataFrame
- en: These values look correct, judging from the first few actual prices and the
    calculated price differences.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 从前几个实际价格和计算出的价格差异来看，这些值看起来是正确的。
- en: 'Now, let''s quickly inspect the summary statistics for this new DataFrame to
    get a sense of how the delta price values are distributed, as follows:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们快速检查这个新 DataFrame 的摘要统计信息，以了解价格差值的分布情况，如下所示：
- en: '[PRE29]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The descriptive statistics on this DataFrame are shown in the following screenshot:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 DataFrame 的描述性统计如下所示截图所示：
- en: '![Figure 2.15 – Descriptive statistics for the delta_close_prices DataFrame](img/Figure_2.15_B15029.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.15 – delta_close_prices DataFrame 的描述性统计](img/Figure_2.15_B15029.jpg)'
- en: Figure 2.15 – Descriptive statistics for the delta_close_prices DataFrame
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.15 – delta_close_prices DataFrame 的描述性统计
- en: We can observe from these statistics that all three delta values' means are
    close to 0, with instrument `A` experiencing large price swings and instrument
    `C` experiencing significantly smaller price moves (from the `std` field).
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从这些统计数据中观察到，所有三个 delta 值的均值都接近于 0，仪器 `A` 经历了大幅价格波动，而仪器 `C` 则经历了明显较小的价格波动（来自
    `std` 字段）。
- en: Histogram plot
  id: totrans-188
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 直方图
- en: 'Let''s observe the distribution of `Delta_Close_A` to get more familiar with
    it, using a histogram plot. The code for this is shown in the following snippet:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们观察 `Delta_Close_A` 的分布，以更加熟悉它，使用直方图绘制。以下是代码示例：
- en: '[PRE30]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In the following screenshot, we can see that the distribution is approximately
    normally distributed:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的截图中，我们可以看到分布大致呈正态分布：
- en: '![Figure 2.16 – Histogram of Delta_Close_A values roughly normally distributed
    around the 0 value ](img/Figure_2.16_B15029.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.16 – Delta_Close_A 值的直方图大致呈正态分布，围绕着 0 值](img/Figure_2.16_B15029.jpg)'
- en: Figure 2.16 – Histogram of Delta_Close_A values roughly normally distributed
    around the 0 value
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.16 – Delta_Close_A 值的直方图大致呈正态分布，围绕着 0 值
- en: Box plot
  id: totrans-194
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 箱线图
- en: 'Let''s draw a box plot, which also helps in assessing the values'' distribution.
    The code for this is shown in the following snippet:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们绘制一个箱线图，这也有助于评估值的分布。以下是相应代码的示例：
- en: '[PRE31]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The output can be seen in the following screenshot:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下截图所示：
- en: '![Figure 2.17 – Box plot showing mean, median, IQR (25th to 75th percentile),
    and outliers](img/Figure_2.17_B15029.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.17 – 箱线图显示均值、中位数、四分位距（25th到75th百分位数）和异常值](img/Figure_2.17_B15029.jpg)'
- en: Figure 2.17 – Box plot showing mean, median, IQR (25th to 75th percentile),
    and outliers
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.17 – 箱线图显示均值、中位数、四分位距（25th到75th百分位数）和异常值
- en: Correlation charts
  id: totrans-200
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 相关性图表
- en: The first step in multivariate data statistics is to assess the correlations
    between `Delta_Close_A`, `Delta_Close_B`, and `Delta_Close_C`.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 多元数据统计的第一步是评估 `Delta_Close_A`、`Delta_Close_B` 和 `Delta_Close_C` 之间的相关性。
- en: The most convenient way to do that is to plot a correlation scatter matrix that
    shows the pairwise relationship between the three variables, as well as the distribution
    of each individual variable.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 最方便的方法是绘制一个相关性散点矩阵，显示三个变量之间的成对关系，以及每个单独变量的分布。
- en: 'In our example, we demonstrate the option of using **kernel density estimation**
    (**KDE**), which is closely related to histograms but provides a smoother distribution
    surface across the plots on the diagonals. The code for this is shown in the following
    snippet:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们演示了使用**核密度估计**（**KDE**）的选项，这与直方图密切相关，但在对角线上的图中提供了更平滑的分布表面。其代码如下所示：
- en: '[PRE32]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This plot indicates that there is a strong positive correlation between `Delta_Close_A`
    and `Delta_Close_B` and a strong negative correlation between `Delta_Close_C`
    and the other two variables. The diagonals also display the distribution of each
    individual variable, using KDE.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 这个图表表明，`Delta_Close_A` 和 `Delta_Close_B` 之间存在强烈的正相关性，以及 `Delta_Close_C` 与另外两个变量之间存在强烈的负相关性。对角线也显示了每个单独变量的分布，使用了
    KDE。
- en: 'A scatter plot of the fields can be seen in the following screenshot:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是字段的散点图：
- en: '![Figure 2.18 – Scatter plot of Delta_Close fields with KDE histogram on the
    diagonals](img/Figure_2.18_B15029.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.18 – Delta_Close 字段的散点图，对角线上是 KDE 直方图](img/Figure_2.18_B15029.jpg)'
- en: Figure 2.18 – Scatter plot of Delta_Close fields with KDE histogram on the diagonals
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.18 – Delta_Close 字段的散点图，对角线上是 KDE 直方图
- en: 'Next, let''s look at some statistics that provide the relationship between
    the variables. `DataFrame.corr(...)` does that for us and also displays linear
    correlations. This can be seen in the following code snippet:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看一些提供变量之间关系的统计数据。`DataFrame.corr(...)` 为我们完成了这项工作，并且还显示了线性相关性。这可以在以下代码片段中看到：
- en: '[PRE33]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The correlation matrix confirms that `Delta_Close_A` and `Delta_Close_B` have
    a strong positive correlation (very close to 1.0, which is the maximum), as we
    expected based on the scatter plot. Also, `Delta_Close_C` is negatively correlated
    (closer to -1.0 than 0.0) to the other two variables.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 相关矩阵证实了 `Delta_Close_A` 和 `Delta_Close_B` 之间存在强烈的正相关性（非常接近 1.0，这是最大值），这符合我们根据散点图的预期。此外，`Delta_Close_C`
    与其他两个变量呈负相关（接近 -1.0 而不是 0.0）。
- en: 'You can see the correlation matrix in the following screenshot:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下屏幕截图中看到相关矩阵：
- en: '![Figure 2.19 – Correlation matrix for Delta_Close_A, Delta_Close_B, and Delta_Close_C](img/Figure_2.19_B15029.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.19 – Delta_Close_A、Delta_Close_B 和 Delta_Close_C 的相关矩阵](img/Figure_2.19_B15029.jpg)'
- en: Figure 2.19 – Correlation matrix for Delta_Close_A, Delta_Close_B, and Delta_Close_C
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.19 – Delta_Close_A、Delta_Close_B 和 Delta_Close_C 的相关矩阵
- en: Pairwise correlation heatmap
  id: totrans-215
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 成对相关热图
- en: 'An alternative visualization technique known as a `seaborn.heatmap(...)`, as
    illustrated in the following code snippet:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 一种称为 `seaborn.heatmap(...)` 的替代可视化技术，如下面的代码片段所示：
- en: '[PRE34]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'In the plot shown in the following screenshot, the rightmost scale shows a
    legend where the darkest values represent the strongest negative correlation and
    the lightest values represent the strongest positive correlations:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的屏幕截图中显示的图中，最右侧的刻度显示了一个图例，其中最暗的值代表最强的负相关，最浅的值代表最强的正相关：
- en: '![Figure 2.20 – Seaborn heatmap visualizing pairwise correlations between Delta_Close
    fields](img/Figure_2.20_B15029.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.20 – Seaborn 热图可视化 Delta_Close 字段之间的成对相关性](img/Figure_2.20_B15029.jpg)'
- en: Figure 2.20 – Seaborn heatmap visualizing pairwise correlations between Delta_Close
    fields
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.20 – Seaborn 热图可视化 Delta_Close 字段之间的成对相关性
- en: The heatmap shows graphically the same message as the table in the previous
    section— there is a very high correlation between `Delta_Close_A` and `Delta_Close_B`
    and a very high negative correlation between `Delta_Close_A` and `Delta_Close_C`.
    There is also a very high negative correlation between `Delta_Close_B` and `Delta_Close_C`.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 热图在图表中以图形方式显示了前一节中的表格信息 —— `Delta_Close_A` 和 `Delta_Close_B` 之间存在非常高的相关性，而 `Delta_Close_A`
    和 `Delta_Close_C` 之间存在非常高的负相关性。`Delta_Close_B` 和 `Delta_Close_C` 之间也存在非常高的负相关性。
- en: Revelation of the identity of A, B, and C and EDA's conclusions
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: A、B 和 C 的身份揭示以及 EDA 的结论
- en: The `A` instrument is the `B` instrument is the `C` instrument is the **Chicago
    Board Options Exchange** (**CBOE**) **Volatility Index** (**VIX**), which basically
    tracks how volatile markets are at any given time (basically, a function of equity
    index price swings).
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '`A` 仪器是 `B` 仪器是 `C` 仪器是**芝加哥期权交易所**（**CBOE**）**波动率指数**（**VIX**），基本上跟踪市场在任何给定时间内的波动性（基本上，是股票指数价格波动的函数）。'
- en: 'From our EDA on the mystery instruments, we drew the following conclusions:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们对神秘仪器的 EDA 中，我们得出了以下结论：
- en: '`C` (VIX) cannot have negative prices or prices above 90, which has historically
    been true.'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`C`（VIX）的价格不能为负值，也不能超过90，这在历史上一直成立。'
- en: '`A` (DJIA) and `B` (SPY) had huge drops in 2008 and 2020, corresponding to
    the stock market crash and the COVID-19 pandemic, respectively. Also, the price
    of `C` (VIX) spiked at the same time, indicating heightened market turmoil.'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`A`（DJIA）和 `B`（SPY）在2008年和2020年都有巨大的跌幅，分别对应股市崩盘和 COVID-19 大流行。同时，`C`（VIX）的价格也在同一时间上升，表明市场动荡加剧。'
- en: '`A` (DJIA) has largest daily price swings, followed by `B` (SPY), and finally
    `C` (VIX), with very low daily price swings. These are also correct observations
    considering the underlying instruments that they were hiding.'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`A`（DJIA）的每日价格波动最大，其次是 `B`（SPY），最后是 `C`（VIX），其每日价格波动非常小。考虑到它们所隐藏的基础工具，这些观察也是正确的。'
- en: '`A` (DJIA) and `B` (SPY) have very strong positive correlations, which makes
    sense since both are large cap equity indices. `C` (VIX) has strong negative correlations
    with both `A` (DJIA) and `B` (SPY), which also makes sense since during periods
    of prosperity, volatility remains low and markets rise, and during periods of
    crisis, volatility spikes and markets drop.'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '`A`（DJIA）和 `B`（SPY）具有非常强的正相关性，这是有道理的，因为它们都是大型市值股票指数。`C`（VIX）与 `A`（DJIA）和 `B`（SPY）都有很强的负相关性，这也是有道理的，因为在繁荣时期，波动性保持低位，市场上涨，在危机期间，波动性激增，市场下跌。'
- en: In the next section, we introduce one special Python library that generates
    the most common EDA charts and tables automatically.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们介绍了一个特殊的 Python 库，它可以自动生成最常见的 EDA 图表和表格。
- en: Special Python libraries for EDA
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于 EDA 的特殊 Python 库
- en: 'There are multiple Python libraries that provide EDA in a single line of code.
    One of the most advanced of them is `dtale`, shown in the following code snippet:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 有多个 Python 库可以提供单行代码的 EDA。其中最先进的之一是 `dtale`，如下面的代码片段所示：
- en: '[PRE35]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The preceding command produces a table with all the data (displaying only the
    first seven columns), as follows:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令生成了一个包含所有数据的表格（仅显示前七列），如下所示：
- en: '![Figure 2.21 – The dtale component showing spreadsheet-like control over the
    valid_close_df DataFrame](img/Figure_2.21_B15029.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![图2.21 – dtale 组件显示对 valid_close_df DataFrame 的类似电子表格的控制](img/Figure_2.21_B15029.jpg)'
- en: Figure 2.21 – The dtale component showing spreadsheet-like control over the
    valid_close_df DataFrame
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.21 – dtale 组件显示对 valid_close_df DataFrame 的类似电子表格的控制
- en: 'Clicking on the arrow at the top displays a menu with all the functionality,
    as illustrated in the following screenshot:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 点击顶部的箭头会显示一个带有所有功能的菜单，如下面的截图所示：
- en: '![Figure 2.22 – The dtale global menu showing its functionality](img/Figure_2.22_B15029.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![图2.22 – dtale 全局菜单显示其功能](img/Figure_2.22_B15029.jpg)'
- en: Figure 2.22 – The dtale global menu showing its functionality
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.22 – dtale 全局菜单显示其功能
- en: 'Clicking on the column header displays each feature''s individual commands,
    as illustrated in the following screenshot:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 点击列标题会显示每个特征的单独命令，如下面的截图所示：
- en: '![Figure 2.23 – The dtale column menu showing column functionality](img/Figure_2.23_B15029.jpg)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![图2.23 – dtale 列菜单显示的列功能](img/Figure_2.23_B15029.jpg)'
- en: Figure 2.23 – The dtale column menu showing column functionality
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.23 – dtale 列菜单显示列功能
- en: Interactive EDA, rather than command-driven EDA, has its advantages—it is intuitive,
    it promotes visual creativity, and it can be faster.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 交互式 EDA，而不是命令驱动的 EDA，具有其优势——它直观、促进视觉创造力，并且速度更快。
- en: Summary
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The objective of EDA is to get a feel for the dataset we work with, and to correct
    basic data errors such as unlikely outliers. We have described both an EDA built
    by running individual Python commands and an automated EDA using a special Python
    EDA library.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: EDA 的目标是了解我们处理的数据集，并纠正基本数据错误，如不太可能的异常值。我们已经描述了通过运行单独的 Python 命令构建的 EDA，以及使用特殊的
    Python EDA 库进行自动化的 EDA。
- en: 'The next chapter introduces us to one of the most important Python libraries:
    `numpy`.'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章介绍了我们其中一个最重要的 Python 库：`numpy`。
