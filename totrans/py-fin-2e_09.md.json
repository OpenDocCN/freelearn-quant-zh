["```py\nimport scipy as sp\na=1\nb=6\nc=3\ninside=b**2-4*a*c\nif inside>0:\n    squared=sp.sqrt(inside)\nprint(\"x1=\",(b+squared)/(2*a))\nprint(\"x2=\",(b-squared)/(2*a)) \n('x1=', 5.4494897427831779)\n('x2=', 0.55051025721682212)\n```", "```py\nimport scipy as sp\nsigma1=0.06\nsigma2=0.24\nvar1=sigma1**2\nvar2=sigma2**2\nrho=-1\nn=1000\nportVar=10   # assign a big number\ntiny=1.0/n\n\nfor i in sp.arange(n):\n    w1=i*tiny\n    w2=1-w1\n    var=w1**2*var1 +w2**2*var2+2*w1*w2*rho*sigma1*sigma2\n    if(var<portVar):\n        portVar=var\n        finalW1=w1\n    #print(vol)\nprint(\"min vol=\",sp.sqrt(portVar), \"w1=\",finalW1) ('min vol=', ('min vol=', ('min vol=', 9.3132257461547852e-10, 'w1=', 0.80000000000000004)\n```", "```py\nimport scipy as sp\nsp.random.seed(123)\nn=1000\nrho=0.3\nx1=sp.random.normal(size=n)\nx2=sp.random.normal(size=n)\ny1=x1\ny2=rho*x1+sp.sqrt(1-rho**2)*x2\nprint(sp.corrcoef(y1,y2))\n[[ 1\\.          0.28505213]\n [ 0.28505213  1\\.        ]]\n```", "```py\nimport scipy as sp\nimport matplotlib.pyplot as plt\nx=sp.arange(-5,5,0.01)\na=3.2\nb=5.0\ny=a+b*x**2\nplt.plot(x,y)\nplt.title(\"y= \"+str(a)+\"+\"+str(b)+\"x^2\")\nplt.ylabel(\"y\")\nplt.xlabel(\"x\")\nplt.show()\n```", "```py\nfrom scipy.optimize import minimize\ndef myFunction(x):\n    return (3.2+5*x**2)\nx0=100\nres = minimize(myFunction,x0,method='nelder-mead',options={'xtol':1e-8,'disp': True})\n```", "```py\nfrom scipy import optimize\nimport numpy as np\nimport matplotlib.pyplot as plt\n# define a function \na=3.4\nb=2.0\nc=0.8\ndef f(x):\n    return a-b*np.exp(-(x - c)**2)\n\nx=np.arange(-3,3,0.1)\ny=f(x)\nplt.title(\"y=a-b*exp(-(x-c)^2)\")\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\nplt.plot(x,y)\nplt.show()\n\n# find the minimum\nsolution= optimize.brent(f) \nprint(solution)\n```", "```py\nfrom matplotlib.finance import quotes_historical_yahoo_ochl as getData\nimport numpy as np\nimport pandas as pd\nimport scipy as sp\n\ntickers=('IBM','WMT','C')  # tickers\nbegdate=(2012,1,1)         # beginning date \nenddate=(2016,12,31)       # ending date\nn=len(tickers)             # number of observations\nA=1                        # risk preference\n\ndef ret_f(ticker,begdate,enddte):\n    x=getData(ticker,begdate,enddate,asobject=True,adjusted=True)\n    ret =x.aclose[1:]/x.aclose[:-1]-1\n    return ret\n\ndef myUtilityFunction(ret,A=1):\n    meanDaily=sp.mean(ret)\n    varDaily=sp.var(ret)\n    meanAnnual=(1+meanDaily)**252\n    varAnnual=varDaily*252\n    return meanAnnual- 0.5*A*varAnnual\n\nfor i in sp.arange(n):\n    ret=ret_f(tickers[i],begdate,enddate)\n    print(myUtilityFunction(ret,A))\n```", "```py\nfrom matplotlib.finance import quotes_historical_yahoo_ochl as getData\nimport numpy as np\nimport pandas as pd\nimport scipy as sp\n\ntickers=('IBM','WMT','C')  # tickers\nbegdate=(2012,1,1)         # beginning date \nenddate=(2016,12,31)       # ending date\nn=len(tickers)             # number of observations\n\ndef ret_f(ticker,begdate,enddte):\n    x=getData(ticker,begdate,enddate,asobject=True,adjusted=True)\n    ret =x.aclose[1:]/x.aclose[:-1]-1\n    return ret\n\ndef meanVarAnnual(ret):\n    meanDaily=sp.mean(ret)\n    varDaily=sp.var(ret)\n    meanAnnual=(1+meanDaily)**252\n    varAnnual=varDaily*252\nreturn meanAnnual, varAnnual\n\nprint(\"meanAnnual,      varAnnjal\")\nfor i in sp.arange(n):\n    ret=ret_f(tickers[i],begdate,enddate)\n    print(meanVarAnnual(ret))\n```", "```py\nimport statsimport numpy as np\nimport pandas as pd\ntickers=['IBM','dell','wmt']\npath1='http://chart.yahoo.com/table.csv?s=^GSPC'\nfinal=pd.read_csv(path1,usecols=[0,6],index_col=0)\nfinal.columns=['^GSPC']\npath2='http://chart.yahoo.com/table.csv?s=ttt'\nfor ticker in tickers:\n    print ticker\n    x = pd.read_csv(path2.replace('ttt',ticker),usecols=[0,6],index_col=0)\n    x.columns=[ticker]\n    final=pd.merge(final,x,left_index=True,right_index=True)\n```", "```py\n>>>final.head()\n              ^GSPC     IBM   dell    wmt\nDate                                     \n2013-10-18  1744.50  172.85  13.83  75.71\n2013-10-17  1733.15  173.90  13.85  75.78\n2013-10-16  1721.54  185.73  13.85  75.60\n2013-10-15  1698.06  183.67  13.83  74.37\n2013-10-14  1710.14  185.97  13.85  74.68\n>>>final.tail()\n             ^GSPC    IBM  dell   wmt\nDate                                 \n1988-08-23  257.09  17.38  0.08  2.83\n1988-08-22  256.98  17.36  0.08  2.87\n1988-08-19  260.24  17.67  0.09  2.94\n1988-08-18  261.03  17.97  0.09  2.98\n1988-08-17  260.77  17.97  0.09  2.98\n>>>\n```", "```py\nimport pandas as pd\nimport scipy as sp\ndf=pd.read_pickle(\"c:/temp/yanMonthly.pkl\")\nprint(sp.unique(df.index))\n['000001.SS' 'A' 'AA' 'AAPL' 'BC' 'BCF' 'C' 'CNC' 'COH' 'CPI' 'DELL' 'GE'\n 'GOLDPRICE' 'GV' 'GVT' 'HI' 'HML' 'HPS' 'HY' 'IBM' 'ID' 'IL' 'IN' 'INF'\n 'ING' 'INY' 'IO' 'ISL' 'IT' 'J' 'JKD' 'JKE' 'JPC' 'KB' 'KCC' 'KFT' 'KIE'\n 'KO' 'KOF' 'LBY' 'LCC' 'LCM' 'LF' 'LG' 'LM' 'M' 'MA' 'MAA' 'MD' 'MFL' 'MM'\n 'MPV' 'MY' 'Mkt_Rf' 'NEV' 'NIO' 'NP' 'NU' 'NYF' 'OI' 'OPK' 'PAF' 'PFO'\n 'PSJ' 'PZZA' 'Q' 'RH' 'RLV' 'Rf' 'Russ3000E_D' 'Russ3000E_X' 'S' 'SBR'\n 'SCD' 'SEF' 'SI' 'SKK' 'SMB' 'STC' 'T' 'TA' 'TBAC' 'TEN' 'TK' 'TLT' 'TOK'\n 'TR' 'TZE' 'UHS' 'UIS' 'URZ' 'US_DEBT' 'US_GDP2009dollar'\n 'US_GDP2013dollar' 'V' 'VC' 'VG' 'VGI' 'VO' 'VV' 'WG' 'WIFI' 'WMT' 'WR'\n 'XLI' 'XON' 'Y' 'YANG' 'Z' '^AORD' '^BSESN' '^CCSI' '^CSE' '^FCHI' '^FTSE'\n '^GSPC' '^GSPTSE' '^HSI' '^IBEX' '^ISEQ' '^JKSE' '^KLSE' '^KS11' '^MXX'\n '^NZ50' '^OMX' '^STI' '^STOXX50E' '^TWII']\n```", "```py\nimport scipy as sp\nimport pandas as pd\nimport numpy as np\nn_stocks=10\nx=pd.read_pickle('c:/temp/yanMonthly.pkl')\nibm=x[x.index=='IBM']\nprint(ibm.head(3))\nprint(ibm.tail(3))\n          DATE  VALUE\nNAME                 \nIBM   19620131   2.36\nIBM   19620228   2.34\n          DATE   VALUE\nNAME                  \nIBM   20130930  185.18\nIBM   20131031  179.21\nIBM   20131104  180.27\n```", "```py\nimport scipy as sp\nimport pandas as pd\nimport numpy as np\nn_stocks=10\nx=pd.read_pickle('c:/temp/yanMonthly.pkl')\ndef ret_f(ticker):\n    a=x[x.index==ticker]\n    p=sp.array(a['VALUE'])\n    ddate=a['DATE']\n    ret=p[1:]/p[:-1]-1\n    output=pd.DataFrame(ret,index=ddate[1:])\n    output.columns=[ticker]\n    return output\nret=ret_f('IBM')\nprint(ret.head())\n               IBM\nDATE              \n19620228 -0.008475\n19620330 -0.008547\n19620430 -0.146552\n19620531 -0.136364\n19620629 -0.134503\n```", "```py\nimport scipy as sp\nimport pandas as pd\nimport numpy as np\nn_stocks=10\nx=pd.read_pickle('c:/temp/yanMonthly.pkl')\nx2=sp.unique(np.array(x.index))\nx3=x2[x2<'ZZZZ']                       # remove all indices\nsp.random.seed(1234567)\nnonStocks=['GOLDPRICE','HML','SMB','Mkt_Rf','Rf','Russ3000E_D','US_DEBT','Russ3000E_X','US_GDP2009dollar','US_GDP2013dollar']\nx4=list(x3)\n\nfor i in range(len(nonStocks)):\n    x4.remove(nonStocks[i])\nk=sp.random.uniform(low=1,high=len(x4),size=n_stocks)\ny,s=[],[]\n\nfor i in range(n_stocks):\n    index=int(k[i])\n    y.append(index)\n    s.append(x4[index])\nfinal=sp.unique(y)\nprint(s)\n\ndef ret_f(ticker):\n    a=x[x.index==ticker]\n    p=sp.array(a['VALUE'])\n    ddate=a['DATE']\n    ret=p[1:]/p[:-1]-1\n    output=pd.DataFrame(ret,index=ddate[1:])\n    output.columns=[ticker]\n    return output\nfinal=ret_f(s[0])\nfor i in sp.arange(1,n_stocks):\n    ret=ret_f(s[i])\n    final=pd.merge(final,ret,left_index=True, right_index=True)\n```", "```py\n                IO         A        AA        KB      DELL        IN  \\\nDATE                                                                   \n20110930 -0.330976 -0.152402 -0.252006 -0.206395 -0.048679 -0.115332   \n20111031  0.610994  0.185993  0.124464  0.192002  0.117690  0.237730   \n20111130 -0.237533  0.011535 -0.066794 -0.106274 -0.002616 -0.090458   \n20111230  0.055077 -0.068422 -0.135992 -0.102006 -0.072131 -0.065395   \n20120131  0.212072  0.215972  0.173964  0.209317  0.178092  0.230321   \n\n               INF       IBM       SKK        BC  \nDATE                                              \n20110930 -0.228456  0.017222  0.227586 -0.116382  \n20111031  0.142429  0.055822 -0.305243  0.257695  \n20111130 -0.038058  0.022314 -0.022372  0.057484  \n20111230  0.059345 -0.021882 -0.024262 -0.030140  \n20120131  0.079202  0.047379 -0.142131  0.182020\n```", "```py\nimport numpy as np\nret=np.matrix(np.array([[0.1,0.2],[0.10,0.1071],[-0.02,0.25],[0.012,0.028],[0.06,0.262],[0.14,0.115]]))\nprint(\"return matrix\")\nprint(ret)\ncovar=ret.T*ret\nprint(\"covar\")\nprint(covar)\nweight=np.matrix(np.array([0.4,0.6]))\nprint(\"weight \")\nprint(weight)\nprint(\"mean return\")\nprint(weight*covar*weight.T)\n```", "```py\nreturn matrix\n[[ 0.1     0.2   ]\n [ 0.1     0.1071]\n [-0.02    0.25  ]\n [ 0.012   0.028 ]\n [ 0.06    0.262 ]\n [ 0.14    0.115 ]]\ncovar\n[[ 0.043744    0.057866  ]\n [ 0.057866    0.19662341]]\nweight \n[[ 0.4  0.6]]\nmean return\n[[ 0.10555915]]\n```", "```py\nimport numpy as np\nret=np.matrix(np.array([[0.1,0.2],[0.10,0.1071],[-0.02,0.25],[0.012,0.028],[0.06,0.262],[0.14,0.115]]))\ncovar=np.dot(ret.T,ret)\nprint(\"covar\")\nprint(covar)\n```", "```py\nfrom matplotlib.finance import quotes_historical_yahoo_ochl as getData\nimport numpy as np\nimport pandas as pd\nimport scipy as sp\nfrom scipy.optimize import fmin\n```", "```py\n    ticker=('IBM','WMT','C')   # tickers\n    begdate=(1990,1,1)         # beginning date \n    enddate=(2012,12,31)       # ending date\n    rf=0.0003                  # annual risk-free rate\n    ```", "```py\n    # function 1: \n    def ret_annual(ticker,begdate,enddte):\n        x=getData(ticker,begdate,enddate,asobject=True,adjusted=True)\n        logret =sp.log(x.aclose[1:]/x.aclose[:-1])\n        date=[]\n        d0=x.date\n        for i in range(0,sp.size(logret)):\n            date.append(d0[i].strftime(\"%Y\"))\n        y=pd.DataFrame(logret,date,columns=[ticker])\n        return sp.exp(y.groupby(y.index).sum())-1\n\n    # function 2: estimate portfolio variance \n    def portfolio_var(R,w):\n        cor = sp.corrcoef(R.T)\n        std_dev=sp.std(R,axis=0)\n        var = 0.0\n        for i in xrange(n):\n            for j in xrange(n):\n                var += w[i]*w[j]*std_dev[i]*std_dev[j]*cor[i, j]\n        return var\n\n    # function 3: estimate Sharpe ratio\n    def sharpe(R,w):\n        var = portfolio_var(R,w)\n        mean_return=sp.mean(R,axis=0)\n        ret = sp.array(mean_return)\n        return (sp.dot(w,ret) - rf)/sp.sqrt(var)\n\n    # function 4: for given n-1 weights, return a negative sharpe ratio\n    def negative_sharpe_n_minus_1_stock(w):\n        w2=sp.append(w,1-sum(w))\n        return -sharpe(R,w2)        # using a return matrix here!!!!!!\n    ```", "```py\n    n=len(ticker)              # number of stocks\n    x2=ret_annual(*ticker[0],begdate,enddate) \n    for i in range(1,n):\n        x_=ret_annual(ticker[i],begdate,enddate) \n        x2=pd.merge(x2,x_,left_index=True,right_index=True)\n\n    # using scipy array format \n    R = sp.array(x2)\n    print('Efficient porfolio (mean-variance) :ticker used')\n    print(ticker)\n    print('Sharpe ratio for an equal-weighted portfolio')\n    equal_w=sp.ones(n, dtype=float) * 1.0 /n \n    print(equal_w)\n    print(sharpe(R,equal_w))\n\n    # for n stocks, we could only choose n-1 weights\n    w0= sp.ones(n-1, dtype=float) * 1.0 /n \n    w1 = fmin(negative_sharpe_n_minus_1_stock,w0)\n    final_w = sp.append(w1, 1 - sum(w1))\n    final_sharpe = sharpe(R,final_w)\n    print ('Optimal weights are ')\n    print (final_w)\n    print ('final Sharpe ratio is ')\n    print(final_sharpe)\n    ```", "```py\nEfficient porfolio (mean-variance) :ticker used\n('IBM', 'WMT', 'C')\nSharpe ratio for an equal-weighted portfolio\n[ 0.33333333  0.33333333  0.33333333]\n0.634728319263\nOptimization terminated successfully.\n         Current function value: -0.669758\n         Iterations: 31\n         Function evaluations: 60\nOptimal weights are \n[ 0.49703463  0.31044168  0.19252369]\nfinal Sharpe ratio is \n0.66975823926\n```", "```py\nfrom matplotlib.finance import quotes_historical_yahoo_ochl as getData\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport scipy as sp\nfrom numpy.linalg import inv, pinv\n```", "```py\n    begYear,endYear = 2001,2013\n    stocks=['IBM','WMT','AAPL','C','MSFT']\n    ```", "```py\n    def ret_monthly(ticker):  #  function 1\n        x = getData(ticker,(begYear,1,1),(endYear,12,31),asobject=True,adjusted=True)\n        logret=np.log(x.aclose[1:]/x.aclose[:-1]) \n        date=[]\n        d0=x.date\n        for i in range(0,np.size(logret)): \n            date.append(''.join([d0[i].strftime(\"%Y\"),d0[i].strftime(\"%m\")]))\n        y=pd.DataFrame(logret,date,columns=[ticker]) \n        return y.groupby(y.index).sum()\n\n    # function 2: objective function \n    def objFunction(W, R, target_ret):\n        stock_mean=np.mean(R,axis=0) \n        port_mean=np.dot(W,stock_mean)          # portfolio mean \n        cov=np.cov(R.T)                         # var-cov matrix\n        port_var=np.dot(np.dot(W,cov),W.T)     # portfolio variance \n        penalty = 2000*abs(port_mean-target_ret)# penalty 4 deviation \n        return np.sqrt(port_var) + penalty     # objective function\n    ```", "```py\n    R0=ret_monthly(stocks[0])                   # starting from 1st stock \n    n_stock=len(stocks)                         # number of stocks\n    for i in xrange(1,n_stock):                 # merge with other stocks \n        x=ret_monthly(stocks[i]) \n        R0=pd.merge(R0,x,left_index=True,right_index=True)\n        R=np.array(R0)\n    ```", "```py\n    out_mean,out_std,out_weight=[],[],[] \n    stockMean=np.mean(R,axis=0)\n    for r in np.linspace(np.min(stockMean),np.max(stockMean),num=100):\n        W = np.ones([n_stock])/n_stock    # starting from equal weights \n        b_ = [(0,1) \n        for i in range(n_stock)]          # bounds, here no short \n        c_ = ({'type':'eq', 'fun': lambda W: sum(W)-1\\. })#constraint\n        result=sp.optimize.minimize(objFunction,W,(R,r),method='SLSQP',constraints=c_, bounds=b_)\n        if not result.success:            # handle error raise \n            BaseException(result.message)\n        out_mean.append(round(r,4))       # 4 decimal places \n        std_=round(np.std(np.sum(R*result.x,axis=1)),6) \n        out_std.append(std_)\n        out_weight.append(result.x)\n    ```", "```py\n    plt.title('Efficient Frontier')\n    plt.xlabel('Standard Deviation of the porfolio (Risk))') \n    plt.ylabel('Return of the portfolio') \n    plt.figtext(0.5,0.75,str(n_stock)+' stock are used: ') \n    plt.figtext(0.5,0.7,' '+str(stocks))\n    plt.figtext(0.5,0.65,'Time period: '+str(begYear)+' ------ '+str(endYear)) \n    plt.plot(out_std,out_mean,'--')\n    plt.show()\n    ```", "```py\nimport matplotlib.pyplot as plt\nfrom matplotlib.finance import quotes_historical_yahoo_ochl as getData\nimport numpy as np\nimport pandas as pd\nimport scipy as sp\nfrom scipy.optimize import fmin\n\n# Step 1: input area\nticker=('IBM','WMT','C')   # tickers\nbegdate=(1990,1,1)         # beginning date \nenddate=(2012,12,31)       # ending date\nrf=0.0003                  # annual risk-free rate\nbetaGiven=(0.8,0.4,0.3)    # given beta's \n\n# Step 2: define a few functions\n\n# function 1: \ndef ret_annual(ticker,begdate,enddte):\n    x=getData(ticker,begdate,enddate,asobject=True,adjusted=True)\n    logret =sp.log(x.aclose[1:]/x.aclose[:-1])\n    date=[]\n    d0=x.date\n    for i in range(0,sp.size(logret)):\n        date.append(d0[i].strftime(\"%Y\"))\n    y=pd.DataFrame(logret,date,columns=[ticker])\n    return sp.exp(y.groupby(y.index).sum())-1\n\n# function 2: estimate portfolio beta \ndef portfolioBeta(betaGiven,w):\n    #print(\"betaGiven=\",betaGiven,\"w=\",w)\n    return sp.dot(betaGiven,w)\n# function 3: estimate Treynor\ndef treynor(R,w):\n    betaP=portfolioBeta(betaGiven,w)\n    mean_return=sp.mean(R,axis=0)\n    ret = sp.array(mean_return)\n    return (sp.dot(w,ret) - rf)/betaP\n\n# function 4: for given n-1 weights, return a negative Sharpe ratio\ndef negative_treynor_n_minus_1_stock(w):\n    w2=sp.append(w,1-sum(w))\n    return -treynor(R,w2)        # using a return matrix here!!!!!!\n\n# Step 3: generate a return matrix (annul return)\nn=len(ticker)                    # number of stocks\nx2=ret_annual(ticker[0],begdate,enddate) \nfor i in range(1,n):\n    x_=ret_annual(ticker[i],begdate,enddate) \n    x2=pd.merge(x2,x_,left_index=True,right_index=True)\n# using scipy array format \nR = sp.array(x2)\nprint('Efficient porfolio (Treynor ratio) :ticker used')\nprint(ticker)\nprint('Treynor ratio for an equal-weighted portfolio')\nequal_w=sp.ones(n, dtype=float) * 1.0 /n \nprint(equal_w)\nprint(treynor(R,equal_w))\n\n# for n stocks, we could only choose n-1 weights\nw0= sp.ones(n-1, dtype=float) * 1.0 /n \nw1 = fmin(negative_treynor_n_minus_1_stock,w0)\nfinal_w = sp.append(w1, 1 - sum(w1))\nfinal_treynor = treynor(R,final_w)\nprint ('Optimal weights are ')\nprint (final_w)\nprint ('final Sharpe ratio is ')\nprint(final_treynor)\n```", "```py\nimport scipy as sp\nimport numpy as np\nmean=0.15;\nRf=0.01\nstd=0.20\nn=200\nsp.random.seed(3412)\nx=sp.random.normal(loc=mean,scale=std,size=n)\ndef LPSD_f(returns, Rf):\n    y=returns[returns-Rf<0]  \n    m=len(y)\n    total=0.0\n    for i in sp.arange(m):\n        total+=(y[i]-Rf)**2\n    return total/(m-1)\nanswer=LPSD_f(x,Rf)\nprint(\"LPSD=\",answer)\n('LPSD=', 0.022416749724544906)\n```", "```py\nimport scipy as sp\nimport numpy as np\nimport pandas as pd\nfrom scipy.optimize import fmin\nfrom matplotlib.finance import quotes_historical_yahoo_ochl as getData\n#\n# Step 1: input area\nticker=('IBM','WMT','C')   # tickers\nbegdate=(1990,1,1)         # beginning date \nenddate=(2012,12,31)       # ending date\nrf=0.0003                  # annual risk-free rate\n#\n# Step 2: define a few functions\n# function 1: \ndef ret_annual(ticker,begdate,enddte):\n    x=getData(ticker,begdate,enddate,asobject=True,adjusted=True)\n    logret =sp.log(x.aclose[1:]/x.aclose[:-1])\n    date=[]\n    d0=x.date\n    for i in range(0,sp.size(logret)):\n        date.append(d0[i].strftime(\"%Y\"))\n    y=pd.DataFrame(logret,date,columns=[ticker])\n    return sp.exp(y.groupby(y.index).sum())-1\n\n# function 2: estimate LPSD\ndef LPSD_f(returns, Rf):\n    y=returns[returns-Rf<0]  \n    m=len(y)\n    total=0.0\n    for i in sp.arange(m):\n        total+=(y[i]-Rf)**2\n    return total/(m-1)\n\n# function 3: estimate Sortino\ndef sortino(R,w):\n    mean_return=sp.mean(R,axis=0)\n    ret = sp.array(mean_return)\n    LPSD=LPSD_f(R,rf)\n    return (sp.dot(w,ret) - rf)/LPSD\n\n# function 4: for given n-1 weights, return a negative sharpe ratio\ndef negative_sortino_n_minus_1_stock(w):\n    w2=sp.append(w,1-sum(w))\n    return -sortino(R,w2)        # using a return matrix here!!!!!!\n\n# Step 3: generate a return matrix (annul return)\nn=len(ticker)              # number of stocks\nx2=ret_annual(ticker[0],begdate,enddate) \nfor i in range(1,n):\n    x_=ret_annual(ticker[i],begdate,enddate) \n    x2=pd.merge(x2,x_,left_index=True,right_index=True)\n\n# using scipy array format \nR = sp.array(x2)\nprint('Efficient porfolio (mean-variance) :ticker used')\nprint(ticker)\nprint('Sortino ratio for an equal-weighted portfolio')\nequal_w=sp.ones(n, dtype=float) * 1.0 /n \nprint(equal_w)\nprint(sortino(R,equal_w))\n# for n stocks, we could only choose n-1 weights\nw0= sp.ones(n-1, dtype=float) * 1.0 /n \nw1 = fmin(negative_sortino_n_minus_1_stock,w0)\nfinal_w = sp.append(w1, 1 - sum(w1))\nfinal_sortino = sortino(R,final_w)\nprint ('Optimal weights are ')\nprint (final_w)\nprint ('final Sortino ratio is ')\nprint(final_sortino)\n```", "```py\nfrom matplotlib.finance import quotes_historical_yahoo_ochl as getData\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport scipy as sp\n\nbegdate=(2012,1,1)\nenddate=(2016,12,31)\nticker='IBM'\n\ndef ret_f(ticker):  #  function 1\n    x = getData(ticker,begdate,enddate,asobject=True,adjusted=True)\n    ret=x.aclose[1:]/x.aclose[:-1]-1 \n    ddate=x['date'][1:]\n    y=pd.DataFrame(ret,columns=[ticker],index=ddate) \n    return y.groupby(y.index).sum()\n\na=ret_f(ticker)\nb=ret_f(\"^GSPC\")\nc=pd.merge(a,b,left_index=True, right_index=True)\nprint(c.head())\nmean=sp.mean(c)\nprint(mean)\ncov=sp.dot(c.T,c)\nprint(cov)\n```", "```py\nimport scipy as sp\nimport pandas as pd\nx=pd.read_pickle(\"c:/temp/yanMonthly.pkl\")\ndef ret_f(ticker):\n    a=x[x.index==ticker]\n    p=sp.array(a['VALUE'])\n    ddate=a['DATE'][1:]\n    ret=p[1:]/p[:-1]-1\n    out1=pd.DataFrame(p[1:],index=ddate)\n    out2=pd.DataFrame(ret,index=ddate)\n    output=pd.merge(out1,out2,left_index=True, right_index=True)\n    output.columns=['Price_'+ticker,'Ret_'+ticker]\n    return output\na=ret_f(\"IBM\")\nb=ret_f('WMT')\nc=pd.merge(a,b,left_index=True, right_index=True)\nprint(c.head())\n```", "```py\nimport pandas as pd\nx=pd.read_pickle(\"c:/temp/sp500monthly.pkl\")\nprint(x.head())\nprint(x.tail())\n      DATE    VWRETD    EWRETD    VWRETX    EWRETX  SP500INDEX  SP500RET   N\n0  19251231       NaN       NaN       NaN       NaN       12.46       NaN  89\n1  19260130 -0.001780  0.006457 -0.003980  0.003250       12.74  0.022472  89\n2  19260227 -0.033290 -0.039970 -0.037870 -0.042450       12.18 -0.043950  89\n3  19260331 -0.057700 -0.067910 -0.062000 -0.073270       11.46 -0.059110  89\n4  19260430  0.038522  0.031441  0.034856  0.027121       11.72  0.022688  89\n          DATE    VWRETD    EWRETD    VWRETX    EWRETX  SP500INDEX  SP500RET \\\n1076  20150831 -0.059940 -0.052900 -0.062280 -0.054850     1972.18 -0.062580   \n1077  20150930 -0.024530 -0.033490 -0.026240 -0.035550     1920.03 -0.026440   \n1078  20151030  0.083284  0.073199  0.081880  0.071983     2079.36  0.082983   \n1079  20151130  0.003317  0.002952  0.000771  0.000438     2080.41  0.000505   \n1080  20151231 -0.015180 -0.025550 -0.017010 -0.027650     2043.94 -0.017530\n```", "```py\nimport pandas as pd\nx=pd.read_pickle(\"c:/temp/sp500add.pkl\")\nprint(x.head())\nprint(x.tail())\n  PERMNO  DATEADDED  DAYDELETED\n0   10006   19570301    19840718\n1   10030   19570301    19690108\n2   10049   19251231    19321001\n3   10057   19570301    19920702\n4   10078   19920820    20100128\n      PERMNO  DATEADDED  DAYDELETED\n1847   93002   20140508    20151231\n1848   93089   20151008    20151231\n1849   93096   20121203    20151231\n1850   93159   20120731    20151231\n1851   93422   20100701    20150630\n```", "```py\nimport pandas as pd\nx=pd.read_pickle(\"c:/temp/stockMonthly.pkl\")\nprint(x.head())\nprint(x.tail())\n```", "```py\n         Date    Return  Volume   Price  SharesOutStanding\npermno                                                        \n10000  1985-12-31       NaN     NaN     NaN                NaN\n10000  1986-01-31       NaN  1771.0 -4.3750             3680.0\n10000  1986-02-28 -0.257140   828.0 -3.2500             3680.0\n10000  1986-03-31  0.365385  1078.0 -4.4375             3680.0\n10000  1986-04-30 -0.098590   957.0 -4.0000             3793.0\n             Date    Return     Volume     Price  SharesOutStanding\npermno                                                             \n93436  2014-08-29  0.207792  1149281.0  269.7000           124630.0\n93436  2014-09-30 -0.100180  1329469.0  242.6799           125366.0\n93436  2014-10-31 -0.004030  1521398.0  241.7000           125382.0\n93436  2014-11-28  0.011667  1077170.0  244.5200           125382.0\n93436  2014-12-31 -0.090420  1271222.0  222.4100           125382.0\n```", "```py\n    import scipy as sp\n    sigma1=0.02\n    sigma2=0.05\n    rho=-1\n    n=1000\n    portVar=10   # assign a big number\n    tiny=1.0/n\n    for i in sp.arange(n):\n        w1=i*tiny\n        w2=1-w1\n        var=w1**2*sigma1**2 +w2**2*sigma2**2+2*w1*w2*rho*sigma1*sigma2\n        if(var<portVar):\n            portVar=var\n            finalW1=w1\n        #print(vol)\n    print(\"min vol=\",sp.sqrt(portVar), \"w1=\",finalW1)\n    ```", "```py\n    import pandas as pd\n    x=pd.read_pickle('c:/temp/yanMonthly.pkl')\n    print(x.head(2))\n    print(x.tail(3))\n                  DATE   VALUE\n    NAME                       \n    000001.SS  19901231  127.61\n    000001.SS  19910131  129.97\n               DATE    VALUE\n    NAME                    \n    ^TWII  20130930  8173.87\n    ^TWII  20131031  8450.06\n    ^TWII  20131122  8116.78\n    ```", "```py\n    import pandas as pd\n    x=pd.read_pickle(\"c:/temp/stockMonthly.pkl\")\n    print(x.head())\n    print(x.tail())\n    ```", "```py\n             Date    Return  Volume   Price  SharesOutStanding\n    permno                                                        \n    10000  1985-12-31       NaN     NaN     NaN                NaN\n    10000  1986-01-31       NaN  1771.0 -4.3750             3680.0\n    10000  1986-02-28 -0.257140   828.0 -3.2500             3680.0\n    10000  1986-03-31  0.365385  1078.0 -4.4375             3680.0\n    10000  1986-04-30 -0.098590   957.0 -4.0000             3793.0\n                 Date    Return     Volume     Price  SharesOutStanding\n    permno                                                             \n    93436  2014-08-29  0.207792  1149281.0  269.7000           124630.0\n    93436  2014-09-30 -0.100180  1329469.0  242.6799           125366.0\n    93436  2014-10-31 -0.004030  1521398.0  241.7000           125382.0\n    93436  2014-11-28  0.011667  1077170.0  244.5200           125382.0\n    93436  2014-12-31 -0.090420  1271222.0  222.4100           125382.0\n    ```", "```py\n    import pandas as pd\n    x=pd.read_pickle(\"c:/temp/ff49industries.pkl\")\n    print(x.head(2))\n              Agric    Food     Soda     Beer     Smoke    Toys     Fun    \\\n    192607     2.37     0.12   -99.99    -5.19     1.29     8.65     2.50   \n    192608     2.23     2.68   -99.99    27.03     6.50    16.81    -0.76   \n              Books    Hshld    Clths   ...       Boxes    Trans    Whlsl  \\\n    192607    50.21    -0.48     8.08   ...        7.70     1.94   -23.79   \n    192608    42.98    -3.58    -2.51   ...       -2.38     4.88     5.39   \n              Rtail    Meals    Banks    Insur    RlEst    Fin      Other  \n    192607     0.07     1.87     4.61    -0.54     2.89    -4.85     5.20  \n    192608    -0.75    -0.13    11.83     2.57     5.30    -0.57     6.76  \n    [2 rows x 49 columns]\n    ```"]