["```py\n    import pandas as pd\n    import yfinance as yf \n    ```", "```py\n    df = yf.download(\"TSLA\",\n                     start=\"2019-01-01\",\n                     end=\"2020-12-31\",\n                     progress=False)\n    df[\"rtn\"] = df[\"Adj Close\"].pct_change()\n    df = df[[\"rtn\"]].copy() \n    ```", "```py\n    df_rolling = df[[\"rtn\"]].rolling(window=21) \\\n                            .agg([\"mean\", \"std\"])\n    df_rolling.columns = df_rolling.columns.droplevel() \n    ```", "```py\n    df = df.join(df_rolling) \n    ```", "```py\n    N_SIGMAS = 3\n    df[\"upper\"] = df[\"mean\"] + N_SIGMAS * df[\"std\"]\n    df[\"lower\"] = df[\"mean\"] - N_SIGMAS * df[\"std\"] \n    ```", "```py\n    df[\"outlier\"] = (\n        (df[\"rtn\"] > df[\"upper\"]) | (df[\"rtn\"] < df[\"lower\"])\n    ) \n    ```", "```py\n    fig, ax = plt.subplots()\n    df[[\"rtn\",  \"upper\",  \"lower\"]].plot(ax=ax)\n    ax.scatter(df.loc[df[\"outlier\"]].index,\n               df.loc[df[\"outlier\"], \"rtn\"],\n               color=\"black\", label=\"outlier\")\n    ax.set_title(\"Tesla's stock returns\")\n    ax.legend(loc=\"center left\", bbox_to_anchor=(1, 0.5))\n    plt.show() \n    ```", "```py\ndef identify_outliers(df, column, window_size, n_sigmas):\n    \"\"\"Function for identifying outliers using rolling statistics\"\"\"\n\n    df = df[[column]].copy()\n    df_rolling = df.rolling(window=window_size) \\\n                   .agg([\"mean\", \"std\"])\n    df_rolling.columns = df_rolling.columns.droplevel()\n    df = df.join(df_rolling)\n    df[\"upper\"] = df[\"mean\"] + n_sigmas * df[\"std\"]\n    df[\"lower\"] = df[\"mean\"] - n_sigmas * df[\"std\"]\n\n    return ((df[column] > df[\"upper\"]) | (df[column] < df[\"lower\"])) \n```", "```py\n    import yfinance as yf\n    from sktime.transformations.series.outlier_detection import HampelFilter \n    ```", "```py\n    df = yf.download(\"TSLA\",\n                     start=\"2019-01-01\",\n                     end=\"2020-12-31\",\n                     progress=False)\n    df[\"rtn\"] = df[\"Adj Close\"].pct_change() \n    ```", "```py\n    hampel_detector = HampelFilter(window_length=10, \n                                   return_bool=True)\n    df[\"outlier\"] = hampel_detector.fit_transform(df[\"Adj Close\"]) \n    ```", "```py\n    fig, ax = plt.subplots()\n    df[[\"Adj Close\"]].plot(ax=ax)\n    ax.scatter(df.loc[df[\"outlier\"]].index,\n               df.loc[df[\"outlier\"], \"Adj Close\"],\n               color=\"black\", label=\"outlier\")\n    ax.set_title(\"Tesla's stock price\")\n    ax.legend(loc=\"center left\", bbox_to_anchor=(1, 0.5))\n    plt.show() \n    ```", "```py\n    df[\"outlier_rtn\"] = hampel_detector.fit_transform(df[\"rtn\"]) \n    ```", "```py\n    fig, ax = plt.subplots()\n    df[[\"rtn\"]].plot(ax=ax)\n    ax.scatter(df.loc[df[\"outlier_rtn\"]].index,\n               df.loc[df[\"outlier_rtn\"], \"rtn\"],\n               color=\"black\", label=\"outlier\")\n    ax.set_title(\"Tesla's stock returns\")\n    ax.legend(loc=\"center left\", bbox_to_anchor=(1, 0.5))\n    plt.show() \n    ```", "```py\n    df.query(\"outlier == True and outlier_rtn == True\") \n    ```", "```py\n    import yfinance as yf\n    from kats.detectors.cusum_detection import CUSUMDetector\n    from kats.consts import TimeSeriesData \n    ```", "```py\n    df = yf.download(\"AAPL\",\n                     start=\"2020-01-01\",\n                     end=\"2020-12-31\",\n                     progress=False) \n    ```", "```py\n    df = df[[\"Adj Close\"]].reset_index(drop=False)\n    df.columns = [\"time\", \"price\"] \n    ```", "```py\n    tsd = TimeSeriesData(df) \n    ```", "```py\n    cusum_detector = CUSUMDetector(tsd)\n    change_points = cusum_detector.detector(\n        change_directions=[\"increase\"]\n    )\n    cusum_detector.plot(change_points) \n    ```", "```py\n    point, meta = change_points[0]\n    point \n    ```", "```py\n    TimeSeriesChangePoint(start_time: 2020-07-30 00:00:00, end_time: 2020-07-30 00:00:00, confidence: 1.0) \n    ```", "```py\nchange_points = cusum_detector.detector(change_directions=[\"increase\"],\n                                        interest_window=[200, 250])\ncusum_detector.plot(change_points) \n```", "```py\nfrom kats.detectors.robust_stat_detection import RobustStatDetector\nrobust_detector = RobustStatDetector(tsd)\nchange_points = robust_detector.detector()\nrobust_detector.plot(change_points) \n```", "```py\n    import yfinance as yf\n    from kats.consts import TimeSeriesData\n    from kats.detectors.trend_mk import MKDetector \n    ```", "```py\n    df = yf.download(\"NVDA\",\n                     start=\"2020-01-01\",\n                     end=\"2020-12-31\",\n                     progress=False) \n    ```", "```py\n    df = df[[\"Adj Close\"]].reset_index(drop=False)\n    df.columns = [\"time\", \"price\"] \n    ```", "```py\n    tsd = TimeSeriesData(df) \n    ```", "```py\n    trend_detector = MKDetector(tsd, threshold=0.9)\n    time_points = trend_detector.detector(\n        direction=\"up\", \n        window_size=30\n    ) \n    ```", "```py\n    trend_detector.plot(time_points) \n    ```", "```py\n    import yfinance as yf\n    import numpy as np\n    import pandas as pd \n    ```", "```py\n    df = yf.download(\"^GSPC\",\n                     start=\"2000-01-01\",\n                     end=\"2019-12-31\",\n                     progress=False)\n    df[\"Adj Close\"].plot(title=\"S&P 500 (years 2000-2019)\") \n    ```", "```py\n    def get_hurst_exponent(ts, max_lag=20):\n        \"\"\"Returns the Hurst Exponent of the time series\"\"\"\n        lags = range(2, max_lag)\n        tau = [np.std(np.subtract(ts[lag:], ts[:-lag])) for lag in lags]\n        hurst_exp = np.polyfit(np.log(lags), np.log(tau), 1)[0]\n        return hurst_exp \n    ```", "```py\n    for lag in [20, 100, 250, 500, 1000]:\n        hurst_exp = get_hurst_exponent(df[\"Adj Close\"].values, lag)\n        print(f\"Hurst exponent with {lag} lags: {hurst_exp:.4f}\") \n    ```", "```py\n    Hurst exponent with 20 lags: 0.4478\n    Hurst exponent with 100 lags: 0.4512\n    Hurst exponent with 250 lags: 0.4917\n    Hurst exponent with 500 lags: 0.5265\n    Hurst exponent with 1000 lags: 0.5180 \n    ```", "```py\n    shorter_series = df.loc[\"2005\":\"2007\", \"Adj Close\"].values\n    for lag in [20, 100, 250, 500]:\n        hurst_exp = get_hurst_exponent(shorter_series, lag)\n        print(f\"Hurst exponent with {lag} lags: {hurst_exp:.4f}\") \n    ```", "```py\n    Hurst exponent with 20 lags: 0.3989\n    Hurst exponent with 100 lags: 0.3215\n    Hurst exponent with 250 lags: 0.2507\n    Hurst exponent with 500 lags: 0.1258 \n    ```", "```py\n    import pandas as pd\n    import numpy as np\n    import yfinance as yf\n    import seaborn as sns\n    import scipy.stats as scs\n    import statsmodels.api as sm\n    import statsmodels.tsa.api as smt \n    ```", "```py\n    df = yf.download(\"^GSPC\", \n                     start=\"2000-01-01\", \n                     end=\"2020-12-31\",\n                     progress=False)\n\n    df = df[[\"Adj Close\"]].rename(\n        columns={\"Adj Close\": \"adj_close\"}\n    )\n    df[\"log_rtn\"] = np.log(df[\"adj_close\"]/df[\"adj_close\"].shift(1))\n    df = df[[\"adj_close\", \"log_rtn\"]].dropna() \n    ```", "```py\n    r_range = np.linspace(min(df[\"log_rtn\"]), \n                          max(df[\"log_rtn\"]), \n                          num=1000)\n    mu = df[\"log_rtn\"].mean()\n    sigma = df[\"log_rtn\"].std()\n    norm_pdf = scs.norm.pdf(r_range, loc=mu, scale=sigma) \n    ```", "```py\n    fig, ax = plt.subplots(1, 2, figsize=(16, 8))\n\n    # histogram\n    sns.distplot(df.log_rtn, kde=False, \n                 norm_hist=True, ax=ax[0])                                    \n    ax[0].set_title(\"Distribution of S&P 500 returns\", \n                    fontsize=16)                                                    \n    ax[0].plot(r_range, norm_pdf, \"g\", lw=2, \n               label=f\"N({mu:.2f}, {sigma**2:.4f})\")\n    ax[0].legend(loc=\"upper left\")\n\n    # Q-Q plot\n    qq = sm.qqplot(df.log_rtn.values, line=\"s\", ax=ax[1])\n    ax[1].set_title(\"Q-Q plot\", fontsize=16)\n    plt.show() \n    ```", "```py\n---------- Descriptive Statistics ----------\nRange of dates: 2000-01-03 â€“ 2020-12-30\nNumber of observations: 5283\nMean: 0.0002\nMedian: 0.0006\nMin: -0.1277\nMax: 0.1096\nStandard Deviation: 0.0126\nSkewness: -0.3931\nKurtosis: 10.9531\nJarque-Bera statistic: 26489.07 with p-value: 0.00 \n```", "```py\n(\n    df[\"log_rtn\"]\n    .plot(title=\"Daily S&P 500 returns\", figsize=(10, 6))\n) \n```", "```py\n    N_LAGS = 50\n    SIGNIFICANCE_LEVEL = 0.05 \n    ```", "```py\n    acf = smt.graphics.plot_acf(df[\"log_rtn\"],\n      lags=N_LAGS,\n      alpha=SIGNIFICANCE_LEVEL)\n    plt.show() \n    ```", "```py\nfig, ax = plt.subplots(2, 1, figsize=(12, 10))\nsmt.graphics.plot_acf(df[\"log_rtn\"]**2, lags=N_LAGS,\n                      alpha=SIGNIFICANCE_LEVEL, ax=ax[0])\nax[0].set(title=\"Autocorrelation Plots\",\n          ylabel=\"Squared Returns\")\nsmt.graphics.plot_acf(np.abs(df[\"log_rtn\"]), lags=N_LAGS,\n                      alpha=SIGNIFICANCE_LEVEL, ax=ax[1])\nax[1].set(ylabel=\"Absolute Returns\",\n          xlabel=\"Lag\")\nplt.show() \n```", "```py\n    df[\"moving_std_252\"] = df[[\"log_rtn\"]].rolling(window=252).std()\n    df[\"moving_std_21\"] = df[[\"log_rtn\"]].rolling(window=21).std() \n    ```", "```py\n    fig, ax = plt.subplots(3, 1, figsize=(18, 15),\n                           sharex=True)\n    df[\"adj_close\"].plot(ax=ax[0])\n    ax[0].set(title=\"S&P 500 time series\",\n              ylabel=\"Price ($)\")\n    df[\"log_rtn\"].plot(ax=ax[1])\n    ax[1].set(ylabel=\"Log returns\")\n    df[\"rolling_std_252\"].plot(ax=ax[2], color=\"r\",\n                               label=\"Rolling Volatility 252d\")\n    df[\"rolling_std_21\"].plot(ax=ax[2], color=\"g\",\n                               label=\"Rolling Volatility 21d\")\n    ax[2].set(ylabel=\"Moving Volatility\",\n              xlabel=\"Date\")\n    ax[2].legend()\n    plt.show() \n    ```", "```py\n    df = yf.download([\"^GSPC\", \"^VIX\"],\n                     start=\"2000-01-01\",\n                     end=\"2020-12-31\",\n                     progress=False)\n    df = df[[\"Adj Close\"]]\n    df.columns = df.columns.droplevel(0)\n    df = df.rename(columns={\"^GSPC\": \"sp500\", \"^VIX\": \"vix\"}) \n    ```", "```py\n    df[\"log_rtn\"] = np.log(df[\"sp500\"] / df[\"sp500\"].shift(1))\n    df[\"vol_rtn\"] = np.log(df[\"vix\"] / df[\"vix\"].shift(1))\n    df.dropna(how=\"any\", axis=0, inplace=True) \n    ```", "```py\n    corr_coeff = df.log_rtn.corr(df.vol_rtn)\n    ax = sns.regplot(x=\"log_rtn\", y=\"vol_rtn\", data=df,\n                     line_kws={\"color\": \"red\"})\n    ax.set(title=f\"S&P 500 vs. VIX ($\\\\rho$ = {corr_coeff:.2f})\",\n      ylabel=\"VIX log returns\",\n       xlabel=\"S&P 500 log returns\")\n    plt.show() \n    ```"]