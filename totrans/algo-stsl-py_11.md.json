["```py\n# Import Libraries\nimport pandas as pd\nimport numpy as np\nimport yfinance as yf\n%matplotlib inline\nimport matplotlib.pyplot as plt \n```", "```py\ndef risk_appetite(eqty, tolerance, mn, mx, span, shape):\n    '''\n    eqty: equity curve series\n    tolerance: tolerance for drawdown (<0)\n    mn: min risk\n    mx: max risk\n    span: exponential moving average to smoothe the risk_appetite\n    shape: convex (>45 deg diagonal) = 1, concave (<diagonal) = -1, else: simple risk_appetite\n    '''\n    # drawdown rebased\n    eqty = pd.Series(eqty)\n    watermark = eqty.expanding().max() # all-time-high peak equity\n    drawdown = eqty / watermark - 1 # drawdown from peak\n    ddr = 1 - np.minimum(drawdown / tolerance,1) # drawdown rebased to tolerance from 0 to 1\n    avg_ddr = ddr.ewm(span = span).mean() # span rebased drawdown\n\n    # Shape of the curve\n    if shape == 1: # \n        _power = mx/mn # convex \n    elif shape == -1 :\n        _power = mn/mx # concave\n    else:\n        _power = 1 # raw, straight line\n    ddr_power = avg_ddr ** _power # ddr \n\n    # mn + adjusted delta\n    risk_appetite = mn + (mx - mn) * ddr_power \n\n    return risk_appetite \n```", "```py\nport = np.nan\nK = 1000000\nlot = 100\nport_tickers = ['QCOM','TSLA','NFLX','DIS','PG', 'MMM','IBM','BRK-B','UPS','F']\nbm_ticker= '^GSPC'\ntickers_list = [bm_ticker] + port_tickers\ndf_data= { \n'Beta':[1.34,2,0.75,1.2,0.41,0.95,1.23,0.9,1.05,1.15],\n'Shares':[-1900,-100,-400,-800,-5500,1600,1800,2800,1100,20800],\n'rSL':[42.75,231,156,54.2,37.5,42.75,29.97,59.97,39.97,2.10]\n}\nport = pd.DataFrame(df_data,index=port_tickers)\nport['Side'] = np.sign(port['Shares'])\n\nstart_dt = '2021-01-01'\nend_dt = '2021-07-01'\nprice_df = round( yf.download(tickers= tickers_list,start= '2021-01-01' , end = '2021-07-01', interval = \"1d\",group_by = 'column',auto_adjust = True, prepost = True, treads = True, proxy = None)['Close'],2)\n\nbm_cost = price_df[bm_ticker][0]\nbm_price = price_df[bm_ticker][-1]\n\nport['rCost'] = round(price_df.iloc[0,:].div(bm_cost) *1000,2)\nport['rPrice'] = round(price_df.iloc[-1,:].div(bm_price) *1000,2)\nport['Cost'] = price_df.iloc[0,:]\nport['Price'] = price_df.iloc[-1,:]\n\nprint(port) \n```", "```py\nBV = port['Shares'] * port['Cost']\nMV = port['Shares'] * port['Price']\nrMV = port['Shares'] * port['rPrice']\n\nport['rR'] = (port['rCost'] - port['rSL'])\nport['Weight'] = round(MV.div(abs(MV).sum()),3)\nport['rRisk'] = -round(np.maximum(0,(port['rR'] * port['Shares'])/K),4)\nport['rRAR'] = round( (port['rPrice'] - port['rCost'])/port['rR'],1)\nport['rCTR'] = round(port['Shares'] * (port['rPrice']-port['rCost'])/ K,4)\nport['CTR'] = round(port['Shares'] * (port['Price']-port['Cost'])/ K,4)\nport_long = port[port['Side']>0]\nport_short = port[port['Side']<0]\n\nconcentration = (port_long['Side'].count()-port_short['Side'].count())/port['Side'].count()\ngross = round(abs(MV).sum() / K,3) \nnet = round(MV.sum()/abs(MV).sum(),3)\nnet_Beta = round((MV* port['Beta']).sum()/abs(MV).sum(),2)\nprint('Gross Exposure',gross,'Net Exposure',net,'Net Beta',net_Beta,'concentration',concentration)\nrnet = round(rMV.sum()/abs(rMV).sum(),3)\nrnet_Beta = round((rMV* port['Beta']).sum()/abs(rMV).sum(),2)\nprint('rGross Exposure',gross,'rNet Exposure',rnet,'rNet Beta',rnet_Beta) \n```", "```py\nGross Exposure 3.327 Net Exposure 0.141 Net Beta 0.24 concentration 0.0 \nrGross Exposure 3.327 rNet Exposure 0.141 rNet Beta 0.24 \n```", "```py\nport[['Side', 'Weight', 'rRisk', 'rRAR', 'rCTR', 'CTR']].sort_values(by=['Side','rRAR'] ) \n```", "```py\nport[['Side', 'Weight', 'rRisk', 'rRAR', 'rCTR', 'CTR']].groupby('Side').sum() \n```", "```py\nadjust_long = adjust_short  =  -0.01 \n\npro_rata_long = port_long['rRisk'] / (port_long['rRisk'].sum() * port_long['rRAR'])\nrisk_adj_long = (abs(adjust_long) * pro_rata_long * K / port_long['rR'] // lot) * lot\nshares_adj_long =  np.minimum(risk_adj_long, port_long['Shares'])*np.sign(adjust_long)\n\npro_rata_short = port_short['rRisk'] / (port_short['rRisk'].sum() * port_short['rRAR'])\nrisk_adj_short = (abs(adjust_short) * pro_rata_short * K / port_short['rR'] // lot)*lot\nshares_adj_short = np.maximum(risk_adj_short,port_short['Shares'])*np.sign(adjust_short)\n\nport['Qty_adj'] = shares_adj_short.append(shares_adj_long)\nport['Shares_adj']  = port['Shares'] + port['Qty_adj']\nport['rRisk_adj'] = -round(np.maximum(0,(port['rR'] * port['Shares_adj'])/K),4)\nMV_adj= port['Shares_adj'] * port['Price']\nrMV_adj = port['Shares_adj'] * port['rPrice']\nport['Weight_adj'] = round(MV_adj.div(abs(MV_adj).sum()),3)\n\nprint(port[['Side','rRAR','rRisk','rRisk_adj','Shares','Qty_adj', 'Shares_adj', 'Weight','Weight_adj']].groupby('Side').sum()) \n```", "```py\nprint(port[['Side','rRAR','rRisk','rRisk_adj','Shares','Qty_adj', 'Shares_adj', 'Weight','Weight_adj']].sort_values(by=['Side','rRisk_adj' ], ascending=[True,False])) \n```", "```py\nprint('Gross Exposure',gross,'Net Exposure',net,'Net Beta',net_Beta,'concentration',concentration)\ngross_adj = round(abs(MV_adj).sum() / K,3) \nnet_adj = round(MV_adj.sum()/abs(MV_adj).sum(),3)\nnet_Beta_adj = round((MV_adj* port['Beta']).sum()/abs(MV_adj).sum(),2)\nnet_pos_adj = port.loc[port['Shares_adj'] >0,'Shares_adj'].count()-port.loc[port['Shares_adj'] <0,'Shares_adj'].count()\nprint('Gross Exposure_adj',gross_adj,'Net Exposure_adj',net_adj,\n      'Net Beta_adj',net_Beta_adj,'concentration adj',net_pos_adj)\nrnet_adj = round(rMV_adj.sum()/abs(rMV_adj).sum(),3)\nrnet_Beta_adj = round((rMV_adj* port['Beta']).sum()/abs(rMV_adj).sum(),2)\nprint('Gross Exposure_adj',gross_adj,'rNet Exposure_adj',rnet_adj,'rNet Beta_adj',rnet_Beta_adj) \n```", "```py\n# Before risk reduction\nGross Exposure 3.327 Net Exposure 0.141 Net Beta 0.24 concentration 0.0\n# After risk reduction: absolute\nGross Exposure_adj 2.243 Net Exposure_adj -0.021 Net Beta_adj 0.13 concentration adj 0\n# After risk reduction: relative\nGross Exposure_adj 2.243 rNet Exposure_adj -0.021 rNet Beta_adj 0.13 \n```"]