["```py\nApple <- read.table(\"Apple.csv\", header = T, sep = \";\")\nr <- log(head(Apple$Price,-1)/tail(Apple$Price,-1))\nm <- mean(r)\ns <- sd(r)\nVaR1 <- -qnorm(0.05, m, s)\nprint(VaR1)\n[1] 0.02110003\n\n```", "```py\nVaR2 <- -quantile(r, 0.05)print(VaR2)\n 5% \n0.01574694\n\n```", "```py\nsim_norm_return <- rnorm(10000, m, s)\nVaR3 <- -quantile(sim_norm_return, 0.05)\nprint(VaR3)\n 5% \n0.02128257\n\n```", "```py\nsim_return <- r[ceiling(runif(10000)*251)]\nVaR4 <- -quantile(sim_return, 0.05)\nprint(VaR4)\n 5% \n0.01578806\n\n```", "```py\ninstall.packages(\"fOptions\")\nlibrary(fOptions)\n\nX <- 100\nTime <- 2\nr <- 0.1\nsigma <- 0.3\nmu <- 0.2\nS <- seq(1,200, length = 1000)\ncall_price <- sapply(S, function(S) GBSOption(\"c\", S, X, Time, r, r, sigma)@price)\nplot(S, call_price, type = \"l\", ylab = \"\", main = \"Call option price in function of stock prompt price\")\n\n```", "```py\nX <- 100\nTime <- 2\nr <- 0.1\nsigma <- 0.3\nmu <- 0.2\nS <- seq(1,200, length = 1000)\ncall_price <- sapply(S, function(S) GBSOption(\"c\", S, X, Time, r, r, sigma)@price)\nput_price <- sapply(S, function(S) GBSOption(\"p\", S, X, Time, r, r, sigma)@price)\nportfolio_price <- call_price + put_price\nwindows()\nplot(S, portfolio_price, type = \"l\", ylab = \"\", main = \"Portfolio price in function of stock prompt price\")\n# portfolio VaR simulation\np0 <- GBSOption(\"c\", 100, X, Time, r, r, sigma)@price + GBSOption(\"p\", 100, X, Time, r, r, sigma)@price\nprint(paste(\"price of portfolio:\",p0))\n[1] \"price of portfolio: 33.8240537586255\"\nS1 <- 100*exp(rnorm(10000, mu - sigma^2 / 2 , sigma))\nP1 <- sapply(S1, function(S) GxBSOption(\"c\", S, X, 1, r, r, sigma)@price + GBSOption(\"p\", S, X, 1, r, r, sigma)@price )\nVaR <- quantile(P1, 0.05)\nprint(paste(\"95% VaR of portfolio: \", p0 - VaR))\n\n```", "```py\ninstall.packages(\"fOptions\")\nlibrary(fOptions)\nkmv_error <- function(V_and_vol_V, E=3,Time=1,D=10,vol_E=0.8,r=0.05){\n V <- V_and_vol_V[1]\n vol_V <- V_and_vol_V[2]\n E_ <- GBSOption(\"c\", V, D, Time, r, r, vol_V)@price\n tmp <- vol_V*sqrt(Time)\n d1 <- log(V/(D*exp(-r*Time)))/tmp + tmp/2\n Nd1 <- pnorm(d1)\n vol_E_ <- Nd1*V/E*vol_V\n err <- c(E_ - E, vol_E_ - vol_E)\n err[1]^2+err[2]^2\n}\na <- optim(c(1,1), fn = kmv_error)\nprint(a)\n\n```", "```py\nop <- function(){\nn <- rpois(1, 20)\nz <- rlnorm(n,5,2)\nsum(z)\n}\nLoss <- replicate(10000, op())\nhist(Loss[Loss<50000], main = \"\", breaks = 20, xlab = \"\", ylab = \"\")\nprint(paste(\"Expected loss = \", mean(Loss)))\nprint(paste(\"99.9% quantile of loss = \", quantile(Loss, 0.999)))\n\n```"]