["```py\npip install yahoofinancials\n```", "```py\nfrom yahoofinancials import YahooFinancials\n```", "```py\n    aapl = yf.Ticker(\"AAPL\")\n    ```", "```py\n    hist = aapl.get_historical_price_data('2020-01-01', \n                                          '2020-12-31', \n                                          'daily')\n    print(hist)\n    ```", "```py\n    {'AAPL': {'eventsData': {'dividends': {'2020-02-07': {'amount': 0.1925, 'date': 1581085800, 'formatted_date': '2020-02-07'}, '2020-05-08': {'amount': 0.205, 'date': 1588944600, 'formatted_date': '2020-05-08'}, '2020-08-07': {'amount': 0.205, 'date': 1596807000, 'formatted_date': '2020-08-07'}, '2020-11-06': {'amount': 0.205, 'date': 1604673000, 'formatted_date': '2020-11-06'}}, 'splits': {'2020-08-31': {'date': 1598880600, 'numerator': 4, 'denominator': 1, 'splitRatio': '4:1', 'formatted_date': '2020-08-31'}}}, 'firstTradeDate': {'formatted_date': '1980-12-12', 'date': 345479400}, 'currency': 'USD', 'instrumentType': 'EQUITY', 'timeZone': {'gmtOffset': -18000}, 'prices': [{'date': 1577975400, 'high': 75.1500015258789, 'low': 73.79750061035156, 'open': 74.05999755859375, 'close': 75.0875015258789, 'volume': 135480400, 'adjclose': 74.4446029663086, 'formatted_date': '2020-01-02'}, {'date': 1578061800, 'high': 75.1449966430664, 'low': 74.125, 'open': 74.2874984741211, 'close': 74.35749816894531, 'volume': 146322800, 'adjclose': 73.72084045410156, 'formatted_date': '2020-01-03'}, {'date': 1578321000, 'high': 74.98999786376953, 'low': 73.1875, 'open': 73.44750213623047, 'close': 74.94999694824219, 'volume': 118387200, 'adjclose': 74.30826568603516, 'formatted_date': '2020-01-06'}, {'date': 1578407400, 'high': 75.2249984741211, 'low': 74.37000274658203, 'open': 74.95999908447266, 'close': 74.59750366210938, 'volume': 108872000, 'adjclose': 73.95879364013672, 'formatted_date': '2020-01-07'}, {'date': 1578493800, 'high': 76.11000061035156, 'low': 74.29000091552734, 'open': 74.29000091552734, 'close': 75.79750061035156, 'volume': 132079200, 'adjclose': 75.14852142333984, 'formatted_date': '2020-01-08'}, {'date': 1578580200, 'high': 77.60749816894531, 'low': 76.55000305175781, 'open': 76.80999755859375, 'close': 77.40750122070312, 'volume': 170108400, 'adjclose': 76.7447280883789, 'formatted_date': '2020-01-09'}, {'date': 1578666600, 'high': 78.1675033569336, 'low': 77.0625, 'open': 77.6500015258789, 'close': 77.5824966430664, 'volume': 140644800, 'adjclose': 76.91822052001953, 'formatted_date': '2020-01-10'}, {'date': 1578925800, 'high': 79.26750183105469, 'low': 77.7874984741211, 'open': 77.91000366210938, 'close': 79.23999786376953, 'volume': 121532000, 'adjclose': 78.56153106689453, 'formatted_date': '2020-01-13'}, {'date': 1579012200, 'high': 79.39250183105469, 'low': 78.0425033569336, 'open': 79.17500305175781, 'close': 78.16999816894531, 'volume': 161954400, 'adjclose': 77.50070190429688, 'formatted_date': '2020-01-14'}, {'date': 1579098600, 'high': 78.875, 'low': 77.38749694824219, 'open': 77.9625015258789, 'close': 77.83499908447266, 'volume': 121923600, 'adjclose': 77.16856384277344, 'formatted_date': '2020-01-15'}, {'date': 1579185000, 'high': 78.92500305175781, 'low': 78.02249908447266, 'open': 78.39749908447266, 'close': 78.80999755859375, 'volume': 108829200, 'adjclose': 78.13522338867188, 'formatted_date': '2020-01-16'}, {'date': 1579271400, 'high': 79.68499755859375, 'low': 78.75, 'open': 79.06749725341797, 'close': 79.68250274658203, 'volume': 137816400, 'adjclose': 79.000244140625, 'formatted_date': '2020-01-17'}, {'date': 1579617000, 'high': 79.75499725341797, 'low': 79.0, 'open': 79.29750061035156, 'close': 79.14250183105469, 'volume': 110843200, 'adjclose': 78.46488189697266, 'formatted_date': '2020-01-21'}, {'date': 1579703400, 'high': 79.99749755859375, 'low': 79.32749938964844, 'open': 79.6449966430664, 'close': 79.42500305175781, 'volume': 101832400, 'adjclose': 78.74495697021484, 'formatted_date': '2020-01-22'}, ... \n    ```", "```py\n    hist = aapl.get_historical_price_data('2020-01-01', \n                                          '2020-12-31', \n                                          'weekly')\n    print(hist)\n    ```", "```py\n    {'AAPL': {'eventsData': {'dividends': {'2020-02-05': {'amount': 0.1925, 'date': 1581085800, 'formatted_date': '2020-02-07'}, '2020-05-06': {'amount': 0.205, 'date': 1588944600, 'formatted_date': '2020-05-08'}, '2020-08-05': {'amount': 0.205, 'date': 1596807000, 'formatted_date': '2020-08-07'}, '2020-11-04': {'amount': 0.205, 'date': 1604673000, 'formatted_date': '2020-11-06'}}, 'splits': {'2020-08-26': {'date': 1598880600, 'numerator': 4, 'denominator': 1, 'splitRatio': '4:1', 'formatted_date': '2020-08-31'}}}, 'firstTradeDate': {'formatted_date': '1980-12-12', 'date': 345479400}, 'currency': 'USD', 'instrumentType': 'EQUITY', 'timeZone': {'gmtOffset': -18000}, 'prices': [{'date': 1577854800, 'high': 75.2249984741211, 'low': 73.1875, 'open': 74.05999755859375, 'close': 74.59750366210938, 'volume': 509062400, 'adjclose': 73.95879364013672, 'formatted_date': '2020-01-01'}, {'date': 1578459600, 'high': 79.39250183105469, 'low': 74.29000091552734, 'open': 74.29000091552734, 'close': 78.16999816894531, 'volume': 726318800, 'adjclose': 77.50070190429688, 'formatted_date': '2020-01-08'}, {'date': 1579064400, 'high': 79.75499725341797, 'low': 77.38749694824219, 'open': 77.9625015258789, 'close': 79.14250183105469, 'volume': 479412400, 'adjclose': 78.46488189697266, 'formatted_date': '2020-01-15'}, {'date': 1579669200, 'high': 80.8324966430664, 'low': 76.22000122070312, 'open': 79.6449966430664, 'close': 79.42250061035156, 'volume': 677016000, 'adjclose': 78.74247741699219, 'formatted_date': '2020-01-22'}, {'date': 1580274000, 'high': 81.9625015258789, 'low': 75.55500030517578, 'open': 81.11250305175781, 'close': 79.7125015258789, 'volume': 853162800, 'adjclose': 79.02999877929688, 'formatted_date': '2020-01-29'}, {'date': 1580878800, 'high': 81.30500030517578, 'low': 78.4625015258789, 'open': 80.87999725341797, 'close': 79.90249633789062, 'volume': 545608400, 'adjclose': 79.21836853027344, 'formatted_date': '2020-02-05'}, {'date': 1581483600, 'high': 81.80500030517578, 'low': 78.65249633789062, 'open': 80.36750030517578, 'close': 79.75, 'volume': 441122800, 'adjclose': 79.25482177734375, 'formatted_date': '2020-02-12'}, {'date': 1582088400, 'high': 81.1624984741211, 'low': 71.53250122070312, 'open': 80.0, 'close': 72.0199966430664, 'volume': 776972800, 'adjclose': 71.57282257080078, 'formatted_date': '2020-02-19'}, {'date': 1582693200, 'high': 76.0, 'low': 64.09249877929688, 'open': 71.63249969482422, 'close': 72.33000183105469, 'volume': 1606418000, 'adjclose': 71.88089752197266, 'formatted_date': '2020-02-26'}, {'date': 1583298000, 'high': 75.8499984741211, 'low': 65.75, 'open': 74.11000061035156, 'close': 71.33499908447266, 'volume': 1204962800, 'adjclose': 70.89207458496094, 'formatted_date': '2020-03-04'}, {'date': 1583899200, 'high': 70.3050003051757 ...\n    ```", "```py\n    hist = aapl.get_historical_price_data('2020-01-01', \n                                          '2020-12-31', \n                                          'monthly')\n    print(hist)\n    ```", "```py\n    {'AAPL': {'eventsData': {'dividends': {'2020-05-01': {'amount': 0.205, 'date': 1588944600, 'formatted_date': '2020-05-08'}, '2020-08-01': {'amount': 0.205, 'date': 1596807000, 'formatted_date': '2020-08-07'}, '2020-02-01': {'amount': 0.1925, 'date': 1581085800, 'formatted_date': '2020-02-07'}, '2020-11-01': {'amount': 0.205, 'date': 1604673000, 'formatted_date': '2020-11-06'}}, 'splits': {'2020-08-01': {'date': 1598880600, 'numerator': 4, 'denominator': 1, 'splitRatio': '4:1', 'formatted_date': '2020-08-31'}}}, 'firstTradeDate': {'formatted_date': '1980-12-12', 'date': 345479400}, 'currency': 'USD', 'instrumentType': 'EQUITY', 'timeZone': {'gmtOffset': -18000}, 'prices': [{'date': 1577854800, 'high': 81.9625015258789, 'low': 73.1875, 'open': 74.05999755859375, 'close': 77.37750244140625, 'volume': 2934370400, 'adjclose': 76.7149887084961, 'formatted_date': '2020-01-01'}, {'date': 1580533200, 'high': 81.80500030517578, 'low': 64.09249877929688, 'open': 76.07499694824219, 'close': 68.33999633789062, 'volume': 3019851200, 'adjclose': 67.75486755371094, 'formatted_date': '2020-02-01'}, {'date': 1583038800, 'high': 76.0, 'low': 53.15250015258789, 'open': 70.56999969482422, 'close': 63 ...\n    ```", "```py\n    import pandas as pd\n    hist_df = \\\n    pd.DataFrame(hist['AAPL']['prices']).drop('date', axis=1).set_index('formatted_date')\n    print(hist_df)\n    ```", "```py\nprint(aapl.get_stock_price_data())\n```", "```py\n{'AAPL': {'quoteSourceName': 'Nasdaq Real Time Price', 'regularMarketOpen': 137.35, 'averageDailyVolume3Month': 107768827, 'exchange': 'NMS', 'regularMarketTime': '2021-02-06 03:00:02 UTC+0000', 'volume24Hr': None, 'regularMarketDayHigh': 137.41, 'shortName': 'Apple Inc.', 'averageDailyVolume10Day': 115373562, 'longName': 'Apple Inc.', 'regularMarketChange': -0.42500305, 'currencySymbol': '$', 'regularMarketPreviousClose': 137.185, 'postMarketTime': '2021-02-06 06:59:58 UTC+0000', 'preMarketPrice': None, 'exchangeDataDelayedBy': 0, 'toCurrency': None, 'postMarketChange': -0.0800018, 'postMarketPrice': 136.68, 'exchangeName': 'NasdaqGS', 'preMarketChange': None, 'circulatingSupply': None, 'regularMarketDayLow': 135.86, 'priceHint': 2, 'currency': 'USD', 'regularMarketPrice': 136.76, 'regularMarketVolume': 72317009, 'lastMarket': None, 'regularMarketSource': 'FREE_REALTIME', 'openInterest': None, 'marketState': 'CLOSED', 'underlyingSymbol': None, 'marketCap': 2295940513792, 'quoteType': 'EQUITY', 'volumeAllCurrencies': None, 'postMarketSource': 'FREE_REALTIME', 'strikePrice': None, 'symbol': 'AAPL', 'postMarketChangePercent': -0.00058498, 'preMarketSource': 'FREE_REALTIME', 'maxAge': 1, 'fromCurrency': None, 'regularMarketChangePercent': -0.0030980287}}\n```", "```py\nstatements = aapl.get_financial_stmts('quarterly', \n                                      ['income', 'cash', \n                                       'balance'])\nprint(statements)\n```", "```py\n{'incomeStatementHistoryQuarterly': {'AAPL': [{'2020-12-26': {'researchDevelopment': 5163000000, 'effectOfAccountingCharges': None, 'incomeBeforeTax': 33579000000, 'minorityInterest': None, 'netIncome': 28755000000, 'sellingGeneralAdministrative': 5631000000, 'grossProfit': 44328000000, 'ebit': 33534000000, 'operatingIncome': 33534000000, 'otherOperatingExpenses': None, 'interestExpense': -638000000, 'extraordinaryItems': None, 'nonRecurring': None, 'otherItems': None, 'incomeTaxExpense': 4824000000, 'totalRevenue': 111439000000, 'totalOperatingExpenses': 77905000000, 'costOfRevenue': 67111000000, 'totalOtherIncomeExpenseNet': 45000000, 'discontinuedOperations': None, 'netIncomeFromContinuingOps': 28755000000, 'netIncomeApplicableToCommonShares': 28755000000}}, {'2020-09-26': {'researchDevelopment': 4978000000, 'effectOfAccountingCharges': None, 'incomeBeforeTax': 14901000000, 'minorityInterest': None, 'netIncome': 12673000000, 'sellingGeneralAdministrative': 4936000000, 'grossProfit': ...\n```", "```py\nprint(aapl.get_summary_data())\n```", "```py\n{'AAPL': {'previousClose': 137.185, 'regularMarketOpen': 137.35, 'twoHundredDayAverage': 119.50164, 'trailingAnnualDividendYield': 0.0058825673, 'payoutRatio': 0.2177, 'volume24Hr': None, 'regularMarketDayHigh': 137.41, 'navPrice': None, 'averageDailyVolume10Day': 115373562, 'totalAssets': None, 'regularMarketPreviousClose': 137.185, 'fiftyDayAverage': 132.86455, 'trailingAnnualDividendRate': 0.807, 'open': 137.35, 'toCurrency': None, 'averageVolume10days': 115373562, 'expireDate': '-', 'yield': None, 'algorithm': None, 'dividendRate': 0.82, 'exDividendDate': '2021-02-05', 'beta': 1.267876, 'circulatingSupply': None, 'startDate': '-', 'regularMarketDayLow': 135.86, 'priceHint': 2, 'currency': 'USD', 'trailingPE': 37.092484, 'regularMarketVolume': 72317009, 'lastMarket': None, 'maxSupply': None, 'openInterest': None, 'marketCap': 2295940513792, 'volumeAllCurrencies': None, 'strikePrice': None, 'averageVolume': 107768827, 'priceToSalesTrailing12Months': 7.805737, 'dayLow': 135.86, 'ask': 136.7, 'ytdReturn': None, 'askSize': 1100, 'volume': 72317009, 'fiftyTwoWeekHigh': 145.09, 'forwardPE': 29.410751, 'maxAge': 1, 'fromCurrency': None, 'fiveYearAvgDividendYield': 1.44, 'fiftyTwoWeekLow': 53.1525, 'bid': 136.42, 'tradeable': False, 'dividendYield': 0.0061000003, 'bidSize': 2900, 'dayHigh': 137.41}}\n```", "```py\ncurrencies = YahooFinancials(['EURCHF=X', 'USDEUR=X', \n                              'GBPUSD=x'])\nprint(currencies.get_historical_price_data('2020-01-01', \n                                           '2020-12-31', \n                                           'weekly'))\n```", "```py\n{'EURCHF=X': {'eventsData': {}, 'firstTradeDate': {'formatted_date': '2003-01-23', 'date': 1043280000}, 'currency': 'CHF', 'instrumentType': 'CURRENCY', 'timeZone': {'gmtOffset': 0}, 'prices': [{'date': 1577836800, 'high': 1.0877000093460083, 'low': 1.0818699598312378, 'open': 1.0872000455856323, 'close': 1.084280014038086, 'volume': 0, 'adjclose': 1.084280014038086, 'formatted_date': '2020-01-01'}, {'date': 1578441600, 'high': 1.083299994468689, 'low': 1.0758999586105347, 'open': 1.080530047416687, 'close': 1.0809999704360962, 'volume': 0, 'adjclose': 1.0809999704360962, 'formatted_date': '2020-01-08'}, {'date': 1579046400, 'high': 1.0774999856948853, 'low': 1.0729299783706665, 'open': 1.076300024986267, 'close': 1.0744800567626953, 'volume': 0, 'adjclose': 1.0744800567626953, 'formatted_date': '2020-01-15'}, {'date': 1579651200, 'high': 1.0786099433898926, 'low': 1.0664700269699097, 'open': 1.0739500522613525, 'close': 1.068600058555603, 'volume': 0, 'adjclose': 1.068600058555603, 'formatted_date': '2020-01-22'}, {'date': 1580256000, 'high': 1.0736199617385864, 'low': 1.0663000345230103, 'open': 1.0723999738693237, 'close': 1.0683200359344482, 'volume': 0, 'adjclose': 1.068320035 ...\n```", "```py\npip install pandas-datareader\n```", "```py\nfrom pandas_datareader import data\nstart_date = '2010-01-01'\nend_date = '2020-12-31'\n```", "```py\naapl = data.DataReader('AAPL', 'yahoo', start_date, \n                       end_date)\naapl\n       High      Low     Open    Close     Volume Adj Close\nDate            \n2010-01-04 7.660714 7.585000 7.622500 7.643214 493729600.0 6.593426\n2010-01-05 7.699643 7.616071 7.664286 7.656428 601904800.0 6.604825\n2010-01-06 7.686786 7.526786 7.656428 7.534643 552160000.0 6.499768\n2010-01-07 7.571429 7.466072 7.562500 7.520714 477131200.0 6.487752\n2010-01-08 7.571429 7.466429 7.510714 7.570714 447610800.0 6.530883\n...  ...  ...  ...  ...  ...  ...\n2020-12 -21 128.309998 123.449997 125.019997 128.229996 121251600.0 128.229996\n2020-12-22 134.410004 129.649994 131.610001 131.880005 168904800.0 131.880005\n2020-12-23 132.429993 130.779999 132.160004 130.960007 88223700.0 130.960007\n2020-12-24 133.460007 131.100006 131.320007 131.970001 54930100.0 131.970001\n2020-12-28 137.339996 133.509995 133.990005 136.690002 124182900.0 136.690002\n```", "```py\noilprodus = data.DataReader('ticker=OILPRODUS', 'econdb', \n                            start_date, end_date)\noilprodus\n Reference Area         United States of America\n Energy product                        Crude oil\n Flow breakdown                       Production\nUnit of measure  Thousand Barrels per day (kb/d)\nTIME_PERIOD  \n2010-01-01  5390\n2010-02-01  5548\n2010-03-01  5506\n2010-04-01  5383\n2010-05-01  5391\n       ...   ...\n2020-04-01  11990\n2020-05-01  10001\n2020-06-01  10436\n2020-07-01  10984\n2020-08-01  10406\n```", "```py\nimport pandas as pd\npd.set_option('display.max_rows', 2)\ngdp = data.DataReader('GDP', 'fred', start_date, end_date)\ngdp\n```", "```py\n                  GDP\n      DATE  \n2010-01-01  14721.350\n       ...        ...\n2020-07-01  21170.252\n43 rows × 1 columns\n```", "```py\ngs10 = data.get_data_fred('GS20')\ngs10\n            GS20\n      DATE  \n2016-01-01  2.49\n       ...   ...\n2020-11-01  1.40\n59 rows × 1 columns\n```", "```py\nimport datetime\nimport requests_cache\nsession = \\\nrequests_cache.CachedSession(cache_name='cache', \n                             backend='sqlite', \n                             expire_after = \\\n                             datetime.timedelta(days=7))\naapl_full_history = \\\ndata.DataReader(\"AAPL\",'yahoo',datetime.datetime(1980,1,1), \n                datetime.datetime(2020, 12, 31), \n                session=session)\naapl_full_history\n       High      Low    Open    Close      Volume Adj Close\nDate            \n1980-12-12 0.128906 0.128348 0.128348 0.128348 469033600.0 0.101087\n...  ...  ...  ...  ...  ...  ...\n2020-12-28 137.339996 133.509995 133.990005 136.690002 124182900.0 136.690002\n```", "```py\naapl_full_history.loc['2013-01-07']\nHigh         18.903572\n               ...    \nAdj Close    16.284145\nName: 2013-01-07 00:00:00, Length: 6, dtype: float64\n```", "```py\npip install quandl\n```", "```py\nimport quandl\nquandl.ApiConfig.api_key = 'XXXXXXX'\n```", "```py\npapple = quandl.get('ODA/PAPPLE_USD')\npapple\n               Value\nDate  \n1998-01-31  1.735999\n    ...          ...\n2020-11-30  3.350000\n275 rows × 1 columns\n```", "```py\naapl_fundamental_data = quandl.get_table('ZACKS/FC', \n                                         ticker='AAPL')\n  m_ticker  ticker  comp_name  comp_name_2  exchange  currency_code  per_end_date  per_type  per_code  per_fisc_year  ...  stock_based_compsn_qd  cash_flow_oper_activity_qd  net_change_prop_plant_equip_qd  comm_stock_div_paid_qd  pref_stock_div_paid_qd  tot_comm_pref_stock_div_qd  wavg_shares_out  wavg_shares_out_diluted  eps_basic_net  eps_diluted_net\nNone                                          \n0  AAPL  AAPL  APPLE INC  Apple Inc.  NSDQ  USD  2018-09-30  A  None  2018  ...  NaN  NaN  NaN  NaN  None  NaN  19821.51  20000.44  3.000  2.980\n...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...\n4  AAPL  AAPL  APPLE INC  Apple Inc.  NSDQ  USD  2018-12-31  Q  None  2019  ...  1559.0  26690.0  -3355.0  -3568.0  None  -3568.0  18943.28  19093.01  1.055  1.045\n5 rows × 249 columns\n```", "```py\npip install iexfinance\n```", "```py\nfrom iexfinance.refdata import get_symbols\nget_symbols(output_format='pandas', token=\"XXXXXX\")\nsymbol  exchange  exchangeSuffix  exchangeName  name  date  type  iexId  region  currency  isEnabled  figi  cik  lei\n0  A  NYS  UN  NEW YORK STOCK EXCHANGE, INC.  Agilent Technologies Inc.  2020-12-29  cs  IEX_46574843354B2D52  US  USD  True  BBG000C2V3D6  0001090872  QUIX8Y7A2WP0XRMW7G29\n...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...\n9360  ZYXI  NAS    NASDAQ CAPITAL MARKET  Zynex Inc  2020-12-29  cs  IEX_4E464C4C4A462D52  US  USD  True  BBG000BJBXZ2  0000846475  None\n9361 rows × 14 columns\n```", "```py\nfrom iexfinance.stocks import Stock\naapl = Stock(\"aapl\", token=\"XXXXXX\")\naapl.get_balance_sheet()\n```", "```py\naapl.get_price()\n```", "```py\nfrom iexfinance.stocks import get_sector_performance\nget_sector_performance(output_format='pandas', \n                       token =token)\n```", "```py\nfrom iexfinance.stocks import get_historical_data\nget_historical_data(\"AAPL\", start=\"20190101\", \n                    end=\"20200101\", \n                    output_format='pandas', token=token)\nclose  high  low  open  symbol  volume  id  key  subkey  updated  ...  uLow  uVolume  fOpen  fClose  fHigh  fLow  fVolume  label  change  changePercent\n2019-01-02  39.48  39.7125  38.5575  38.7225  AAPL  148158948  HISTORICAL_PRICES  AAPL    1606830572000  ...  154.23  37039737  37.8227  38.5626  38.7897  37.6615  148158948  Jan 2, 19  0.045  0.0011\n...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...\n2019-12-31  73.4125  73.42  72.38  72.4825  AAPL  100990500  HISTORICAL_PRICES  AAPL    1606830572000  ...  289.52  25247625  71.8619  72.7839  72.7914  71.7603  100990500  Dec 31, 19  0.5325  0.0073\n252 rows × 25 columns\n```", "```py\nimport requests\nparams = {\n  'access_key': 'XXXXX'\n}\napi_result = \\\nrequests.get('http://api.marketstack.com/v1/tickers/aapl/eod', params)\napi_response = api_result.json()\nprint(f\"Symbol = {api_response['data']['symbol']}\")\nfor eod in api_response['data']['eod']:\n    print(f\"{eod['date']}: {eod['adj_close']}\")\nSymbol = AAPL\n2020-12-28T00:00:00+0000: 136.69\n2020-12-24T00:00:00+0000: 131.97\n2020-12-23T00:00:00+0000: 130.96\n2020-12-22T00:00:00+0000: 131.88\n2020-12-21T00:00:00+0000: 128.23\n2020-12-18T00:00:00+0000: 126.655\n2020-12-17T00:00:00+0000: 128.7\n2020-12-16T00:00:00+0000: 127.81\n2020-12-15T00:00:00+0000: 127.88\n2020-12-14T00:00:00+0000: 121.78\n2020-12-11T00:00:00+0000: 122.41\n2020-12-10T00:00:00+0000: 123.24\n2020-12-09T00:00:00+0000: 121.78\n2020-12-08T00:00:00+0000: 124.38\n2020-12-07T00:00:00+0000: 123.75\n2020-12-04T00:00:00+0000: 122.25\n```", "```py\napi_result = \\\nrequests.get('http://api.marketstack.com/v1/exchanges/XNAS/tickers', params)\napi_response = api_result.json()\nprint(f\"Exchange Name = {api_response['data']['name']}\")\nfor ticker in api_response['data']['tickers']:\n    print(f\"{ticker['name']}: {ticker['symbol']}\")\nExchange Name = NASDAQ Stock Exchange\nMicrosoft Corp: MSFT\nApple Inc: AAPL\nAmazoncom Inc: AMZN\nAlphabet Inc Class C: GOOG\nAlphabet Inc Class A: GOOGL\nFacebook Inc: FB\nVodafone Group Public Limited Company: VOD\nIntel Corp: INTC\nComcast Corp: CMCSA\nPepsiCo Inc: PEP\nAdobe Systems Inc: ADBE\nCisco Systems Inc: CSCO\nNVIDIA Corp: NVDA\nNetflix Inc: NFLX\n```"]