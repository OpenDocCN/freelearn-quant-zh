["```py\n>>> from datetime import datetime\n```", "```py\n>>> dt1 = datetime.now()\n>>> print(f'Approach #1: {dt1}')\n```", "```py\nApproach #1: 2020-08-12 20:55:39.680195\n```", "```py\n>>> print(f'Year: {dt1.year}')\n>>> print(f'Month: {dt1.month}')\n>>> print(f'Day: {dt1.day}')\n>>> print(f'Hours: {dt1.hour}')\n>>> print(f'Minutes: {dt1.minute}')\n>>> print(f'Seconds: {dt1.second}')\n>>> print(f'Microseconds: {dt1.microsecond}')\n>>> print(f'Timezone: {dt1.tzinfo}')\n```", "```py\nYear: 2020\nMonth: 8\nDay: 12\nHours: 20\nMinutes: 55\nSeconds: 39\nMicroseconds: 680195\nTimezone: None\n```", "```py\n>>> dt2 = datetime(year=2021, month=1, day=1)\n>>> print(f'Approach #2: {dt2}')\n```", "```py\nApproach #2: 2021-01-01 00:00:00\n```", "```py\n>>> print(f'Year: {dt.year}')\n>>> print(f'Month: {dt.month}')\n>>> print(f'Day: {dt.day}')\n>>> print(f'Hours: {dt.hour}')\n>>> print(f'Minutes: {dt.minute}')\n>>> print(f'Seconds: {dt.second}')\n>>> print(f'Microseconds: {dt.microsecond}')\n>>> print(f'Timezone: {dt2.tzinfo}')\n```", "```py\nYear: 2021\nMonth: 1\nDay: 1\nHours: 0\nMinutes: 0\nSeconds: 0\nMicroseconds: 0\nTimezone: None\n```", "```py\n>>> print(f\"Date: {dt1.date()}\")\n>>> print(f\"Type: {type(dt1.date())}\")\n```", "```py\nDate: 2020-08-12\nType: <class 'datetime.date'>\n```", "```py\n>>> print(f\"Time: {dt1.time()}\")\n>>> print(f\"Type: {type(dt1.time())}\")\n```", "```py\nTime: 20:55:39.680195\nType: <class 'datetime.time'>\n```", "```py\n>>> print(f\"Date: {dt2.date()}\")\n>>> print(f\"Type: {type(dt2.date())}\")\n```", "```py\nDate: 2021-01-01\nType: <class 'datetime.date'>\n```", "```py\n>>> print(f\"Time: {dt2.time()}\")\n>>> print(f\"Type: {type(dt2.time())}\")\n```", "```py\nTime: 00:00:00\nType: <class 'datetime.time'>\n```", "```py\n>>> from datetime import timedelta\n```", "```py\n>>> td1 = timedelta(days=5)\n>>> print(f'Time difference: {td1}')\n```", "```py\nTime difference: 5 days, 0:00:00\n```", "```py\n>>> td2 = timedelta(days=4)\n>>> print(f'Time difference: {td2}')\n```", "```py\nTime difference: 4 days, 0:00:00\n```", "```py\n>>> print(f'Addition: {td1} + {td2} = {td1 + td2}')\n```", "```py\nAddition: 5 days, 0:00:00 + 4 days, 0:00:00 = 9 days, 0:00:00\n```", "```py\n>>> print(f'Subtraction: {td1} - {td2} = {td1 - td2}')\n```", "```py\nSubtraction: 5 days, 0:00:00 - 4 days, 0:00:00 = 1 day, 0:00:00\n```", "```py\n>>> print(f'Multiplication: {td1} * 2.5 = {td1 * 2.5}')\n```", "```py\nMultiplication: 5 days, 0:00:00 * 2.5 = 12 days, 12:00:00\n```", "```py\n>>> td3 = timedelta(hours=23, minutes=59, seconds=60)\n>>> print(f'Time difference: {td3}')\n```", "```py\nTime difference: 1 day, 0:00:00\n```", "```py\n>>> print(f'Total seconds in 1 day: {td3.total_seconds()}')\n```", "```py\nTotal seconds in 1 day: 86400.0\n```", "```py\n>>> from datetime import datetime, timedelta\n```", "```py\n>>> date_today = date.today()              \n>>> print(f\"Today's Date: {date_today}\")\n```", "```py\nToday's Date: 2020-08-12\n```", "```py\n>>> date_5days_later = date_today + timedelta(days=5)\n>>> print(f\"Date 5 days later: {date_5days_later}\")\n```", "```py\nDate 5 days later: 2020-08-17\n```", "```py\n>>> date_5days_ago = date_today - timedelta(days=5)\n>>> print(f\"Date 5 days ago: {date_5days_ago}\")\n```", "```py\nDate 5 days ago: 2020-08-07\n```", "```py\n>>> date_5days_later > date_5days_ago\n```", "```py\nTrue\n```", "```py\n>>> date_5days_later < date_5days_ago\n```", "```py\nFalse\n```", "```py\n>>> date_5days_later > date_today > date_5days_ago\n```", "```py\nTrue\n```", "```py\n>>> current_timestamp = datetime.now()\n```", "```py\n>>> time_now = current_timestamp.time()\n>>> print(f\"Time now: {time_now}\")\n```", "```py\nTime now: 20:55:45.239177\n```", "```py\n>>> time_5minutes_later = (current_timestamp + \n                                timedelta(minutes=5)).time()\n>>> print(f\"Time 5 minutes later: {time_5minutes_later}\")\n```", "```py\nTime 5 minutes later: 21:00:45.239177\n```", "```py\n>>> time_5minutes_ago = (current_timestamp - \n                            timedelta(minutes=5)).time()\n>>> print(f\"Time 5 minutes ago: {time_5minutes_ago}\")\n```", "```py\nTime 5 minutes ago: 20:50:45.239177\n```", "```py\n>>> time_5minutes_later < time_5minutes_ago\n```", "```py\nFalse\n```", "```py\n>>> time_5minutes_later > time_5minutes_ago\n```", "```py\nTrue\n```", "```py\n>> time_5minutes_later > time_now > time_5minutes_ago\n```", "```py\nTrue\n```", "```py\n>>> from datetime import datetime\n```", "```py\n>>> dt1 = datetime.now()\n>>> print(dt1)\n```", "```py\n2020-08-12 20:55:46.753899\n```", "```py\n>>> dt2 = dt1.replace(year=2021, month=1, day=1)\n>>> print(f'A timestamp from 1st January 2021: {dt2}')\n```", "```py\nA timestamp from 1st January 2021: 2021-01-01 20:55:46.753899\n```", "```py\n>>> dt3 = datetime(year=2021, \n                   month=1, \n                   day=1,\n                   hour=dt1.hour,\n                   minute=dt1.minute, \n                   second=dt1.second, \n                   microsecond=dt1.microsecond, \n                   tzinfo=dt1.tzinfo)\nprint(f'A timestamp from 1st January 2021: {dt3}')\n```", "```py\nA timestamp from 1st January 2021: 2021-01-01 20:55:46.753899\n```", "```py\n>>> dt2 == dt3\n```", "```py\nTrue\n```", "```py\n>>> from datetime import datetime\n```", "```py\n>>> now = datetime.now().astimezone()\n```", "```py\n>>> print(str(now))\n```", "```py\n2020-08-12 20:55:48.366130+05:30\n```", "```py\n>>> print(now.strftime(\"%d-%m-%Y %H:%M:%S %Z\"))\n```", "```py\n12-08-2020 20:55:48 +0530\n```", "```py\n>>> from datetime import datetime\n```", "```py\n>>> now_str = '13-1-2021 15:53:39 +05:30'\n```", "```py\n>>> now = datetime.strptime(now_str, \"%d-%m-%Y %H:%M:%S %z\")\n>>> print(now)\n```", "```py\n2021-01-13 15:53:39+05:30\n```", "```py\n>>> print(type(now))\n```", "```py\n<class 'datetime.datetime'>\n```", "```py\n>>> now = datetime.strptime(now_str, \"%d-%m-%Y\")\n```", "```py\n# Note: It's expected to have an error below\n---------------------------------------------------------------------------\nValueError Traceback (most recent call last)\n<ipython-input-96-dc92a0358ed8> in <module>\n----> 1 now = datetime.strptime(now_str, \"%d-%m-%Y\")\n      2 # Note: It's expected to get an error below\n\n/usr/lib/python3.8/_strptime.py in _strptime_datetime(cls, data_string, format)\n    566 \"\"\"Return a class cls instance based on the input string and the\n    567 format string.\"\"\"\n--> 568 tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n    569 tzname, gmtoff = tt[-2:]\n    570 args = tt[:6] + (fraction,)\n\n/usr/lib/python3.8/_strptime.py in _strptime(data_string, format)\n    350 (data_string, format))\n    351 if len(data_string) != found.end():\n--> 352 raise ValueError(\"unconverted data remains: %s\" %\n    353 data_string[found.end():])\n    354 \n\nValueError: unconverted data remains: 15:53:39 +05:30\n```", "```py\n>>> from datetime import datetime\n```", "```py\n>>> now_tz_unaware = datetime.now()\n>>> print(now_tz_unaware)\n```", "```py\n2020-08-12 20:55:50.598800\n```", "```py\n>>> print(now_tz_unaware.tzinfo)\n```", "```py\nNone\n```", "```py\n>>> now_tz_aware = datetime.now().astimezone()\n>>> print(now_tz_aware)\n```", "```py\n2020-08-12 20:55:51.004671+05:30\n```", "```py\n>>> print(now_tz_aware.tzinfo)\n```", "```py\nIST\n```", "```py\n>>> new_tz_aware = now_tz_naive.replace(tzinfo=now_tz_aware.tzinfo)\n>>> print(new_tz_aware)\n```", "```py\n2020-08-12 20:55:50.598800+05:30\n```", "```py\n>>> print(new_tz_aware.tzinfo)\n```", "```py\nIST\n```", "```py\n>>> new_tz_naive = new_tz_aware.replace(tzinfo=None)\n>>> print(new_tz_naive)\n```", "```py\n2020-08-12 20:55:50.598800\n```", "```py\n>>> print(new_tz_naive.tzinfo)\n```", "```py\nNone\n```", "```py\n>>> new_tz_naive <= now_tz_naive\n```", "```py\n>>> new_tz_aware <= now_tz_aware\n```", "```py\nTrue\n```", "```py\n>>> new_tz_aware > now_tz_naive\n```", "```py\n-------------------------------------------------------------------\n            TypeError Traceback (most recent call last)\n<ipython-input-167-a9433bb51293> in <module>\n----> 1 new_tz_aware > now_tz_naive\n      2 # Note: It's expected to get an error below\n\nTypeError: can't compare offset-naive and offset-aware datetimes\n```", "```py\n>>> from datetime import datetime\n>>> import pandas\n```", "```py\n>>> time_series_data = \\\n[{'date': datetime.datetime(2019, 11, 13, 9, 0),   \n  'open': 71.8075, 'high': 71.845,  'low': 71.7775, \n  'close': 71.7925, 'volume': 219512},\n{'date': datetime.datetime(2019, 11, 13, 9, 15),  \n 'open': 71.7925, 'high': 71.8,    'low': 71.78,   \n 'close': 71.7925, 'volume': 59252},\n{'date': datetime.datetime(2019, 11, 13, 9, 30),  \n 'open': 71.7925, 'high': 71.8125, 'low': 71.76,\n 'close': 71.7625, 'volume': 57187},\n{'date': datetime.datetime(2019, 11, 13, 9, 45),  \n 'open': 71.76,   'high': 71.765,  'low': 71.735,  \n 'close': 71.7425, 'volume': 43048}, \n{'date': datetime.datetime(2019, 11, 13, 10, 0),  \n 'open': 71.7425, 'high': 71.78,   'low': 71.7425, \n 'close': 71.7775, 'volume': 45863},\n{'date': datetime.datetime(2019, 11, 13, 10, 15), \n 'open': 71.775,  'high': 71.8225, 'low': 71.77,   \n 'close': 71.815,  'volume': 42460},\n{'date': datetime.datetime(2019, 11, 13, 10, 30), \n 'open': 71.815,  'high': 71.83,   'low': 71.7775, \n 'close': 71.78,   'volume': 62403},\n{'date': datetime.datetime(2019, 11, 13, 10, 45), \n 'open': 71.775,  'high': 71.7875, 'low': 71.7475,\n 'close': 71.7525, 'volume': 34090},\n{'date': datetime.datetime(2019, 11, 13, 11, 0),  \n 'open': 71.7525, 'high': 71.7825, 'low': 71.7475,\n 'close': 71.7625, 'volume': 39320},\n{'date': datetime.datetime(2019, 11, 13, 11, 15), \n 'open': 71.7625, 'high': 71.7925, 'low': 71.76,\n 'close': 71.7875, 'volume': 20190}]\n```", "```py\n>>> df = pandas.DataFrame(time_series_data)\n>>> df\n```", "```py\n                 date    open    high     low   close volume\n0 2019-11-13 09:00:00 71.8075 71.8450 71.7775 71.7925 219512\n1 2019-11-13 09:15:00 71.7925 71.8000 71.7800 71.7925  59252\n2 2019-11-13 09:30:00 71.7925 71.8125 71.7600 71.7625  57187\n3 2019-11-13 09:45:00 71.7600 71.7650 71.7350 71.7425  43048\n4 2019-11-13 10:00:00 71.7425 71.7800 71.7425 71.7775  45863\n5 2019-11-13 10:15:00 71.7750 71.8225 71.7700 71.8150  42460\n6 2019-11-13 10:30:00 71.8150 71.8300 71.7775 71.7800  62403\n7 2019-11-13 10:45:00 71.7750 71.7875 71.7475 71.7525  34090\n8 2019-11-13 11:00:00 71.7525 71.7825 71.7475 71.7625  39320\n9 2019-11-13 11:15:00 71.7625 71.7925 71.7600 71.7875  20190\n```", "```py\n>>> df.columns.tolist()\n```", "```py\n['date', 'open', 'high', 'low', 'close', 'volume']\n```", "```py\n>>> pandas.DataFrame(time_series_data, \n         columns=['close','date', 'open', 'high', 'low', 'volume'])\n```", "```py\n    close                date    open    high     low volume\n0 71.7925 2019-11-13 09:00:00 71.8075 71.8450 71.7775 219512\n1 71.7925 2019-11-13 09:15:00 71.7925 71.8000 71.7800  59252\n2 71.7625 2019-11-13 09:30:00 71.7925 71.8125 71.7600  57187\n3 71.7425 2019-11-13 09:45:00 71.7600 71.7650 71.7350  43048\n4 71.7775 2019-11-13 10:00:00 71.7425 71.7800 71.7425  45863\n5 71.8150 2019-11-13 10:15:00 71.7750 71.8225 71.7700  42460\n6 71.7800 2019-11-13 10:30:00 71.8150 71.8300 71.7775  62403\n7 71.7525 2019-11-13 10:45:00 71.7750 71.7875 71.7475  34090\n8 71.7625 2019-11-13 11:00:00 71.7525 71.7825 71.7475  39320\n9 71.7875 2019-11-13 11:15:00 71.7625 71.7925 71.7600  20190\n```", "```py\n>>> pandas.DataFrame(time_series_data, index=range(10, 20)) \n```", "```py\n                  date    open    high     low   close volume\n10 2019-11-13 09:00:00 71.8075 71.8450 71.7775 71.7925 219512\n11 2019-11-13 09:15:00 71.7925 71.8000 71.7800 71.7925  59252\n12 2019-11-13 09:30:00 71.7925 71.8125 71.7600 71.7625  57187\n13 2019-11-13 09:45:00 71.7600 71.7650 71.7350 71.7425  43048\n14 2019-11-13 10:00:00 71.7425 71.7800 71.7425 71.7775  45863\n15 2019-11-13 10:15:00 71.7750 71.8225 71.7700 71.8150  42460\n16 2019-11-13 10:30:00 71.8150 71.8300 71.7775 71.7800  62403\n17 2019-11-13 10:45:00 71.7750 71.7875 71.7475 71.7525  34090\n18 2019-11-13 11:00:00 71.7525 71.7825 71.7475 71.7625  39320\n19 2019-11-13 11:15:00 71.7625 71.7925 71.7600 71.7875  20190\n```", "```py\n>>> df.rename(columns={'date':'timestamp'}, inplace=True)\n>>> df\n```", "```py\n            timestamp    open    high     low   close volume\n0 2019-11-13 09:00:00 71.8075 71.8450 71.7775 71.7925 219512\n1 2019-11-13 09:15:00 71.7925 71.8000 71.7800 71.7925  59252\n2 2019-11-13 09:30:00 71.7925 71.8125 71.7600 71.7625  57187\n3 2019-11-13 09:45:00 71.7600 71.7650 71.7350 71.7425  43048\n4 2019-11-13 10:00:00 71.7425 71.7800 71.7425 71.7775  45863\n5 2019-11-13 10:15:00 71.7750 71.8225 71.7700 71.8150  42460\n6 2019-11-13 10:30:00 71.8150 71.8300 71.7775 71.7800  62403\n7 2019-11-13 10:45:00 71.7750 71.7875 71.7475 71.7525  34090\n8 2019-11-13 11:00:00 71.7525 71.7825 71.7475 71.7625  39320\n9 2019-11-13 11:15:00 71.7625 71.7925 71.7600 71.7875  20190\n```", "```py\n>>> df.reindex(columns=[\n               'volume', \n               'close', \n               'timestamp', \n               'high', \n               'open', \n               'low'\n            ])\n```", "```py\n  volume   close           timestamp    high    open     low\n0 219512 71.7925 2019-11-13 09:00:00 71.8450 71.8075 71.7775\n1  59252 71.7925 2019-11-13 09:15:00 71.8000 71.7925 71.7800\n2  57187 71.7625 2019-11-13 09:30:00 71.8125 71.7925 71.7600\n3  43048 71.7425 2019-11-13 09:45:00 71.7650 71.7600 71.7350\n4  45863 71.7775 2019-11-13 10:00:00 71.7800 71.7425 71.7425\n5  42460 71.8150 2019-11-13 10:15:00 71.8225 71.7750 71.7700\n6  62403 71.7800 2019-11-13 10:30:00 71.8300 71.8150 71.7775\n7  34090 71.7525 2019-11-13 10:45:00 71.7875 71.7750 71.7475\n8  39320 71.7625 2019-11-13 11:00:00 71.7825 71.7525 71.7475\n9  20190 71.7875 2019-11-13 11:15:00 71.7925 71.7625 71.7600\n```", "```py\n>>> df[::-1]\n```", "```py\n            timestamp    open    high     low   close volume\n9 2019-11-13 11:15:00 71.7625 71.7925 71.7600 71.7875  20190\n8 2019-11-13 11:00:00 71.7525 71.7825 71.7475 71.7625  39320\n7 2019-11-13 10:45:00 71.7750 71.7875 71.7475 71.7525  34090\n6 2019-11-13 10:30:00 71.8150 71.8300 71.7775 71.7800  62403\n5 2019-11-13 10:15:00 71.7750 71.8225 71.7700 71.8150  42460\n4 2019-11-13 10:00:00 71.7425 71.7800 71.7425 71.7775  45863\n3 2019-11-13 09:45:00 71.7600 71.7650 71.7350 71.7425  43048\n2 2019-11-13 09:30:00 71.7925 71.8125 71.7600 71.7625  57187\n1 2019-11-13 09:15:00 71.7925 71.8000 71.7800 71.7925  59252\n0 2019-11-13 09:00:00 71.8075 71.8450 71.7775 71.7925 219512\n```", "```py\n>>> df['close']\n```", "```py\n0    71.7925\n1    71.7925\n2    71.7625\n3    71.7425\n4    71.7775\n5    71.8150\n6    71.7800\n7    71.7525\n8    71.7625\n9    71.7875\nName: close, dtype: float64\n```", "```py\n>>> df.iloc[0]\n```", "```py\ntimestamp    2019-11-13 09:00:00\nopen                     71.8075\nhigh                      71.845\nlow                      71.7775\nclose                    71.7925\nvolume                    219512\nName: 10, dtype: object\n```", "```py\n>>> df.iloc[:2, :2]\n```", "```py\n            timestamp    open\n0 2019-11-13 09:00:00 71.8075\n1 2019-11-13 09:15:00 71.7925\n```", "```py\n>>> df.iloc[:, 4]\n```", "```py\n0    71.7925\n1    71.7925\n2    71.7625\n3    71.7425\n4    71.7775\n5    71.8150\n6    71.7800\n7    71.7525\n8    71.7625\n9    71.7875\nName: close, dtype: float64\n```", "```py\n>>> import random\n>>> import pandas\n```", "```py\n>>> df['timestamp'] = df['timestamp'].apply(\n                        lambda x: x.strftime(\"%d-%m-%Y %H:%M:%S\"))\n>>> df\n```", "```py\n            timestamp    open    high     low   close volume\n0 13-11-2019 09:00:00 71.8075 71.8450 71.7775 71.7925 219512\n1 13-11-2019 09:15:00 71.7925 71.8000 71.7800 71.7925  59252\n2 13-11-2019 09:30:00 71.7925 71.8125 71.7600 71.7625  57187\n3 13-11-2019 09:45:00 71.7600 71.7650 71.7350 71.7425  43048\n4 13-11-2019 10:00:00 71.7425 71.7800 71.7425 71.7775  45863\n5 13-11-2019 10:15:00 71.7750 71.8225 71.7700 71.8150  42460\n6 13-11-2019 10:30:00 71.8150 71.8300 71.7775 71.7800  62403\n7 13-11-2019 10:45:00 71.7750 71.7875 71.7475 71.7525  34090\n8 13-11-2019 11:00:00 71.7525 71.7825 71.7475 71.7625  39320\n9 13-11-2019 11:15:00 71.7625 71.7925 71.7600 71.7875  20190\n```", "```py\n>>> df.sort_values(by='close', ascending=True)\n```", "```py\n            timestamp    open    high     low   close volume\n3 13-11-2019 09:45:00 71.7600 71.7650 71.7350 71.7425  43048\n7 13-11-2019 10:45:00 71.7750 71.7875 71.7475 71.7525  34090\n2 13-11-2019 09:30:00 71.7925 71.8125 71.7600 71.7625  57187\n8 13-11-2019 11:00:00 71.7525 71.7825 71.7475 71.7625  39320\n4 13-11-2019 10:00:00 71.7425 71.7800 71.7425 71.7775  45863\n6 13-11-2019 10:30:00 71.8150 71.8300 71.7775 71.7800  62403\n9 13-11-2019 11:15:00 71.7625 71.7925 71.7600 71.7875  20190\n0 13-11-2019 09:00:00 71.8075 71.8450 71.7775 71.7925 219512\n1 13-11-2019 09:15:00 71.7925 71.8000 71.7800 71.7925  59252\n5 13-11-2019 10:15:00 71.7750 71.8225 71.7700 71.8150  42460\n```", "```py\n>>> df.sort_values(by='open', ascending=False)\n```", "```py\n            timestamp    open    high     low   close volume\n6 13-11-2019 10:30:00 71.8150 71.8300 71.7775 71.7800  62403\n0 13-11-2019 09:00:00 71.8075 71.8450 71.7775 71.7925 219512\n2 13-11-2019 09:30:00 71.7925 71.8125 71.7600 71.7625  57187\n1 13-11-2019 09:15:00 71.7925 71.8000 71.7800 71.7925  59252\n7 13-11-2019 10:45:00 71.7750 71.7875 71.7475 71.7525  34090\n5 13-11-2019 10:15:00 71.7750 71.8225 71.7700 71.8150  42460\n9 13-11-2019 11:15:00 71.7625 71.7925 71.7600 71.7875  20190\n3 13-11-2019 09:45:00 71.7600 71.7650 71.7350 71.7425  43048\n8 13-11-2019 11:00:00 71.7525 71.7825 71.7475 71.7625  39320\n4 13-11-2019 10:00:00 71.7425 71.7800 71.7425 71.7775  45863\n```", "```py\n>>> for _, row in df.iterrows():\n       avg = (row['open'] + row['close'] + row['high'] + \n              row['low'])/4\n       print(f\"Index: {_} | Average: {avg}\")\n```", "```py\nIndex: 0 | Average: 71.805625\nIndex: 1 | Average: 71.79124999999999\nIndex: 2 | Average: 71.781875\nIndex: 3 | Average: 71.750625\nIndex: 4 | Average: 71.760625\nIndex: 5 | Average: 71.795625\nIndex: 6 | Average: 71.800625\nIndex: 7 | Average: 71.765625\nIndex: 8 | Average: 71.76124999999999\nIndex: 9 | Average: 71.775625\n```", "```py\n>>> for value in df.iloc[0]:\n        print(value)\n```", "```py\n13-11-2019 09:00:00\n71.8075\n71.845\n71.7775\n71.7925\n219512\n```", "```py\n>>> df_new = pandas. DataFrame([\n    {'timestamp': datetime.datetime(2019, 11, 13, 11, 30),\n     'open': 71.7875,\n     'high': 71.8075,\n     'low': 71.77,\n     'close': 71.7925,\n     'volume': 18655},\n    {'timestamp': datetime.datetime(2019, 11, 13, 11, 45),\n     'open': 71.7925,\n     'high': 71.805,\n     'low': 71.7625,\n     'close': 71.7625,\n     'volume': 25648},\n    {'timestamp': datetime.datetime(2019, 11, 13, 12, 0),\n     'open': 71.7625,\n     'high': 71.805,\n     'low': 71.75,\n     'close': 71.785,\n     'volume': 37300},\n    {'timestamp': datetime.datetime(2019, 11, 13, 12, 15),\n     'open': 71.785,\n     'high': 71.7925,\n     'low': 71.7575,\n     'close': 71.7775,\n     'volume': 15431},\n    {'timestamp': datetime.datetime(2019, 11, 13, 12, 30),\n     'open': 71.7775,\n     'high': 71.795,\n     'low': 71.7725,\n     'close': 71.79,\n     'volume': 5178}])\n>>> df_new\n```", "```py\n            timestamp    open    high     low   close volume\n0 2019-11-13 11:30:00 71.7875 71.8075 71.7700 71.7925  18655\n1 2019-11-13 11:45:00 71.7925 71.8050 71.7625 71.7625  25648\n2 2019-11-13 12:00:00 71.7625 71.8050 71.7500 71.7850  37300\n3 2019-11-13 12:15:00 71.7850 71.7925 71.7575 71.7775  15431\n4 2019-11-13 12:30:00 71.7775 71.7950 71.7725 71.7900   5178\n```", "```py\n>>> pandas.concat([df, df_new]).reset_index(drop=True)\n```", "```py\n             timestamp    open    high     low   close volume\n0  13-11-2019 09:00:00 71.8075 71.8450 71.7775 71.7925 219512\n1  13-11-2019 09:15:00 71.7925 71.8000 71.7800 71.7925  59252\n2  13-11-2019 09:30:00 71.7925 71.8125 71.7600 71.7625  57187\n3  13-11-2019 09:45:00 71.7600 71.7650 71.7350 71.7425  43048\n4  13-11-2019 10:00:00 71.7425 71.7800 71.7425 71.7775  45863\n5  13-11-2019 10:15:00 71.7750 71.8225 71.7700 71.8150  42460\n6  13-11-2019 10:30:00 71.8150 71.8300 71.7775 71.7800  62403\n7  13-11-2019 10:45:00 71.7750 71.7875 71.7475 71.7525  34090\n8  13-11-2019 11:00:00 71.7525 71.7825 71.7475 71.7625  39320\n9  13-11-2019 11:15:00 71.7625 71.7925 71.7600 71.7875  20190\n10 2019-11-13 11:30:00 71.7875 71.8075 71.7700 71.7925  18655\n11 2019-11-13 11:45:00 71.7925 71.8050 71.7625 71.7625  25648\n12 2019-11-13 12:00:00 71.7625 71.8050 71.7500 71.7850  37300\n13 2019-11-13 12:15:00 71.7850 71.7925 71.7575 71.7775  15431\n14 2019-11-13 12:30:00 71.7775 71.7950 71.7725 71.7900   5178\n```", "```py\n>>> import random\n```", "```py\n>>> df1 = pandas.DataFrame([random.randint(1,100) for i in \n                            range(10)], columns=['open'])\n>>> df1\n```", "```py\n   open\n0    99\n1    73\n2    16\n3    53\n4    47\n5    74\n6    21\n7    22\n8     2\n9    30\n```", "```py\n>>> df2 = pandas.DataFrame([random.randint(1,100) for i in \n                            range(10)], columns=['close'])\n>>> df2\n```", "```py\n   close\n0     63\n1     84\n2     44\n3     56\n4     25\n5      1\n6     41\n7     55\n8     93\n9     82\n```", "```py\n>>> pandas.concat([df1, df2], axis=1)\n```", "```py\n    open  close\n0     99     93\n1     73     42\n2     16     57\n3     53     56\n4     47     25\n5     74      1\n6     21     41\n7     22     55\n8      2     93\n9     30     82\n```", "```py\n>>> df.to_csv('dataframe.csv', index=False)\n```", "```py\n>>> df.to_json()\n```", "```py\n'{\n    \"timestamp\":{\n        \"0\":\"13-11-2019 09:00:00\",\"1\":\"13-11-2019 09:15:00\",\n        \"2\":\"13-11-2019 09:30:00\",\"3\":\"13-11-2019 09:45:00\",\n        \"4\":\"13-11-2019 10:00:00\",\"5\":\"13-11-2019 10:15:00\",\n        \"6\":\"13-11-2019 10:30:00\",\"7\":\"13-11-2019 10:45:00\",\n        \"8\":\"13-11-2019 11:00:00\",\"9\":\"13-11-2019 11:15:00\"},\n    \"open\":{\n        \"0\":71.8075,\"1\":71.7925,\"2\":71.7925, \"3\":71.76,         \n        \"4\":71.7425,\"5\":71.775,\"6\":71.815, \"7\":71.775,\n        \"8\":71.7525,\"9\":71.7625},\n    \"high\"{\n        \"0\":71.845,\"1\":71.8,\"2\":71.8125,\"3\":71.765,\n        \"4\":71.78,\"5\":71.8225,\"6\":71.83,\"7\":71.7875,\n        \"8\":71.7825,\"9\":71.7925},\n    \"low\":{\n        \"0\":71.7775,\"1\":71.78,\"2\":71.76,\"3\":71.735,\n        \"4\":71.7425,\"5\":71.77,\"6\":71.7775,\"7\":71.7475,\n        \"8\":71.7475,\"9\":71.76},\n    \"close\":{\n        \"0\":71.7925,\"1\":71.7925,\"2\":71.7625,\"3\":71.7425,\n        \"4\":71.7775,\"5\":71.815,\"6\":71.78,\"7\":71.7525,\n        \"8\":71.7625,\"9\":71.7875},\n    \"volume\":{\n        \"0\":219512,\"1\":59252,\"2\":57187,\"3\":43048,\n        \"4\":45863,\"5\":42460,\"6\":62403,\"7\":34090,\n        \"8\":39320,\"9\":20190}}'\n```", "```py\n>>> df.to_pickle('df.pickle')\n```", "```py\n>>> pandas.read_csv('dataframe.csv')\n```", "```py\n            timestamp    open    high     low   close volume\n0 2019-11-13 09:00:00 71.8075 71.8450 71.7775 71.7925 219512\n1 2019-11-13 09:15:00 71.7925 71.8000 71.7800 71.7925  59252\n2 2019-11-13 09:30:00 71.7925 71.8125 71.7600 71.7625  57187\n3 2019-11-13 09:45:00 71.7600 71.7650 71.7350 71.7425  43048\n4 2019-11-13 10:00:00 71.7425 71.7800 71.7425 71.7775  45863\n5 2019-11-13 10:15:00 71.7750 71.8225 71.7700 71.8150  42460\n6 2019-11-13 10:30:00 71.8150 71.8300 71.7775 71.7800  62403\n7 2019-11-13 10:45:00 71.7750 71.7875 71.7475 71.7525  34090\n8 2019-11-13 11:00:00 71.7525 71.7825 71.7475 71.7625  39320\n9 2019-11-13 11:15:00 71.7625 71.7925 71.7600 71.7875  20190\n```", "```py\n>>> pandas.read_json(\"\"\"{\n        \"timestamp\": {\n            \"0\":\"13-11-2019 09:00:00\", \"1\":\"13-11-2019 09:15:00\", \n            \"2\":\"13-11-2019 09:30:00\",\"3\":\"13-11-2019 09:45:00\", \n            \"4\":\"13-11-2019 10:00:00\",\"5\":\"13-11-2019 10:15:00\",\n            \"6\":\"13-11-2019 10:30:00\",\"7\":\"13-11-2019 10:45:00\",\n            \"8\":\"13-11-2019 11:00:00\",\"9\":\"13-11-2019 11:15:00\"},\n\n        \"open\":{\n            \"0\":71.8075,\"1\":71.7925,\"2\":71.7925,\"3\":71.76,\n            \"4\":71.7425,\"5\":71.775,\"6\":71.815,\"7\":71.775,\n            \"8\":71.7525,\"9\":71.7625},\n\n        \"high\":{\n            \"0\":71.845,\"1\":71.8,\"2\":71.8125,\"3\":71.765,\"4\":71.78,\n            \"5\":71.8225,\"6\":71.83,\"7\":71.7875,\"8\":71.7825,\n            \"9\":71.7925},\n\n        \"low\":{\n            \"0\":71.7775,\"1\":71.78,\"2\":71.76,\"3\":71.735,\"4\":71.7425,\n            \"5\":71.77,\"6\":71.7775,\"7\":71.7475,\"8\":71.7475,\n            \"9\":71.76},\n\n        \"close\":{\n            \"0\":71.7925,\"1\":71.7925,\"2\":71.7625,\"3\":71.7425,\n            \"4\":71.7775,\"5\":71.815,\"6\":71.78,\"7\":71.7525,\n            \"8\":71.7625,\"9\":71.7875},\n\n        \"volume\":{\n            \"0\":219512,\"1\":59252,\"2\":57187,\"3\":43048,\"4\":45863,\n            \"5\":42460,\"6\":62403,\"7\":34090,\"8\":39320,\"9\":20190}}\n            \"\"\")\n```", "```py\n            timestamp    open    high     low   close volume\n0 2019-11-13 09:00:00 71.8075 71.8450 71.7775 71.7925 219512\n1 2019-11-13 09:15:00 71.7925 71.8000 71.7800 71.7925  59252\n2 2019-11-13 09:30:00 71.7925 71.8125 71.7600 71.7625  57187\n3 2019-11-13 09:45:00 71.7600 71.7650 71.7350 71.7425  43048\n4 2019-11-13 10:00:00 71.7425 71.7800 71.7425 71.7775  45863\n5 2019-11-13 10:15:00 71.7750 71.8225 71.7700 71.8150  42460\n6 2019-11-13 10:30:00 71.8150 71.8300 71.7775 71.7800  62403\n7 2019-11-13 10:45:00 71.7750 71.7875 71.7475 71.7525  34090\n8 2019-11-13 11:00:00 71.7525 71.7825 71.7475 71.7625  39320\n9 2019-11-13 11:15:00 71.7625 71.7925 71.7600 71.7875  20190\n```", "```py\n>>> pandas.read_pickle('df.pickle')\n```", "```py\n            timestamp    open    high     low   close volume\n0 2019-11-13 09:00:00 71.8075 71.8450 71.7775 71.7925 219512\n1 2019-11-13 09:15:00 71.7925 71.8000 71.7800 71.7925  59252\n2 2019-11-13 09:30:00 71.7925 71.8125 71.7600 71.7625  57187\n3 2019-11-13 09:45:00 71.7600 71.7650 71.7350 71.7425  43048\n4 2019-11-13 10:00:00 71.7425 71.7800 71.7425 71.7775  45863\n5 2019-11-13 10:15:00 71.7750 71.8225 71.7700 71.8150  42460\n6 2019-11-13 10:30:00 71.8150 71.8300 71.7775 71.7800  62403\n7 2019-11-13 10:45:00 71.7750 71.7875 71.7475 71.7525  34090\n8 2019-11-13 11:00:00 71.7525 71.7825 71.7475 71.7625  39320\n9 2019-11-13 11:15:00 71.7625 71.7925 71.7600 71.7875  20190\n```"]