["```py\nlibrary(fOptions)\nlibrary(fExoticOptions)\na <- GBSOption(\"c\", 100, 100, 1, 0.02, -0.02, 0.3, title = NULL,\n description = NULL)(z <- a@price)\n[1] 10.62678\na <- GeometricAverageRateOption(\"c\", 100, 100, 1, 0.02, -0.02, 0.3,\n title = NULL, description = NULL)(z <- a@price)[1] 5.889822\n\n```", "```py\nlibrary(fExoticOptions)\na <- StandardBarrierOption(\"cuo\", 100, 90, 130, 0, 1, 0.02, -0.02, 0.30,\n title = NULL, description = NULL)\nx <- a@price\nb <- StandardBarrierOption(\"cui\", 100, 90, 130, 0, 1, 0.02, -0.02, 0.30, \n title = NULL, description = NULL)\ny <- b@price\nc <- GBSOption(\"c\", 100, 90, 1, 0.02, -0.02, 0.3, title = NULL, \n description = NULL)\nz <- c@price\n\n```", "```py\nv <- z - x - y\nv\n[1] 0\n\n```", "```py\nvanilla <- GBSOption(TypeFlag = \"c\", S = 100, X = 90, Time = 1,\n r = 0.02, b = -0.02, sigma = 0.3)\nKO <- sapply(100:300, FUN = StandardBarrierOption, TypeFlag = \"cuo\",\n S = 100, X = 90, K = 0, Time = 1, r = 0.02, b = -0.02, sigma = 0.30)\nplot(KO[[1]]@price, type = \"l\",\n xlab = \"barrier distance from spot\",\n ylab = \"price of option\",\n main = \"Price of KO converges to plain vanilla\")\nabline(h = vanilla@price, col = \"red\")\n\n```", "```py\ninstall.packages('plot3D')\nBS_surface <- function(S, Time, FUN, ...) {\n require(plot3D)\n n <- length(S)\n k <- length(Time)\n m <- matrix(0, n, k)\n for (i in 1:n){\n for (j in 1:k){\n l <- list(S = S[i], Time = Time[j], ...)\n m[i,j] <- max(do.call(FUN, l)@price, 0)\n }\n }\n persp3D(z = m, xlab = \"underlying\", ylab = \"Remaining time\",\n zlab = \"option price\", phi = 30, theta = 20, bty = \"b2\")\n}\nBS_surface(seq(1, 200,length = 200), seq(0, 2, length = 200),\n GBSOption, TypeFlag = \"c\", X = 90, r = 0.02, b = 0, sigma = 0.3)\n\n```", "```py\nBS_surface(seq(1,200,length = 200), seq(0, 2, length = 200),\n StandardBarrierOption, TypeFlag = \"cuo\", H = 130, X = 90, K = 0,\n r = 0.02, b = -0.02, sigma = 0.30)\n\n```", "```py\nGetGreeks <- function(FUN, arg, epsilon,...) {\n all_args1 <- all_args2 <- list(...)\n all_args1[[arg]] <- as.numeric(all_args1[[arg]] + epsilon)\n all_args2[[arg]] <- as.numeric(all_args2[[arg]] - epsilon)\n (do.call(FUN, all_args1)@price -\n do.call(FUN, all_args2)@price) / (2 * epsilon)\n}\n\n```", "```py\nx <- seq(10, 200, length = 200)\ndelta <- vega <- theta <- rho <- rep(0, 200)\nfor(i in 1:200){\n delta[i] <- GetGreeks(FUN = FloatingStrikeLookbackOption, arg = 2, epsilon = 0.01, \"p\", x[i], 100, 1, 0.02, -0.02, 0.2)\n vega[i]  <- GetGreeks(FUN = FloatingStrikeLookbackOption, arg = 7, epsilon = 0.0005, \"p\", x[i], 100, 1, 0.02, -0.02, 0.2)\n theta[i] <- GetGreeks(FUN = FloatingStrikeLookbackOption, arg = 4, epsilon = 1/365, \"p\", x[i], 100, 1, 0.02, -0.02, 0.2)\n rho[i]   <- GetGreeks(FUN = FloatingStrikeLookbackOption, arg = 5, epsilon = 0.0001, \"p\", x[i], 100, 1, 0.02, -0.02, 0.2)\n}\npar(mfrow = c(2, 2))\nplot(x, delta, type = \"l\", xlab = \"S\", ylab = \"\", main = \"Delta\")\nplot(x, vega,  type = \"l\", xlab = \"S\", ylab = \"\", main = \"Vega\")\nplot(x, theta, type = \"l\", xlab = \"S\", ylab = \"\", main = \"Theta\")\nplot(x, rho,   type = \"l\", xlab = \"S\", ylab = \"\", main = \"Rho\")\n\n```", "```py\ndnt1 <- function(S, K, U, L, sigma, T, r, b, N = 20, ploterror = FALSE){\n if ( L > S | S > U) return(0)\n Z <- log(U/L)\n alpha <- -1/2*(2*b/sigma^2 - 1)\n beta <- -1/4*(2*b/sigma^2 - 1)^2 - 2*r/sigma^2\n v <- rep(0, N)\n for (i in 1:N)\n v[i] <- 2*pi*i*K/(Z^2) * (((S/L)^alpha - (-1)^i*(S/U)^alpha ) /\n (alpha^2+(i*pi/Z)^2)) * sin(i*pi/Z*log(S/L)) *\n exp(-1/2 * ((i*pi/Z)^2-beta) * sigma^2*T)\n if (ploterror) barplot(v, main = \"Formula Error\");\n sum(v)\n}\nprint(dnt1(100, 10, 120, 80, 0.1, 0.25, 0.05, 0.03, 20, TRUE))\n\n```", "```py\nprint(dnt1(100, 10, 120, 80, 0.03, 0.25, 0.05, 0.03, 50, TRUE))\n\n```", "```py\ndnt1 <- function(S, K, U, L, sigma, Time, r, b) {\n if ( L > S | S > U) return(0)\n Z <- log(U/L)\n alpha <- -1/2*(2*b/sigma^2 - 1)\n beta <- -1/4*(2*b/sigma^2 - 1)^2 - 2*r/sigma^2\n p <- 0\n i <- a <- 1\n while (abs(a) > 0.0001){\n a <- 2*pi*i*K/(Z^2) * (((S/L)^alpha - (-1)^i*(S/U)^alpha ) / (alpha^2 + (i *pi / Z)^2) ) * sin(i * pi / Z * log(S/L)) * exp(-1/2*((i*pi/Z)^2-beta) * sigma^2 * Time)\n p <- p + a\n i <- i + 1\n }\n p\n}\n\n```", "```py\nx <- seq(0.92, 0.96, length = 2000)\ny <- z <- rep(0, 2000)\nfor (i in 1:2000){\n y[i] <- dnt1(x[i], 1e6, 0.96, 0.92, 0.06, 0.25, 0.0025, -0.0250)\n z[i] <- dnt1(x[i], 1e6, 0.96, 0.92, 0.065, 0.25, 0.0025, -0.0250)\n}\nmatplot(x, cbind(y,z), type = \"l\", lwd = 2, lty = 1,\n main = \"Price of a DNT with volatility 6% and 6.5%\n\", cex.main = 0.8, xlab = \"Price of underlying\" )\n\n```", "```py\nGetGreeks <- function(FUN, arg, epsilon,...) {\n all_args1 <- all_args2 <- list(...)\n all_args1[[arg]] <- as.numeric(all_args1[[arg]] + epsilon)\n all_args2[[arg]] <- as.numeric(all_args2[[arg]] - epsilon)\n (do.call(FUN, all_args1) -\n do.call(FUN, all_args2)) / (2 * epsilon)\n}\nGamma <- function(FUN, epsilon, S, ...) {\n arg1 <- list(S, ...)\n arg2 <- list(S + 2 * epsilon, ...)\n arg3 <- list(S - 2 * epsilon, ...)\n y1 <- (do.call(FUN, arg2) - do.call(FUN, arg1)) / (2 * epsilon)\n y2 <- (do.call(FUN, arg1) - do.call(FUN, arg3)) / (2 * epsilon)\n (y1 - y2) / (2 * epsilon)\n}\nx = seq(0.9202, 0.9598, length = 200)\ndelta <- vega <- theta <- gamma <- rep(0, 200)\n\nfor(i in 1:200){\n delta[i] <- GetGreeks(FUN = dnt1, arg = 1, epsilon = 0.0001, \n x[i], 1000000, 0.96, 0.92, 0.06, 0.5, 0.02, -0.02)\n vega[i]  <-   GetGreeks(FUN = dnt1, arg = 5, epsilon = 0.0005, \n x[i], 1000000, 0.96, 0.92, 0.06, 0.5, 0.0025, -0.025)\n theta[i] <- - GetGreeks(FUN = dnt1, arg = 6, epsilon = 1/365, \n x[i], 1000000, 0.96, 0.92, 0.06, 0.5, 0.0025, -0.025)\n gamma[i] <- Gamma(FUN = dnt1, epsilon = 0.0001, S = x[i], K = \n 1e6, U = 0.96, L = 0.92, sigma = 0.06, Time = 0.5, r = 0.02, b = -0.02)\n}\n\nwindows()\nplot(x, vega, type = \"l\", xlab = \"S\",ylab = \"\", main = \"Vega\")\n\n```", "```py\nwindows()\nplot(x, delta, type = \"l\", xlab = \"S\",ylab = \"\", main = \"Delta\")\n\n```", "```py\nwindows()\nplot(x, gamma, type = \"l\", xlab = \"S\",ylab = \"\", main = \"Gamma\")\n\n```", "```py\nwindows()\nplot(x, theta, type = \"l\", xlab = \"S\",ylab = \"\", main = \"Theta\")\n\n```", "```py\nBS_surf <- function(S, Time, FUN, ...) {\n n <- length(S)\n k <- length(Time) \n m <- matrix(0, n, k)\n for (i in 1:n) {\n for (j in 1:k) {\n l <- list(S = S[i], Time = Time[j], ...)\n m[i,j] <- do.call(FUN, l)\n }\n }\n persp3D(z = m, xlab = \"underlying\", ylab = \"Time\",zlab = \"option price\", phi = 30, theta = 30, bty = \"b2\")\n}\nBS_surf(seq(0.92,0.96,length = 200), seq(1/365, 1/48, length = 200),dnt1, K = 1000000, U = 0.96, L = 0.92, r = 0.0025, b = -0.0250,sigma = 0.2)\n\n```", "```py\ndnt2 <- function(S, K, U, L, sigma, T, r, b) {\n\n a <- DoubleBarrierOption(\"co\", S, L, L, U, T, r, b, sigma, 0,\n 0,title = NULL, description = NULL)\n z <- a@price\n\n b <- DoubleBarrierOption(\"po\", S, U, L, U, T, r, b, sigma, 0,\n 0,title = NULL, description = NULL)\n y <- b@price\n\n (z + y) / (U - L) * K\n}\n\n```", "```py\ndnt1(0.9266, 1000000, 0.9600, 0.9200, 0.06, 0.25, 0.0025, -0.025)\n[1] 48564.59\n\ndnt2(0.9266, 1000000, 0.9600, 0.9200, 0.06, 0.25, 0.0025, -0.025)\n[1] 48564.45\n\n```", "```py\nd <- read.table(\"audusd.csv\", colClasses = c(\"character\", rep(\"numeric\",5)), sep = \";\", header = TRUE)\nunderlying <- as.vector(t(d[, 2:5]))\nt <- rep( d[,6], each = 4)\nn <- length(t)\noption_price <- rep(0, n)\n\nfor (i in 1:n) {\n option_price[i] <- dnt1(S = underlying[i], K = 1000000, U = 0.9600, L = 0.9200, sigma = 0.06, T = t[i]/(60*24*365), r = 0.0025, b = -0.0250)\n}\na <- min(option_price)\nb <- max(option_price)\noption_price_transformed = (option_price - a) * 0.03 / (b - a) + 0.92\n\npar(mar = c(6, 3, 3, 5))\nmatplot(cbind(underlying,option_price_transformed), type = \"l\",\n lty = 1, col = c(\"grey\", \"red\"),\n main = \"Price of underlying and DNT\",\n xaxt = \"n\", yaxt = \"n\",  ylim = c(0.91,0.97),\n ylab = \"\", xlab = \"Remaining time\")\nabline(h = c(0.92, 0.96), col = \"green\")\naxis(side = 2, at = pretty(option_price_transformed),\n col.axis = \"grey\", col = \"grey\")\naxis(side = 4, at = pretty(option_price_transformed),\n labels = round(seq(a/1000,1000,length = 7)), las = 2,\n col = \"red\", col.axis = \"red\")\naxis(side = 1, at = seq(1,n, length=6),\n labels = round(t[round(seq(1,n, length=6))]/60/24))\n\n```", "```py\ndnt1(0.9203, 1000000, 0.9600, 0.9200, 0.06, 59/365, 0.0025, -0.025)\n[1] 5302.213\n\n```", "```py\nlibrary(matrixStats)\nDNT_sim <- function(S0 = 0.9266, mu = 0, sigma = 0.06, U = 0.96,\n L = 0.92, N = 5) {\n dt <- 5 / (365 * 24 * 60)\n t <- seq(0, 0.25, by = dt)\n Time <- length(t)\n\n W <- matrix(rnorm((Time - 1) * N), Time - 1, N)\n W <- apply(W, 2, cumsum)\n W <- sqrt(dt) * rbind(rep(0, N), W)\n S <- S0 * exp((mu - sigma^2 / 2) * t + sigma * W )\n option_price <- matrix(0, Time, N)\n\n for (i in 1:N)\n for (j in 1:Time)\n option_price[j,i] <- dnt1(S[j,i], K = 1000000, U, L, sigma,\n 0.25-t[j], r = 0.0025,\n b = -0.0250)*(min(S[1:j,i]) > L & max(S[1:j,i]) < U)\n\n survivals <- sum(option_price[Time,] > 0)\n dev.new(width = 19, height = 10)\n\n par(mfrow = c(1,2))\n matplot(t,S, type = \"l\", main = \"Underlying price\",\n xlab = paste(\"Survived\", survivals, \"from\", N), ylab = \"\")\n abline( h = c(U,L), col = \"blue\")\n matplot(t, option_price, type = \"l\", main = \"DNT price\",\n xlab = \"\", ylab = \"\")}\n\nset.seed(214)\nsystem.time(DNT_sim())\n\n```", "```py\ndnt1(0.9266, 1000000, 0.9600, 0.9200, 0.06, 90/365, 0.0025, -0.025)\n[1] 50241.58\ndnt1(0.9266, 1000000, 0.9600, 0.9195, 0.06, 94/365, 0.0025, -0.025)\n[1] 50811.61\n\n```", "```py\ndnt1(0.9266, 1000000, 1.0600, 0.9200, 0.06, 94/365, 0.0025, -0.025)\n[1] 144702\na <- BinaryBarrierOption(9, 0.9266, 0, 0.9200, 1000000, 94/365, 0.0025, -0.025, 0.06, 1, 1, title = NULL, description = NULL)\n(z <- a@price)\n[1] 144705.3\n\n```", "```py\ndnt1(0.9266, 100, 0.9705, 0.9095, 0.06, 90/365, 0.0025, -0.025)\n[1] 31.44338\n\n```", "```py\nimplied_DNT_image <- function(S = 0.9266, K = 1000000, U = 0.96,\n L = 0.92, sigma = 0.06, Time = 0.25, r = 0.0025, b = -0.0250) {\n S_ <- seq(L,U,length = 300)\n K_ <- seq(800000, 1200000, length = 300)\n U_ <- seq(L+0.01, L + .15, length = 300)\n L_ <- seq(0.8, U - 0.001, length = 300)\n sigma_ <- seq(0.005, 0.1, length = 300)\n T_ <- seq(1/365, 1, length = 300)\n r_ <- seq(-10, 10, length = 300)\n b_ <- seq(-0.5, 0.5, length = 300)\n\n p1 <- lapply(S_, dnt1, K = 1000000, U = 0.96, L = 0.92,\n sigma = 0.06, Time = 0.25, r = 0.0025, b = -0.0250)\n p2 <- lapply(K_, dnt1, S = 0.9266, U = 0.96, L = 0.92,\n sigma = 0.06, Time = 0.25, r = 0.0025, b = -0.0250)\n p3 <- lapply(U_, dnt1, S = 0.9266, K = 1000000, L = 0.92,\n sigma = 0.06, Time = 0.25, r = 0.0025, b = -0.0250)\n p4 <- lapply(L_, dnt1, S = 0.9266, K = 1000000, U = 0.96,\n sigma = 0.06, Time = 0.25, r = 0.0025, b = -0.0250)\n p5 <- lapply(sigma_, dnt1, S = 0.9266, K = 1000000, U = 0.96,\n L = 0.92, Time = 0.25, r = 0.0025, b = -0.0250)\n p6 <- lapply(T_, dnt1, S = 0.9266, K = 1000000, U = 0.96, L = 0.92, sigma = 0.06, r = 0.0025, b = -0.0250)\n p7 <- lapply(r_, dnt1, S = 0.9266, K = 1000000, U = 0.96, L = 0.92, sigma = 0.06, Time = 0.25,  b = -0.0250)\n p8 <- lapply(b_, dnt1, S = 0.9266, K = 1000000, U = 0.96, L = 0.92, sigma = 0.06, Time = 0.25, r = 0.0025)\n dev.new(width = 20, height = 10)\n\n par(mfrow = c(2, 4), mar = c(2, 2, 2, 2))\n plot(S_, p1, type = \"l\", xlab = \"\", ylab = \"\", main = \"S\")\n plot(K_, p2, type = \"l\", xlab = \"\", ylab = \"\", main = \"K\")\n plot(U_, p3, type = \"l\", xlab = \"\", ylab = \"\", main = \"U\")\n plot(L_, p4, type = \"l\", xlab = \"\", ylab = \"\", main = \"L\")\n plot(sigma_, p5, type = \"l\", xlab = \"\", ylab = \"\", main = \"sigma\")\n plot(T_, p6, type = \"l\", xlab = \"\", ylab = \"\", main = \"Time\")\n plot(r_, p7, type = \"l\", xlab = \"\", ylab = \"\", main = \"r\")\n plot(b_, p8, type = \"l\", xlab = \"\", ylab = \"\", main = \"b\")\n}\n\nimplied_vol_DNT <- function(S = 0.9266, K = 1000000, U = 0.96, L = 0.92, Time = 0.25, r = 0.0025, b = -0.0250, price) {\n f <- function(sigma)\n dnt1(S, K, U, L, sigma, Time, r, b) - price\n uniroot(f, interval = c(0.001, 100))$root\n}\n\nimplied_U_DNT <- function(S = 0.9266, K = 1000000, L = 0.92, sigma = 0.06, Time = 0.25, r = 0.0025, b = -0.0250, price = 4) {\n f <- function(U)\n dnt1(S, K, U, L, sigma, Time, r, b) - price\n uniroot(f, interval = c(L+0.01, L + 100))$root\n}\nimplied_T_DNT <- function(S = 0.9266, K = 1000000, U = 0.96, L = 0.92, sigma = 0.06, r = 0.0025, b = -0.0250, price = 4){\n f <- function(Time)\n dnt1(S, K, U, L, sigma, Time, r, b) - price\n uniroot(f, interval = c(1/365, 100))$root\n}\nlibrary(rootSolve)\nimplied_DNT_image()\nprint(implied_vol_DNT(price = 6))\nprint(implied_U_DNT(price = 4))\nprint(implied_T_DNT(price = 30))\n\n```"]