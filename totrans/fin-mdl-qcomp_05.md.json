["```py\n\nbackend = Aer.get_backend('qasm_simulator')\nresult = execute(quantum_circuit, backend, shots=10).result()\ncounts  = result.get_counts(quantum_circuit)\n```", "```py\n\npip install qiskit-braket-provider\n```", "```py\n\nfrom qiskit_braket_provider import AWSBraketProvider\nprovider = AWSBraketProvider()\n```", "```py\n\nionq_device = provider.get_backend(\"IonQ Device\")\nrigetti_device = provider.get_backend(\"Aspen-M-3\")\noqc_device = provider.get_backend(\"Lucy\")\n```", "```py\n\npip install amazon-braket-sdk amazon-braket-pennylane-plugin\n```", "```py\n\nimport pennylane as qml\nfrom pennylane import numpy as np\nwires = 2  # Number of qubits\ndev = qml.device(\"braket.local.qubit\", wires=wires)\ndef circuit(params):\n   qml.Hadamard(wires=0)\n   qml.RY(params[0], wires=0)\n   qml.CNOT(wires=[0, 1])\n   return qml.expval(qml.PauliZ(1))\nqnode_local = qml.QNode(circuit, dev)\n```", "```py\n\nparams = np.array([0.1], requires_grad=True)\n```", "```py\n\n   print(\"Expectation value of circuit:\", qnode_local(params))\n>>> Expectation value of circuit: -0.09983341664682821\n```", "```py\n\nprint(tracker.history)\n{'executions': [1], 'shots': [None], 'braket_task_id': ['0f6c047e-fb58-48d5-bc85-1ff4a1538115'], 'batches': [1], 'batch_len': [1]}\n```", "```py\n\nwith qml.Tracker(dev) as tracker:\n   print(\"Gradient of circuit:\", qml.grad(qnode_local)(params))\nprint(tracker.history)\n>>> Gradient of circuit: [-0.99500417]\n>>> {'executions': [1, 1, 1], 'shots': [None, None, None], 'braket_task_id': ['2d68103f-3817-422c-9100-6b59b236a614', 'e44a156f-c78f-4a57-8426-0fa0c6133d76', 'abba84cb-3ff5-4b44-b8b9-cdae7ba16ed8'], 'batches': [1, 1], 'batch_len': [1, 2]}\n```", "```py\n\npip install azure-quantum[qiskit]\n```", "```py\n\nfrom azure.quantum.qiskit import AzureQuantumProvider\nprovider = AzureQuantumProvider (\nresource_id = \"/subscriptions/<suscription_id>/resourceGroups/AzureQuantum/providers/Microsoft.Quantum/Workspaces/<workspace>\",\n   location = \"eastus\"\n)\n```", "```py\n\nionq_simulator_backend = provider.get_backend(\"ionq.simulator\")\nionq_qpu_backend\n = provider.get_backend(\"ionq.qpu\")\n```", "```py\n\ncost = backend.estimate_cost(circuit, shots=1024)\n```", "```py\n\neuropean_call_pricing = EuropeanCallPricing(\n   num_state_qubits=nqubits,\n   strike_price=strike,\n   rescaling_factor=0.05,\n   bounds=(low, high),\n   uncertainty_model=dist_circ,\n)\nproblem = european_call_pricing.to_estimation_problem()\nproblem.state_preparation.draw('mpl')\n```", "```py\n\nfrom qiskit import transpile\nresult = transpile(problem.state_preparation, basis_gates=['id', 'ry', 'rx', 'rz', 'cx', 'h'], optimization_level=1, seed_transpiler=1)\n```", "```py\n\nbackend = provider.get_backend(\"quantinuum.qpu.h1-1\")\ncosts = backend.estimate_cost(result, shots=1)\nprint(f\" Estimated cost for a single shot is of {costs.estimated_total}{costs.currency_code}\")\nEstimated cost for a single shot is of 5.449HQC\n```"]