["```py\n    import pandas as pd\n    import yfinance as yf \n    ```", "```py\n    df = yf.download(\"AAPL\",\n                     start=\"2011-01-01\",\n                     end=\"2021-12-31\",\n                     progress=False) \n    ```", "```py\n    print(f\"Downloaded {len(df)} rows of data.\")\n    df \n    ```", "```py\naapl_data = yf.Ticker(\"AAPL\") \n```", "```py\naapl_data.history() \n```", "```py\n    import pandas as pd\n    import nasdaqdatalink \n    ```", "```py\n    nasdaqdatalink.ApiConfig.api_key = \"YOUR_KEY_HERE\" \n    ```", "```py\n    df = nasdaqdatalink.get(dataset=\"WIKI/AAPL\",\n                            start_date=\"2011-01-01\", \n                            end_date=\"2021-12-31\") \n    ```", "```py\n    print(f\"Downloaded {len(df)} rows of data.\")\n    df.head() \n    ```", "```py\n    COLUMNS = [\"ticker\", \"date\", \"adj_close\"]\n    df = nasdaqdatalink.get_table(\"WIKI/PRICES\", \n                                  ticker=[\"AAPL\", \"MSFT\", \"INTC\"], \n                                  qopts={\"columns\": COLUMNS}, \n                                  date={\"gte\": \"2011-01-01\", \n                                        \"lte\": \"2021-12-31\"}, \n                                  paginate=True)\n    df.head() \n    ```", "```py\n    df = df.set_index(\"date\")\n    df_wide = df.pivot(columns=\"ticker\")\n    df_wide.head() \n    ```", "```py\n    import intrinio_sdk as intrinio\n    import pandas as pd \n    ```", "```py\n    intrinio.ApiClient().set_api_key(\"YOUR_KEY_HERE\")\n    security_api = intrinio.SecurityApi() \n    ```", "```py\n    r = security_api.get_security_stock_prices(\n        identifier=\"AAPL\", \n        start_date=\"2011-01-01\",\n        end_date=\"2021-12-31\", \n        frequency=\"daily\",\n        page_size=10000\n    ) \n    ```", "```py\n    df = (\n        pd.DataFrame(r.stock_prices_dict)\n        .sort_values(\"date\")\n        .set_index(\"date\")\n    ) \n    ```", "```py\n    print(f\"Downloaded {df.shape[0]} rows of data.\")\n    df.head() \n    ```", "```py\nsecurity_api.get_security_realtime_price(\"KO\") \n```", "```py\n{'ask_price': 57.57,\n 'ask_size': 114.0,\n 'bid_price': 57.0,\n 'bid_size': 1.0,\n 'close_price': None,\n 'exchange_volume': 349353.0,\n 'high_price': 57.55,\n 'last_price': 57.09,\n 'last_size': None,\n 'last_time': datetime.datetime(2021, 7, 30, 21, 45, 38, tzinfo=tzutc()),\n 'low_price': 48.13,\n 'market_volume': None,\n 'open_price': 56.91,\n 'security': {'composite_figi': 'BBG000BMX289',\n              'exchange_ticker': 'KO:UN',\n              'figi': 'BBG000BMX4N8',\n              'id': 'sec_X7m9Zy',\n              'ticker': 'KO'},\n 'source': 'bats_delayed',\n 'updated_on': datetime.datetime(2021, 7, 30, 22, 0, 40, 758000, tzinfo=tzutc())} \n```", "```py\nr = intrinio.CompanyApi().get_company_news(\n    identifier=\"KO\", \n    page_size=100\n)\n\ndf = pd.DataFrame(r.news_dict)\ndf.head() \n```", "```py\nr = intrinio.CompanyApi().recognize_company(\"Intel\")\ndf = pd.DataFrame(r.companies_dict)\ndf \n```", "```py\nresponse = (\n    security_api.get_security_intraday_prices(identifier=\"KO\", \n                                              start_date=\"2021-01-02\",\n                                              end_date=\"2021-01-05\",\n                                              page_size=1000)\n)\ndf = pd.DataFrame(response.intraday_prices_dict)\ndf \n```", "```py\nr = security_api.get_security_latest_earnings_record(identifier=\"KO\")\nprint(r) \n```", "```py\n    from alpha_vantage.cryptocurrencies import CryptoCurrencies \n    ```", "```py\n    ALPHA_VANTAGE_API_KEY = \"YOUR_KEY_HERE\"\n    crypto_api = CryptoCurrencies(key=ALPHA_VANTAGE_API_KEY,\n                                  output_format= \"pandas\") \n    ```", "```py\n    data, meta_data = crypto_api.get_digital_currency_daily(\n        symbol=\"BTC\", \n        market=\"EUR\"\n    ) \n    ```", "```py\n    {'1\\. Information': 'Daily Prices and Volumes for Digital Currency',\n     '2\\. Digital Currency Code': 'BTC',\n     '3\\. Digital Currency Name': 'Bitcoin',\n     '4\\. Market Code': 'EUR',\n     '5\\. Market Name': 'Euro',\n     '6\\. Last Refreshed': '2022-08-25 00:00:00',\n     '7\\. Time Zone': 'UTC'} \n    ```", "```py\n    crypto_api.get_digital_currency_exchange_rate(\n        from_currency=\"BTC\", \n        to_currency=\"USD\"\n    )[0].transpose() \n    ```", "```py\n    import requests\n    import pandas as pd\n    from io import BytesIO \n    ```", "```py\n    AV_API_URL = \"https://www.alphavantage.co/query\"\n    parameters = {\n        \"function\": \"CRYPTO_INTRADAY\",\n        \"symbol\": \"ETH\",\n        \"market\": \"USD\",\n        \"interval\": \"30min\",\n        \"outputsize\": \"full\",\n        \"apikey\": ALPHA_VANTAGE_API_KEY\n    }\n    r = requests.get(AV_API_URL, params=parameters)\n    data = r.json()\n    df = (\n        pd.DataFrame(data[\"Time Series Crypto (30min)\"])\n        .transpose()\n    )\n    df \n    ```", "```py\n    AV_API_URL = \"https://www.alphavantage.co/query\"\n    parameters = {\n        \"function\": \"EARNINGS_CALENDAR\",\n        \"horizon\": \"3month\",\n        \"apikey\": ALPHA_VANTAGE_API_KEY\n    }\n    r = requests.get(AV_API_URL, params=parameters)\n    pd.read_csv(BytesIO(r.content)) \n    ```", "```py\n    from pycoingecko import CoinGeckoAPI\n    from datetime import datetime\n    import pandas as pd \n    ```", "```py\n    cg = CoinGeckoAPI() \n    ```", "```py\n    ohlc = cg.get_coin_ohlc_by_id(\n        id=\"bitcoin\", vs_currency=\"usd\", days=\"14\"\n    )\n    ohlc_df = pd.DataFrame(ohlc)\n    ohlc_df.columns = [\"date\", \"open\", \"high\", \"low\", \"close\"]\n    ohlc_df[\"date\"] = pd.to_datetime(ohlc_df[\"date\"], unit=\"ms\")\n    ohlc_df \n    ```", "```py\ntrending_coins = cg.get_search_trending()\n(\n    pd.DataFrame([coin[\"item\"] for coin in trending_coins[\"coins\"]])\n    .drop(columns=[\"thumb\", \"small\", \"large\"])\n) \n```", "```py\ncg.get_price(ids=\"bitcoin\", vs_currencies=\"usd\") \n```", "```py\n{'bitcoin': {'usd': 47312}} \n```"]