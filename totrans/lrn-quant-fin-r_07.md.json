["```py\n>library(\"quantmod\")\n>getSymbols(\"^DJI\",src=\"img/yahoo\")\n>dji<- DJI[,\"DJI.Close\"]\n\n```", "```py\n>avg10<- rollapply(dji,10,mean)\n>avg20<- rollapply(dji,20,mean)\n>std10<- rollapply(dji,10,sd)\n>std20<- rollapply(dji,20,sd)\n>rsi5<- RSI(dji,5,\"SMA\")\n>rsi14<- RSI(dji,14,\"SMA\")\n>macd12269<- MACD(dji,12,26,9,\"SMA\")\n>macd7205<- MACD(dji,7,20,5,\"SMA\")\n>bbands<- BBands(dji,20,\"SMA\",2)\n\n```", "```py\n>direction<- NULL\n>direction[dji> Lag(dji,20)] <- 1\n>direction[dji< Lag(dji,20)] <- 0\n\n```", "```py\n>dji<-cbind(dji,avg10,avg20,std10,std20,rsi5,rsi14,macd12269,macd7205,bbands,direction)\n\n```", "```py\n>dm<- dim(dji)\n>dm\n[1] 2493   16\n>colnames(dji)[dm[2]] \n[1] \"..11\"\n>colnames(dji)[dm[2]] <- \"Direction\"\n>colnames(dji)[dm[2]] \n[1] \"Direction\"\n\n```", "```py\n>issd<- \"2010-01-01\"\n>ised<- \"2014-12-31\"\n>ossd<- \"2015-01-01\"\n>osed<- \"2015-12-31\"\n\n```", "```py\n>isrow<- which(index(dji) >= issd& index(dji) <= ised)\n>osrow<- which(index(dji) >= ossd& index(dji) <= osed)\n\n```", "```py\n>isdji<- dji[isrow,]\n>osdji<- dji[osrow,]\n\n```", "```py\n>isme<- apply(isdji,2,mean)\n>isstd<- apply(isdji,2,sd)\n\n```", "```py\n>isidn<- matrix(1,dim(isdji)[1],dim(isdji)[2])\n\n```", "```py\n>norm_isdji<-  (isdji - t(isme*t(isidn))) / t(isstd*t(isidn))\n\n```", "```py\n>dm<- dim(isdji)\n>norm_isdji[,dm[2]] <- direction[isrow]\n\n```", "```py\n>formula<- paste(\"Direction ~ .\",sep=\"\")\n>model<- glm(formula,family=\"binomial\",norm_isdji)\n\n```", "```py\n>summary(model)\n\n```", "```py\n>pred<- predict(model,norm_isdji)\n\n```", "```py\n>prob<- 1 / (1+exp(-(pred)))\n\n```", "```py\n>par(mfrow=c(2,1))\n>plot(pred,type=\"l\")\n>plot(prob,type=\"l\")\n\n```", "```py\n>head(prob)\n2010-01-042010-01-05 2010-01-06 2010-01-07 \n0.8019197  0.4610468  0.7397603  0.9821293 \n\n```", "```py\n>pred_direction<- NULL\n>pred_direction[prob> 0.5] <- 1\n>pred_direction[prob<= 0.5] <- 0\n\n```", "```py\n>install.packages('caret')\n>library(caret)\n>matrix<- confusionMatrix(pred_direction,norm_isdji$Direction)\n>matrix\nConfusion Matrix and Statistics\n Reference\nPrediction                 0                       1\n 0               362                      35\n 1                42                     819\nAccuracy : 0.9388          95% CI : (0.9241, 0.9514)\n No Information Rate : 0.6789     P-Value [Acc>NIR] : <2e-16 \nKappa : 0.859              Mcnemar's Test P-Value : 0.4941                      Sensitivity : 0.8960      Specificity : 0.9590 \nPosPredValue : 0.9118     NegPred Value : 0.9512 \nPrevalence : 0.3211          Detection Rate : 0.2878\nDetection Prevalence : 0.3156    Balanced Accuracy : 0.9275 \n\n```", "```py\n>osidn<- matrix(1,dim(osdji)[1],dim(osdji)[2])\n>norm_osdji<-  (osdji - t(isme*t(osidn))) / t(isstd*t(osidn))\n>norm_osdji[,dm[2]] <- direction[osrow]\n\n```", "```py\n>ospred<- predict(model,norm_osdji)\n>osprob<- 1 / (1+exp(-(ospred)))\n\n```", "```py\n>ospred_direction<- NULL\n>ospred_direction[osprob> 0.5] <- 1\n>ospred_direction[osprob<= 0.5] <- 0\n>osmatrix<- confusionMatrix(ospred_direction,norm_osdji$Direction)\n>osmatrix\nConfusion Matrix and Statistics\n Reference\nPrediction              0                         1\n 0             115                       26\n 1              12                       99\nAccuracy : 0.8492         95% CI : (0.7989, 0.891)\n\n```", "```py\n>getSymbols(\"^DJI\",src=\"img/yahoo\")\n>dji<- DJI[,\"DJI.Close\"]\n> ret <- Delt(dji)\n>avg10<- rollapply(dji,10,mean)\n>avg20<- rollapply(dji,20,mean)\n>std10<- rollapply(dji,10,sd)\n>std20<- rollapply(dji,20,sd)\n>rsi5<- RSI(dji,5,\"SMA\")\n>rsi14<- RSI(dji,14,\"SMA\")\n>macd12269<- MACD(dji,12,26,9,\"SMA\")\n>macd7205<- MACD(dji,7,20,5,\"SMA\")\n>bbands<- BBands(dji,20,\"SMA\",2)\n\n```", "```py\n>direction<- data.frame(matrix(NA,dim(dji)[1],1))\n>lagret<- (dji - Lag(dji,20)) / Lag(dji,20)\n>direction[lagret> 0.02] <- \"Up\"\n>direction[lagret< -0.02] <- \"Down\"\n>direction[lagret< 0.02 &lagret> -0.02] <- \"NoWhere\"\n\n```", "```py\n>dji<- cbind(dji,avg10,avg20,std10,std20,rsi5,rsi14,macd12269,macd7205,bbands)\n\n```", "```py\n>train_sdate<- \"2010-01-01\"\n>train_edate<- \"2013-12-31\"\n>vali_sdate<- \"2014-01-01\"\n>vali_edate<- \"2014-12-31\"\n>test_sdate<- \"2015-01-01\"\n>test_edate<- \"2015-12-31\"\n\n```", "```py\n>trainrow<- which(index(dji) >= train_sdate& index(dji) <= train_edate)\n>valirow<- which(index(dji) >= vali_sdate& index(dji) <= vali_edate)\n>testrow<- which(index(dji) >= test_sdate& index(dji) <= test_edate)\n\n```", "```py\n>traindji<- dji[trainrow,]\n>validji<- dji[valirow,]\n>testdji<- dji[testrow,]\n\n```", "```py\n>trainme<- apply(traindji,2,mean)\n>trainstd<- apply(traindji,2,sd)\n\n```", "```py\n>trainidn<- (matrix(1,dim(traindji)[1],dim(traindji)[2]))\n>valiidn<- (matrix(1,dim(validji)[1],dim(validji)[2]))\n>testidn<- (matrix(1,dim(testdji)[1],dim(testdji)[2]))\n\n```", "```py\n>norm_traindji<-  (traindji - t(trainme*t(trainidn))) / t(trainstd*t(trainidn))\n>norm_validji<-  (validji - t(trainme*t(valiidn))) / t(trainstd*t(valiidn))\n>norm_testdji<-  (testdji - t(trainme*t(testidn))) / t(trainstd*t(testidn))\n\n```", "```py\n>traindir<- direction[trainrow,1]\n>validir<- direction[valirow,1]\n>testdir<- direction[testrow,1]\n\n```", "```py\n>library(nnet)\n\n```", "```py\n>set.seed(1)\n>model<- nnet(norm_traindji,class.ind(traindir),size=4,trace=F)\n\n```", "```py\n>model\na 15-4-3 network with 79 weights\n\n```", "```py\n> ? nnet\n\n```", "```py\n>dim(norm_traindji)\n[1] 1006   15\n\n```", "```py\n>vali_pred<- predict(model,norm_validji)\n>head(vali_pred)\nDown          NoWhere           Up\n2014-01-02    01.336572e-01     1\n2014-01-03    0 1.336572e-01    1\n2014-01-06    0 1.336572e-01    1\n2014-01-07    0 1.336572e-01    1\n2014-01-08    0 8.666505e-02    1\n2014-01-09    0 5.337864e-07    1\n\n```", "```py\n>vali_pred_class<- data.frame(matrix(NA,dim(vali_pred)[1],1))\n>vali_pred_class[vali_pred[,\"Down\"] > 0.5,1] <- \"Down\"\n>vali_pred_class[vali_pred[,\"NoWhere\"] > 0.5,1] <- \"NoWhere\"\n>vali_pred_class[vali_pred[,\"Up\"] > 0.5,1] <- \"Up\"\n\n```", "```py\n>library(caret)\n>matrix<- confusionMatrix(vali_pred_class[,1],validir)\n>matrix\nConfusion Matrix and Statistics\n Reference\nPrediction  Down NoWhere Up\n Down       33       3   0\nNoWhere       6     125   8\n Up         0      15  62\nOverall Statistic\nAccuracy : 0.873                     95% CI : (0.8255, 0.9115)\n No Information Rate : 0.5675      P-Value [Acc>NIR] : <2.2e-16 \nKappa : 0.7811          Mcnemar'sTest P-Value : NA \nStatistics by Class:\n Class: Down Class: NoWhereClass: Up\nSensitivity               0.8462         0.8741    0.8857\nSpecificity               0.9859         0.8716    0.9176\nPosPred Value             0.9167         0.8993    0.8052\nNegPred Value             0.9722         0.8407    0.9543\nPrevalence                0.1548         0.5675    0.2778\nDetection Rate            0.1310         0.4960    0.2460\nDetection Prevalence      0.1429         0.5516    0.3056\nBalanced Accuracy         0.9160         0.8728    0.9016\n\n```", "```py\n>test_pred<- predict(model,norm_testdji)\n\n```", "```py\n>test_pred_class<- data.frame(matrix(NA,dim(test_pred)[1],1))\n>test_pred_class[test_pred[,\"Down\"] > 0.5,1] <- \"Down\"\n>test_pred_class[test_pred[,\"NoWhere\"] > 0.5,1] <- \"NoWhere\"\n>test_pred_class[test_pred[,\"Up\"] > 0.5,1] <- \"Up\"\n\n```", "```py\n>test_matrix<- confusionMatrix(test_pred_class[,1],testdir)\n>test_matrix\nConfusion Matrix and Statistics\n Reference\nPrediction          Down          NoWhere            Up\n Down              31              4               0\nNowhere              26             138              8\n Up                0               6               38\nOverall Statistics\nAccuracy : 0.8247            95% CI : (0.7719, 0.8696)\n\n```", "```py\n>signal<- ifelse(test_pred_class ==\"Up\",1,ifelse(test_pred_class ==\"Down\",-1,0))\nReturn  ofdji closing price is calculated below\n> ret<- ret[testrow]\n\n```", "```py\n>cost<-  0\n>trade_ret<- ret * Lag(signal)- cost\n\n```", "```py\n>library(PerformanceAnalytics)\n>cumm_ret<- Return.cumulative(trade_ret)\n>annual_ret<- Return.annualized(trade_ret)\n\n```", "```py\n>charts.PerformanceSummary(trade_ret)\n\n```", "```py\n>install.packages('deepnet') \n>library(deepnet)\n\n```", "```py\n>set.seed(1)\n>model<- dbn.dnn.train(norm_traindji,class.ind(traindir),hidden=c(3,4,6))\n\n```", "```py\n>nn.predict(model,norm_validji)\n\n```", "```py\n>nn.test(model,norm_validji,class.ind(validir),t=0.4)\n[1] 0.7222222\n\n```", "```py\n>install.packages(h2o)\n>library(h2o)\n\n```", "```py\n>data<- cbind(as.data.frame(norm_traindji),traindir)\n>class(norm_traindji)\n[1] \"xts\" \"zoo\"\n>class(traindir)\n[1] \"character\"\n\n```", "```py\n>datah2o<- as.h2o(data,\"h2o\")\n>class(datah2o)\n[1] \"H2OFrame\"\n\n```", "```py\n>dim(datah2o)\n[1] 1006   16\n\n```", "```py\n> model  <-h2o.deeplearning(1:15,16,training_frame=datah2o,hidden=c(4,5,2,7))\n>vali_pred<- predict(model,as.h2o(norm_validji,\"h2o\"))\n predict      Down            NoWhere            Up\n1      Up        8.774719e-06     0.05996300        0.9400282\n2      Up        4.715592e-06     0.04561811        0.9543772\n3      Up        8.522070e-06     0.06120060        0.9387909\n4      Up        1.384947e-06     0.02668458        0.9733140\n5      Up        3.698133e-06     0.04144544        0.9585509\n6      Up        2.016126e-06     0.03151435        0.9684836\n[252 rows x 4 columns]\n\n```", "```py\n>vali_pred<- as.data.frame(vali_pred)\n>vali_pred_class<- data.frame(matrix(NA,dim(vali_pred)[1],1))\n>vali_pred_class[vali_pred[,\"Down\"] > 0.5,1] <- \"Down\"\n>vali_pred_class[vali_pred[,\"NoWhere\"] > 0.5,1] <- \"NoWhere\"\n>vali_pred_class[vali_pred[,\"Up\"] > 0.5,1] <- \"Up\"\n\n```", "```py\n>library(caret)\n>vali_matrix<- confusionMatrix(vali_pred_class[,1],validir)\n\n```", "```py\n>clusters<- 3\n>set.seed(1)\n\n```", "```py\n>norm_isdji<- norm_isdji[,-dm[2]]\n>norm_osdji<- norm_osdji[,-dm[2]]\n\n```", "```py\n>model<- kmeans(norm_isdji,clusters)\n\n```", "```py\n>head(model$cluster)\n2010-01-04  2010-01-05    2010-01-06     2010-01-07    2010-01-08 \n 3           3                3              3            3 \n\n```", "```py\n>model$center\n\n```", "```py\n>model$size\n 260         434            564\n\n```", "```py\n>model$tot.withinss\n9703.398\n>model$totss\n19129.26\n\n```", "```py\n>model$tot.withinss / model$totss\n0.5072543\n\n```", "```py\n>ospredict<- cl_predict(model,norm_osdji)\n\n```", "```py\n>head(ospredict)\n2      2        2         2           2           2 \n\n```", "```py\n>library(class)\n\n```", "```py\n>norm_isdji<- norm_isdji[,-dm[2]]\n>norm_osdji<- norm_osdji[,-dm[2]]\n\n```", "```py\n>lagret<- (dji - Lag(dji,20)) / Lag(dji,20)\n\n```", "```py\n>direction[lagret> 0.02] <- \"Up\"\n>direction[lagret< -0.02] <- \"Down\"\n>direction[lagret< 0.02 &lagret> -0.02] <- \"NoWhere\"\n>isdir<- direction[isrow]\n>osdir<- direction[osrow]\n\n```", "```py\n>neighborhood<- 3\n>set.seed(1)\n>model<- knn(norm_isdji,norm_osdji,isdir,neighborhood) \n\n```", "```py\n>head(model)\n[1]NoWhere    Nowhere     Nowhere      Nowhere        NoWhere\n\n```", "```py\n>summary(model)\n Down  NoWhere   Up \n 44     172      36\n\n```", "```py\n>library(caret)\n>matrix<- confusionMatrix(model,osdir)\n>matrix\nConfusion Matrix and Statistics\n Reference\nPrediction Down NoWhere  Up\nDown      32      12      0\nNoWhere   26      133     13\nUp         0       3      3\nOverall Statistics\nAccuracy : 0.7857          95% CI : (0.7298, 0.8347)\nNo Information Rate : 0.5873              P-Value [Acc>NIR] : 2.173e-11 \n\n```", "```py\n>diag(matrix$table)\nDown NoWhere   Up \n32     133      33\n\n```", "```py\n>  accuracy<- NULL \n>for(i in c(1:30)) \n{  \nmodel<- knn(isdji,osdji,isdir,i) \nmatrix<- confusionMatrix(model,osdir) \ndiag<- sum(diag(matrix$table)) \ntotal<- sum(matrix$table) \naccuracy[i] <- (total - diag) / total  \n} \n\n```", "```py\n>head(accuracy)\n0.4404762 0.4087302 0.3452381 0.4563492 0.4801587 0.4642857\n\n```", "```py\n>plot(accuracy, type=\"l\")\n\n```", "```py\n>install.packages(\"e1071\",dependencies=TRUE)\n\n```", "```py\n>library(e1071)\n\n```", "```py\n>model<- svm(norm_isdji,as.factor(isdir))\n\n```", "```py\n>model\nCall:\nsvm.default(x = norm_isdji, y = as.factor(isdir))\nParameters:\nSVM-Type:  C-classification \nSVM-Kernel:  radial \ncost:  1             gamma:  0.06666667 \nNumber of Support Vectors:  505\n\n```", "```py\n>pred<- predict(model,norm_osdji)\n\n```", "```py\n>head(pred)\n 1       2       3      4       5       \nNoWhere NoWhere NoWhere NoWhere NoWhere\n\n```", "```py\n>table(pred, osdir) \nosdir \n pred          Down           NoWhere             Up \n  Down          32              6                  0 \nNoWhere         26             139                10 \n  Up             0              3                 36 \n\n```", "```py\n>model$SV\n\n```", "```py\n>model$index\n\n```", "```py\n>head(model$index)\n[1]  1  4  5 11 12 34\n\n```", "```py\n>model$coefs\n\n```", "```py\n>install.packages(\"party\")\n>library(party)\n\n```", "```py\n>norm_isdji<- cbind(norm_isdji,isdir)\n>norm_osdji<- cbind(norm_osdji,osdir)\n>colnames(norm_isdji)[dim(norm_isdji)[2]] <- \"Direction\"\n>colnames(norm_osdji)[dim(norm_osdji)[2]] <- \"Direction\"\n\n```", "```py\n>model<- ctree(Direction ~ .,norm_isdji)\n\n```", "```py\n>print(model)\n\n```", "```py\n>plot(model) \n\n```", "```py\n>summary(model)\n\n```", "```py\n>dm<- dim(norm_osdji)\n>pred<- predict(model,norm_osdji[,1:(dm[2]-1)])\n\n```", "```py\n>head(pred)\n Direction\n[1,]  2.040816\n[2,]  2.040816\n[3,]  2.040816\n[4,]  2.040816\n\n```", "```py\n>plot(pred)\n\n```", "```py\n>install.packages(\"randomForest\")\n>library(randomForest)\n\n```", "```py\n>library(help=randomForest)\n\n```", "```py\n>names(norm_isdji)\n[1] \"DJI.Close\"   \"DJI.Close.1\" \"DJI.Close.2\" \"DJI.Close.3\" \"DJI.Close.4\" \"SMA\"         \"SMA.1\"       \"macd\"        \"signal\"      \"macd.1\"      \"signal.1\"    \"dn\"          \"mavg\"        \"up\"          \"pctB\" \n\n```", "```py\n>length(names(norm_isdji))\n[1] 15\n\n```", "```py\n>class(isdir)\n[1] \"character\"\n\n```", "```py\n>isdir<- as.factor(isdir)\n>osdir<- as.factor(osdir)\n\n```", "```py\n>class(as.factor(isdir))\n[1] \"factor\"\n\n```", "```py\n>model<- randomForest(norm_isdji, y=as.factor(isdir), \nxtest=norm_osdji, ytest=as.factor(osdir), ntree=500)\n\n```", "```py\n>help(randomForest)\n\n```", "```py\n>print(model)\nCall:\nrandomForest(x = norm_isdji, y = as.factor(isdir), \nxtest = norm_osdji,      ytest = as.factor(osdir), ntree = 500) \nType of random forest: classification\nNumber of trees: 500\nNo. of variables tried at each split: 3\nOOB estimate of  error rate: 11.76%\nConfusion matrix:\n Down NoWhere Up class.error\nDown      211      27   0  0.11344538\nNoWhere    19     416   51  0.14403292\nUp          0      51  483  0.09550562\nTest set error rate: 21.03%\nConfusion matrix:\n Down NoWhere Up class.error\nDown      26      32  0  0.55172414\nNoWhere    6     138  4  0.06756757\nUp         0      11 35  0.23913043\n\n```", "```py\n>head(model$err.rate)\nOOBDown   NoWhere   Up\n[1,] 0.2159329 0.08791209 0.2967033 0.2009804\n[2,] 0.1855263 0.16438356 0.2430556 0.1441718\n[3,] 0.1911765 0.15508021 0.2320442 0.1712159\n[4,] 0.1854991 0.16097561 0.2369077 0.1513158\n[5,] 0.1901408 0.17129630 0.2534884 0.1428571\n\n```", "```py\n>plot(model$err.rate[,1],type=\"l\",ylim=c(0.05,0.3),ylab=\"Error\")\n>lines(model$err.rate[,2],col=\"red\")\n>lines(model$err.rate[,3],col=\"green\")\n>lines(model$err.rate[,4],col=\"blue\")\n\n```", "```py\n>value<- importance(model,type = 2)\n>head(value)\nMeanDecreaseGini\nDJI.Close           22.09961\nDJI.Close.1         18.55651\nDJI.Close.2         16.87061\nDJI.Close.3         27.23347\n\n```"]