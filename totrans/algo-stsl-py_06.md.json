["```py\n# Import Libraries\nimport pandas as pd\nimport numpy as np\nimport yfinance as yf\n%matplotlib inline\nimport matplotlib.pyplot as plt \n```", "```py\n    # Expectancy formula, win_rate is your Hit ratio, avg_win is the average gain per trade, and avg_loss is the average loss per trade\n    def expectancy(win_rate, avg_win, avg_loss):\n        # win% * avg_win% - loss% * abs(avg_loss%) \n        return win_rate * avg_win + (1-win_rate) * avg_loss \n    ```", "```py\n    def george(win_rate,avg_win,avg_loss):  \n        # (1+ avg_win%)** win% * (1- abs(avg_loss%)) ** loss%  -1 \n        return (1+avg_win) ** win_rate * (1 + avg_loss) ** (1 - win_rate) - 1 \n    ```", "```py\n    def kelly(win_rate,avg_win,avg_loss):  \n        # Kelly = win% / abs(avg_loss%) - loss% / avg_win% \n        return win_rate / np.abs(avg_loss) - (1-win_rate) / avg_win \n    ```", "```py\ndef regime_breakout(df,_h,_l,window):\n    hl =  np.where(df[_h] == df[_h].rolling(window).max(),1,\n                                np.where(df[_l] == df[_l].rolling(window).min(), -1,np.nan))\n    roll_hl = pd.Series(index= df.index, data= hl).fillna(method= 'ffill')\n    return roll_hl\n\ndef turtle_trader(df, _h, _l, slow, fast):\n    '''\n    _slow: Long/Short direction\n    _fast: trailing stop loss\n    '''\n    _slow = regime_breakout(df,_h,_l,window = slow)\n    _fast = regime_breakout(df,_h,_l,window = fast)\n    turtle = pd. Series(index= df.index, \n                        data = np.where(_slow == 1,np.where(_fast == 1,1,0), \n                                np.where(_slow == -1, np.where(_fast ==-1,-1,0),0)))\n    return turtle \n```", "```py\nticker = '9984.T' # Softbank\nstart = '2017-12-31'\nend = None\ndf =  round(yf.download(tickers= ticker,start= start, end = end, \n                        interval = \"1d\",group_by = 'column',\n                        auto_adjust = True, prepost = True, \n                        treads = True, proxy = None),0)\nslow = 50\nfast = 20 \ndf['tt'] = turtle_trader(df, _h= 'High', _l= 'Low', slow= slow,fast= fast)\ndf['stop_loss'] = np.where(df['tt'] == 1, df['Low'].rolling(fast).min(),\n                    np.where(df['tt'] == -1, df['High'].rolling(fast).max(),np.nan))\n\ndf['tt_chg1D'] = df['Close'].diff() * df['tt'].shift()\ndf['tt_PL_cum'] = df['tt_chg1D'].cumsum()\n\ndf['tt_returns'] = df['Close'].pct_change() * df['tt'].shift()\ntt_log_returns = np.log(df['Close']/df['Close'].shift()) * df['tt'].shift()\ndf['tt_cumul'] = tt_log_returns.cumsum().apply(np.exp) - 1 \n\ndf[['Close','stop_loss','tt','tt_cumul']].plot(secondary_y=['tt','tt_cumul'],\n                                  figsize=(20,8),style= ['k','r--','b:','b'],\n                       title= str(ticker)+' Close Price, Turtle L/S entries, cumulative returns')\n\ndf[['tt_PL_cum','tt_chg1D']].plot(secondary_y=['tt_chg1D'],\n                                  figsize=(20,8),style= ['b','c:'],\n                                 title= str(ticker) +' Daily P&L & Cumulative P&L') \n```", "```py\n# Separate profits from losses\nloss_roll = tt_log_returns.copy()\nloss_roll[loss_roll > 0] = np.nan\nwin_roll = tt_log_returns.copy()\nwin_roll[win_roll < 0] = np.nan\n\n# Calculate rolling win/loss rates and averages\nwindow= 100\nwin_rate = win_roll.rolling(window).count() / window\nloss_rate = loss_roll.rolling(window).count() / window\navg_win = win_roll.fillna(0).rolling(window).mean()\navg_loss = loss_roll.fillna(0).rolling(window).mean()\n\n# Calculate expectancies\ndf['trading_edge'] = expectancy(win_rate,avg_win,avg_loss).fillna(method='ffill')\ndf['geometric_expectancy'] = george(win_rate,avg_win,avg_loss).fillna(method='ffill')\ndf['kelly'] = kelly(win_rate,avg_win,avg_loss).fillna(method='ffill')\n\ndf[window*2:][['trading_edge', 'geometric_expectancy', 'kelly']].plot(\n    secondary_y = ['kelly'], figsize=(20,6),style=['b','y','g'], \n    title= 'trading_edge, geometric_expectancy, kelly') \n```", "```py\ndef rolling_profits(returns,window):\n    profit_roll = returns.copy()\n    profit_roll[profit_roll < 0] = 0\n    profit_roll_sum = profit_roll.rolling(window).sum().fillna(method='ffill')\n    return profit_roll_sum\n\ndef rolling_losses(returns,window):\n    loss_roll = returns.copy()\n    loss_roll[loss_roll > 0] = 0\n    loss_roll_sum = loss_roll.rolling(window).sum().fillna(method='ffill')\n    return loss_roll_sum\n\ndef expanding_profits(returns): \n    profit_roll = returns.copy() \n    profit_roll[profit_roll < 0] = 0 \n    profit_roll_sum = profit_roll.expanding().sum().fillna(method='ffill') \n    return profit_roll_sum \n\ndef expanding_losses(returns): \n    loss_roll = returns.copy() \n    loss_roll[loss_roll > 0] = 0 \n    loss_roll_sum =    loss_roll.expanding().sum().fillna(method='ffill') \n    return loss_roll_sum \n\ndef profit_ratio(profits, losses):    \n    pr = profits.fillna(method='ffill') / abs(losses.fillna(method='ffill'))\n    return pr\n\nwindow = 252\ndf['pr_roll'] = profit_ratio(profits= rolling_profits(returns = tt_log_returns,window = window), \n                             losses= rolling_losses(returns = tt_log_returns,window = window))\ndf['pr'] = profit_ratio(profits= expanding_profits(returns= tt_log_returns), \n                             losses= expanding_losses(returns = tt_log_returns))\n\ndf[window:] [['tt_cumul','pr_roll','pr'] ].plot(figsize = (20,8),secondary_y= ['tt_cumul'],\n                            style = ['b','m-.','m'], \n  title = str(ticker)+' cumulative returns, Profit Ratio, cumulative &  rolling '+str(window)+' days') \n```", "```py\ndef rolling_tail_ratio(cumul_returns, window, percentile,limit):\n    left_tail = np.abs(cumul_returns.rolling(window).quantile(percentile))\n    right_tail = cumul_returns.rolling(window).quantile(1-percentile)\n    np.seterr(all='ignore')\n    tail = np.maximum(np.minimum(right_tail / left_tail,limit),-limit)\n    return tail\n\ndef expanding_tail_ratio(cumul_returns, percentile,limit):\n    left_tail = np.abs(cumul_returns.expanding().quantile(percentile))\n    right_tail = cumul_returns.expanding().quantile(1 - percentile)\n    np.seterr(all='ignore')\n    tail = np.maximum(np.minimum(right_tail / left_tail,limit),-limit)\n    return tail\n\ndf['tr_roll'] = rolling_tail_ratio(cumul_returns= df['tt_cumul'], \n                             window= window, percentile= 0.05,limit=5)\ndf['tr'] = expanding_tail_ratio(cumul_returns= df['tt_cumul'], percentile= 0.05,limit=5)\n\ndf[window:] [['tt_cumul','tr_roll','tr'] ].plot(secondary_y= ['tt_cumul'],style = ['b','g-.','g'], figsize = (20,8),\n    title= str(ticker)+' cumulative returns, Tail Ratios: cumulative &  rolling '+str(window)+ ' days') \n```"]