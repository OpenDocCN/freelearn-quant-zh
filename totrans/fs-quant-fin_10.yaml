- en: Chapter 10. Putting the Pieces Together
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章：将各个部分组合在一起
- en: This chapter covers the final step of building an automated trading system.
    We will look at how to refactor the system and change it to reflect new requirements.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍构建自动化交易系统的最后一步。我们将讨论如何重构系统，并根据新的需求进行修改。
- en: 'In this chapter you will learn about:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章内容包括：
- en: Executing a trading strategy
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行交易策略
- en: Presenting information in the GUI
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在GUI中展示信息
- en: Possible additions to the trading system
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交易系统的可能扩展
- en: Understanding the requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解需求
- en: We've covered some of the requirements in [Chapter 8](ch08.html "Chapter 8. Setting
    Up the Trading System Project"), *Setting Up the Trading System Project*, but
    let's review them again and see how the system will be defined. The main thing
    about the automated trading system is that it needs to be able to process market
    data and make decisions based on the data. The decisions will then be converted
    to FIX 4.2 messages and sent to a FIX simulator, a real broker, or the stock exchange.
    In this rather simple setup, the market data will be the daily data from Yahoo!
    Finance that will be downloaded and parsed daily.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第8章](ch08.html "第8章 设置交易系统项目")《设置交易系统项目》中已介绍了一些要求，但让我们再次回顾它们，并看看系统将如何定义。自动化交易系统的关键在于，它需要能够处理市场数据，并基于这些数据做出决策。这些决策将被转换为FIX
    4.2消息，并发送到FIX模拟器、实际的经纪商或股票交易所。在这个相对简单的设置中，市场数据将是来自Yahoo! Finance的每日数据，将每天下载并解析。
- en: 'The automated trading system should be able to:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化交易系统应该能够：
- en: Store log entries in a Microsoft SQL Server database
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将日志条目存储在Microsoft SQL Server数据库中
- en: Store trading history in a Microsoft SQL Server database
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将交易历史存储在Microsoft SQL Server数据库中
- en: Download quotes from Yahoo! Finance
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Yahoo! Finance下载报价
- en: Manage orders with an **Order Management System** (**OMS**)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**订单管理系统**（**OMS**）管理订单
- en: Send orders using FIX 4.2
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用FIX 4.2发送订单
- en: Connect the trading system to a FIX simulator via FIX 4.2
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过FIX 4.2将交易系统连接到FIX模拟器
- en: Execute a trading strategy written in F#
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行用F#编写的交易策略
- en: Control itself using a basic GUI with start/stop buttons
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用基本的GUI控制自己，带有开始/停止按钮
- en: Display the current position(s)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示当前持仓
- en: Display the current **profit and loss** (**P&L**)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示当前的**盈亏**（**P&L**）
- en: Display the latest quote(s)
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示最新的报价
- en: Use the MVC pattern and the `INotifyPropertyChanged` interface
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用MVC模式和`INotifyPropertyChanged`接口
- en: 'The following is a diagram illustrating the data flow in the trading system:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是说明交易系统中数据流的图示：
- en: '![Understanding the requirements](img/4623OS_10_01.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![理解需求](img/4623OS_10_01.jpg)'
- en: Data flow in a trading system
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 交易系统中的数据流
- en: Revisiting the structure of the system
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重新审视系统结构
- en: 'We''ll revisit the project structure and make sure all the dependencies are
    added. The following are the parts of an automated trading system:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将重新审视项目结构，并确保所有依赖项都已添加。以下是自动化交易系统的组成部分：
- en: Feed handlers and market data adapters
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据源处理器和市场数据适配器
- en: Trading strategies
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交易策略
- en: Order execution and order management
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 订单执行与订单管理
- en: Persistence layer (DBs)
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持久化层（数据库）
- en: GUI for monitoring the system
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于监控系统的GUI
- en: 'We need two new dependencies. They are as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要两个新的依赖项。它们如下：
- en: '`System.Windows.Forms`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`System.Windows.Forms`'
- en: '`System.Drawing`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`System.Drawing`'
- en: We need the `System.Windows.Forms` dependency to create our GUI. It provides
    support for Windows itself and the controls that are used. The `System.Drawing`
    dependency is also needed to provide the basic graphics functionality. The following
    is a list of the references needed in the project. You can verify your own project
    against the list to make sure you have all the dependencies needed.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要`System.Windows.Forms`依赖项来创建我们的GUI。它为Windows本身以及使用的控件提供支持。`System.Drawing`依赖项也需要提供基本的图形功能。以下是项目中所需引用的列表。您可以根据这个列表验证您自己的项目，以确保您拥有所有必要的依赖项。
- en: 'The trading system is split into two projects: `TradingSystem` and `TradingSystem.Tests`.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 交易系统被分为两个项目：`TradingSystem`和`TradingSystem.Tests`。
- en: 'The following is the list of dependencies required for `TradingSystem`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`TradingSystem`所需的依赖项列表：
- en: '`FSharp.Core`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FSharp.Core`'
- en: '`FSharp.Data.TypeProviders`'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FSharp.Data.TypeProviders`'
- en: '`mscorlib`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mscorlib`'
- en: '`NQuantLib`'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NQuantLib`'
- en: '`System`'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`System`'
- en: '`System.Core`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`System.Core`'
- en: '`System.Data`'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`System.Data`'
- en: '`System.Data.Linq`'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`System.Data.Linq`'
- en: '`System.Drawing`'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`System.Drawing`'
- en: '`System.Numerics`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`System.Numerics`'
- en: '`System.Windows.Forms`'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`System.Windows.Forms`'
- en: 'The following is the list of dependencies required for `TradingSystem.Tests`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`TradingSystem.Tests`所需的依赖项列表：
- en: '`Fsharp.Core`'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Fsharp.Core`'
- en: '`FsUnit.NUnit`'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FsUnit.NUnit`'
- en: '`TradingSystem.Core`'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TradingSystem.Core`'
- en: '`FSharp.Data.TypeProviders`'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FSharp.Data.TypeProviders`'
- en: '`mscorlib`'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mscorlib`'
- en: '`nunit.framework`'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nunit.framework`'
- en: '`System`'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`System`'
- en: '`System.Core`'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`System.Core`'
- en: '`System.Numerics`'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`System.Numerics`'
- en: Understanding the Model-View-Controller pattern
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解模型-视图-控制器模式
- en: In this section, we'll look at the concept of the MVC design pattern. The MVC
    pattern is a concept that was introduced at Xerox PARC and has been around since
    the early days of Smalltalk. It is a high-level design pattern often used in GUI
    programming. We'll use it later in more detail, but a gentle introduction here
    will make the concept familiar to you when needed later.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将探讨MVC设计模式的概念。MVC模式是在Xerox PARC提出的，并自Smalltalk早期就存在。它是一种高层次的设计模式，常用于GUI编程。我们稍后会更详细地讲解它，但在此做一个温和的介绍将使你在需要时能够更容易理解这一概念。
- en: The main idea behind MVC is to separate the model from the view. The view is
    simply the GUI, which interacts with the user of the program. The GUI will take
    care of the buttons clicked on and the data displayed on the screen. The model
    is the data to be used in the program. It can be, for example, financial data.
    It's often desirable to separate the code for the model (data) and the view (GUI).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: MVC的主要思想是将模型与视图分离。视图仅仅是GUI，与程序的用户进行交互。GUI会处理点击的按钮和显示在屏幕上的数据。模型是程序中使用的数据，例如，财务数据。通常，我们希望将模型（数据）和视图（GUI）的代码分开。
- en: The MVC pattern described in the preceding figure is a modified version of the
    traditional MVC pattern. The main difference is that there is no direct communication
    between the view and the model in this variant. This is a more refined way of
    using the MVC pattern, where the view doesn't have to know anything about the
    model.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 前面图中描述的MVC模式是传统MVC模式的一个修改版本。主要的区别在于，在这种变体中，视图与模型之间没有直接的通信。这是一种更精细的MVC模式使用方式，其中视图不需要了解任何关于模型的信息。
- en: The model
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模型
- en: The model is typically the data and the state of the application. In this case,
    the model will consist of orders, the market data, and the state of the system.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 模型通常是应用程序的数据和状态。在这个案例中，模型将包含订单、市场数据和系统状态。
- en: The view
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视图
- en: The view is the `TradingSystemForm` class and will be the only GUI form used
    apart from dialog boxes, which are standard Windows Forms components. The view
    is the GUI.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 视图是`TradingSystemForm`类，它将是除了标准Windows窗体组件外，唯一使用的GUI窗体。视图即为GUI。
- en: The controller
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制器
- en: 'The controller is responsible for connecting the view to the model. The controller
    is initialized with an instance of the model, and the view is added to the controller
    during the execution of the program (`Program.fs`). The following diagram is a
    schematic representation of the relationship between the parts in the MVC pattern:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器负责将视图与模型连接起来。控制器通过一个模型实例进行初始化，并且视图会在程序执行过程中（`Program.fs`）添加到控制器中。以下图表是MVC模式中各部分关系的示意图：
- en: '![The controller](img/4623OS_10_02.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![控制器](img/4623OS_10_02.jpg)'
- en: The MVC pattern, where the controller knows both the model and the view
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: MVC模式，其中控制器同时知道模型和视图
- en: In our case, the controller will be responsible for updating the view when an
    action is taken. This means the model will notify the controller, and the controller
    will update the view. Strictly speaking, this is a slightly modified version of
    the classic MVC pattern where the model knows about the view and notifies the
    view instead of the controller.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，控制器将负责在执行操作时更新视图。这意味着模型会通知控制器，然后控制器会更新视图。严格来说，这是经典MVC模式的略微修改版本，其中模型了解视图并通知视图，而不是控制器。
- en: The main problem with this classic approach is that of tight coupling. Using
    the controller as the mediator, a compound pattern is formed. This is the same
    strategy used in popular libraries such as *Cocoa* by Apple.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 经典方法中的主要问题是紧耦合。通过将控制器作为中介，形成了一个复合模式。这是苹果公司流行库*Cocoa*中使用的相同策略。
- en: Executing the trading strategy using a framework
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用框架执行交易策略
- en: The trading strategy is executed through `onMarketData` when the downloading
    of data is completed/successful (it sends a message to the agent). If any error
    occurs, notify the agent. Everything is logged to a SQL backend (SQL Server).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当数据下载完成/成功时，交易策略通过`onMarketData`执行（它会向代理发送一条消息）。如果发生任何错误，则会通知代理。所有操作都记录到SQL后端（SQL
    Server）。
- en: 'The trading strategy will have six callable functions:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 交易策略将有六个可调用函数：
- en: '`onInit`: This function is called when a strategy is initialized'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onInit`：当策略初始化时，将调用此函数。'
- en: '`onStart`: This function is called when the strategy starts'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onStart`：当策略开始时，将调用此函数。'
- en: '`onStop`: This function is called when the strategy stops'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onStop`：当策略停止时，将调用此函数。'
- en: '`onMarketData`: This function is called whenever new market data arrives'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onMarketData`：每当新的市场数据到达时，都会调用此函数。'
- en: '`onTradeExecution`: This function is called whenever a trade is executed'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onTradeExecution`：每当执行交易时，都会调用此函数。'
- en: '`onError`: This function is called with every error that occurs'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onError`：每当发生错误时，都会调用此函数。'
- en: The trading strategy will be implemented as a type of its own where callbacks
    are member functions that are called from the **strategy executor**. The strategy
    executor consists of an agent receiving messages from the system. The start and
    stop commands are sent from the two event handlers connected to the buttons in
    the GUI.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 交易策略将作为一个独立的类型来实现，其中回调函数是由**策略执行器**调用的成员函数。策略执行器由接收来自系统消息的代理组成。开始和停止命令通过与 GUI
    中按钮连接的两个事件处理程序发送。
- en: 'Let''s look at the main structure of the framework used to execute the trading
    strategy:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看用于执行交易策略的框架的主要结构：
- en: '[PRE0]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We need control messages to be used to communicate with the agent; these are
    modeled as criminated unions. The messages are used to change the state and communicate
    the change between the parts in the system. This is needed because the agent is
    running in another thread, and the passing of the messages is the way we communicate
    with them. An example of this is as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要控制消息用于与代理进行通信，这些消息被建模为标记联合。消息用于改变状态并在系统的各部分之间传递变化。这是必需的，因为代理运行在另一个线程中，传递消息是我们与之通信的方式。以下是一个示例：
- en: '[PRE1]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `TradingAgent` module will receive the control messages and take the appropriate
    action. The following is the code to implement the functionality to call the corresponding
    method in the trading strategy using pattern matching:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`TradingAgent` 模块将接收控制消息并采取适当的行动。以下是实现功能的代码，使用模式匹配调用交易策略中的相应方法：'
- en: '[PRE2]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The following are parts of the GUI code that are used to control the trading
    system. Most of the code uses .NET classes mainly from Windows Forms libraries.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是用于控制交易系统的部分 GUI 代码。大部分代码使用 .NET 类，主要来自 Windows Forms 库。
- en: Tip
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: There are many good resources available at MSDN about Windows Forms at [http://msdn.microsoft.com/en-us/library/ms229601(v=vs.110).aspx](http://msdn.microsoft.com/en-us/library/ms229601(v=vs.110).aspx).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: MSDN 上有很多关于 Windows Forms 的优秀资源，网址是：[http://msdn.microsoft.com/en-us/library/ms229601(v=vs.110).aspx](http://msdn.microsoft.com/en-us/library/ms229601(v=vs.110).aspx)。
- en: '[PRE3]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The trading strategy will be initiated and passed to the agent. During the
    initiation, the parameters and other constant values will be passed:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 交易策略将被初始化并传递给代理。在初始化过程中，参数和其他常量值将被传递：
- en: '[PRE4]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'When the **Start** button is pressed, this event handler is called and two
    messages are sent to the agent:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 当**开始**按钮被按下时，调用此事件处理程序并将两条消息发送给代理：
- en: '[PRE5]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The following is the code used in `Program.fs` to start the application and
    view the GUI:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是用于在 `Program.fs` 中启动应用程序并查看 GUI 的代码：
- en: '[PRE6]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Building the GUI
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建 GUI
- en: 'The GUI we used in the previous section is not sufficient for our trading application,
    but it illustrated the basics of how to put a GUI together using F#. Next, we''ll
    add the controls needed and prepare it to present the information from the model.
    The following is a mock representation showing where the controls will be placed
    and the overall idea about the GUI:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一节中使用的 GUI 对于我们的交易应用程序来说还不够，但它展示了如何使用 F# 组合一个 GUI 的基本方法。接下来，我们将添加所需的控件，并准备呈现模型中的信息。以下是一个示意图，显示了控件的位置和
    GUI 的整体构思：
- en: '![Building the GUI](img/4623OS_10_03.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![构建 GUI](img/4623OS_10_03.jpg)'
- en: A mock representation of the trading system's GUI
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 交易系统 GUI 的示意图
- en: 'Let''s look at the required code. Most of the code is straightforward, following
    the same rules used in the GUI in the last section. The `DataGridView` control
    has some properties set for the width to be adjusted automatically. The same is
    true for labels, where the property `AutoSize` is set to true. The final GUI will
    look like the one in the screenshot displayed after the following code:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来看看所需的代码。大部分代码比较直接，遵循上一节中GUI所使用的相同规则。`DataGridView`控件的一些属性已设置为自动调整宽度。标签也是如此，其中`AutoSize`属性被设置为`true`。最终的GUI将如下所示，参见以下代码之后的屏幕截图：
- en: '[PRE7]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![Building the GUI](img/4623OS_10_04.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![构建GUI](img/4623OS_10_04.jpg)'
- en: The final GUI build from the code according to the mock
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 根据模拟，最终构建的GUI代码
- en: Presenting information in the GUI
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在GUI中呈现信息
- en: In this section, we'll look at ways of presenting information in a GUI which
    is updated on a regular basis. We'll use the MVC pattern to update the data.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将研究如何在GUI中呈现定期更新的信息。我们将使用MVC模式来更新数据。
- en: In .NET, in general, the interface `INotifyPropertyChanged` is used when the
    notification of an update is needed in the model. In this example, we'll use a
    `DataGridView` control and a `DataSource` that consists of a list with items of
    a custom type implementing the `INotifyPropertyChanged` interface.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在.NET中，通常在需要通知模型更新时会使用接口`INotifyPropertyChanged`。在本例中，我们将使用一个`DataGridView`控件和一个`DataSource`，其中`DataSource`由一个实现了`INotifyPropertyChanged`接口的自定义类型列表组成。
- en: 'The updates to the model are handled by the controller and then the GUI is
    updated from the `DataSource` itself. Let''s start by looking at the list of orders
    and how to present that list of orders in the `DataGridView` control. Add the
    following code to the `GUI.fs` file:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 模型的更新由控制器处理，然后从`DataSource`本身更新GUI。我们从查看订单列表开始，并展示如何在`DataGridView`控件中呈现该订单列表。将以下代码添加到`GUI.fs`文件中：
- en: '[PRE8]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Also, add the following function call just under `initControls`:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，在`initControls`函数下方添加以下函数调用：
- en: '[PRE9]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![Presenting information in the GUI](img/4623OS_10_05.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![在GUI中呈现信息](img/4623OS_10_05.jpg)'
- en: The GUI with `DataGridView` populated with an order item
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`DataGridView`并填充订单项的GUI
- en: As you may notice, the content in some cells is not displayed as we would like.
    We need to add a custom cell formatter for them where we specify in which way
    the value is presented in the GUI.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，一些单元格中的内容未按我们希望的方式显示。我们需要为它们添加一个自定义单元格格式化器，指定如何在GUI中呈现这些值。
- en: 'Add the following line of code at the end in the `initOrderList` function:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在`initOrderList`函数的末尾添加以下代码行：
- en: '[PRE10]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then, we need to implement the `eventOrdersGrid_CellFromatting` function as
    follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要实现`eventOrdersGrid_CellFromatting`函数，具体如下：
- en: '[PRE11]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now when we run the program, the `DataGridView` control for the order items
    will format the cells correctly as shown in the following screenshot:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们运行程序时，订单项的`DataGridView`控件将正确格式化单元格，如下图所示：
- en: '![Presenting information in the GUI](img/4623OS_10_06.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![在GUI中呈现信息](img/4623OS_10_06.jpg)'
- en: The GUI with `DataGridView` using a custom cell formatter
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 使用自定义单元格格式化器的`DataGridView`的GUI
- en: 'To make the GUI complete, we need to add functionalities to update text fields
    and to handle button clicks. We need callback functions that will be called from
    the controller to update the text fields in the GUI:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完善GUI，我们需要添加更新文本字段和处理按钮点击的功能。我们需要回调函数，从控制器调用这些函数以更新GUI中的文本字段：
- en: '[PRE12]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next, we''ll need event handlers for buttons. Each button will have its own
    event handler as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要为按钮添加事件处理程序。每个按钮将有其自己的事件处理程序，具体如下：
- en: '[PRE13]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Adding support for downloading the data
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加对下载数据的支持
- en: 'The market data will be pulled from Yahoo! Finance on a daily basis; we''ll
    use closing prices and from them calculate the data needed. The data will be downloaded
    once the **Download data** button in the GUI is clicked on. The following is the
    code to illustrate how downloading can be handled by a background thread:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 市场数据将从Yahoo! Finance每天拉取；我们将使用收盘价，并从中计算所需的数据。数据将在GUI中的**下载数据**按钮被点击时下载。以下是说明如何通过后台线程处理下载的代码：
- en: '[PRE14]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The trading system will follow these steps from the downloading process until
    the data is parsed:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 交易系统将遵循这些步骤，从下载过程到数据解析：
- en: Download the data from Yahoo! Finance.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Yahoo! Finance下载数据。
- en: Parse the data and perform the calculations.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解析数据并执行计算。
- en: Store the data in the model.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数据存储在模型中。
- en: Looking at possible additions to the system
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 考虑系统可能的扩展
- en: In this section, we'll look at possible additions to the trading system we have
    developed. The ideas here can work as inspiration for an interested reader. Trading
    systems involve topics from many areas in finance and computer science. The trading
    system developed here is rather elementary and is mainly for illustrative purposes.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论对我们已经开发的交易系统可能的扩展。这些想法可以为感兴趣的读者提供灵感。交易系统涉及金融和计算机科学多个领域的主题。这里开发的交易系统相当基础，主要用于示范目的。
- en: Improving the data feed
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改进数据馈送
- en: 'The data feed used here isn''t an actual feed; it''s more of a data service.
    A data feed is as the name suggests: a feed of data. The data feed will provide
    a continuous stream of the market data to the application and follows a publisher-subscriber
    pattern. It''s not easy to find a data feed provider that delivers data for free.
    The following is a list of some alternatives worth looking into:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 此处使用的数据馈送并非实际的馈送；它更像是一个数据服务。数据馈送顾名思义：就是数据的馈送。数据馈送会为应用程序提供一个连续的市场数据流，并遵循发布-订阅模式。很难找到提供免费数据的馈送服务商。以下是一些值得关注的替代方案：
- en: '**Bloomberg''s Open Market Data Initiative**: [http://www.openbloomberg.com/](http://www.openbloomberg.com/)'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**彭博社开放市场数据倡议**：[http://www.openbloomberg.com/](http://www.openbloomberg.com/)'
- en: '**Interactive Brokers**: [https://www.interactivebrokers.com/en/main.php](https://www.interactivebrokers.com/en/main.php)'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**互动经纪公司**：[https://www.interactivebrokers.com/en/main.php](https://www.interactivebrokers.com/en/main.php)'
- en: '**eSignal Feed API**: [http://www.esignal.com/](http://www.esignal.com/)'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**eSignal馈送API**：[http://www.esignal.com/](http://www.esignal.com/)'
- en: Support for backtesting
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 支持回测
- en: Backtesting is useful in many cases, the least being to verify the correctness
    of the trading logic. Backtesting can also provide some valuable insights into
    the historical performance of a trading strategy. When developing a backtesting
    engine, you need a feed adapter to use historical data and a broker adapter to
    keep track of executed orders and the profit and loss.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 回测在许多情况下是有用的，最基本的是验证交易逻辑的正确性。回测还可以提供一些有价值的见解，帮助了解交易策略的历史表现。在开发回测引擎时，你需要一个馈送适配器来使用历史数据，以及一个经纪适配器来跟踪已执行的订单以及盈亏情况。
- en: 'This data is used to calculate statistics such as:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这些数据用于计算诸如以下的统计信息：
- en: Total number of trades
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总交易次数
- en: The ratio between winners and losers
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 胜利者与失败者的比例
- en: The average size of a trade
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一笔交易的平均大小
- en: Total return on an account
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 账户的总回报
- en: Volatility and sharp ratio; sharp ratio is the volatility-adjusted return
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 波动率与夏普比率；夏普比率是经过波动率调整的回报
- en: Extending the GUI
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展GUI
- en: The GUI provided for this trading system is quite limited. The GUI can easily
    be extended to support more features and provide charts of the market data using
    FSharpChart among others. One alternative is to develop the GUI using C# or another
    language that has a visual designer built into Visual Studio. This makes things
    much easier.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 此交易系统提供的图形用户界面（GUI）相当有限。GUI可以轻松扩展，以支持更多功能，并使用FSharpChart等工具提供市场数据的图表。一个替代方案是使用C#或其他具有内置可视化设计器的语言来开发GUI，这会使事情变得更加容易。
- en: The main reason that the GUI is developed in F# in this book is to illustrate
    the flexibility of F#. When there is a visual designer for F#, there is no reason
    not to use F# for most parts of the program. Writing the GUI code by hand is cumbersome
    regardless of the language that is used.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中GUI使用F#开发的主要原因是为了展示F#的灵活性。当F#有可视化设计器时，没有理由不在程序的大部分部分使用F#。手动编写GUI代码是一件繁琐的事情，无论使用哪种语言。
- en: Converting to the client-server architecture
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 转换为客户端-服务器架构
- en: The current architecture is better modelled as part of a client-server solution.
    In a client-server solution, the data feed, strategy execution, and order management
    will reside on the server, whereas the user interface will either be a native
    application or a browser implementation. There are two ways to go here. The first
    is to communicate with the server using a message queue such as Microsoft Message
    Queuing. The other is to use a browser-based GUI, communicating with the server
    using WebSockets and RESTful techniques.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 当前的架构更适合建模为客户端-服务器解决方案。在客户端-服务器解决方案中，数据馈送、策略执行和订单管理将驻留在服务器上，而用户界面则可以是本地应用程序或浏览器实现。这里有两种方法可以选择。第一种是使用消息队列与服务器进行通信，例如Microsoft消息队列。另一种是使用基于浏览器的GUI，通过WebSockets和RESTful技术与服务器通信。
- en: 'Some useful technologies to look deeper into are:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 一些值得深入了解的有用技术包括：
- en: '**Microsoft Message Queuing** (**MSMQ**)'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Microsoft消息队列**（**MSMQ**）'
- en: ZeroMQ
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ZeroMQ
- en: WebSocket
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WebSocket
- en: RESTful
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RESTful
- en: Summary
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we have put the pieces together we learned throughout this
    book, and this has resulted in a trading system for volatility arbitrage. Many
    aspects of F# programming and the .NET framework together with external libraries
    have been illustrated and covered up to now.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将书中学到的知识拼凑在一起，最终构建了一个用于波动率套利的交易系统。到目前为止，F# 编程语言和 .NET 框架的许多方面，以及外部库的使用，都已被讲解和覆盖。
