["```py\n> 1 |> should equal 1;;\n```", "```py\n    #r @\"[...]\\TradingSystem\\packages\\FsUnit.1.2.1.0\\Lib\\Net40\\FsUnit.NUnit.dll\";;\n    #r @\"[...]\\TradingSystem\\packages\\NUnit.2.6.2\\lib\\nunit.framework.dll\";;\n\n    open NUnit.Framework\n    open FsUnit\n\n    1 |> should equal 1\n    ```", "```py\n    > 1 |> should equal 1;;\n    val it : unit = ()\n    ```", "```py\n    DROP TABLE LOG\n    CREATE TABLE LOG\n    (\n      log_id int IDENTITY PRIMARY KEY,\n      log_datetime datetime DEFAULT CURRENT_TIMESTAMP,\n      log_level nvarchar(12) DEFAULT 'info',\n      log_msg ntext\n    )\n    ```", "```py\n    Command(s) completed successfully.\n    ```", "```py\n    let values = [1..10]\n    ```", "```py\n    let query1 = query { for value in values do select value }\n    query1 |> Seq.iter (fun value -> printfn \"%d\" value)\n    ```", "```py\n    let query2 = query { for value in values do\n                            where (value > 5)\n                            select value }\n    query2 |> Seq.iter (fun value -> printfn \"%d\" value)\n    ```", "```py\n    let query3 = query { for value in values do\n                            where (value > 5 && value < 8)\n                            select value }\n    query3 |> Seq.iter (fun value -> printfn \"%d\" value)\n    ```", "```py\nopen System\nopen System.Data\nopen System.Data.Linq\nopen Microsoft.FSharp.Data.TypeProviders\nopen Microsoft.FSharp.Linq\n\n#r \"System.Data.dll\"\n#r \"FSharp.Data.TypeProviders.dll\"\n#r \"System.Data.Linq.dll\"\n```", "```py\n/// Copied from properties of database\ntype EntityConnection = SqlEntityConnection<ConnectionString=\"Data Source=(localdb)\\Projects;Initial Catalog=TradingSystem;Integrated Security=True;Connect Timeout=30;Encrypt=False;TrustServerCertificate=False\",Pluralize = true>\nlet context = EntityConnection.GetDataContext()\n\n/// Format date according to ISO 8601\nlet iso_8601 (date:Nullable<DateTime>) =\n    if date.HasValue then\n        date.Value.ToString(\"s\")\n    else \"2000-00-00T00:00:00\"    \n```", "```py\n/// Query all LOG entries\nlet listAll() =\n    query { for logentry in context.LOGs do\n            select logentry }\n    |> Seq.iter (fun logentry -> printfn \"%s -- %d -- %s -- %s\" (iso_8601 logentry.log_datetime) logentry.log_id logentry.log_level logentry.log_msg)\n\n/// Insert a LOG entry\nlet addEntry(logLevel, logMsg) =\n    let fullContext = context.DataContext\n    let logTimestamp = DateTime.Now\n    let newEntry = new EntityConnection.ServiceTypes.LOG(log_level = logLevel,\n    log_msg = logMsg,\n    log_datetime = Nullable(logTimestamp))\n    fullContext.AddObject(\"LOGs\", newEntry)\n    fullContext.SaveChanges() |> printfn \"Saved changes: %d object(s) modified.\"\n```", "```py\n> addLogEntry(\"INFO\", \"Just a simple log entry\");;\nSaved changes: 1 object(s) modified.\nval it : unit = ()\n\n> listAll();;\n2013-09-26T14:08:02 -- 1 -- INFO -- Just a simple log entry\nval it : unit = ()\n```", "```py\nCREATE TABLE TRADEHISTORY\n(\n  tradehistory_id int IDENTITY PRIMARY KEY,\n  tradehistory_datetime datetime DEFAULT CURRENT_TIMESTAMP,\n  tradehistory_instrument nvarchar(12),\n  tradehistory_qty int,\n  tradehistory_type nvarchar(12),\n  tradehistory_price float\n)\n```", "```py\n/// Query trading history\nlet listAllTrades() =\n    query { for trade in context.TRADEHISTORies do select trade }\n    |> Seq.iter (fun trade -> printfn \"%A\" (iso_8601 trade.tradehistory_datetime, trade.tradehistory_id, trade.tradehistory_instrument, trade.tradehistory_type, trade.tradehistory_price, trade.tradehistory_qty))\n\n/// Insert a trade\nlet addTradeEntry(instrument, price, qty, otype) =\n    let fullContext = context.DataContext\n    let timestamp = DateTime.Now\n    let newEntry = new EntityConnection.ServiceTypes.TRADEHISTORY(tradehistory_instrument = instrument,\n                               tradehistory_qty = Nullable(qty),\n                               tradehistory_type = otype,\n                               tradehistory_price = Nullable(price),\n                               tradehistory_datetime = Nullable(timestamp))\n    fullContext.AddObject(\"TRADEHISTORies\", newEntry)\n    fullContext.SaveChanges() |> printfn \"Saved changes: %d object(s) modified.\"\n```", "```py\n> addTradeEntry(\"MSFT\", 45.50, 100, \"limit\")\nSaved changes: 1 object(s) modified.\nval it : unit = ()\n\n> listAllTrades()\n(\"2013-11-24T20:40:57\", 1, \"MSFT\", \"limit\", 45.5, 100)\nval it : unit = ()\n```", "```py\n[<Test>]\nlet OneIsEqualToOne() =\n    1 |> should equal 1\n```", "```py\nnamespace TradingSystem.Tests\n\nopen System\nopen NUnit.Framework\nopen FsUnit\n\nopen TradingSystem.Orders\n\nmodule OrderTests =\n    [<Test>]\n    let ValidateBuyOrder() =\n        let buyOrder = Order(OrderSide.Buy, OrderType.Limit, 54.50, Tif.FillorKill, 100, \"MSFT\", 0.0)\n        validateOrder (Right buyOrder) |> should equal (Right buyOrder)\n```", "```py\nmodule ValidateOrderTests =\n    [<Test>]\n    let ValidateBuyOrder() =\n        let buyOrder = Order(OrderSide.Buy, OrderType.Limit, 54.50, Tif.FillorKill, 100, \"MSFT\", 0.0)\n        validateOrder (Right buyOrder) |> should equal (Right buyOrder)\n\n    [<Test>]\n    let ValidateOrderNoPrice() =\n        let buyOrderNoPrice = Order(OrderSide.Buy, OrderType.Limit, 0.0, Tif.FillorKill, 100, \"MSFT\", 0.0)\n        validateOrder (Right buyOrderNoPrice) |> should equal (Left \"Limit orders must have a price > 0\")\n\n    [<Test>]\n    let ValidateStopLimitNoPrice() =\n        let stopLimitNoPrice = Order(OrderSide.Buy, OrderType.StopLimit, 0.0, Tif.FillorKill, 100, \"MSFT\", 45.50)\n        validateOrder (Right stopLimitNoPrice) |> should equal (Left \"Stop limit orders must both price > 0 and stop price > 0\")\n\n    [<Test>]\n    let ValidateStopNoPrice() =\n        let stopNoPrice = Order(OrderSide.Buy, OrderType.Stop, 0.0, Tif.FillorKill, 100, \"MSFT\", 45.50)\n        validateOrder (Right stopNoPrice) |> should equal (Right stopNoPrice)\n```"]