["```py\npip install yfinance \n```", "```py\nimport yfinance as yf \n```", "```py\n# Import Libraries\nimport pandas as pd\nimport numpy as np\n%matplotlib inline\nimport matplotlib.pyplot as plt \n```", "```py\n# S&P500 dataframe: list of tickers\nsp_df = pd.read_html('https://en.wikipedia.org/wiki/List_of_S%26P_500_companies')[0]\nsp_df['Symbol'] = sp_df['Symbol'].str.replace('.', '-')\nbm_ticker = '^GSPC'\ntickers_list = [bm_ticker] + list(sp_df['Symbol'])[:]\n\n# Variables instantiation\nwindow = 252\ndf_abs = pd.DataFrame()\nbatch_size = 20\nloop_size = int(len(tickers_list) // batch_size) + 2\n\nfor t in range(1,loop_size): # Batch download\n    m = (t - 1) * batch_size\n    n = t * batch_size\n    batch_list = tickers_list[m:n]\n    print(batch_list,m,n)\n    batch_download = yf.download(tickers= batch_list,\n                                 start= '2007-01-01', end = None, \n                                 interval = \"1d\",group_by = 'column',\n                                 auto_adjust = True, \n                                 prepost = True, treads = True, \n                                 proxy = None)['Close']\n    df_abs = df_abs.join(batch_download, how='outer')\n\n### removed for brevity: check GitHub repo for full code ###\nbullbear['bulls_absolute'] = df_abs[df_abs > 0].count(axis=1) \nbullbear['bears_absolute'] = df_abs[df_abs < 0].count(axis=1) \nbullbear['bulls_relative'] = df_rel[df_rel > 0].count(axis=1) \nbullbear['bears_relative'] = df_rel[df_rel < 0].count(axis=1) \n\nbullbear[280:][['benchmark','bulls_absolute', 'bears_absolute', \n               ]].plot(figsize=(20,8),\n                style=['k', 'g', 'r'],grid=True,secondary_y=['benchmark'],\n                title = 'S&P500, 1yr High/Low count: absolute series' )\n\nbullbear[280:][['benchmark','bulls_absolute', 'bears_absolute', 'bulls_relative', 'bears_relative']].plot(figsize=(20,8),\n                style=['k', 'g', 'r','g:', 'r:'],grid=True,secondary_y=['benchmark'],\n                title = 'S&P500, 1yr High/Low count: absolute & relative series') \n```", "```py\ndef relative(df,_o,_h,_l,_c, bm_df, bm_col, ccy_df, ccy_col, dgt, start, end,rebase=True):\n    '''\n    df: df\n    bm_df, bm_col: df benchmark dataframe & column name\n    ccy_df,ccy_col: currency dataframe & column name\n    dgt: rounding decimal\n    start/end: string or offset\n    rebase: boolean rebase to beginning or continuous series\n    '''\n    # Slice df dataframe from start to end period: either offset or datetime\n    df = df[start:end] \n\n    # inner join of benchmark & currency: only common values are preserved\n    df = df.join(bm_df[[bm_col]],how='inner') \n    df = df.join(ccy_df[[ccy_col]],how='inner')\n\n    # rename benchmark name as bm and currency as ccy\n    df.rename(columns={bm_col:'bm', ccy_col:'ccy'},inplace=True)\n\n    # Adjustment factor: calculate the scalar product of benchmark and currency\n    df['bmfx'] = round(df['bm'].mul(df['ccy']),dgt).fillna(method='ffill')\n    if rebase == True:\n        df['bmfx'] = df['bmfx'].div(df['bmfx'][0])\n\n    # Divide absolute price by fxcy adjustment factor and rebase to first value\n    df['r' + str(_o)] = round(df[_o].div(df['bmfx']),dgt)\n    df['r' + str(_h)] = round(df[_h].div(df['bmfx']),dgt)\n    df['r'+ str(_l)] = round(df[_l].div(df['bmfx']),dgt)\n    df['r'+ str(_c)] = round(df[_c].div(df['bmfx']),dgt)\n    df = df.drop(['bm','ccy','bmfx'],axis=1)\n\n    return (df) \n```", "```py\nticker = '9984.T' # Softbank\nohlc = ['Open','High','Low','Close']\n_o,_h,_l,_c = [ohlc[h] for h in range(len(ohlc))]\nstart= '2018-12-30'\nend = None\ndf =  round(yf.download(tickers= ticker,start= start, end = end, \n                        interval = \"1d\",group_by = 'column',                        auto_adjust= True, prepost= True,                         treads = True, proxy = None),2)\nbm_df = pd.DataFrame()\nbm_ticker = '^IXIC' #Nasdaq \nbm_col = 'nasdaq'\nccy_df = pd.DataFrame()\nccy_ticker = 'USDJPY=X'\nccy_col = 'JPY'\ndgt = 5\n\nbm_df[bm_col] =  yf.download(tickers= bm_ticker,start= start, end = end,\n                             interval = \"1d\",group_by = 'column',                             auto_adjust = True, prepost = True,                              treads = True, proxy = None)['Close']\nccy_df[ccy_col] =  yf.download(tickers= ccy_ticker,start= start,                                end = end, interval= \"1d\",                               group_by = 'column',auto_adjust = True, \n                               prepost = True, treads = True,                                proxy = None)['Close']\n\ndf = relative(df,_o,_h,_l,_c, bm_df, bm_col, ccy_df, ccy_col, dgt, start, end,rebase=True)\n\ndf[['Close','rClose']].plot(figsize=(20,8),grid=True,\n            title= 'Softbank Absolute in JPY vs relative to Nasdaq in USD rebased' ) \n```", "```py\ntickers_list = ['GE','GM','GS']\n\n# Dataframes instantiation\ngems = pd.DataFrame() \nstart = '2020-03-31'\nbenchmark = yf.download(tickers= '^GSPC',start= start, end = None, \n                        interval = \"1d\",group_by = 'column',                        auto_adjust = True, prepost = True,                         treads = True, proxy = None)['Close']\nfailed = [] \nrel_ticker_list = []\nfor n,ticker in enumerate(tickers_list):\n    try: #7 Download & process data\n        gems[ticker] = yf.download(tickers= ticker,start= start,                                    end = None, interval = \"1d\",                                   group_by = 'column',                                   auto_adjust = True, prepost = True,                                    treads = True, proxy = None)['Close']\n        gems['rel_'+ticker] = gems[ticker].div(benchmark * gems[ticker][0]) * benchmark[0]\n        rel_ticker_list.append('rel_'+ticker)\n    except:\n        failed.append(ticker)\ngems = gems[tickers_list+rel_ticker_list]\ngems.plot(figsize= (20,8),secondary_y= rel_ticker_list,style=['r','b','g','r:','b:','g:'], \n          title= 'GEMS Absolute Prices vs Relative Series' ) \n```", "```py\nticker = 'WFC'\nbenchmark = '^GSPC'\ntickers_list = [benchmark] + [ticker]\n\ndata = round(yf.download(tickers= tickers_list,start= '2015-09-07', end = None,\n            interval = \"1d\",group_by = 'column',auto_adjust = True, \n            prepost = True, treads = True, proxy = None)['Close'],2)\n\ndata['r'+str(ticker)] = round(data[ticker].div(data[benchmark])*data[benchmark][0] ,2)\ndata[[ticker,'r'+str(ticker)]].plot(figsize=(20,8),grid=True,\ntitle= str.upper(ticker)+ ' Absolute vs Relative series') \n```"]