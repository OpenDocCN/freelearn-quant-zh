["```py\n    import pandas as pd\n    import yfinance as yf\n    import talib \n    ```", "```py\n    df = yf.download(\"IBM\",\n                     start=\"2020-01-01\",\n                     end=\"2020-12-31\",\n                     progress=False,\n                     auto_adjust=True) \n    ```", "```py\n    df[\"sma_20\"] = talib.SMA(df[\"Close\"], timeperiod=20)\n    (\n        df[[\"Close\", \"sma_20\"]]\n        .plot(title=\"20-day Simple Moving Average (SMA)\")\n    ) \n    ```", "```py\n    df[\"bb_up\"], df[\"bb_mid\"], df[\"bb_low\"] = talib.BBANDS(df[\"Close\"])\n\n    fig, ax = plt.subplots()\n\n    (\n        df.loc[:, [\"Close\", \"bb_up\", \"bb_mid\", \"bb_low\"]]\n        .plot(ax=ax, title=\"Bollinger Bands\")\n    )\n\n    ax.fill_between(df.index, df[\"bb_low\"], df[\"bb_up\"], \n                    color=\"gray\", \n                    alpha=.4) \n    ```", "```py\n    df[\"rsi\"] = talib.RSI(df[\"Close\"])\n    fig, ax = plt.subplots()\n    df[\"rsi\"].plot(ax=ax,\n                   title=\"Relative Strength Index (RSI)\")\n    ax.hlines(y=30,\n              xmin=df.index.min(),\n              xmax=df.index.max(),\n              color=\"red\")\n    ax.hlines(y=70,\n              xmin=df.index.min(),\n              xmax=df.index.max(),\n              color=\"red\")\n    plt.show() \n    ```", "```py\n    df[\"macd\"], df[\"macdsignal\"], df[\"macdhist\"] = talib.MACD(\n        df[\"Close\"], fastperiod=12, slowperiod=26, signalperiod=9\n    )\n    fig, ax = plt.subplots(2, 1, sharex=True)\n    (\n        df[[\"macd\", \"macdsignal\"]].\n        plot(ax=ax[0],\n             title=\"Moving Average Convergence Divergence (MACD)\")\n    )\n    ax[1].bar(df.index, df[\"macdhist\"].values, label=\"macd_hist\")\n    ax[1].legend() \n    ```", "```py\n    from ta import add_all_ta_features \n    ```", "```py\n    df = df[[\"Open\", \"High\", \"Low\", \"Close\", \"Volume\"]].copy() \n    ```", "```py\n    df = add_all_ta_features(df, open=\"Open\", high=\"High\",\n                             low=\"Low\", close=\"Close\",\n                             volume=\"Volume\") \n    ```", "```py\n    from alpha_vantage.techindicators import TechIndicators \n    ```", "```py\n    ta_api = TechIndicators(key=\"YOUR_KEY_HERE\", \n                            output_format=\"pandas\") \n    ```", "```py\n    rsi_df, rsi_meta = ta_api.get_rsi(symbol=\"IBM\", \n                                      time_period=14) \n    ```", "```py\n    fig, ax = plt.subplots()\n    rsi_df.plot(ax=ax, \n                title=\"RSI downloaded from Alpha Vantage\")\n    ax.hlines(y=30, \n              xmin=rsi_df.index.min(), \n              xmax=rsi_df.index.max(), \n              color=\"red\")\n    ax.hlines(y=70, \n              xmin=rsi_df.index.min(), \n              xmax=rsi_df.index.max(), \n              color=\"red\") \n    ```", "```py\n    rsi_meta \n    ```", "```py\n    {'1: Symbol': 'IBM',\n    '2: Indicator': 'Relative Strength Index (RSI)',\n    '3: Last Refreshed': '2022-02-25',\n    '4: Interval': 'daily',\n    '5: Time Period': 14,\n    '6: Series Type': 'close',\n    '7: Time Zone': 'US/Eastern Time'} \n    ```", "```py\n    import intrinio_sdk as intrinio\n    import pandas as pd \n    ```", "```py\n    intrinio.ApiClient().set_api_key(\"YOUR_KEY_HERE\")\n    security_api = intrinio.SecurityApi() \n    ```", "```py\n    r = security_api.get_security_price_technicals_macd(\n        identifier=\"IBM\", \n        fast_period=12, \n        slow_period=26, \n        signal_period=9, \n        price_key=\"close\", \n        start_date=\"2020-01-01\", \n        end_date=\"2020-12-31\",\n        page_size=500\n    ) \n    ```", "```py\n    macd_df = (\n        pd.DataFrame(r.technicals_dict)\n        .sort_values(\"date_time\")\n        .set_index(\"date_time\")\n    )\n    macd_df.index = pd.to_datetime(macd_df.index).date \n    ```", "```py\n    fig, ax = plt.subplots(2, 1, sharex=True)\n\n    (\n        macd_df[[\"macd_line\", \"signal_line\"]]\n        .plot(ax=ax[0], \n              title=\"MACD downloaded from Intrinio\")\n    )\n    ax[1].bar(df.index, macd_df[\"macd_histogram\"].values, \n              label=\"macd_hist\")\n    ax[1].legend() \n    ```", "```py\n    import pandas as pd\n    import yfinance as yf\n    import talib\n    import mplfinance as mpf \n    ```", "```py\n    df = yf.download(\"BTC-USD\",\n                     period=\"9mo\",\n                     interval=\"1h\",\n                     progress=False) \n    ```", "```py\n    df[\"3_line_strike\"] = talib.CDL3LINESTRIKE(\n        df[\"Open\"], df[\"High\"], df[\"Low\"], df[\"Close\"]\n    ) \n    ```", "```py\n    df[df[\"3_line_strike\"] == -100].head() \n    ```", "```py\n    mpf.plot(df[\"2021-07-16 05:00:00\":\"2021-07-16 16:00:00\"],\n             type=\"candle\") \n    ```", "```py\n    df[df[\"3_line_strike\"] == 100] \n    ```", "```py\n    mpf.plot(df[\"2021-07-10 10:00:00\":\"2021-07-10 23:00:00\"],\n             type=\"candle\") \n    ```", "```py\n    candle_names = talib.get_function_groups()[\"Pattern Recognition\"] \n    ```", "```py\n    for candle in candle_names:\n        df[candle] = getattr(talib, candle)(df[\"Open\"], df[\"High\"],\n                                            df[\"Low\"], df[\"Close\"]) \n    ```", "```py\n    with pd.option_context(\"display.max_rows\", len(candle_names)):\n        display(df[candle_names].describe().transpose().round(2)) \n    ```", "```py\n    import yfinance as yf\n    import streamlit as st\n    import datetime\n    import pandas as pd\n    import cufflinks as cf\n    from plotly.offline import iplot\n    cf.go_offline() \n    ```", "```py\n    @st.cache\n    def  get_sp500_components():\n        df = pd.read_html(\"https://en.wikipedia.org/wiki/List_of_S%26P_500_companies\")\n        df = df[0]\n        tickers = df[\"Symbol\"].to_list()\n        tickers_companies_dict = dict(\n            zip(df[\"Symbol\"], df[\"Security\"])\n        )\n        return tickers, tickers_companies_dict \n    ```", "```py\n    @st.cache\n    def  load_data(symbol, start, end):\n        return yf.download(symbol, start, end) \n    ```", "```py\n    @st.cache\n    def  convert_df_to_csv(df):\n        return df.to_csv().encode(\"utf-8\") \n    ```", "```py\n    st.sidebar.header(\"Stock Parameters\")\n    available_tickers, tickers_companies_dict = get_sp500_components()\n    ticker = st.sidebar.selectbox(\n        \"Ticker\", \n        available_tickers, \n        format_func=tickers_companies_dict.get\n    )\n    start_date = st.sidebar.date_input(\n        \"Start date\", \n        datetime.date(2019, 1, 1)\n    )\n    end_date = st.sidebar.date_input(\n        \"End date\", \n        datetime.date.today()\n    )\n    if start_date > end_date:\n        st.sidebar.error(\"The end date must fall after the start date\") \n    ```", "```py\n    st.sidebar.header(\"Technical Analysis Parameters\")\n    volume_flag = st.sidebar.checkbox(label=\"Add volume\") \n    ```", "```py\n    exp_sma = st.sidebar.expander(\"SMA\")\n    sma_flag = exp_sma.checkbox(label=\"Add SMA\")\n    sma_periods= exp_sma.number_input(\n        label=\"SMA Periods\", \n        min_value=1, \n        max_value=50, \n        value=20, \n        step=1\n    ) \n    ```", "```py\n    exp_bb = st.sidebar.expander(\"Bollinger Bands\")\n    bb_flag = exp_bb.checkbox(label=\"Add Bollinger Bands\")\n    bb_periods= exp_bb.number_input(label=\"BB Periods\", \n                                    min_value=1, max_value=50, \n                                    value=20, step=1)\n    bb_std= exp_bb.number_input(label=\"# of standard deviations\", \n                                min_value=1, max_value=4, \n                                value=2, step=1) \n    ```", "```py\n    exp_rsi = st.sidebar.expander(\"Relative Strength Index\")\n    rsi_flag = exp_rsi.checkbox(label=\"Add RSI\")\n    rsi_periods= exp_rsi.number_input(\n        label=\"RSI Periods\", \n        min_value=1, \n        max_value=50, \n        value=20, \n        step=1\n    )\n    rsi_upper= exp_rsi.number_input(label=\"RSI Upper\", \n                                    min_value=50, \n                                    max_value=90, value=70, \n                                    step=1)\n    rsi_lower= exp_rsi.number_input(label=\"RSI Lower\", \n                                    min_value=10, \n                                    max_value=50, value=30, \n                                    step=1) \n    ```", "```py\n    st.title(\"A simple web app for technical analysis\")\n    st.write(\"\"\"\n     ### User manual\n     * you can select any company from the S&P 500 constituents\n    \"\"\") \n    ```", "```py\n    df = load_data(ticker, start_date, end_date) \n    ```", "```py\n    data_exp = st.expander(\"Preview data\")\n    available_cols = df.columns.tolist()\n    columns_to_show = data_exp.multiselect(\n        \"Columns\", \n        available_cols, \n        default=available_cols\n    )\n    data_exp.dataframe(df[columns_to_show])\n\n    csv_file = convert_df_to_csv(df[columns_to_show])\n    data_exp.download_button(\n        label=\"Download selected as CSV\",\n        data=csv_file,\n        file_name=f\"{ticker}_stock_prices.csv\",\n        mime=\"text/csv\",\n    ) \n    ```", "```py\n    title_str = f\"{tickers_companies_dict[ticker]}'s stock price\"\n    qf = cf.QuantFig(df, title=title_str)\n    if volume_flag:\n        qf.add_volume()\n    if sma_flag:\n        qf.add_sma(periods=sma_periods)\n    if bb_flag:\n        qf.add_bollinger_bands(periods=bb_periods,\n                               boll_std=bb_std)\n    if rsi_flag:\n        qf.add_rsi(periods=rsi_periods,\n                   rsi_upper=rsi_upper,\n                   rsi_lower=rsi_lower,\n                   showbands=True)\n    fig = qf.iplot(asFigure=True)\n    st.plotly_chart(fig) \n    ```", "```py\n    streamlit run technical_analysis_app.py \n    ```"]