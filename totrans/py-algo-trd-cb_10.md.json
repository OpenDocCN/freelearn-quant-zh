["```py\n>>> from pyalgotrading.algobulls import AlgoBullsConnection\n```", "```py\n>>> algobulls_connection = AlgoBullsConnection()\n```", "```py\n>>> algobulls_connection.get_authorization_url()\n```", "```py\nPlease login to this URL with your AlgoBulls credentials and get your developer access token: https://app.algobulls.com/user/login\n'https://app.algobulls.com/user/login'\n```", "```py\n>>> algobulls_connection.set_access_token(\n                    '80b7a69b168c5b3f15d56688841a8f2da5e2ab2c')\n```", "```py\n>>> all_strategies = algobulls_connection.get_all_strategies()\n>>> all_strategies\n```", "```py\n>>> strategy_code1 = all_strategies.iloc[0]['strategyCode']\n>>> strategy_code1\n```", "```py\n'49287246f9704bbcbad76ade9e2091d9'\n```", "```py\n>>> strategy_details1 = \\\n        algobulls_connection.get_strategy_details(strategy_code1)\n>>> print(strategy_details1)\n```", "```py\nclass StrategyEMARegularOrder(StrategyBase):\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n        self.timeperiod1 = self.strategy_parameters['timeperiod1']\n        self.timeperiod2 = self.strategy_parameters['timeperiod2']\n\n        self.main_order = None\n\n    def initialize(self):\n        self.main_order = {}\n\n    @staticmethod\n    def name():\n        return 'EMA Regular Order Strategy'\n    ….\n    def strategy_exit_position(self, candle, instrument, \n                               sideband_info):\n        if sideband_info['action'] == 'EXIT':\n            self.main_order[instrument].exit_position()\n            self.main_order[instrument] = None\n            return True\n\n        return False\n```", "```py\n>>> from datetime import time\n>>> from pyalgotrading.constants import *\n```", "```py\n>>> instruments = algobulls_connection.search_instrument('SBIN')\n>>> instruments\n```", "```py\n[{'id': 7, 'value': 'NSE:SBIN'}]\n```", "```py\n>>> instrument = instruments[0]['value']\n>>> instrument\n```", "```py\n'NSE:SBIN'\n```", "```py\n>>> algobulls_connection.papertrade(strategy_code=strategy_code1, \n        start_time=time(hour=9, minute=15), \n        end_time=time(hour=15, minute=30),\n        instrument=instrument, \n        lots=1,\n        strategy_parameters={\n            'timeperiod1': 5,\n            'timeperiod2': 12\n        }, \n        candle_interval=CandleInterval.MINUTES_15)\n```", "```py\nSetting Strategy Config... Success.\nSubmitting PAPERTRADING job... Success.\n```", "```py\n>>> algobulls_connection.get_papertrading_job_status(\n                                                strategy_code1)\n```", "```py\n{'data': 'STARTING'}\n```", "```py\n>>> algobulls_connection.get_papertrading_job_status(\n                                                strategy_code1)\n```", "```py\n{'data': 'STARTED'}\n```", "```py\n>>> algobulls_connection.stop_papertrading_job(strategy_code1)\n Stopping PAPERTRADING job... Success.\n```", "```py\n>>> algobulls_connection.get_papertrading_job_status(strategy_code1)\n{'data': 'STOPPING'}\n```", "```py\n>>> algobulls_connection.get_papertrading_job_status(strategy_code1)\n{'data': 'STOPPED'} \n```", "```py\n>>> logs = algobulls_connection.get_papertrading_logs(\n                                              strategy_code1)\n>>> print(logs)\n```", "```py\n[2020-07-09 09:12:18] Logs not available yet. Please retry in sometime.\n```", "```py\n>>> logs = algobulls_connection.get_papertrading_logs(\n                                               strategy_code1)\n>>> print(logs)\n```", "```py\n...\n########################################\n INITIALIZING ALGOBULLS CORE (v3.2.0 SECURE MODE)... \n########################################\n[2020-07-09 09:12:31] Welcome ALGOBULLS VIRTUAL USER!\n[2020-07-09 09:12:31] Reading strategy…\n…\n[PT] [2020-07-09 09:15:00] [INFO] [tls] STARTING ALGOBULLS CORE…\n...\n[PT] [2020-07-09 10:30:00] [CRITICAL] [order] [PLACING NEW ORDER] [2020-07-09 10:30:00] [96c24ca4b3e448f381fc5c2bc52f7a29] [BUY] [NSE:SBIN] [QTY:1] [QTY PENDING: 1] [ENTRY PRICE: 194.7] [PRICE:None] [TRIGGER PRICE:None] [ORDER_TYPE_REGULAR] [ORDER_CODE_INTRADAY] [ORDER_VARIETY_MARKET] [ORDER_POSITION_ENTER]\n…\n[PT] [2020-07-09 15:30:00] [INFO] [clock] Candle generation has been stopped...\n[PT] [2020-07-09 15:30:00] [INFO] [tls] Received event END OF MARKET. Stopping Trading Core Engine...\n[PT] [2020-07-09 15:30:00] [INFO] [tls] Exiting all open positions with order code: ORDER_CODE_INTRADAY (if any)...\n[PT] [2020-07-09 15:30:00] [CRITICAL] [tls] [User: ALGOBULLS VIRTUAL USER] Trading session completed\n...\n```", "```py\n>>> algobulls_connection.get_papertrading_report_pnl_table(strategy_code1)\n```", "```py\n>>> algobulls_connection.get_papertrading_report_statistics(strategy_code1)\n```", "```py\n>>> order_history = \\\n        algobulls_connection.get_papertrading_report_order_history(\n                                                           strategy_code1)\n```", "```py\n+-------------+---------------------+----------------------------------+------+\n| INST        | TIME                | ID                               | TT   |\n|-------------+---------------------+----------------------------------+------|\n| NSE_EQ:SBIN | 2020-07-09 10:30:00 | 96c24ca4b3e448f381fc5c2bc52f7a29 | BUY  |\n+-------------+---------------------+----------------------------------+------+\n+----+---------------------+------------------------+-------+\n|    | TIME                | STATE                  | MSG   |\n|----+---------------------+------------------------+-------|\n|  0 | 2020-07-09 10:30:00 | PUT ORDER REQ RECEIVED |       |\n|  1 | 2020-07-09 10:30:00 | VALIDATION PENDING     |       |\n|  2 | 2020-07-09 10:30:00 | OPEN PENDING           |       |\n|  3 | 2020-07-09 10:30:00 | OPEN                   |       |\n|  4 | 2020-07-09 10:30:00 | COMPLETE               |       |\n+----+---------------------+------------------------+-------+\n+-------------+---------------------+----------------------------------+------+\n| INST        | TIME                | ID                               | TT   |\n|-------------+---------------------+----------------------------------+------|\n| NSE_EQ:SBIN | 2020-07-09 10:45:00 | 3bbd433edd004630b122de07873864d7 | SELL |\n+-------------+---------------------+----------------------------------+------+\n+----+---------------------+------------------------+-------+\n|    | TIME                | STATE                  | MSG   |\n|----+---------------------+------------------------+-------|\n|  0 | 2020-07-09 10:45:00 | PUT ORDER REQ RECEIVED |       |\n|  1 | 2020-07-09 10:45:00 | VALIDATION PENDING     |       |\n|  2 | 2020-07-09 10:45:00 | OPEN PENDING           |       |\n|  3 | 2020-07-09 10:45:00 | OPEN                   |       |\n|  4 | 2020-07-09 10:45:00 | COMPLETE               |       |\n+----+---------------------+------------------------+-------+\n...\n```", "```py\n+-------------+---------------------+----------------------------------+------+\n| INST        | TIME                | ID                               | TT   |\n|-------------+---------------------+----------------------------------+------|\n| NSE_EQ:SBIN | 2020-07-09 10:30:00 | 96c24ca4b3e448f381fc5c2bc52f7a29 | BUY  |\n+-------------+---------------------+----------------------------------+------+\n```", "```py\n+----+---------------------+------------------------+-------+\n|    | TIME                | STATE                  | MSG   |\n|----+---------------------+------------------------+-------|\n|  0 | 2020-07-09 10:30:00 | PUT ORDER REQ RECEIVED |       |\n|  1 | 2020-07-09 10:30:00 | VALIDATION PENDING     |       |\n|  2 | 2020-07-09 10:30:00 | OPEN PENDING           |       |\n|  3 | 2020-07-09 10:30:00 | OPEN                   |       |\n|  4 | 2020-07-09 10:30:00 | COMPLETE               |       |\n+----+---------------------+------------------------+-------+\n```", "```py\n>>> from pyalgotrading.algobulls import AlgoBullsConnection\n```", "```py\n>>> algobulls_connection = AlgoBullsConnection()\n```", "```py\n>>> algobulls_connection.get_authorization_url()\n```", "```py\nPlease login to this URL with your AlgoBulls credentials and get your developer access token: https://app.algobulls.com/user/login\n'https://app.algobulls.com/user/login'\n```", "```py\n>>> algobulls_connection.set_access_token(\n                    '80b7a69b168c5b3f15d56688841a8f2da5e2ab2c')\n```", "```py\n>>> all_strategies = algobulls_connection.get_all_strategies()\n>>> all_strategies\n```", "```py\n>>> strategy_code2 = all_strategies.iloc[1]['strategyCode']\n>>> strategy_code2\n```", "```py\n'49287246f9704bbcbad76ade9e2091d9'\n```", "```py\n>>> strategy_details2 = \\\n        algobulls_connection.get_strategy_details(strategy_code2)\n>>> print(strategy_details2)\n```", "```py\nclass StrategyMACDBracketOrder(StrategyBase):\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n        self.fastMA_period = \\\n            self.strategy_parameters['fastma_period']\n        self.slowMA_period = \\\n            self.strategy_parameters['slowma_period']\n        self.signal_period = \\\n            self.strategy_parameters['signal_period']\n        self.stoploss = \\\n            self.strategy_parameters['stoploss_trigger']\n        self.target = self.strategy_parameters['target_trigger']\n        self.trailing_stoploss = \\\n            self.strategy_parameters['trailing_stoploss_trigger']\n\n        self.main_order = None\n\n    def initialize(self):\n        self.main_order = {}\n\n    @staticmethod\n    def name():\n        return 'MACD Bracket Order Strategy'\n    ….\n    def strategy_exit_position(self, candle, instrument, \n                               sideband_info):\n        if sideband_info['action'] == 'EXIT':\n            self.main_order[instrument].exit_position()\n            self.main_order[instrument] = None\n            return True\n\n        return False\n```", "```py\n>>> from datetime import time\n>>> from pyalgotrading.constants import *\n```", "```py\n>>> instrument = algobulls_connection.search_instrument(\n                                                    'TATASTEEL')\n>>> instrument\n```", "```py\n[{'id': 1, 'value': 'NSE:TATASTEEL'}]\n```", "```py\n>>> instrument = instrument[0]['value']\n>>> instrument\n```", "```py\n'NSE:TATASTEEL'\n```", "```py\n>>> algobulls_connection.papertrade(\n        strategy_code=strategy_code2, \n        start_time=time(hour=9, minute=15),\n        end_time=time(hour=15, minute=30),\n        instrument=instrument,\n        lots=1,\n        strategy_parameters={\n            'fastma_period': 26, \n            'slowma_period': 6, \n            'signal_period': 9,\n            'target_trigger': 0.01, \n            'stoploss_trigger': 0.01, \n            'trailing_stoploss_trigger': 1\n        },\n        candle_interval=CandleInterval.MINUTES_15)\n```", "```py\nSetting Strategy Config... Success.\nSubmitting PAPERTRADING job... Success.\n```", "```py\n>>> algobulls_connection.get_papertrading_job_status(\n                                                strategy_code2)\n{'data': 'STARTING'}\n```", "```py\n>>> algobulls_connection.get_papertrading_job_status(\n                                                strategy_code2)\n{'data': 'STARTED'} \n```", "```py\n>>> algobulls_connection.stop_papertrading_job(strategy_code2)\n Stopping PAPERTRADING job... Success.\n```", "```py\n>>> algobulls_connection.get_papertrading_job_status(strategy_code2)\n{'data': 'STOPPING'}\n```", "```py\n>>> algobulls_connection.get_papertrading_job_status(strategy_code2)\n{'data': 'STOPPED'} \n```", "```py\n>>> logs = algobulls_connection.get_papertrading_logs(\n                                                strategy_code2)\n>>> print(logs)\n```", "```py\n[2020-07-09 09:14:12] Logs not available yet. Please retry in sometime.\n```", "```py\n>>> logs = algobulls_connection.get_papertrading_logs(\n                                                strategy_code2)\n>>> print(logs)\n```", "```py\n...\n########################################\n INITIALIZING ALGOBULLS CORE (v3.2.0)... \n########################################\n…\n[PT] [2020-07-09 09:15:00] [INFO] [tls] STARTING ALGOBULLS CORE…\n…\n[PT] [2020-07-09 09:45:00] [CRITICAL] [order] [PLACING NEW ORDER] [2020-07-09 09:45:00] [a310755e3d8b4a1ab4667882bf25751d] [BUY] [NSE:TATASTEEL] [QTY:1] [QTY PENDING: 1] [ENTRY PRICE: 345.0] [PRICE:345.0] [TRIGGER PRICE:None] [ORDER_TYPE_BRACKET] [ORDER_CODE_INTRADAY] [ORDER_VARIETY_LIMIT] [ORDER_POSITION_ENTER] [STOPLOSS TRIGGER:341.55] [TARGET TRIGGER:348.45] [TRAILING STOPLOSS TRIGGER:345.0]\n...\n[PT] [2020-07-09 15:30:00] [INFO] [clock] Candle generation has been stopped...\n[PT] [2020-07-09 15:30:00] [INFO] [tls] Received event END OF MARKET. Stopping Trading Core Engine...\n[PT] [2020-07-09 15:30:00] [INFO] [tls] Exiting all open positions with order code: ORDER_CODE_INTRADAY (if any)...\n[PT] [2020-07-09 15:30:00] [CRITICAL] [tls] [User: ALGOBULLS VIRTUAL USER] Trading session completed\n…\n```", "```py\n>>> algobulls_connection.get_papertrading_report_pnl_table(strategy_code2)\n```", "```py\n>>> algobulls_connection.get_papertrading_report_statistics(strategy_code2)\n```", "```py\n>>> order_history = \\\n        algobulls_connection.get_papertrading_report_order_history(\n                                                         strategy_code2)\n>>> print(order_history)\n```", "```py\n…\n+------------------+---------------------+----------------------------------+------+\n| INST             | TIME                | ID                               | TT   |\n|------------------+---------------------+----------------------------------+------|\n| NSE_EQ:TATASTEEL | 2020-07-09 10:00:00 | 56970bffe8be4650a71857bc4472e6c8 | SELL |\n+------------------+---------------------+----------------------------------+------+\n+----+---------------------+------------------------+-------+\n|    | TIME                | STATE                  | MSG   |\n|----+---------------------+------------------------+-------|\n|  0 | 2020-07-09 10:00:00 | PUT ORDER REQ RECEIVED |       |\n|  1 | 2020-07-09 10:00:00 | VALIDATION PENDING     |       |\n|  2 | 2020-07-09 10:00:00 | OPEN PENDING           |       |\n|  3 | 2020-07-09 10:00:00 | OPEN                   |       |\n|  4 | 2020-07-09 10:15:00 | COMPLETE               |       |\n+----+---------------------+------------------------+-------+\n+------------------+---------------------+----------------------------------+------+\n| INST             | TIME                | ID                               | TT   |\n|------------------+---------------------+----------------------------------+------|\n| NSE_EQ:TATASTEEL | 2020-07-09 10:00:00 | 0a06e41aac0744adb45bb4d3d2e19728 | SELL |\n+------------------+---------------------+----------------------------------+------+\n+----+---------------------+------------------------+-------+\n|    | TIME                | STATE                  | MSG   |\n|----+---------------------+------------------------+-------|\n|  0 | 2020-07-09 10:00:00 | PUT ORDER REQ RECEIVED |       |\n|  1 | 2020-07-09 10:00:00 | VALIDATION PENDING     |       |\n|  2 | 2020-07-09 10:00:00 | OPEN PENDING           |       |\n|  3 | 2020-07-09 10:00:00 | TRIGGER PENDING        |       |\n|  4 | 2020-07-09 10:15:00 | CANCEL PENDING         |       |\n|  5 | 2020-07-09 10:15:00 | CANCELLED              |       |\n+----+---------------------+------------------------+-------+\n...\n```", "```py\n+------------------+---------------------+----------------------------------+------+\n| INST             | TIME                | ID                               | TT   |\n|------------------+---------------------+----------------------------------+------|\n| NSE_EQ:TATASTEEL | 2020-07-09 10:00:00 | 0a06e41aac0744adb45bb4d3d2e19728 | SELL |\n+------------------+---------------------+----------------------------------+------+\n```", "```py\n+----+---------------------+------------------------+-------+\n|    | TIME                | STATE                  | MSG   |\n|----+---------------------+------------------------+-------|\n|  0 | 2020-07-09 10:00:00 | PUT ORDER REQ RECEIVED |       |\n|  1 | 2020-07-09 10:00:00 | VALIDATION PENDING     |       |\n|  2 | 2020-07-09 10:00:00 | OPEN PENDING           |       |\n|  3 | 2020-07-09 10:00:00 | TRIGGER PENDING        |       |\n|  4 | 2020-07-09 10:15:00 | CANCEL PENDING         |       |\n|  5 | 2020-07-09 10:15:00 | CANCELLED              |       |\n+----+---------------------+------------------------+-------+\n```"]