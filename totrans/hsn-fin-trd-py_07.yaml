- en: '*Chapter 5*: Data Visualization Using Matplotlib'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data visualization allows comprehending numerical data significantly more easily
    than reading pure tables of numbers. Getting instant insight into data and the
    identification of patterns, trends, and outliers are the primary uses of charting
    libraries.
  prefs: []
  type: TYPE_NORMAL
- en: When deciding which stock may be suitable for which algorithmic trading strategy,
    creating a chart of the stock price is the first step – some strategies are suitable
    only for trending stocks, some for mean-reversion stocks, and so on. While numerical
    statistics are critical, there is no substitute for a well-designed chart.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter introduces us to Matplotlib, a static, animated, and interactive
    Python visualization library extending the capabilities of NumPy. The `pandas`
    library allows direct charting of DataFrames using Matplotlib.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating figures and subplots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enriching plots with colors, markers, and line styles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enriching axes with ticks, labels, and legends
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enriching data points with annotations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving plots to files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Charting a `pandas` DataFrame with Matplotlib
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Python code used in this chapter is available in the `Chapter05/matplotlib.ipynb`
    notebook in the book's code repository.
  prefs: []
  type: TYPE_NORMAL
- en: Creating figures and subplots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Matplotlib supports plotting multiple charts (subplots) on a single figure,
    which is Matplotlib's term for the drawing canvas.
  prefs: []
  type: TYPE_NORMAL
- en: Defining figures' subplots
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a `matplotlib.pyplot.figure` object, use the following method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This yields an empty figure object (`0 Axes`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Before we plot anything on this figure, we need to add subplots to create space
    for them. The `matplotlib.pyplot.figure.add_subplot(...)` method lets us do that
    by specifying the size of the subplot and the location.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code block adds a subplot of size 1x2 grids on the left, then
    a subplot of 2x2 on the top right, and finally, a subplot of 2x2 on the bottom
    right:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is the following figure object containing the subplots we just added:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1 – Figure containing three empty subplots](img/Figure_5.1_B15029.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.1 – Figure containing three empty subplots
  prefs: []
  type: TYPE_NORMAL
- en: Now, once we have created the space for the charts (`"plots"`/`"subplots"`),
    we can populate them with visualizations. In all reports, physical space on the
    page is very expensive, so creating charts like the preceding is the best practice.
  prefs: []
  type: TYPE_NORMAL
- en: Plotting in subplots
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's use `numpy.linspace(...)` to generate evenly spaced values on the *x*
    axis, and then the `numpy.square(...)`, `numpy.sin(...)`, and `numpy.cos(...)`
    methods to generate corresponding values on the *y* axis.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use the `ax1`, `ax2`, and `ax3` axes variables we got from adding subplots
    to plot these functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the following figure contains the values we just plotted:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.2 – Figure containing three subplots plotting the square, sine,
    and cosine functions](img/Figure_5.2_B15029.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.2 – Figure containing three subplots plotting the square, sine, and
    cosine functions
  prefs: []
  type: TYPE_NORMAL
- en: The `sharex=` parameter can be passed when creating subplots to specify that
    all the subplots should share the same *x* axis.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s demonstrate this functionality and plot the square, and then use the
    `numpy.power(...)` method to raise `x` to the power of 10 and plot them with the
    same *x* axis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is the following figure with a shared *x* axis and different functions
    plotted on each graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.3 – Figure with subplots sharing an x axis, containing the square
    and raised to 10 functions](img/Figure_5.3_B15029.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.3 – Figure with subplots sharing an x axis, containing the square and
    raised to 10 functions
  prefs: []
  type: TYPE_NORMAL
- en: The charts we generated are not self-explanatory yet – it is unclear what the
    units on the *x* axis and the *y* axis are, and what each chart represents. To
    improve the charts, we need to enrich them with colors, markers, and line styles,
    to enrich the axes with ticks, legends, and labels and provide selected data points'
    annotations.
  prefs: []
  type: TYPE_NORMAL
- en: Enriching plots with colors, markers, and line styles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Colors, markers, and lines styles make charts easier to understand.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code block that follows plots four different functions and uses the following
    parameters to modify the appearance:'
  prefs: []
  type: TYPE_NORMAL
- en: The `color=` parameter is used to assign colors.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `linewidth=` parameter is used to change the width/thickness of the lines.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `marker=` parameter assigns different shapes to mark the data points.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `markersize=` parameter changes the size of those markers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `alpha=` parameter is used to modify the transparency.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `drawstyle=` parameter changes the default line connectivity to step connectivity
    between data points for one plot.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The output displays four functions with different attributes assigned to them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.4 – Plot demonstrating different color, line style, marker style,
    transparency, and size options](img/Figure_5.4_B15029.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.4 – Plot demonstrating different color, line style, marker style, transparency,
    and size options
  prefs: []
  type: TYPE_NORMAL
- en: Using different colors, line styles, marker styles, transparency, and size options
    enables us to generate rich charts with easily identifiable multiple time series.
    Choose the colors wisely as they may not render well on some laptop screens or
    on paper if printed.
  prefs: []
  type: TYPE_NORMAL
- en: Enriching axes is the next step in making outstanding charts.
  prefs: []
  type: TYPE_NORMAL
- en: Enriching axes with ticks, labels, and legends
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The charts can be further improved by customizing the axes via ticks, limits,
    and labels.
  prefs: []
  type: TYPE_NORMAL
- en: The `matplotlib.pyplot.xlim(...)` method sets the range of values on the *x*
    axis.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `matplotlib.pyplot.xticks(...)` method specifies where the ticks show up
    on the *x* axis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This modifies the *x* axis to be within the specified limits and the ticks
    at the explicitly specified values:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.5 – Plot with explicit limits and ticks on the x axis](img/Figure_5.5_B15029.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.5 – Plot with explicit limits and ticks on the x axis
  prefs: []
  type: TYPE_NORMAL
- en: We can also change the scale of one of the axes to non-linear using the `matplotlib.Axes.set_yscale(...)`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `matplotlib.Axes.set_xticklabels(...)` method changes the labels on the
    *x* axis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of that code block shows the difference in the scale of the *y*
    axis, which is now logarithmic, and the *x* axis ticks have the specific tick
    labels:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.6 – Plot with a logarithmic y-axis scale and custom x-axis tick
    labels](img/Figure_5.6_B15029.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.6 – Plot with a logarithmic y-axis scale and custom x-axis tick labels
  prefs: []
  type: TYPE_NORMAL
- en: The logarithmic scales in charts are useful if the dataset covers a large range
    of values and/or if we want to communicate percentage change or multiplicative
    factors.
  prefs: []
  type: TYPE_NORMAL
- en: The `matplotlib.Axes.set_title(...)` method adds a title to the plot and the
    `matplotlib.Axes.set_xlabel(...)` and `matplotlib.Axes.set_ylabel(...)` methods
    set labels for the *x* and *y* axes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `matplotlib.Axes.legend(...)` method adds a legend, which makes the plots
    easier to interpret. The `loc=` parameter specifies the location of the legend
    on the plot with `loc=''best''`, meaning Matplotlib picks the best location automatically:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The following plot shows the title, the *x*- and *y*-axis labels, and the legend:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.7 – Plot demonstrating a title, x- and y-axis labels, and a legend](img/Figure_5.7_B15029.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.7 – Plot demonstrating a title, x- and y-axis labels, and a legend
  prefs: []
  type: TYPE_NORMAL
- en: Charts with a different rendering of each time series and with explained units
    and labels of the axes are sufficient for understanding charts. However, there
    are always some special data points that would benefit from being pointed out.
  prefs: []
  type: TYPE_NORMAL
- en: Enriching data points with annotations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `matplotlib.Axes.text(...)` method adds a text box to our plots:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.8 – Plot displaying Matplotlib text annotations](img/Figure_5.8_B15029.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.8 – Plot displaying Matplotlib text annotations
  prefs: []
  type: TYPE_NORMAL
- en: The `matplotlib.Axes.annotate(...)` method provides more control over the annotations.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code block that follows uses the following parameters to control the annotation:'
  prefs: []
  type: TYPE_NORMAL
- en: The `xy=` parameter specifies the location of the data point.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `xytext=` parameter specifies the location of the text box.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `arrowprops=` parameter accepts a dictionary specifying parameters to control
    the arrow from the text box to the data point.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `facecolor=` parameter specifies the color and the `shrink=` parameter specifies
    the size of the arrow.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `horizontalalignment=` and `verticalalignment=` parameters specify the orientation
    of the text box relative to the data point.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.9 – Plot with text and arrow annotations of data points](img/Figure_5.9_B15029.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.9 – Plot with text and arrow annotations of data points
  prefs: []
  type: TYPE_NORMAL
- en: Drawing attention to the key data points helps the reader focus on the message
    of the chart.
  prefs: []
  type: TYPE_NORMAL
- en: The `matplotlib.Axes.add_patch(...)` method can be used to add different shape
    annotations.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code block that follows adds a `matplotlib.pyplot.Circle` object, which
    accepts the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The `xy=` parameter to specify the location
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `radius=` parameter to specify the circle radius
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `color=` parameter to specify the color of the circle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This generates the following plot with circles around the data points:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.10 – Plot containing circle annotations around data points generated
    from adding a patch](img/Figure_5.10_B15029.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.10 – Plot containing circle annotations around data points generated
    from adding a patch
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have generated beautiful, professional charts, we need to learn
    how to share the images.
  prefs: []
  type: TYPE_NORMAL
- en: Saving plots to files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `matplotlib.pyplot.figure` object enables us to save plots to disk in different
    file formats with many size and resolution specifiers, such as the `dpi=` parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This writes the following plot to the `fig.png` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.11 – Matplotlib plot written to a file on disk and opened with an
    external viewer](img/Figure_5.11_B15029.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.11 – Matplotlib plot written to a file on disk and opened with an external
    viewer
  prefs: []
  type: TYPE_NORMAL
- en: Exported images of trading strategies' performance are frequently used for HTML
    or email reports. For printing, choose the DPI of your printer as the DPI of the
    charts.
  prefs: []
  type: TYPE_NORMAL
- en: Charting a pandas DataFrame with Matplotlib
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `pandas` library provides plotting capabilities for Series and DataFrame
    objects using Matplotlib.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a `pandas` DataFrame with the `Cont` value containing continuous
    values that mimic prices and the `Delta1` and `Delta2` values to mimic price changes.
    The `Cat` value contains categorical data from five possibilities:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This generates the following DataFrame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Let's explore different ways of how this DataFrame can be visualized.
  prefs: []
  type: TYPE_NORMAL
- en: Creating line plots of a DataFrame column
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can plot `''Cont value''` in a line plot using the `pandas.DataFrame.plot(...)`
    method with the `kind=` parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This command produces the following chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.12 – Line plot generated using the pandas.DataFrame.plot(…) method](img/Figure_5.12_B15029.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.12 – Line plot generated using the pandas.DataFrame.plot(…) method
  prefs: []
  type: TYPE_NORMAL
- en: Line charts are typically used for displaying time series.
  prefs: []
  type: TYPE_NORMAL
- en: Creating bar plots of a DataFrame column
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `pandas.DataFrame.plot(...)` method can be used with the `kind='bar'` parameter
    to build a bar chart.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s first group the DataFrame by the `''Cat value''` value, and then plot
    the `Delta1 discrete` value counts in a bar chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This generates the following plot showing the frequency of `(Cat value, Delta1
    discrete)` value pairs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.13 – Vertical bar plot displaying the frequency of (Cat value, Delta1
    discrete) value pairs](img/Figure_5.13_B15029.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.13 – Vertical bar plot displaying the frequency of (Cat value, Delta1
    discrete) value pairs
  prefs: []
  type: TYPE_NORMAL
- en: 'The `kind=''barh''` parameter builds a horizontal bar plot instead of a vertical
    one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.14 – Horizontal bar plot displaying the frequency of (Delta2 discrete,
    Cat value) pairs](img/Figure_5.14_B15029.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.14 – Horizontal bar plot displaying the frequency of (Delta2 discrete,
    Cat value) pairs
  prefs: []
  type: TYPE_NORMAL
- en: Bar plots are most suitable for comparing the magnitude of categorical values.
  prefs: []
  type: TYPE_NORMAL
- en: Creating histogram and density plots of a DataFrame column
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `kind='hist'` parameter in the `pandas.DataFrame.plot(…)` method builds
    a histogram.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a histogram of the `Delta1 discrete` values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The histogram generated is shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.15 – Histogram of Delta1 discrete frequency](img/Figure_5.15_B15029.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.15 – Histogram of Delta1 discrete frequency
  prefs: []
  type: TYPE_NORMAL
- en: 'We can build a `kind=''kde''` parameter, which generates a PDF using the `Delta2
    discrete` value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.16 – KDE plot displaying the PDF of Delta2 discrete values](img/Figure_5.16_B15029.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.16 – KDE plot displaying the PDF of Delta2 discrete values
  prefs: []
  type: TYPE_NORMAL
- en: Histograms and PDFs/KDEs are used to assess the probability distribution of
    some random variables.
  prefs: []
  type: TYPE_NORMAL
- en: Creating scatter plots of two DataFrame columns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Scatter plots from the `pandas.DataFrame.plot(...)` method are generated using
    the `kind='scatter'` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code block plots a scatter plot between the `Delta1` and `Delta2`
    values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.17 – Scatter plot of the Delta1 value and Delta2 value fields](img/Figure_5.17_B15029.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.17 – Scatter plot of the Delta1 value and Delta2 value fields
  prefs: []
  type: TYPE_NORMAL
- en: 'The `pandas.plotting.scatter_matrix(...)` method builds a matrix of scatter
    plots on non-diagonal entries and histogram/KDE plots on the diagonal entries
    of the matrix between the `Delta1` and `Delta2` values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.18 – Scatter matrix plot of the Delta1 value and Delta2 value fields](img/Figure_5.18_B15029.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.18 – Scatter matrix plot of the Delta1 value and Delta2 value fields
  prefs: []
  type: TYPE_NORMAL
- en: Scatter plots/scatter matrices are used to observe relationships between two
    variables.
  prefs: []
  type: TYPE_NORMAL
- en: Plotting time series data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following code block creates a `pandas` DataFrame containing prices for
    two hypothetical trading instruments, `A` and `B`. The DataFrame is indexed by
    the `DateTimeIndex` objects representing daily dates from `1992` to `2012`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The resulting DataFrame is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Let's use this time series for representative types of plots.
  prefs: []
  type: TYPE_NORMAL
- en: Plotting prices in a line plot
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First, let''s plot the daily prices for `A` and `B` over 20 years with line
    plots:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.19 – Plot displaying prices for hypothetical instruments A and B
    over a period of 20 years](img/Figure_5.19_B15029.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.19 – Plot displaying prices for hypothetical instruments A and B over
    a period of 20 years
  prefs: []
  type: TYPE_NORMAL
- en: While most time series charts are line plots, the additional chart types provide
    additional insight.
  prefs: []
  type: TYPE_NORMAL
- en: Plotting price change histograms
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The usual next stop in financial time series analysis is to inspect changes
    in price over some duration.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code block generates six new fields representing changes in prices
    over 1 day, 5 days, and 20 days, using the `pandas.DataFrame.shift(...)` and `pandas.DataFrame.fillna(...)`
    methods. We also drop rows with missing data due to the shift and the final DataFrame
    is saved in the `time_series_delta` DataFrame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The DataFrame contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'We can plot the price change histogram for `A` based on what we have learned
    in this chapter with the following block of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.20 – Histogram of A_1, A_5, and A_20 deltas](img/Figure_5.20_B15029.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.20 – Histogram of A_1, A_5, and A_20 deltas
  prefs: []
  type: TYPE_NORMAL
- en: Histograms are used for assessing the probability distribution of the underlying
    data. This particular histogram suggests that the `A_20` delta has the greatest
    variability, which makes sense since the underlying data exhibits a strong trend.
  prefs: []
  type: TYPE_NORMAL
- en: Creating price change density plots
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can also plot the density of price changes using the KDE PDF.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code block plots the density function for price changes in `B`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.21 – KDE density plot for price changes in B over 1, 5, and 20 days](img/Figure_5.21_B15029.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.21 – KDE density plot for price changes in B over 1, 5, and 20 days
  prefs: []
  type: TYPE_NORMAL
- en: KDE density plots are very similar to histograms. In contrast to histograms
    consisting of discrete boxes, KDEs are continuous lines.
  prefs: []
  type: TYPE_NORMAL
- en: Creating box plots by interval
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can group daily prices by different intervals, such as yearly, quarterly,
    monthly, or weekly, and display the distribution of those prices using box plots.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following piece of code first uses the `pandas.Grouper` object with `freq=''A''`
    to specify annual periodicity, and then applies to the result the `pandas.DataFrame.groupby(…)`
    method to build a `pandas.DataFrameGroupBy` object. Finally, we call the `pandas.DataFrameGroupBy.boxplot(...)`
    method to generate the box plot. We specify the `rot=90` parameter to rotate the
    *x*-axis tick labels to make it more readable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.22 – Figure containing the box plot distribution of A''s prices
    grouped by year](img/Figure_5.22_B15029.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.22 – Figure containing the box plot distribution of A's prices grouped
    by year
  prefs: []
  type: TYPE_NORMAL
- en: 'Box plots with whiskers are used for visualizing groups of numerical data through
    their corresponding quartiles:'
  prefs: []
  type: TYPE_NORMAL
- en: The box's lower bound corresponds to the lower quartile, while the box's upper
    bound represents the group's upper quartile.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The line within the box displays the value of the median of the interval.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The line below the box ends with the value of the lowest observation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The line above the box ends with the value of the highest observation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating lag scatter plots
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can visualize the relationships between the different price change variables
    using the `pandas.plotting.scatter_matrix(…)` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The result shows some linear relationships between the `(A_5_Delta and A_1_Delta)`,
    `(A_5_Delta and A_20_Delta)`, `(B_1_Delta and B_5_Delta)`, and `(B_5_Delta and
    B_20_Delta)` variable pairs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.23 – Scatter matrix plot for A and B price delta variables](img/Figure_5.23_B15029.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.23 – Scatter matrix plot for A and B price delta variables
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also use the `pandas.plotting.lag_plot(...)` method with different `lag=`
    values to specify different levels of lag to generate the scatter plots between
    prices and lagged prices for `A`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'This generates the following three plots for lags of 1, 7, and 20 days:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.24 – Lag plots for A''s prices with lag values of 1, 7, and 20 days,
    showing martingale properties](img/Figure_5.24_B15029.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.24 – Lag plots for A's prices with lag values of 1, 7, and 20 days,
    showing martingale properties
  prefs: []
  type: TYPE_NORMAL
- en: Log plots check whether a time series is random without any trend. For a random
    time series, its lag plots show no structure. The preceding plots show a clear
    linear trend; that is, we may succeed in modeling it with an auto-regressive model.
  prefs: []
  type: TYPE_NORMAL
- en: Creating autocorrelation plots
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Autocorrelation plots visualize the relationships with prices at a certain point
    in time and the prices lagged by a certain number of periods.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use the `pandas.plotting.autocorrelation_plot(...)` method to plot lag
    values on the *x* axis and the correlation between price and price lagged by the
    specified value on the *y* axis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see that as lag values increase, the autocorrelation slowly deteriorates:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.25 – Plot displaying the relationship between lag values versus
    autocorrelation between prices and prices lagged by a specified value](img/Figure_5.25_B15029.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.25 – Plot displaying the relationship between lag values versus autocorrelation
    between prices and prices lagged by a specified value
  prefs: []
  type: TYPE_NORMAL
- en: Autocorrelation plots summarize the randomness of a time series. For a random
    time series, all autocorrelations would be close to 0 for all lags. For a non-random
    time series, at least one of the autocorrelations would be significantly non-zero.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned how to create visually appealing charts of
    `pandas` DataFrames with Matplotlib. While we can calculate many numerical statistics,
    charts usually offer greater insight more rapidly. You should always plot as many
    different charts as possible since each provides a different view of the data.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to perform statistical tests and estimate
    statistical models in Python.
  prefs: []
  type: TYPE_NORMAL
