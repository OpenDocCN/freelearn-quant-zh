- en: Chapter 9. Financial Networks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have seen in the previous chapter how extreme events coming from asymmetric
    and fat-tailed distributions can be modeled and how the risk associated with extreme
    events can be measured and managed.
  prefs: []
  type: TYPE_NORMAL
- en: In some cases we have access to financial data that enables us to construct
    complex networks. In financial networks, it is quite usual that the distribution
    of some attributes (degree, quantity, and so on) is highly asymmetric and fat-tailed
    too.
  prefs: []
  type: TYPE_NORMAL
- en: By nature, available financial networks are usually not complete; they do not
    contain either all possible players, or all possible connections, or all relevant
    attributes. But even in their limited state, they constitute an extremely rich
    and informative data set which can help us to get insight into the detailed microstructure
    of the market under investigation.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter gives an overview of how financial networks can be represented,
    simulated, visualized, and analyzed in R. We will focus on two important practical
    problems:'
  prefs: []
  type: TYPE_NORMAL
- en: How topology changes of the network can be detected
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How systemically important players can be identified with the help of centrality
    measures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Representation, simulation, and visualization of financial networks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Networks can be represented by a list of pairs, by an adjacency matrix, or by
    graphs. Graphs consist of vertices and edges (nodes). In R, vertices are numbered
    and may have several attributes. Between two vertices there can exist an edge
    (directed or undirected, weighted or non-weighted), and the edge may have other
    attributes as well. In most financial networks, vertices stand for market players,
    while edges describe different sorts of financial linkages between them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the built-in R tools and some function from the `igraph` package, it
    is easy to create/simulate artificial networks. The following table (Table 1)
    summarizes some important network types and their basic properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Network | Clustering | Average path length | Degree distribution |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **Regular** (for example, ring, full) | High | High | Equal or fixed in-out
    degrees in each node |'
  prefs: []
  type: TYPE_TB
- en: '| **Pure random** (for example, Erdős-Rényi) | Low | Low | Exponential, Gaussian
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Scale free** | Variable | Variable | Power law/fat-tail |'
  prefs: []
  type: TYPE_TB
- en: '| **Small world** (for example, Barabási, Watz-Strogatz) | High | Low | Power
    law/fat-tail |'
  prefs: []
  type: TYPE_TB
- en: 'Table 1: Properties of networks'
  prefs: []
  type: TYPE_NORMAL
- en: The source of this table is *Markose at al. 2009*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most important network properties are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Density measures the extent of links between nodes relative to all possible
    links in a complete graph.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clustering (called transitivity in R) measures how interconnected each agent’s
    neighbors are and is considered to be the hallmark of social networks. The clustering
    coefficient for the entire network is the average of all coefficients for its
    nodes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Path length is the distance between two agents and is given by the number of
    edges that separate them; the average of the shortest paths characterizes the
    whole network. The longest shortest path in the network is called diameter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Degree is the number of connections the node has to other nodes. Degree distribution
    is the probability distribution of these degrees over the whole network.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Non-random regular networks* are highly ordered where each node connects to
    all of its nearest neighbors. A full graph can be generated with the `igraph`
    package’s `graph.full`, and partial networks can be generated with a similar function
    resulting in tree, lattices, ring, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: In contrast to regular networks, in a *pure random Erdős-Rényi network*, linkages
    are generated by choosing two nodes uniformly at random. As we are dealing with
    random numbers here, it is worth setting a custom seed and the state of the random
    number generator, so that it would return the same random number in all R sessions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When simulating an Erdős-Rényi graph, we have to set at least two parameters
    in advance: the number of the nodes (for example, 100) and the probability for
    drawing an edge between two arbitrary vertices (for example, 0.1):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following figure depicts a pure random network (Erdős-Rényi):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Representation, simulation, and visualization of financial networks](img/0933OS_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also calculate the main characteristics of the preceding network, which
    are density, clustering (transitivity), and average path length, from Table 1:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Graph density and transitivity are around 0.1, the initially-set edge probability
    and the difference is only due to the noise inherent in the small sample.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a *scale-free network*, degree distribution follows a power law; therefore
    vertices differ enormously in terms of their degree. *Small-world networks* constitute
    a special subset of scale-free networks where vertices tend to form cliques, resulting
    in the overabundance of weakly-linked dense hubs. Not surprisingly, clustering
    coefficient is remarkably high and average path is short in small-world networks.
    Preferential attachment and fitness have been proposed as mechanisms to explain
    power law degree distributions and clustering; see *Barabási-Albert (1999)* and
    *Bianconi-Barabási (2001)*. Social/financial networks are often modeled as small
    world. There are several ways of creating small world networks in R, for example,
    `watts.strogatz.game` or `barabasi.game`. Let us use the first one here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The following figure depicts a random scale-free network (Watts-Strogatz):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Representation, simulation, and visualization of financial networks](img/Image2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let us compare our Watts-Strogatz small-world network to the previous pure
    random Erdős-Rényi graph in terms of the main network measures:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding R chunk, we have stored the result of the Watts-Strogatz game
    in a variable called `b` that we plotted afterwards. Extracting the list of edges
    can be done easily with the `get.edgelist` function that would return a matrix
    of two columns. Here we show only the first five rows of the returned list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Other network manipulations are also possible in R. For example, we may wish
    to see the adjacency matrix of the graph with the help of the `get.adjacency`
    function. Or, it can be useful to randomize our network by permuting vertex IDs,
    which canbe done with `permute.vertices`. It can happen that we need to merge
    several vertices into one along with some vertex attributes by using `contract.vertices`.
    We can also create the `union` and `intersection` of several networks with some
    internal R functions named accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Analysis of networks’ structure and detection of topology changes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let us suppose we have access to a real-world database of an interbank
    market (randomized data for illustrative purpose), where banks lend to each other
    and lending banks report on their positions at the end of each day in the period
    of 2007-2010\. The database consists of 50 banks and the maturity of the loans
    is one day. In order to manipulate the real-world networks in R, it is advisable
    to convert our data into a CSV file and save it into our working directory. The
    following table (Table 2) shows the top lines of our CSV file:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Bank | Partner | Amount | Interest | Year | Month | Day |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | 21 | 5 | 7,9 | 2007 | 1 | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | 42 | 3 | 7,9 | 2007 | 1 | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| 10 | 11 | 0,35 | 7,8 | 2007 | 1 | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| 18 | 24 | 2 | 8 | 2007 | 1 | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | 11 | 1,3 | 7,8 | 2007 | 1 | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| 21 | 11 | 0,8 | 7,8 | 2007 | 1 | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| 21 | 2 | 5 | 7,75 | 2007 | 1 | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | 24 | 4 | 7,95 | 2007 | 1 | 3 |'
  prefs: []
  type: TYPE_TB
- en: 'Table 2: Database of an interbank market'
  prefs: []
  type: TYPE_NORMAL
- en: 'Source: The authors'
  prefs: []
  type: TYPE_NORMAL
- en: 'Each row contains a transaction: the reporting bank (the lender), its partner
    bank (the borrower), the loan amount, the interest rate, and the date of the transaction.
    We can read these details in our data from the CSV file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we have a table of seven columns and 21,314 rows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The size of the balance sheet of each bank is also available and is stored in
    a separate CSV file. The first column of the CSV file is assumed to contain symbolic
    vertex names, other columns will be added as additional vertex attributes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We can create graph objects using our data frames in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This function creates an `igraph` object. The data frames must contain the edge
    list in the first two columns. Additional columns are considered as edge attributes.
  prefs: []
  type: TYPE_NORMAL
- en: In the second step we can ask for the network’s basic properties.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The network is fully connected, meaning that during 2007-2010 all the banks
    traded with all the other banks at least once. We can check whether the network
    has multiple edges:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'R found many edges that are multiple, meaning that banks traded several times
    with the same partners. Let us also check whether the network has loops, that
    is, transactions where the reporting bank and the partner bank was the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we get a list of all the edges. It seems that there are some loops which
    must be data errors. If we wish to leave out all the loops and summarize the multiple
    edges, we can do it in one step by simplifying the network:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Having our graph simplified, we can plot it with relatively small arrows not
    to overcrowd the resulting figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The following figure depicts our real-world network:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Analysis of networks’ structure and detection of topology changes](img/0933OS_09_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the third step, we can apply complex analytical tools built in R to explore
    the inner structure of the network.
  prefs: []
  type: TYPE_NORMAL
- en: Communities (densely connected subgraphs) can be detected, for example, by the
    `walktrap.community` function, which finds densely connected subgraphs. The idea
    is that short random walks tend to stay in the same community.
  prefs: []
  type: TYPE_NORMAL
- en: Modularity is the share of the edges belonging to the given groups minus the
    expected share, if edges were distributed at purely random. Modularity ranges
    between [−1/2,1). If it is positive, it is the sign of clustering.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Besides the properties presented in Table 1 (density, transitivity, average
    path, and degree distribution), many other R functions can also be applied to
    characterize our network, for example, `graph.coreness`, `girth`, `cliques.number`,
    `reciprocity`, and so on. Further details can be found in the official igraph
    manual available at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://igraph.sourceforge.net/doc/html/](http://igraph.sourceforge.net/doc/html/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The market structures evolve in time. They show high stability in peacetime,
    meaning that regardless of numerous alterations, their fundamental topology remains
    the same, for example, see *Lublóy (2006)*. But fundamental changes may occur
    in times of crisis: markets dry out and refill, the number and the market share
    of active players change dramatically, and the role of the players may also change
    (for example, lenders become borrowers and vice versa), see for example, *Soramäki
    et al. (2006)* and *Bech-Atalay (2008)*.'
  prefs: []
  type: TYPE_NORMAL
- en: The default Lehman Brothers was announced on September 15, 2008 which had a
    deep impact on financial markets all around the world. Hence, it seems reasonable
    to compare network topologies before and after this event. In order to detect
    the fundamental changes in the topology, let us first create a series of monthly
    aggregated networks, then calculate network measures for each month and plot them
    as time series.
  prefs: []
  type: TYPE_NORMAL
- en: 'To match only a part of the data, the `subset` function can be useful. For
    example, to filter September of 2008 one may run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'In the next few examples we will iteratively subset a month of the original
    dataset and will also apply some functions on the subsets. This can be done with
    a basic loop, with different `apply` functions (especially `ddply` from the `plyr`
    package), or by aggregating the dataset by given dimensions. We start from aggregate
    measures and gradually zoom into details. Hence, let us see first, how aggregate
    quantity (sum of amounts in a month) changed over time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we have computed the `sum` of `Amount` in each `Year` and `Month` inside
    of `data` with the help of the `aggregate` command. Let us also `plot` the results
    as a monthly time series, using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The following figure depicts the evolution of the monthly amount over time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Analysis of networks’ structure and detection of topology changes](img/0933OS_09_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: On the above figure we can observe an important structural change just after
    the Lehman-fall. If we have a closer look at the network, it turns out that the
    inner structure of the network has also dramatically changed after the burst of
    the crisis. In order to demonstrate these changes, we can calculate and plot network
    measures month to month as time series. We calculate the case of graph density
    with a nested loop, computing the values for each month.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The following figure depicts the evolution of graph density over time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Analysis of networks’ structure and detection of topology changes](img/0933OS_09_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can see that after the Lehman-fall network density suddenly dropped, reflecting
    that transactions concentrated on fewer banks, most of the other network measures
    showed significant structural changes as well.
  prefs: []
  type: TYPE_NORMAL
- en: Contribution to systemic risk – identification of SIFIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A complex system is not simply the sum of its elements. It is possible that
    all entities are safe in themselves, but the system as a whole is still vulnerable.
    Systemic risk is the risk of the entire system collapsing due to one or several
    shocks. If we wish to identify the **systemically important financial institutions**
    (**SIFIs**) as it was proposed by BCBS (2011), we have to consider five factors
    contributing to systemic risk: size, interconnectedness, lack of substitutes,
    cross-jurisdictional activity, and complexity of the activities. When measuring
    interconnectedness, we can rely on network data and can apply several methods,
    for example, centrality measures, stress test, and core-periphery models.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we illustrate the first method based on an index of some centrality measures,
    as described in *Komárková et al.(2012)* and *von Peter (2007)*. Banks with the
    highest index-value can be considered as the most central ones, thus with the
    most SIFIs. Simpler centrality measures are based on fairly narrow information
    set containing only connections and directions, while edge weights and other attributes
    are completely set aside. For example, simpler centrality measures are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Degree (in/out/all)**: It shows the total number of incoming, outcoming,
    and all transactions where the bank was involved in.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Betweenness (directed/undirected)**: It shows the frequency with which a
    bank lies on the shortest path. When determining the shortest path, the network
    can be treated as directed or undirected. In the first case the shortest path
    is longer, therefore frequency is higher.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Closeness (in/out/all)**: It is the average of the reciprocal of the length
    of all shortest paths to other banks. This measure helps to identify banks with
    the broadest reach to other banks, including the smallest ones.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Eigenvector (in/out/all)**: It is the measure of how well a given bank is
    connected to other well-connected banks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let us take the period of 2007 to 2010 as a whole and concentrate on all the
    connections in a directed graph using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: We calculate the four preceding centrality measures and aggregate them into
    an index.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'When computing the index, we have to normalize the difference of the centrality
    measure of a given bank to the mean of the centrality measure over the whole population.
    For this end, we can construct a function if we do not want to use the built-in
    `scale` with various options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'If centrality measures are equally weighted, we will use the following formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we plot the distribution of the index and select the banks with the highest
    index value, as shown in the following figure, generated using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '![Contribution to systemic risk – identification of SIFIs](img/0933OS_09_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we have the index distribution, we have to decide which banks we consider
    important (for example, banks with index value higher than 2.5: 18, 12, 20, 17,
    9, and 10). Of course, the index could be completed with other centrality measures,
    that is, more advanced ones relying on broader information set; see for example,
    intermediacy in *von Peter (2007)*.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we focused on financial networks and used the `igraph` package
    of R, which provided effective tools for network simulation, manipulation, visualization,
    and analysis. We learned how to read in network data and how to explore the network's
    basic properties. We discovered that our illustrative market data exhibited significant
    structural changes due to the crisis. In the final part we showed a simple method
    of finding systematically important players within the network.
  prefs: []
  type: TYPE_NORMAL
