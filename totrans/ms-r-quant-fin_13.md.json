["```py\ninstall.packages(\"igraph\")\nlibrary(igraph)\n\n```", "```py\nadj_mtx <-  read.table(\"mtx.csv\", header = T, sep = \";\")\nadj_mtx <- as.matrix(adj_mtx)\nadj_mtx[is.na(adj_mtx)] <- 0\nadj_mtx[adj_mtx != 0] <- 1\nG <- graph.adjacency(adj_mtx, mode = \"undirected\")\n\n```", "```py\nCORE <- largest.cliques(G) \n\n```", "```py\nfor (i in 1:length(CORE)){ \ncore <- CORE[[i]]\nperiphery <- setdiff(1:33, core)\nV(G)$color[periphery] <- rgb(0,1,0)\nV(G)$color[core] <- rgb(1,0,0)\nprint(i)\nprint(core)\nprint(periphery)\n\n```", "```py\nH <- induced.subgraph(G, periphery)\nd <- mean(degree(H))\n\n```", "```py\nwindows()\nplot(G, vertex.color = V(G)$color, main = paste(\"Avg periphery degree:\", round(d,2) ) )}\n\n```", "```py\nLGD = 0.65\nset.seed(3052343)\nlibrary(igraph)\n\n```", "```py\nadj_mtx <-  read.table(\"mtx.csv\", header = T, sep = \";\")\nnode_w <-   read.table(\"puf.csv\", header = T, sep = \";\")\nnode_s <- read.table(\"sizes.csv\", header = T, sep = \";\")\nadj_mtx <- as.matrix(adj_mtx)\nadj_mtx[is.na(adj_mtx)] <- 0\n\n```", "```py\nG <- graph.adjacency((adj_mtx ), weighted = TRUE)\n\n```", "```py\nV(G)$default <- 0\nV(G)$capital <- as.numeric(as.character(node_w[,2]))\nV(G)$size <- as.numeric(as.character(node_s[,2]))\n\n```", "```py\nplot(G, layout = layout.kamada.kawai(G), edge.arrow.size=0.3, vertex.size = 10, vertex.label.cex = .75)\n\n```", "```py\nsim <- function(G, starting_node, l = 0.85, drawimage = TRUE){\nnode_color <- function(n,m) c(rgb(0,0.7,0),rainbow(m))[n+1]\n\n```", "```py\nstop_ <- FALSE\nj <- 1\ndefault <- list(starting_node)\n\n```", "```py\nwhile(!stop_){\nV(G)$default[default[[j]]] <- j\nj <- j + 1; stop_ <- TRUE\nfor( i in default[[j-1]]){V(G)$capital <- V(G)$capital - l*G[,i]}\ndefault[[j]] = setdiff((1:33)[V(G)$capital < 0], unlist(default));\nif( length( default[[j]] ) > 0) stop_ <- FALSE\n}\n\n```", "```py\nif(drawimage) plot(G, layout = layout.kamada.kawai(G), edge.arrow.size=0.3, vertex.size = 12.5, vertex.color = node_color(V(G)$default, 4*length(default)), vertex.label.cex = .75)\n\n```", "```py\nsum(V(G)$size[unlist(default)])/sum(V(G)$size)}\n\n```", "```py\nresult <- sapply(1:33, function(j) sim(G,j,LGD, FALSE))\n\n```", "```py\ndev.new(width=15,height=10)\nv <- barplot(result, names.arg = V(G)$name, cex.names = 0.5, ylim = c(0,1.1))\ntext(v, result, labels = paste(100*round(result, 2), \"%\", sep = \"\"), pos = 3, cex = 0.65)\n\n```"]