["```py\ninstall.packages(\"fOptions\")\nlibrary(fOptions)\n\n```", "```py\nGBSOption(TypeFlag = \"c\", S = 100, X = 100, Time = 1/2, r = 0.05, b = 0.05, sigma = 0.3)\n\n```", "```py\nParameters:\n Value:\n TypeFlag c \n S        100 \n X        100 \n Time     0.5 \n r        0.05 \n b        0.05 \n sigma    0.3 \nOption Price:\n 9.63487 \n\n```", "```py\nset.seed(2014)\nlibrary(fOptions)\nPrice_simulation <- function(S0, mu, sigma, rf, K, Time,  dt, plots = FALSE) {\n t <- seq(0, Time, by = dt)\n N <- length(t)\n W <- c(0,cumsum(rnorm(N-1)))\n S <- S0*exp((mu-sigma^2/2)*t + sigma*sqrt(dt)*W)\n delta <- rep(0, N-1)\n call_ <- rep(0, N-1)\n for(i in 1:(N-1) ){\n delta[i] <- GBSGreeks(\"Delta\", \"c\", S[i], K, Time-t[i], rf, rf, sigma)\n call_[i] <- GBSOption(\"c\", S[i], K, Time-t[i], rf, rf, sigma)@price}\n if(plots){\n dev.new(width=30, height=10)\n par(mfrow = c(1,3))\n plot(t, S, type = \"l\", main = \"Price of underlying\")\n plot(t[-length(t)], delta, type = \"l\", main = \"Delta\", xlab = \"t\")\n plot(t[-length(t)], call_ , type = \"l\", main = \"Price of option\", xlab = \"t\")\n }\n}\n\n```", "```py\nPrice_simulation(100, 0.2, 0.3, 0.05, 100, 0.5, 1/250, plots = TRUE)\n\n```", "```py\ncost_simulation = function(S0, mu, sigma, rf, K, Time,  dt){\nt <- seq(0, Time, by = dt)\nN <- length(t)\nW <- c(0,cumsum(rnorm(N-1)))\nS <- S0*exp((mu-sigma^2/2)*t + sigma*sqrt(dt)*W)\ndelta <- rep(0, N-1)\ncall_ <- rep(0, N-1)\nfor(i in 1:(N-1) ){\ndelta[i] <- GBSGreeks(\"Delta\", \"c\", S[i], K, Time-t[i], rf, rf, sigma)\ncall_[i] <- GBSOption(\"c\", S[i], K, Time-t[i], rf, rf, sigma)@price\n}\n\n```", "```py\nshare_cost <- rep(0,N-1)\ninterest_cost <- rep(0,N-1)\ntotal_cost <- rep(0, N-1)\nshare_cost[1] <- S[1]*delta[1]\ninterest_cost[1] <- (exp(rf*dt)-1) * share_cost[1]\ntotal_cost[1] <- share_cost[1] + interest_cost[1]\nfor(i in 2:(N-1)){\n share_cost[i] <- ( delta[i] - delta[i-1] ) * S[i]\n interest_cost[i] <- ( total_cost[i-1] + share_cost[i] ) * (exp(rf*dt)-1)\n total_cost[i] <- total_cost[i-1] + interest_cost[i] + share_cost[i]\n }\nc = max( S[N] - K , 0)\ncost = c - delta[N-1]*S[N] + total_cost[N-1]\nreturn(cost*exp(-Time*rf))\n}\n\n```", "```py\ncall_price = GBSOption(\"c\", 100, 100, 0.5, 0.05, 0.05, 0.3)@price\nA = rep(0, 1000)\nfor (i in 1:1000){A[i] = cost_simulation(100, .20, .30,.05, 100, 0.5, 1/52)}\nB = rep(0, 1000)\nfor (i in 1:1000){B[i] = cost_simulation(100, .20, .30,.05, 100, 0.5, 1/250)}\ndev.new(width=20, height=10)\npar(mfrow=c(1,2))\nhist(A, freq = F, main = paste(\"E = \",round(mean(A), 4) ,\"  sd = \",round(sd(A), 4)), xlim = c(6,14), ylim = c(0,0.7))\ncurve(dnorm(x, mean=mean(A), sd=sd(A)), col=\"darkblue\", lwd=2, add=TRUE, yaxt=\"n\")\nhist(B, freq = F, main = paste(\"E = \",round(mean(B), 4) ,\"  sd = \",round(sd(B), 4)), xlim = c(6,14), ylim = c(0,0.7))\ncurve(dnorm(x, mean=mean(B), sd=sd(B)), col=\"darkblue\", lwd=2, add=TRUE, yaxt=\"n\")\n\n```", "```py\nlibrary(fOptions)\ncost_simulation = function(S0, mu, sigma, rf, K, Time, dt, periods){\nt <- seq(0, Time, by = dt)\nN <- length(t)\nW = c(0,cumsum(rnorm(N-1)))\nS <- S0*exp((mu-sigma^2/2)*t + sigma*sqrt(dt)*W)\nSN = S[N]\ndelta <- rep(0, N-1)\ncall_ <- rep(0, N-1)\nfor(i in 1:(N-1) ){\ndelta[i] <- GBSGreeks(\"Delta\", \"c\", S[i], K, Time-t[i], rf, rf, sigma)\ncall_[i] <- GBSOption(\"c\", S[i], K, Time-t[i], rf, rf, sigma)@price\n}\nS = S[seq(1, N-1, by = periods)]\ndelta = delta[seq(1, N-1, by = periods)]\nm = length(S)\nshare_cost <- rep(0,m)\ninterest_cost <- rep(0,m)\ntotal_cost <- rep(0, m)\nshare_cost[1] <- S[1]*delta[1]\ninterest_cost[1] <- (exp(rf*dt*periods)-1) * share_cost[1]\ntotal_cost[1] <- share_cost[1] + interest_cost[1]\nfor(i in 2:(m)){\n share_cost[i] <- ( delta[i] - delta[i-1] ) * S[i]\n interest_cost[i] <- ( total_cost[i-1] + share_cost[i] ) * (exp(rf*dt*periods)-1)\n total_cost[i] <- total_cost[i-1] + interest_cost[i] + share_cost[i]\n }\nc = max( SN - K , 0)\ncost = c - delta[m]*SN + total_cost[m] \nreturn(cost*exp(-Time*rf))\n}\n\n```", "```py\ndev.new(width=30,height=20)\npar(mfrow = c(2,3))\ni = 0\nper = c(2,4,8,20,40,80)\ncall_price = GBSOption(\"c\", 100, 100, 0.5, 0.05, 0.05, 0.3)@price\nresults = matrix(0, 6, 5)\nrownames(results) = c(\"1/2 days\", \"1 day\", \"2 days\", \"1 week\", \"2 weeks\", \"4 weeks\")\ncolnames(results) = c(\"E\", \"lower\", \"upper\", \"v\", \"ratio\")\nfor (j in per){\n i = i+1\n A = rep(0, 1000)\n set.seed(10125987)\n for (h in 1:1000){A[h] = cost_simulation(100, .20, .30,.05, 100, 0.5, 1/1000,j)}\n E = mean(A)\n v = sd(A)\n results[i, 1] = E\n results[i, 2] = E-1.96*v/sqrt(1000)\n results[i, 3] = E+1.96*v/sqrt(1000)\n results[i, 4] = v\n results[i, 5] = v/call_price\n hist(A, freq = F, main = \"\", xlab = \"\", xlim = c(4,16), ylim = c(0,0.8))\n title(main = rownames(results)[i], sub = paste(\"E = \",round(E, 4) ,\"  sd = \",round(v, 4)))\n curve(dnorm(x, mean=mean(A), sd=sd(A)), col=\"darkblue\", lwd=2, add=TRUE, yaxt=\"n\")\n}\nprint(results)\ndev.new()\ncurve(dnorm(x,results[1,1], results[1,4]), 6,14, ylab = \"\", xlab = \"cost\")\nfor (l in 2:6) curve(dnorm(x, results[l,1], results[l,4]), add = TRUE, xlim = c(4,16), ylim = c(0,0.8), lty=l)\nlegend(legend=rownames(results), \"topright\", lty = 1:6)\n\n```", "```py\n E    lower     upper         v    ratio\n1/2 days 9.645018 9.616637  9.673399 0.4579025 0.047526\n1 day    9.638224 9.600381  9.676068 0.6105640 0,06337\n2 days   9.610501 9.558314  9.662687 0.8419825 0,087389\n1 week   9.647767 9.563375  9.732160 1.3616010 0,14132\n2 weeks  9.764237 9.647037  9.881436 1.8909048 0,196256\n4 weeks  9.919697 9.748393 10.091001 2.7638287 0,286857\n\n```", "```py\ncost_simulation = function(S0, mu, sigma, rf, K, Time, dt, periods, cost_per_trade)\n\n```", "```py\nshare_cost[1] <- S[1]*delta[1] + cost_per_trade\ninterest_cost[1] <- (exp(rf*dt*periods)-1) * share_cost[1]\ntotal_cost[1] <- share_cost[1] + interest_cost[1]\nfor(i in 2:m){\n share_cost[i] <- ( delta[i] - delta[i-1] ) * S[i] + cost_per_trade\n interest_cost[i] <- ( total_cost[i-1] + share_cost[i] ) * (exp(rf*dt*periods)-1)\n total_cost[i] <- total_cost[i-1] + interest_cost[i] + share_cost[i]\n }\n\n```", "```py\nshare_cost[1] <- S[1]*delta[1]*(1+trading_cost)\ninterest_cost[1] <- (exp(rf*dt*periods)-1) * share_cost[1]\ntotal_cost[1] <- share_cost[1] + interest_cost[1]\nfor(i in 2:m){\n share_cost[i] <- (( delta[i] - delta[i-1] ) * S[i]) + abs(( delta[i] - delta[i-1] ) * S[i]) * trading_cost\n interest_cost[i] <- ( total_cost[i-1] + share_cost[i] ) * (exp(rf*dt*periods)-1)\n total_cost[i] <- total_cost[i-1] + interest_cost[i] + share_cost[i]\n}\n\n```", "```py\nfor (i in 1:100)\n A[i] = cost_simulation(100, .20, .30,.05, 100, 0.5, 1/1000,j,.02)\n\n```", "```py\n E     lower   upper          v      ratio\n1/2 days 12.083775 11.966137 12.20141 0.6001933 0.06229386\n1 day    10.817594 10.643468 10.99172 0.8883994 0.09220668\n2 days   10.244342  9.999395 10.48929 1.2497261 0.12970866\n1 week    9.993442  9.612777 10.37411 1.9421682 0.20157700\n2 weeks  10.305498  9.737017 10.87398 2.9004106 0.30103266\n4 weeks  10.321880  9.603827 11.03993 3.6635388 0.38023748\n\n```", "```py\nfor (i in 1:100)\n A[i] = cost_simulation(100, .20, .30,.05, 100, 0.5, 1/1000,j, 0.01)\n\n```", "```py\n E    lower    upper         v     ratio\n1/2 days 13.56272  13.26897  13.85646 1.498715 0.1555512\n1 day    12.53723  12.28596  12.78850 1.282005 0.1330589\n2 days   11.89854  11.59787  12.19921 1.534010 0.1592144\n1 week   11.37828  10.96775  11.78880 2.094506 0.2173881\n2 weeks  11.55362  10.95111  12.15612 3.073993 0.3190487\n4 weeks  11.43771  10.69504  12.18038 3.789128 0.3932724\n\n```", "```py\nn_sim <- 1000\nthreshold <- 12\ncost_Sim <- function(cost = 0.01, n = n_sim, per = 1){a <- replicate(n, cost_simulation(100, .20, .30,.05, 100, 0.5, 1/1000,per,cost)); \nl <- list(mean(a), sd(a), quantile(a,0.95))}\nA <- sapply(seq(1,80) ,function(per) {print(per); set.seed(2019759); cost_Sim(per = per)})\ne <- unlist(A[1,])\ns <- unlist(A[2,])\nq <- unlist(A[3,])\nu <- e + s^2\nA <- cbind(t(A), u)\nz1 <- which.min(e)\nz2 <- which.min(s)\nz3 <- which.min(u)\n (paste(\"E min =\", z1, \"cost of hedge = \",e[z1],\" sd = \", s[z1]))\n (paste(\"s min =\", z2, \"cost of hedge = \",e[z2],\" sd = \", s[z2]))\n (paste(\"U min =\", z3, \"u = \",u[z3],\"cost of hedge = \",e[z3],\" sd = \", s[z3]))\nmatplot(A, type = \"l\", lty = 1:4, xlab = \"Î”t\", col = 1)\nlab_for_leg = c(\"E\", \"Sd\", \"95% quantile\",\"E + variance\")\nlegend(legend = lab_for_leg, \"bottomright\", cex = 0.6, lty = 1:4)\nabline( v = c(z1,z2,z3), lty = 6, col = \"grey\")\nabline( h = threshold, lty = 1, col = \"grey\")\ntext(c(z1,z1,z2,z2,z3,z3,z3),c(e[z1],s[z1],s[z2],e[z2],e[z3],s[z3],u[z3]),round(c(e[z1],s[z1],s[z2],e[z2],e[z3],s[z3],u[z3]),3), pos = 3, cex = 0.7)\ne2 <- e\ne2[q > threshold] <- max(e)\nz4 <- which.min(e2)\nz5 <- which.min(q)\nif( q[z5] < threshold ){\nprint(paste(\" min VaR = \", q[z4], \"at\", z4 ,\"E(cost | VaR < threshold = \" ,e[z4], \" s = \", s[z4]))\n } else {\n print(paste(\"optimization failed, min VaR = \", q[z5], \"at\", z5 , \"where cost = \", e[z5], \" s = \", s[z5])) \n }\n\n```", "```py\n [,1]     [,2]      [,3]     [,4] \n [1,] 14.568   0.3022379 15.05147 14.65935\n [2,] 12.10577 0.4471673 12.79622 12.30573\n...\n [79,] 10.00434 2.678289  14.51381 17.17757\n [80,] 10.03162 2.674291  14.41796 17.18345\n\n```", "```py\n\"E min = 50 cost of hedge =  9.79184040508574  sd =  2.21227796458088\"\n\"s min = 1 cost of hedge =  14.5680033393436  sd =  0.302237879069942\"\n\"U min = 8 u =  11.0296321604941 cost of hedge =  10.2898541853535  sd =  0.860103467694771\"\n\" min VaR =  11.8082026178249 at 14 E(cost | VaR < threshold =  10.0172915117802  s =  1.12757856083913\"\n\n```", "```py\n [,1]     [,2]     [,3]     [,4] \n [1,] 16.80509 2.746488 21.37177 24.34829\n [2,] 14.87962 1.974883 18.20097 18.77978\n...\n [79,] 11.2743  2.770777 15.89386 18.9515 \n [80,] 11.31251 2.758069 16.0346  18.91945\n\n```", "```py\n\"E min = 56 cost of hedge =  11.1495374978655  sd =  2.40795704676431\"\n\"s min = 9 cost of hedge =  12.4747301348104  sd =  1.28919873150291\"\n\"U min = 14 u =  13.9033123535802 cost of hedge =  12.0090095949856  sd =  1.37633671701175\"\n\"optimization failed, min VaR =  14.2623891995575 at 21 where cost =  11.7028044352096  s =  1.518297863428\"\n\n```"]