- en: '17'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deep Learning for Trading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter kicks off Part 4, which covers how several **deep learning** (**DL**)
    modeling techniques can be useful for investment and trading. DL has achieved
    numerous **breakthroughs in many domains**, ranging from image and speech recognition
    to robotics and intelligent agents that have drawn widespread attention and revived
    large-scale research into **artificial intelligence** (**AI**). The expectations
    are high that the rapid development will continue and many more solutions to difficult
    practical problems will emerge.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will present **feedforward neural networks** to introduce
    key elements of working with neural networks relevant to the various DL architectures
    covered in the following chapters. More specifically, we will demonstrate how
    to train large models efficiently using the **backpropagation algorithm** and
    manage the risks of overfitting. We will also show how to use the popular TensorFlow
    2 and PyTorch frameworks, which we will leverage throughout Part 4.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we will develop, backtest, and evaluate a trading strategy based on
    signals generated by a deep feedforward neural network. We will design and tune
    the neural network and analyze how key hyperparameter choices affect its performance.
  prefs: []
  type: TYPE_NORMAL
- en: 'In summary, after reading this chapter and reviewing the accompanying notebooks,
    you will know about:'
  prefs: []
  type: TYPE_NORMAL
- en: How DL solves AI challenges in complex domains
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Key innovations that have propelled DL to its current popularity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How feedforward networks learn representations from data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing and training deep **neural networks** (**NNs**) in Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing deep NNs using Keras, TensorFlow, and PyTorch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building and tuning a deep NN to predict asset returns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing and backtesting a trading strategy based on deep NN signals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the following chapters, we will build on this foundation to design various
    architectures suitable for different investment applications with a particular
    focus on alternative text and image data.
  prefs: []
  type: TYPE_NORMAL
- en: These include **recurrent neural networks** (**RNNs**) tailored to sequential
    data such as time series or natural language, and **convolutional neural networks**
    (**CNNs**), which are particularly well suited to image data but can also be used
    with time-series data. We will also cover deep unsupervised learning, including
    autoencoders and **generative adversarial networks** (**GANs**) as well as reinforcement
    learning to train agents that interactively learn from their environment.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the code samples for this chapter and links to additional resources
    in the corresponding directory of the GitHub repository. The notebooks include
    color versions of the images.
  prefs: []
  type: TYPE_NORMAL
- en: Deep learning – what's new and why it matters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **machine learning** (**ML**) algorithms covered in *Part 2* work well on
    a wide variety of important problems, including on text data, as demonstrated
    in *Part 3*. They have been less successful, however, in solving central AI problems
    such as recognizing speech or classifying objects in images. These limitations
    have motivated the development of DL, and the recent DL breakthroughs have greatly
    contributed to a resurgence of interest in AI. For a comprehensive introduction
    that includes and expands on many of the points in this section, see Goodfellow,
    Bengio, and Courville (2016), or for a much shorter version, see LeCun, Bengio,
    and Hinton (2015).
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we outline how DL overcomes many of the limitations of other
    ML algorithms. These limitations particularly constrain performance on high-dimensional
    and unstructured data that requires sophisticated efforts to extract informative
    features.
  prefs: []
  type: TYPE_NORMAL
- en: The ML techniques we covered in *Parts 2* and *3* are best suited for processing
    structured data with well-defined features. We saw, for example, how to convert
    text data into tabular data using the document-text matrix in *Chapter 14*, *Text
    Data for Trading – Sentiment Analysis*. DL overcomes the **challenge of designing
    informative features**, possibly by hand, by learning a representation of the
    data that better captures its characteristics with respect to the outcome.
  prefs: []
  type: TYPE_NORMAL
- en: More specifically, we'll see how DL learns a **hierarchical representation of
    the data**, and why this approach works well for high-dimensional, unstructured
    data. We will describe how NNs employ a multilayered, deep architecture to compose
    a set of nested functions and discover a hierarchical structure. These functions
    compute successive and increasingly abstract representations of the data in each
    layer based on the learning of the previous layer. We will also look at how the
    backpropagation algorithm adjusts the network parameters so that these representations
    best meet the model's objective.
  prefs: []
  type: TYPE_NORMAL
- en: We will also briefly outline how DL fits into the evolution of AI and the diverse
    set of approaches that aim to achieve the current goals of AI.
  prefs: []
  type: TYPE_NORMAL
- en: Hierarchical features tame high-dimensional data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As discussed throughout *Part 2*, the key challenge of supervised learning is
    to generalize from training data to new samples. Generalization becomes exponentially
    more difficult as the dimensionality of the data increases. We encountered the
    root causes of these difficulties as the curse of dimensionality in *Chapter 13*,
    *Data-Driven Risk Factors and Asset Allocation with Unsupervised Learning*.
  prefs: []
  type: TYPE_NORMAL
- en: 'One aspect of this curse is that volume grows exponentially with the number
    of dimensions: for a hypercube with edge length 10, volume increases from 10³
    to 10⁴ as its dimensionality increases from three to four. Conversely, the **data
    density for a given sample size drops exponentially**. In other words, the number
    of observations required to maintain a certain density grows exponentially.'
  prefs: []
  type: TYPE_NORMAL
- en: Another aspect is that functional relationships between the features and the
    output can become more complex when they are allowed to vary across a growing
    number of dimensions. As discussed in *Chapter 6*, *The Machine Learning Process*,
    ML algorithms struggle to learn **arbitrary functions in a high-dimensional space**
    because the number of candidates grows exponentially while the density of the
    data available to infer the relationship drops simultaneously. To mitigate this
    problem, algorithms hypothesize that the target function belongs to a certain
    class and impose constraints on the search for the optimal solution within that
    class for the problem at hand.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, algorithms typically assume that the output at a new point should
    be similar to the output at nearby training points. This prior **assumption of
    smoothness** or local constancy posits that the learned function will not change
    much in a small region, as illustrated by the k-nearest neighbor algorithm (see
    *Chapter 6*, *The Machine Learning Process*). However, as data density drops exponentially
    with a growing number of dimensions, the distance between training samples naturally
    rises. The notion of nearby training examples thus becomes less meaningful as
    the potential complexity of the target function increases.
  prefs: []
  type: TYPE_NORMAL
- en: For traditional ML algorithms, the number of parameters and required training
    samples is generally proportional to the number of regions in the input space
    that the algorithm is able to distinguish. DL is designed to overcome the challenges
    of learning an exponential number of regions from a limited number of training
    points by assuming that a hierarchy of features generates the data.
  prefs: []
  type: TYPE_NORMAL
- en: DL as representation learning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many AI tasks like image or speech recognition require knowledge about the world.
    One of the key challenges is to encode this knowledge so a computer can utilize
    it. For decades, the development of ML systems required considerable domain expertise
    to transform the raw data (such as image pixels) into an internal representation
    that a learning algorithm could use to detect or classify patterns.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, how much value an ML algorithm adds to a trading strategy depends
    greatly on our ability to engineer features that represent the predictive information
    in the data so that the algorithm can process it. Ideally, the features capture
    independent drivers of the outcome, as discussed in *Chapter 4*, *Financial Feature
    Engineering – How to Research Alpha Factors*, and throughout *Parts 2* and *3*
    when designing and evaluating factors that capture trading signals.
  prefs: []
  type: TYPE_NORMAL
- en: Rather than relying on hand-designed features, representation learning allows
    an ML algorithm to automatically discover the representation of the data most
    useful for detecting or classifying patterns. DL combines this technique with
    specific assumptions about the nature of the features. See Bengio, Courville,
    and Vincent (2013) for additional information.
  prefs: []
  type: TYPE_NORMAL
- en: How DL extracts hierarchical features from data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The core idea behind DL is that a multi-level hierarchy of features has generated
    the data. Consequently, a DL model encodes the prior belief that the target function
    is composed of a nested set of simpler functions. This assumption permits an exponential
    gain in the number of regions that can be distinguished for a given number of
    training samples.
  prefs: []
  type: TYPE_NORMAL
- en: In other words, DL is a representation learning method that extracts a hierarchy
    of concepts from the data. It learns this hierarchical representation by **composing
    simple but non-linear functions** that successively transform the representation
    of one level (starting with the input data) into a new representation at a higher,
    slightly more abstract level. By combining enough of these transformations, DL
    is able to learn very complex functions.
  prefs: []
  type: TYPE_NORMAL
- en: Applied to a **classification task**, for example, higher levels of representation
    tend to amplify the aspects of the data most helpful for discriminating objects
    while suppressing irrelevant sources of variation. As we will see in more detail
    in *Chapter 18*, *CNNs for Financial Time Series and Satellite Images*, raw image
    data is just a two- or three-dimensional array of pixel values. The first layer
    of representation typically learns features that focus on the presence or absence
    of edges at particular orientations and locations. The second layer often learns
    motifs that depend on particular edge arrangements, regardless of small variations
    in their positions. The following layer may assemble motifs to represent parts
    of relevant objects, and subsequent layers would detect objects as combinations
    of these parts.
  prefs: []
  type: TYPE_NORMAL
- en: The **key breakthrough of DL** is that a general-purpose learning algorithm
    can extract hierarchical features suitable for modeling high-dimensional, unstructured
    data in a way that is infinitely more scalable than human engineering. It is thus
    no surprise that the rise of DL parallels the large-scale availability of unstructured
    image or text data. To the extent that these data sources also figure prominently
    among alternative data, DL has become highly relevant for algorithmic trading.
  prefs: []
  type: TYPE_NORMAL
- en: Good and bad news – the universal approximation theorem
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **universal approximation theorem** formalizes the ability of NNs to capture
    arbitrary relationships between input and output data. George Cybenko (1989) demonstrated
    that single-layer NNs using sigmoid activation functions can represent any continuous
    function on a closed and bounded subset of `Rn.` Kurt Hornik (1991) further showed
    that it is not the specific shape of the activation function but rather the **multilayered
    architecture** that enables the hierarchical feature representation, which in
    turn allows NNs to approximate universal functions.
  prefs: []
  type: TYPE_NORMAL
- en: However, the theorem does not help us identify the network architecture required
    to represent a specific target function. We will see in the last section of this
    chapter that there are numerous parameters to optimize, including the network's
    width and depth, the number of connections between neurons, and the type of activation
    functions.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, the ability to represent arbitrary functions does not imply that
    a network can actually learn the parameters for a given function. It took over
    two decades for backpropagation, the most popular learning algorithm for NNs to
    become effective at scale. Unfortunately, given the highly nonlinear nature of
    the optimization problem, there is no guarantee that it will find the absolute
    best rather than just a relatively good solution.
  prefs: []
  type: TYPE_NORMAL
- en: How DL relates to ML and AI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AI has a long history, going back at least to the 1950s as an academic field
    and much longer as a subject of human inquiry, but has experienced several waves
    of ebbing and flowing enthusiasm since (see Nilsson, 2009, for an in-depth survey).
    ML is an important subfield with a long history in related disciplines such as
    statistics and became prominent in the 1980s. As we have just discussed, and as
    depicted in *Figure 17.1*, DL is a form of representation learning and is itself
    a subfield of ML.
  prefs: []
  type: TYPE_NORMAL
- en: The initial goal of AI was to achieve **general AI**, conceived as the ability
    to solve problems considered to require human-level intelligence, and to reason
    and draw logical conclusions about the world and automatically improve itself.
    AI applications that do not involve ML include knowledge bases that encode information
    about the world, combined with languages for logical operations.
  prefs: []
  type: TYPE_NORMAL
- en: Historically, much AI effort went into developing **rule-based systems** that
    aimed to capture expert knowledge and decision-making rules, but hard-coding these
    rules frequently failed due to excessive complexity. In contrast, ML implies a
    **probabilistic approach** that learns rules from data and aims at circumventing
    the limitations of human-designed rule-based systems. It also involves a shift
    to narrower, task-specific objectives.
  prefs: []
  type: TYPE_NORMAL
- en: The following figure sketches the relationship between the various AI subfields,
    outlines their goals, and highlights their relevance on a timeline.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.1: AI timeline and subfields'
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will see how to actually build a neural network.
  prefs: []
  type: TYPE_NORMAL
- en: Designing an NN
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DL relies on **NNs**, which consist of a few key building blocks, which in turn
    can be configured in a multitude of ways. In this section, we introduce how NNs
    work and illustrate their most important components used to design different architectures.
  prefs: []
  type: TYPE_NORMAL
- en: '(Artificial) NNs were originally inspired by biological models of learning
    like the human brain, either in an attempt to mimic how it works and achieve similar
    success, or to gain a better understanding through simulation. Current NN research
    draws less on neuroscience, not least since our understanding of the brain has
    not yet reached a sufficient level of granularity. Another constraint is overall
    size: even if the number of neurons used in NNs continued to double every year
    since their inception in the 1950s, they would only reach the scale of the human
    brain around 2050.'
  prefs: []
  type: TYPE_NORMAL
- en: We will also explain how **backpropagation**, often simply called **backprop**,
    uses gradient information (the value of the partial derivative of the cost function
    with respect to a parameter) to adjust all neural network parameters based on
    training errors. The composition of various nonlinear modules implies that the
    optimization of the objective function can be quite challenging. We also introduce
    refinements of backpropagation that aim to accelerate the learning process.
  prefs: []
  type: TYPE_NORMAL
- en: A simple feedforward neural network architecture
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we introduce **feedforward NNs**,which are based on the **multilayer
    perceptron** (**MLP**) and consist of one or more hidden layers that connect the
    input to the output layer. In feedforward NNs, information only flows from input
    to output, such that they can be represented as directed acyclic graphs, as in
    the following figure. In contrast, **recurrent neural networks** (**RNNs**; see
    *Chapter 19*, *RNNs for Multivariate Time Series and Sentiment Analysis*) include
    loops from the output back to the input to track or memorize past patterns and
    events.
  prefs: []
  type: TYPE_NORMAL
- en: We will first describe the feedforward NN architecture and how to implement
    it using NumPy. Then we will explain how backpropagation learns the NN weights
    and implement it in Python to train a binary classification network that produces
    perfect results even though the classes are not linearly separable. See the notebook
    `build_and_train_feedforward_nn` for implementation details.
  prefs: []
  type: TYPE_NORMAL
- en: A feedforward NN consists of several **layers**, each of which receives a sample
    of input data and produces an output. The **chain of transformations** starts
    with the input layer, which passes the source data to one of several internal
    or hidden layers, and ends with the output layer, which computes a result for
    comparison with the sample's output value.
  prefs: []
  type: TYPE_NORMAL
- en: The hidden and output layers consist of nodes or neurons. Nodes of a **fully
    connected** or dense layer connect to some or all nodes of the previous layer.
    The network architecture can be summarized by its depth, measured by the number
    of hidden layers, or the width and the number of nodes of each layer.
  prefs: []
  type: TYPE_NORMAL
- en: Each connection has a **weight** used to compute a linear combination of the
    input values. A layer may also have a **bias** node that always outputs a 1 and
    is used by the nodes in the subsequent layer, like a constant in linear regression.
    The goal of the training phase is to learn values for these weights that optimize
    the network's predictive performance.
  prefs: []
  type: TYPE_NORMAL
- en: Each node of the hidden layers computes the **dot product** of the weights and
    the output of the previous layer. An **activation function** transforms the result,
    which becomes the input to the subsequent layer. This transformation is typically
    nonlinear (like the sigmoid function used for logistic regression; see *Chapter
    7*, *Linear Models – From Risk Factors to Return Forecasts,* on linear models)
    so that the network can learn nonlinear relationships; we'll discuss common activation
    functions in the next section. The output layer computes the linear combination
    of the output of the last hidden layer with its weights and uses an activation
    function that matches the type of ML problem.
  prefs: []
  type: TYPE_NORMAL
- en: The computation of the network output from the inputs thus flows through a chain
    of nested functions and is called **forward propagation**. *Figure 17.2* illustrates
    a single-layer feedforward NN with a two-dimensional input vector, a hidden layer
    of width three, and two nodes in the output layer. This architecture is simple
    enough, so we can still easily graph it yet illustrate the key concepts.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.2: A feedforward architecture with one hidden layer'
  prefs: []
  type: TYPE_NORMAL
- en: The **network graph** shows that each of the three hidden layer nodes (not counting
    the bias) has three weights, one for the input layer bias and two for each of
    the two input variables. Similarly, each output layer node has four weights to
    compute the product sum or dot product of the hidden layer bias and activations.
    In total, there are 17 parameters to be learned.
  prefs: []
  type: TYPE_NORMAL
- en: The **forward propagation** panel on the right of the figure lists the computations
    for an example node at the hidden and output layers, *h* and *o*, respectively.
    The first node in the hidden layer applies the sigmoid function to the linear
    combination *z* of its weights and inputs akin to logistic regression. The hidden
    layer thus runs three logistic regressions in parallel, while the backpropagation
    algorithm ensures that their parameters will most likely differ to best inform
    subsequent layers.
  prefs: []
  type: TYPE_NORMAL
- en: The output layer uses a **softmax** activation function (see *Chapter 6*, *The
    Machine Learning Process*) that generalizes the logistic sigmoid function to multiple
    classes. It adjusts the dot product of the hidden layer output with its weight
    to represent probabilities for the classes (only two in this case to simplify
    the presentation).
  prefs: []
  type: TYPE_NORMAL
- en: 'The forward propagation can also be expressed as nested functions, where *h*
    again represents the hidden layer and *o* the output layer to produce the NN estimate
    of the output: ![](img/B15439_17_001.png).'
  prefs: []
  type: TYPE_NORMAL
- en: Key design choices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some NN design choices resemble those for other supervised learning models.
    For example, the output is dictated by the type of the ML problem such as regression,
    classification, or ranking. Given the output, we need to select a cost function
    to measure prediction success and failure, and an algorithm that optimizes the
    network parameters to minimize the cost.
  prefs: []
  type: TYPE_NORMAL
- en: NN-specific choices include the numbers of layers and nodes per layer, the connections
    between nodes of different layers, and the type of activation functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'A key concern is **training efficiency**: the functional form of activations
    can facilitate or hinder the flow of the gradient information available to the
    backpropagation algorithm that adjusts the weights in response to training errors.
    Functions with flat regions for large input value ranges have a very low gradient
    and can impede training progress when parameter values get stuck in such a range.'
  prefs: []
  type: TYPE_NORMAL
- en: Some architectures add **skip connections** that establish direct links beyond
    neighboring layers to facilitate the flow of gradient information. On the other
    hand, the deliberate omission of connections can reduce the number of parameters
    to limit the network's capacity and possibly lower the generalization error, while
    also cutting the computational cost.
  prefs: []
  type: TYPE_NORMAL
- en: Hidden units and activation functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Several nonlinear activation functions besides the sigmoid function have been
    used successfully. Their design remains an area of research because they are the
    key element that allows the NN to learn nonlinear relationships. They also have
    a critical impact on the training process because their derivatives determine
    how errors translate into weight adjustments.
  prefs: []
  type: TYPE_NORMAL
- en: A very popular activation function is the **rectiﬁed linear unit** (**ReLU**).
    The activation is computed as *g*(*z*) = max(0, *z*) for a given activation *z*,
    resulting in a functional form similar to the payoff for a call option. The derivative
    is constant whenever the unit is active. ReLUs are usually combined with an affine
    input transformation that requires the presence of a bias node. Their discovery
    has greatly improved the performance of feedforward networks compared to sigmoid
    units, and they are often recommended as the default. There are several ReLU extensions
    that aim to address the limitations of ReLU to learn via gradient descent when
    they are not active and their gradient is zero (Goodfellow, Bengio, and Courville,
    2016).
  prefs: []
  type: TYPE_NORMAL
- en: Another alternative to the logistic function σ is the **hyperbolic tangent function
    tanh**, which produces output values in the ranges [-1, 1]. They are closely related
    because ![](img/B15439_17_002.png). Both functions suffer from saturation because
    their gradient becomes very small for very low and high input values. However,
    tanh often performs better because it more closely resembles the identity function
    so that for small activation values, the network behaves more like a linear model,
    which in turn facilitates training.
  prefs: []
  type: TYPE_NORMAL
- en: Output units and cost functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The choice of NN output format and cost function depends on the type of supervised
    learning problem:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Regression problems** use a linear output unit that computes the dot product
    of its weights with the final hidden layer activations, typically in conjunction
    with mean squared error cost'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Binary classification** uses sigmoid output units to model a Bernoulli distribution
    just like logistic regression with hidden activations as input'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multiclass problems** rely on softmax units that generalize the logistic
    sigmoid and model a discrete distribution over more than two classes, as demonstrated
    earlier'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Binary and multiclass problems typically use cross-entropy loss, which significantly
    improves training efficacy compared to mean squared error (see *Chapter 6*, *The
    Machine Learning Process*, for additional information on loss functions).
  prefs: []
  type: TYPE_NORMAL
- en: How to regularize deep NNs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The downside of the capacity of NNs to approximate arbitrary functions is the
    greatly increased risk of overfitting. The best **protection against overfitting**
    is to train the model on a larger dataset. Data augmentation, such as creating
    slightly modified versions of images, is a powerful alternative approach. The
    generation of synthetic financial training data for this purpose is an active
    research area that we will address in *Chapter 20*, *Autoencoders for Conditional
    Risk Factors and Asset Pricing* (see, for example, Fu et al. 2019).
  prefs: []
  type: TYPE_NORMAL
- en: As an alternative or complement to obtaining more data, regularization can help
    mitigate the risk of overfitting. For all models discussed so far in this book,
    there is some form of regularization that modiﬁes the learning algorithm to reduce
    its generalization error without negatively affecting its training error. Examples
    include the penalties added to the ridge and lasso regression objectives and the
    split or depth constraints used with decision trees and tree-based ensemble models.
  prefs: []
  type: TYPE_NORMAL
- en: Frequently, regularization takes the form of a soft constraint on the parameter
    values that trades off some additional bias for lower variance. A common practical
    finding is that the model with the lowest generalization error is not the model
    with the exact right size of parameters, but rather a larger model that has been
    well regularized. Popular NN regularization techniques that can be used in combination
    include parameter norm penalties, early stopping, and dropout.
  prefs: []
  type: TYPE_NORMAL
- en: Parameter norm penalties
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We encountered **parameter norm penalties** for lasso and ridge regression as
    **L1 and L2 regularization**, respectively, in *Chapter 7*, *Linear Models – From
    Risk Factors to Return Forecasts*. In the NN context, parameter norm penalties
    similarly modify the objective function by adding a term that represents the L1
    or L2 norm of the parameters, weighted by a hyperparameter that requires tuning.
    For NN, the bias parameters are usually not constrained, only the weights.
  prefs: []
  type: TYPE_NORMAL
- en: L1 regularization can produce sparse parameter estimates by reducing weights
    all the way to zero. L2 regularization, in contrast, preserves directions along
    which the parameters signiﬁcantly reduce the cost function. Penalties or hyperparameter
    values can vary across layers, but the added tuning complexity quickly becomes
    prohibitive.
  prefs: []
  type: TYPE_NORMAL
- en: Early stopping
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We encountered **early stopping** as a regularization technique in *Chapter
    12*, *Boosting Your Trading Strategy*. It is perhaps the most common NN regularization
    method because it is both effective and simple to use: it monitors the model''s
    performance on a validation set and stops training when the performance ceases
    to improve for a certain number of observations to prevent overfitting.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Early stopping can be viewed as **efficient hyperparameter selection** that
    automatically determines the correct amount of regularization, whereas parameter
    penalties require hyperparameter tuning to identify the ideal weight decay. Just
    be careful to avoid **lookahead bias**: backtest results will be exceedingly positive
    when early stopping uses out-of-sample data that would not be available during
    a real-life implementation of the strategy.'
  prefs: []
  type: TYPE_NORMAL
- en: Dropout
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Dropout** refers to the randomized omission of individual units with a given
    probability during forward or backward propagation. As a result, these omitted
    units do not contribute to the training error or receive updates.'
  prefs: []
  type: TYPE_NORMAL
- en: The technique is computationally inexpensive and does not constrain the choice
    of model or training procedure. While more iterations are necessary to achieve
    the same amount of learning, each iteration is faster due to the lower computational
    cost. Dropout reduces the risk of overfitting by preventing units from compensating
    for mistakes made by other units during the training process.
  prefs: []
  type: TYPE_NORMAL
- en: Training faster – optimizations for deep learning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Backprop refers to the computation of the gradient of the cost function with
    respect to the internal parameter we wish to update and the use of this information
    to update the parameter values. The gradient is useful because it indicates the
    direction of parameter change that causes the maximal increase in the cost function.
    Hence, adjusting the parameters according to the negative gradient produces an
    optimal cost reduction, at least for a region very close to the observed samples.
    See Ruder (2017) for an excellent overview of key gradient descent optimization
    algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: 'Training deep NNs can be time-consuming due to the nonconvex objective function
    and the potentially large number of parameters. Several challenges can significantly
    delay convergence, find a poor optimum, or cause oscillations or divergence from
    the target:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Local minima** can prevent convergence to a global optimum and cause poor
    performance'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Flat regions with low gradients** that are not a local minimum can also prevent
    convergence while most likely being distant from the global optimum'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Steep regions with high gradients** resulting from multiplying several large
    weights can cause excessive adjustments'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deep architectures or long-term dependencies in an RNN require the multiplication
    of many weights during backpropagation, leading to **vanishing gradients** so
    that at least parts of the NN receive few or no updates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Several algorithms have been developed to address some of these challenges,
    namely variations of stochastic gradient descent and approaches that use adaptive
    learning rates. There is no single best algorithm, although adaptive learning
    rates have shown some promise.
  prefs: []
  type: TYPE_NORMAL
- en: Stochastic gradient descent
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Gradient descent iteratively adjusts these parameters using the gradient information.
    For a given parameter ![](img/B15439_17_003.png), the basic gradient descent rule
    adjusts the value by the negative gradient of the loss function with respect to
    this parameter, multiplied by a learning rate ![](img/B15439_17_004.png):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_005.png)'
  prefs: []
  type: TYPE_IMG
- en: The gradient can be evaluated for all training data, a randomized batch of data,
    or individual observations (called online learning). Random samples give rise
    to **stochastic gradient descent** (**SGD**), which often leads to faster convergence
    if random samples are an unbiased estimate of the gradient direction throughout
    the training process.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, there are numerous challenges: it can be difficult to define a learning
    rate or a rate schedule that facilitates efficient convergence ex ante—too low
    a rate prolongs the process, and too high a rate can lead to repeated overshooting
    and oscillation around or even divergence from a minimum. Furthermore, the same
    learning rate may not be adequate for all parameters, that is, in all directions
    of change.'
  prefs: []
  type: TYPE_NORMAL
- en: Momentum
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A popular refinement of basic gradient descent adds momentum to **accelerate
    the convergence to a local minimum**. Illustrations of momentum often use the
    example of a local optimum at the center of an elongated ravine (while in practice
    the dimensionality would be much higher than three). It implies a minimum inside
    a deep and narrow canyon with very steep walls that have a large gradient on one
    side and a much gentler slope towards a local minimum at the bottom of this region
    on the other side. Gradient descent naturally follows the steep gradient and will
    make repeated adjustments up and down the walls of the canyons with much slower
    movements towards the minimum.
  prefs: []
  type: TYPE_NORMAL
- en: 'Momentum aims to address such a situation by **tracking recent directions**
    and adjusting the parameters by a weighted average of the most recent gradient
    and the currently computed value. It uses a momentum term ![](img/B15439_17_037.png)
    to weigh the contribution of the latest adjustment to this iteration''s update
    *v*[t]:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_006.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Nesterov momentum** is a simple change to normal momentum. Here, the gradient
    term is not computed at the current parameter space position ![](img/Image74692.png)
    but instead from an intermediate position. The goal is to correct for the momentum
    term overshooting or pointing in the wrong direction (Sutskever et al. 2013).'
  prefs: []
  type: TYPE_NORMAL
- en: Adaptive learning rates
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The choice of the appropriate learning rate is very challenging as highlighted
    in the previous subsection on stochastic gradient descent. At the same time, it
    is one of the most important parameters that strongly impacts training time and
    generalization performance.
  prefs: []
  type: TYPE_NORMAL
- en: While momentum addresses some of the issues with learning rates, it does so
    at the expense of introducing another hyperparameter, the **momentum rate**. Several
    algorithms aim to adapt the learning rate throughout the training process based
    on gradient information.
  prefs: []
  type: TYPE_NORMAL
- en: AdaGrad
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: AdaGrad accumulates all historical, parameter-specific gradient information
    and continues to rescale the learning rate inversely proportional to the squared
    cumulative gradient for a given parameter. The goal is to slow down changes for
    parameters that have already changed a lot and to encourage adjustments for those
    that haven't.
  prefs: []
  type: TYPE_NORMAL
- en: AdaGrad is designed to perform well on convex functions and has had a mixed
    performance in a DL context because it can reduce the learning rate too quickly
    based on early gradient information.
  prefs: []
  type: TYPE_NORMAL
- en: RMSProp
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: RMSProp modifies AdaGrad to use an exponentially weighted average of the cumulative
    gradient information. The goal is to put more emphasis on recent gradients. It
    also introduces a new hyperparameter that controls the length of the moving average.
  prefs: []
  type: TYPE_NORMAL
- en: RMSProp is a popular algorithm that often performs well, provided by the various
    libraries that we will introduce later and routinely used in practice.
  prefs: []
  type: TYPE_NORMAL
- en: Adam
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Adam stands for **adaptive moment derivation** and combines aspects of RMSProp
    with Momentum. It is considered fairly robust and often used as the default optimization
    algorithm (Kingma and Ba, 2014).
  prefs: []
  type: TYPE_NORMAL
- en: 'Adam has several hyperparameters with recommended default values that may benefit
    from some tuning:'
  prefs: []
  type: TYPE_NORMAL
- en: '**alpha**: The learning rate or step size determines how much weights are updated
    so that larger (smaller) values speed up (slow down) learning before the rate
    is updated; many libraries use the 0.001 default'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**beta**[1]: The exponential decay rate for the first moment estimates; typically
    set to 0.9'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**beta**[2]. The exponential decay rate for the second-moment estimates; usually
    set to 0.999'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**epsilon**: A very small number to prevent division by zero; often set to
    1e-8'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary – how to tune key hyperparameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Hyperparameter optimization aims at **tuning the capacity of the model** so
    that it matches the complexity of the relationship between the input of the data.
    Excess capacity makes overfitting likely and requires either more data that introduces
    additional information into the learning process, reducing the size of the model,
    or more aggressive use of the various regularization tools just described.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **principal diagnostic tool** is the behavior of training and validation
    error described in *Chapter 6*, *The Machine Learning Process*: if the validation
    error worsens while the training error continues to drop, the model is overfitting
    because its capacity is too high. On the other hand, if performance falls short
    of expectations, increasing the size of the model may be called for.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The most important aspect of parameter optimization is the architecture itself
    as it largely determines the number of parameters: other things being equal, more
    or wider hidden layers increase the capacity. As mentioned before, the best performance
    is often associated with models that have excess capacity but are well regularized
    using mechanisms like dropout or L1/L2 penalties.'
  prefs: []
  type: TYPE_NORMAL
- en: In addition to **balancing model size and regularization**, it is important
    to tune the **learning rate** because it can undermine the optimization process
    and reduce the effective model capacity. The adaptive optimization algorithms
    offer a good starting point as described for Adam, the most popular option.
  prefs: []
  type: TYPE_NORMAL
- en: A neural network from scratch in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To gain a better understanding of how NNs work, we will formulate the single-layer
    architecture and forward propagation computations displayed in *Figure 17.2* using
    matrix algebra and implement it using NumPy. You can find the code samples in
    the notebook `build_and_train_feedforward_nn`.
  prefs: []
  type: TYPE_NORMAL
- en: The input layer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The architecture shown in *Figure 17.2* is designed for two-dimensional input
    data *X* that represents two different classes *Y*. In matrix form, both *X* and
    *Y* are of shape ![](img/B15439_17_009.png):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_010.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will generate 50,000 random binary samples in the form of two concentric
    circles with different radius using scikit-learn''s `make_circles` function so
    that the classes are not linearly separable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We then convert the one-dimensional output into a two-dimensional array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '*Figure 17.3* shows a scatterplot of the data that is clearly not linearly
    separable:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.3: Synthetic data for binary classification'
  prefs: []
  type: TYPE_NORMAL
- en: The hidden layer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The hidden layer *h* projects the two-dimensional input into a three-dimensional
    space using the weights W^h and translates the result by the bias vector b^h.
    To perform this affine transformation, the hidden layer weights are represented
    by a ![](img/B15439_17_011.png) matrix W^h, and the hidden layer bias vector by
    a three-dimensional vector:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_012.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The hidden layer activations *H* result from the application of the sigmoid
    function to the dot product of the input data and the weights after adding the
    bias vector:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_013.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To implement the hidden layer using NumPy, we first define the `logistic` sigmoid
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We then define a function that computes the hidden layer activations as a function
    of the relevant inputs, weights, and bias values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The output layer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The output layer compresses the three-dimensional hidden layer activations
    *H* back to two dimensions using a ![](img/B15439_17_014.png) weight matrix W^o
    and a two-dimensional bias vector **b**^o:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_015.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The linear combination of the hidden layer outputs results in an ![](img/B15439_17_016.png)
    matrix **Z**^o:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_017.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The output layer activations are computed by the softmax function ![](img/B15439_17_018.png)
    that normalizes the **Z**^o to conform to the conventions used for discrete probability
    distributions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_019.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We create a softmax function in Python as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'As defined here, the output layer activations depend on the hidden layer activations
    and the output layer weights and biases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now we have all the components we need to integrate the layers and compute the
    NN output directly from the input.
  prefs: []
  type: TYPE_NORMAL
- en: Forward propagation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `forward_prop` function combines the previous operations to yield the output
    activations from the input data as a function of weights and biases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The `predict` function produces the binary class predictions given weights,
    biases, and input data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The cross-entropy cost function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The final piece is the cost function to evaluate the NN output based on the
    given label. The cost function *J* uses the cross-entropy loss ![](img/B15439_17_020.png),
    which sums the deviations of the predictions for each class *c* from the actual
    outcome:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_021.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It takes the following form in Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: How to implement backprop using Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To update the NN weights and bias values using backprop, we need to compute
    the gradient of the cost function. The gradient represents the partial derivative
    of the cost function with respect to the target parameter.
  prefs: []
  type: TYPE_NORMAL
- en: How to compute the gradient
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The NN composes a set of nested functions as highlighted earlier. Hence, the
    gradient of the loss function with respect to internal, hidden parameters is computed
    using the chain rule of calculus.
  prefs: []
  type: TYPE_NORMAL
- en: 'For scalar values, given the functions *z* = *h*(*x*) and *y* = *o*(*h*(*x*))
    = *o* (*z*), we compute the derivative of* y* with respect to *x* using the chain
    rule as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_022.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For vectors, with ![](img/B15439_17_023.png) and ![](img/B15439_17_024.png)
    so that the hidden layer *h* maps from R^n to R^m and *z* = *h*(*x*) and *y* =
    *o* (*z*), we get:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_025.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can express this more concisely using matrix notation using the ![](img/B15439_17_026.png)
    Jacobian matrix of *h*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_027.png)'
  prefs: []
  type: TYPE_IMG
- en: 'which contains the partial derivatives for each of the *m* components of *z*
    with respect to each of the *n* inputs *x*. The gradient ![](img/B15439_17_028.png)
    of *y* with respect to *x* contains all partial derivatives and can thus be written
    as:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_029.png)'
  prefs: []
  type: TYPE_IMG
- en: The loss function gradient
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The derivative of the cross-entropy loss function *J* with respect to each
    output layer activation *i* = 1, ..., *N* is a very simple expression (see the
    notebook for details), shown below on the left for scalar values and on the right
    in matrix notation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_030.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We define `loss_gradient` function accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The output layer gradients
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To propagate the update back to the output layer weights, we use the gradient
    of the loss function *J* with respect to the weight matrix:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_031.png)'
  prefs: []
  type: TYPE_IMG
- en: 'and for the bias:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_032.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can now define `output_weight_gradient` and `output_bias_gradient` accordingly,
    both taking the loss gradient ![](img/B15439_17_033.png) as input:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The hidden layer gradients
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The gradient of the loss function with respect to the hidden layer values computes
    as follows, where ![](img/B15439_17_034.png) refers to the element-wise matrix
    product:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_035.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We define a `hidden_layer_gradient` function to encode this result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The gradients for hidden layer weights and biases are:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_036.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The corresponding functions are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Putting it all together
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To prepare for the training of our network, we create a function that combines
    the previous gradient definition and computes the relevant weight and bias updates
    from the training data and labels, and the current weight and bias values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Testing the gradients
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The notebook contains a test function that compares the gradient derived previously
    analytically using multivariate calculus to a numerical estimate that we obtain
    by slightly perturbing individual parameters. The test function validates that
    the resulting change in output value is similar to the change estimated by the
    analytical gradient.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing momentum updates using Python
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To incorporate momentum into the parameter updates, define an `update_momentum`
    function that combines the results of the `compute_gradients` function we just
    used with the most recent momentum updates for each parameter matrix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The `update_params` function performs the actual updates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Training the network
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To train the network, we first randomly initialize all network parameters using
    a standard normal distribution (see the notebook). For a given number of iterations
    or epochs, we run momentum updates and compute the training loss as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '*Figure 17.4* plots the training loss over 50,000 iterations for 50,000 training
    samples with a momentum term of 0.5 and a learning rate of 1e-4\. It shows that
    it takes over 5,000 iterations for the loss to start to decline but then does
    so very fast. We have not used SGD, which would have likely accelerated convergence
    significantly.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.4: Training loss per iteration'
  prefs: []
  type: TYPE_NORMAL
- en: The plots in *Figure 17.5* show the function learned by the neural network with
    a three-dimensional hidden layer from two-dimensional data with two classes that
    are not linearly separable. The left panel displays the source data and the decision
    boundary that misclassifies very few data points and would further improve with
    continued training.
  prefs: []
  type: TYPE_NORMAL
- en: 'The center panel shows the representation of the input data learned by the
    hidden layer. The network learns weights so that the projection of the input from
    two to three dimensions enables the linear separation of the two classes. The
    right plot shows how the output layer implements the linear separation in the
    form of a cutoff value of 0.5 in the output dimension:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.5: Visualizing the function learned by the neural network'
  prefs: []
  type: TYPE_NORMAL
- en: 'To **sum up**: we have seen how a very simple network with a single hidden
    layer with three nodes and a total of 17 parameters is able to learn how to solve
    a nonlinear classification problem using backprop and gradient descent with momentum.'
  prefs: []
  type: TYPE_NORMAL
- en: We will next review how to use popular DL libraries that facilitate the design
    and fast training of complex architectures while using sophisticated techniques
    to prevent overfitting and evaluate the results.
  prefs: []
  type: TYPE_NORMAL
- en: Popular deep learning libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Currently, the most popular DL libraries are TensorFlow (supported by Google),
    Keras (led by Francois Chollet, now at Google), and PyTorch (supported by Facebook).
    Development is very active with PyTorch at version 1.4 and TensorFlow at 2.2 as
    of March 2020\. TensorFlow 2.0 adopted Keras as its main interface, effectively
    combining both libraries into one.
  prefs: []
  type: TYPE_NORMAL
- en: All libraries provide the design choices, regularization methods, and backprop
    optimizations we discussed previously in this chapter. They also facilitate fast
    training on one or several **graphics processing units** (**GPUs**). The libraries
    differ slightly in their focus with TensorFlow originally designed for deployment
    in production and prevalent in the industry, while PyTorch has been popular among
    academic researchers; however, the interfaces are gradually converging.
  prefs: []
  type: TYPE_NORMAL
- en: We will illustrate the use of TensorFlow and PyTorch using the same network
    architecture and dataset as in the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: Leveraging GPU acceleration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: DL is very computationally intensive, and good results often require large datasets.
    As a result, model training and evaluation can become rather time-consuming. GPUs
    are highly optimized for the matrix operations required by deep learning models
    and tend to have more processing power, rendering speedups of 10x or more not
    uncommon.
  prefs: []
  type: TYPE_NORMAL
- en: All popular deep learning libraries support the use of a GPU, and some also
    allow for parallel training on multiple GPUs. The most common types of GPU are
    produced by NVIDIA, and configuration requires installation and setup of the CUDA
    environment. The process continues to evolve and can be somewhat challenging depending
    on your computational environment.
  prefs: []
  type: TYPE_NORMAL
- en: A more straightforward way to leverage GPU is via the Docker virtualization
    platform. There are numerous images available that you can run in a local container
    managed by Docker that circumvents many of the driver and version conflicts that
    you may otherwise encounter. TensorFlow provides Docker images on its website
    that can also be used with Keras.
  prefs: []
  type: TYPE_NORMAL
- en: See GitHub for references and related instructions in the DL notebooks and the
    installation directory.
  prefs: []
  type: TYPE_NORMAL
- en: How to use TensorFlow 2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TensorFlow became the leading deep learning library shortly after its release
    in September 2015, one year before PyTorch. TensorFlow 2 simplified the API that
    had grown increasingly complex over time by making the Keras API its principal
    interface.
  prefs: []
  type: TYPE_NORMAL
- en: Keras was designed as a high-level API to accelerate the iterative workflow
    of designing and training deep neural networks with computational backends like
    TensorFlow, Theano, or CNTK. It has been integrated into TensorFlow in 2017\.
    You can also combine code from both libraries to leverage Keras' high-level abstractions
    as well as customized TensorFlow graph operations.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, TensorFlow adopts **eager execution**. Previously, you needed to
    define a complete computational graph for compilation into optimized operations.
    Running the compiled graph required the configuration of a session and the provision
    of the requisite data. Under eager execution, you can run TensorFlow operations
    on a line-by-line basis just like common Python code.
  prefs: []
  type: TYPE_NORMAL
- en: Keras supports both a slightly simpler Sequential API and a more flexible Functional
    API. We will introduce the former at this point and use the Functional API in
    more complex examples in the following chapters.
  prefs: []
  type: TYPE_NORMAL
- en: To create a model, we just need to instantiate a `Sequential` object and provide
    a list with the sequence of standard layers and their configurations, including
    the number of units, type of activation function, or name.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first hidden layer needs information about the number of features in the
    matrix it receives from the input layer via the `input_shape` argument. In our
    simple case, there are just two. Keras infers the number of rows it needs to process
    during training, through the `batch_size` argument that we will pass to the `fit`
    method later in this section. TensorFlow infers the sizes of the inputs received
    by other layers from the previous layer''s `units` argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The Keras API provides numerous standard building blocks, including recurrent
    and convolutional layers, various options for regularization, a range of loss
    functions and optimizers, and also preprocessing, visualization, and logging (see
    the link to the TensorFlow documentation on GitHub for reference). It is also
    extensible.
  prefs: []
  type: TYPE_NORMAL
- en: 'The model''s `summary` method produces a concise description of the network
    architecture, including a list of the layer types and shapes and the number of
    parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we compile the Sequential model to configure the learning process. To
    this end, we define the optimizer, the loss function, and one or several performance
    metrics to monitor during training:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Keras uses callbacks to enable certain functionality during training, such
    as logging information for interactive display in TensorBoard (see the next section):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'To train the model, we call its `fit` method and pass several parameters in
    addition to the training data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: See the notebook for a visualization of the decision boundary that resembles
    the result from our earlier manual network implementation. The training with TensorFlow
    runs orders of magnitude faster, though.
  prefs: []
  type: TYPE_NORMAL
- en: How to use TensorBoard
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TensorBoard is a great suite of visualization tools that comes with TensorFlow.
    It includes visualization tools to simplify the understanding, debugging, and
    optimization of NNs.
  prefs: []
  type: TYPE_NORMAL
- en: You can use it to visualize the computational graph, plot various execution
    and performance metrics, and even visualize image data processed by the network.
    It also permits comparisons of different training runs.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you run the `how_to_use_tensorflow` notebook, with TensorFlow installed,
    you can launch TensorBoard from the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can use it within your notebook by first loading the extension
    and then starting TensorBoard similarly by referencing the `log` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: For starters, the visualizations include train and validation metrics (see the
    left panel of *Figure 17.6*).
  prefs: []
  type: TYPE_NORMAL
- en: In addition, you can view histograms of the weights and biases over various
    epochs (right panel of Figure 17.6; epochs evolve from back to front). This is
    useful because it allows you to monitor whether backpropagation succeeds in adjusting
    the weights as learning progresses and whether they are converging.
  prefs: []
  type: TYPE_NORMAL
- en: 'The values of weights should change from their initialization values over the
    course of several epochs and eventually stabilize:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.6: TensorBoard learning process visualization'
  prefs: []
  type: TYPE_NORMAL
- en: TensorBoard also lets you display and interactively explore the computational
    graph of your network, drilling down from the high-level structure to the underlying
    operations by clicking on the various nodes. The visualization for our simple
    example architecture (see the notebook) already includes numerous components but
    is very useful when debugging. For further reference, see the links on GitHub
    to more detailed tutorials.
  prefs: []
  type: TYPE_NORMAL
- en: How to use PyTorch 1.4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PyTorch was developed at the **Facebook AI Research** (**FAIR**) group led by
    Yann LeCunn, and the first alpha version released in September 2016\. It provides
    deep integration with Python libraries like NumPy that can be used to extend its
    functionality, strong GPU acceleration, and automatic differentiation using its
    autograd system. It provides more granular control than Keras through a lower-level
    API and is mainly used as a deep learning research platform but can also replace
    NumPy while enabling GPU computation.
  prefs: []
  type: TYPE_NORMAL
- en: It employs eager execution, in contrast to the static computation graphs used
    by, for example, Theano or TensorFlow. Rather than initially defining and compiling
    a network for fast but static execution, it relies on its autograd package for
    automatic differentiation of tensor operations; that is, it computes gradients
    "on the fly" so that network structures can be partially modified more easily.
    This is called **define-by-run**, meaning that backpropagation is defined by how
    your code runs, which in turn implies that every single iteration can be different.
    The PyTorch documentation provides a detailed tutorial on this.
  prefs: []
  type: TYPE_NORMAL
- en: The resulting flexibility combined with an intuitive Python-first interface
    and speed of execution has contributed to its rapid rise in popularity and led
    to the development of numerous supporting libraries that extend its functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see how PyTorch and autograd work by implementing our simple network architecture
    (see the `how_to_use_pytorch` notebook for details).
  prefs: []
  type: TYPE_NORMAL
- en: How to create a PyTorch DataLoader
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We begin by converting the NumPy or pandas input data to `torch` tensors. Conversion
    from and to NumPy is very straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use these PyTorch tensors to instantiate first a `TensorDataset` and,
    in a second step, a `DataLoader` that includes information about `batch_size`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: How to define the neural network architecture
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: PyTorch defines an NN architecture using the `Net()` class. The central element
    is the `forward` function. autograd automatically defines the corresponding `backward`
    function that computes the gradients.
  prefs: []
  type: TYPE_NORMAL
- en: 'Any legal tensor operation is fair game for the `forward` function, providing
    a log of design flexibility. In our simple case, we just link the tensor through
    functional input-output relations after initializing their attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'We then instantiate a `Net()` object and can inspect the architecture as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'To illustrate eager execution, we can also inspect the initialized parameters
    in the first tensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: To enable GPU processing, you can use `net.cuda()`. See the PyTorch documentation
    for placing tensors on CPU and/or one or more GPU units.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also need to define a loss function and the optimizer, using some of the
    built-in options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: How to train the model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Model training consists of an outer loop for each epoch, that is, each pass
    over the training data, and an inner loop over the batches produced by the `DataLoader`.
    That executes the forward and backward passes of the learning algorithm. Some
    care needs to be taken to adjust data types to the requirements of the various
    objects and functions; for example, labels need to be integers and the features
    should be of type `float`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The notebook also contains an example that uses the `livelossplot` package to
    plot losses throughout the training process as provided by Keras out of the box.
  prefs: []
  type: TYPE_NORMAL
- en: How to evaluate the model predictions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To obtain predictions from our trained model, we pass it feature data and convert
    the prediction to a NumPy array. We get softmax probabilities for each of the
    two classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: From here on, we can proceed as before to compute loss metrics or visualize
    the result that again reproduces a version of the decision boundary we found earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Alternative options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The huge interest in DL has led to the development of several competing libraries
    that facilitate the design and training of NNs. The most prominent include the
    following examples (also see references on GitHub).
  prefs: []
  type: TYPE_NORMAL
- en: Apache MXNet
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: MXNet, incubated at the Apache Foundation, is an open source DL software framework
    used to train and deploy deep NNs. It focuses on scalability and fast model training.
    They included the Gluon high-level interface to make it easy to prototype, train,
    and deploy DL models. MXNet has been picked by Amazon for deep learning on AWS.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Cognitive Toolkit (CNTK)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Cognitive Toolkit, previously known as CNTK, is Microsoft's contribution
    to the deep learning library collection. It describes an NN as a series of computational
    steps via a directed graph, similar to TensorFlow. In this directed graph, leaf
    nodes represent input values or network parameters, while other nodes represent
    matrix operations upon their inputs. CNTK allows users to build and combine popular
    model architectures ranging from deep feedforward NNs, convolutional networks,
    and recurrent networks (RNNs/LSTMs).
  prefs: []
  type: TYPE_NORMAL
- en: Fastai
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The fastai library aims to simplify training NNs that are fast and accurate
    using modern best practices. These practices have emerged from research into DL
    at the company that makes both the software and accompanying courses available
    for free. Fastai includes support for models that process image, text, tabular,
    and collaborative filtering data.
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing an NN for a long-short strategy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In practice, we need to explore variations for the design options for the NN
    architecture and how we train it from those we outlined previously because we
    can never be sure from the outset which configuration best suits the data. In
    this section, we will explore various architectures for a simple feedforward NN
    to predict daily stock returns using the dataset developed in *Chapter 12* (see
    the notebook `preparing_the_model_data` in the GitHub directory for that chapter).
  prefs: []
  type: TYPE_NORMAL
- en: To this end, we will define a function that returns a TensorFlow model based
    on several architectural input parameters and cross-validate alternative designs
    using the `MultipleTimeSeriesCV` we introduced in *Chapter 7*, *Linear Models
    – From Risk Factors to Return Forecasts*. To assess the signal quality of the
    model predictions, we build a simple ranking-based long-short strategy based on
    an ensemble of the models that perform best during the in-sample cross-validation
    period. To limit the risk of false discoveries, we then evaluate the performance
    of this strategy for an out-of-sample test period.
  prefs: []
  type: TYPE_NORMAL
- en: See the `optimizing_a_NN_architecture_for_trading` notebook for details.
  prefs: []
  type: TYPE_NORMAL
- en: Engineering features to predict daily stock returns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To develop our trading strategy, we use the daily stock returns for 995 US
    stocks for the eight-year period from 2010 to 2017\. We will use the features
    developed in *Chapter 12,* *Boosting Your Trading Strategy* that include volatility
    and momentum factors, as well as lagged returns with cross-sectional and sectoral
    rankings. We load the data as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Defining an NN architecture framework
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To automate the generation of our TensorFlow model, we create a function that
    constructs and compiles the model based on arguments that can later be passed
    during cross-validation iterations.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following `make_model` function illustrates how to flexibly define various
    architectural elements for the search process. The `dense_layers` argument defines
    both the depth and width of the network as a list of integers. We also use `dropout`
    for regularization, expressed as a float in the range [0, 1] to define the probability
    that a given unit will be excluded from a training iteration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Now we can turn to the cross-validation process to evaluate various NN architectures.
  prefs: []
  type: TYPE_NORMAL
- en: Cross-validating design options to tune the NN
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We use the `MultipleTimeSeriesCV` to split the data into rolling training and
    validation sets comprising of 24 * 12 months of data, while keeping the final
    12 * 21 days of data (starting November 30, 2016) as a holdout test. We train
    each model for 48 21-day periods and evaluate its results over 3 21-day periods,
    implying 12 splits for cross-validation and test periods combined:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we define a set of configurations for cross-validation. These include
    several options for two hidden layers and dropout probabilities; we''ll only use
    tanh activations because a trial run did not suggest significant differences compared
    to ReLU. (We could also try out different optimizers. but I recommend you do not
    run this experiment, to limit what is already a computationally intensive effort):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the cross-validation, we define a function that produces the train and
    validation data based on the integer indices produced by the `MultipleTimeSeriesCV`
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: During cross-validation, we train a model using one set of parameters from the
    previously defined grid for 20 epochs. After each epoch, we store a `checkpoint`
    that contains the learned weights that we can reload to quickly generate predictions
    for the best configuration without retraining.
  prefs: []
  type: TYPE_NORMAL
- en: 'After each epoch, we compute and store the **information coefficient** (**IC**)
    for the validation set by day:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: With an NVIDIA GTX 1080 GPU, 20 epochs takes a bit over one hour with batches
    of 64 samples, and around 20 minutes with 256 samples.
  prefs: []
  type: TYPE_NORMAL
- en: Evaluating the predictive performance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s first take a look at the five models that achieved the highest median
    daily IC during the cross-validation period. The following code computes these
    values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The resulting table shows that the architectures using 32 units in both layers
    and 16/8 in the first/second layer, respectively, performed best. These models
    also use `dropout` and were trained with batch sizes of 64 samples with the given
    number of epochs for all folds. The median IC values vary between 0.0236 and 0.0246:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Dense Layers | Dropout | Batch Size | Epoch | IC |'
  prefs: []
  type: TYPE_TB
- en: '| (32, 32) | 0.1 | 64 | 7 | 0.0246 |'
  prefs: []
  type: TYPE_TB
- en: '| (16, 8) | 0.2 | 64 | 14 | 0.0241 |'
  prefs: []
  type: TYPE_TB
- en: '| (16, 8) | 0.1 | 64 | 3 | 0.0238 |'
  prefs: []
  type: TYPE_TB
- en: '| (32, 32) | 0.1 | 64 | 10 | 0.0237 |'
  prefs: []
  type: TYPE_TB
- en: '| (16, 8) | 0.2 | 256 | 3 | 0.0236 |'
  prefs: []
  type: TYPE_TB
- en: Next, we'll take a look at how the parameter choices impact the predictive performance.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we visualize the daily information coefficient (averaged per fold) for
    different configurations by epoch to understand how the duration of training affects
    the predictive accuracy. The plots in *Figure 17.7*, however, highlight few conclusive
    patterns; the IC varies little across models and not particularly systematically
    across epochs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.7: Information coefficients for various model configurations'
  prefs: []
  type: TYPE_NORMAL
- en: 'For more statistically robust insights, we run a linear regression using **ordinary
    least squares** (**OLS**) (see *Chapter 7*, *Linear Models – From Risk Factors
    to Return Forecasts*) using dummy variables for the layer, dropout, and batch
    size choices as well as for each epoch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The chart in *Figure 17.8* plots the confidence interval for each regression
    coefficient; if it does not include zero, then the coefficient is significant
    at the five percent level. The IC values on the y-axis reflect the differential
    from the constant (0.0027, p-value: 0.017) that represents the sample average
    over the configuration excluded while dropping one category of each dummy variable.'
  prefs: []
  type: TYPE_NORMAL
- en: Across all configurations, batch size 256 and a dropout of 0.2 made significant
    (but small) positive contributions to performance. Similarly, training for seven
    epochs yielded slightly superior results. The regression is overall significant
    according to the F statistic but has a very low R2 value close to zero, underlining
    the high degree of noise in the data relative to the signal conveyed by the parameter
    choices.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.8: OLS coefficients and confidence intervals'
  prefs: []
  type: TYPE_NORMAL
- en: Backtesting a strategy based on ensembled signals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To translate our NN model into a trading strategy, we generate predictions,
    evaluate their signal quality, create rules that define how to trade on these
    predictions, and backtest the performance of a strategy that implements these
    rules. See the notebook `backtesting_with_zipline` for the code examples in this
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Ensembling predictions to produce tradeable signals
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To reduce the variance of the predictions and hedge against in-sample overfitting,
    we combine the predictions of the best three models listed in the table in the
    previous section and average the result.
  prefs: []
  type: TYPE_NORMAL
- en: 'To this end, we define the following `generate_predictions()` function, which
    receives the model parameters as inputs, loads the weights for the models for
    the desired epoch, and creates forecasts for the cross-validation and out-of-sample
    periods (showing only the essentials here to save some space):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: We store the results for evaluation with Alphalens and a Zipline backtest.
  prefs: []
  type: TYPE_NORMAL
- en: Evaluating signal quality using Alphalens
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To gain some insight into the signal content of the ensembled model predictions,
    we use Alphalens to compute the return differences for investments into five equal-weighted
    portfolios differentiated by the forecast quantiles (see *Figure 17.9*). The spread
    between the top and the bottom quintile equals around 8 bps for a one-day holding
    period, which implies an alpha of 0.094 and a beta of 0.107:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.9: Signal quality evaluation'
  prefs: []
  type: TYPE_NORMAL
- en: Backtesting the strategy using Zipline
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Based on the Alphalens analysis, our strategy will enter long and short positions
    for the 50 stocks with the highest positive and lowest negative predicted returns,
    respectively, as long as there are at least 10 options on either side. The strategy
    trades every day.
  prefs: []
  type: TYPE_NORMAL
- en: 'The charts in *Figure 17.10* show that the strategy performs well in- and out-of-sample
    (before transaction costs):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15439_17_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.10: In- and out-of-sample backtest performance'
  prefs: []
  type: TYPE_NORMAL
- en: It produces annualized returns of 22.8 percent over the 36-month period, 16.5
    percent for the 24 in-sample months, and 35.7 percent for the 12 out-of-sample
    months. The Sharpe ratio is 0.72 in-sample and 2.15 out-of-sample, delivering
    an alpha of 0.18 (0.29) and a beta of 0.24 (0.16) in/out of sample.
  prefs: []
  type: TYPE_NORMAL
- en: How to further improve the results
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The relatively simple architecture yields some promising results. To further
    improve performance, you can first and foremost add new features and more data
    to the model.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, you can use more sophisticated architectures, including RNNs
    and CNNs, which are well suited to sequential data, whereas vanilla feedforward
    NNs are not designed to capture the ordered nature of the features.
  prefs: []
  type: TYPE_NORMAL
- en: We will turn to these specialized architectures in the following chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we introduced DL as a form of representation learning that
    extracts hierarchical features from high-dimensional, unstructured data. We saw
    how to design, train, and regularize feedforward neural networks using NumPy.
    We demonstrated how to use the popular DL libraries PyTorch and TensorFlow that
    are suitable for use cases from rapid prototyping to production deployments.
  prefs: []
  type: TYPE_NORMAL
- en: Most importantly, we designed and tuned an NN using TensorFlow and were able
    to generate tradeable signals that delivered attractive returns during both the
    in-sample and out-of-sample periods.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore CNNs, which are particularly well suited
    for image data but are also well-suited for sequential data.
  prefs: []
  type: TYPE_NORMAL
