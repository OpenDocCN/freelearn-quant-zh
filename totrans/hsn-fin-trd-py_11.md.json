["```py\nconda create -n zipline_env python=3.6\nconda activate zipline_env\nconda install -c conda-forge zipline\n```", "```py\npip install pyfolio\n```", "```py\nSET QUANDL_API_KEY=XXXXXXXX\nzipline ingest -b quandl\n```", "```py\nexport QUANDL_API_KEY=XXXXXXXX\nzipline ingest -b quandl\n```", "```py\nexport QUANDL_API_KEY=xxxx\n```", "```py\ndate,open,high,low,close,volume,dividend,split\n```", "```py\ndate,open,high,low,close,volume,dividend,split\n2015-05-15,18251.9707,18272.7207,18215.07031,18272.56055,108220000,0,0\n2015-05-18,18267.25,18325.53906,18244.25977,18298.88086,79080000,0,0\n2015-05-19,18300.48047,18351.35938,18261.34961,18312.39063,87200000,0,0\n2015-05-20,18315.06055,18350.13086,18272.56055,18285.40039,80190000,0,0\n2015-05-21,18285.86914,18314.89063,18249.90039,18285.74023,84270000,0,0\n2015-05-22,18286.86914,18286.86914,18217.14063,18232.01953,78890000,0,0\n2015-05-26,18229.75,18229.75,17990.01953,18041.53906,109440000,0,0\n```", "```py\n    import pandas as pd\n    from zipline.data.bundles import register\n    from zipline.data.bundles.csvdir import csvdir_equities\n    register(\n        'packt-csvdir-bundle',\n        csvdir_equities(\n            ['daily'],\n            'c:/MarketData/',\n        ),\n        calendar_name='NYSE', \n        start_session=pd.Timestamp('2015-5-15', tz='utc'),\n        end_session=pd.Timestamp('2020-05-14', tz='utc')\n    )\n    ```", "```py\n    zipline ingest -b packt-csvdir-bundle\n    ```", "```py\n    python -c \"import zipline.data.bundles as bdl; print(bdl.__path__)\"\n    ```", "```py\n    ['d:\\\\Anaconda3\\\\envs\\\\zipline_env\\\\lib\\\\site-packages\\\\zipline\\\\data\\\\bundles']\n    ```", "```py\n    from . import quandl_eod  # noqa\n    ```", "```py\n# These imports are necessary to force module-scope register calls to happen.\nfrom . import quandl  # noqa\nfrom . import csvdir  # noqa\nfrom . import quandl_eod  # noqa\nfrom .core import (\n    UnknownBundle,\n    bundles,\n    clean,\n    from_bundle_ingest_dirname,\n    ingest,\n    ingestions_for_bundle,\n    load,\n    register,\n    to_bundle_ingest_dirname,\n    unregister,\n)\n__all__ = [\n    'UnknownBundle',\n    'bundles',\n    'clean',\n    'from_bundle_ingest_dirname',\n    'ingest',\n    'ingestions_for_bundle',\n    'load',\n    'register',\n    'to_bundle_ingest_dirname',\n    'unregister',\n] \n```", "```py\nzipline ingest -b quandl_eod\n```", "```py\n@bundles.register(\"quandl_eod\")\ndef quandl_eod_bundle(environ,\n                  asset_db_writer,\n                  minute_bar_writer,\n                  daily_bar_writer,\n                  adjustment_writer,\n                  calendar,\n                  start_session,\n                  end_session,\n                  cache,\n                  show_progress,\n                  output_dir):\n    \"\"\"\n    quandl_bundle builds a daily dataset using Quandl's WIKI Prices dataset.\n    For more information on Quandl's API and how to obtain an API key,\n    please visit https://docs.quandl.com/docs#section-authentication\n    \"\"\"\n    api_key = environ.get(\"QUANDL_API_KEY\")\n    if api_key is None:\n        raise ValueError(\n            \"Please set your QUANDL_API_KEY environment variable and retry.\"\n        )\n    raw_data = fetch_data_table(\n        api_key, show_progress, \n        environ.get(\"QUANDL_DOWNLOAD_ATTEMPTS\", 5)\n    )\n    asset_metadata = \\\n    gen_asset_metadata(raw_data[[\"symbol\", \"date\"]], \n                       show_progress)\n    asset_db_writer.write(asset_metadata)\n    symbol_map = asset_metadata.symbol\n    sessions = calendar.sessions_in_range(start_session, \n                                          end_session)\n    raw_data.set_index([\"date\", \"symbol\"], inplace=True)\n    daily_bar_writer.write(\n        parse_pricing_and_vol(raw_data, sessions,\n                              symbol_map),\n        show_progress=show_progress,\n    )\n    raw_data.reset_index(inplace=True)\n    raw_data[\"symbol\"] = \\\n    raw_data[\"symbol\"].astype(\"category\")\n    raw_data[\"sid\"] = raw_data.symbol.cat.codes\n    adjustment_writer.write(\n        splits=parse_splits(\n            raw_data[[\"sid\", \"date\", \"split_ratio\"]].loc[raw_data.split_ratio != 1],\n            show_progress=show_progress,\n        ),\n        dividends=parse_dividends(\n            raw_data[[\"sid\", \"date\", \"ex_dividend\"]].loc[raw_data.ex_dividend != 0],\n            show_progress=show_progress,\n        ),\n    )\n```", "```py\n    register('yahoo_direct', # bundle's name\n             direct_ingester('YAHOO',\n                             every_min_bar=False,\n                             symbol_list_env='YAHOO_SYM_LST', \n    # the environment variable holding the comma separated list of assert names\n                             downloader=yahoo.get_downloader(start_date='2010-01-01',\n                                                             end_date='2020-01-01'\n                             ),\n             ),\n             calendar_name='NYSE',\n    )\n    ```", "```py\n    register('iex', # bundle's name\n             direct_ingester('IEX Cloud',\n                             every_min_bar=False,\n                             symbol_list_env='IEX_SYM_LST', \n    # the environemnt variable holding the comma separated list of assert names\n                             downloader=iex.get_downloader(start_date='2020-01-01',\n                                                           end_date='2020-01-05'\n                             ),\n                             filter_cb=lambda df: df[[cal.is_session(dt) for dt in df.index]]\n             ),\n             calendar_name='NYSE',\n    )\n    ```", "```py\n    #!/usr/bin/env python\n    # -*- coding: utf-8 -*-\n    from pathlib import Path\n    from zipline.data.bundles import register\n    from zipline.data.bundles.ingester import csv_ingester \n    # ingester.py need to be placed in zipline.data.bundles\n    _DEFAULT_PATH = str(Path.home()/'.zipline/csv/yahoo')\n    register(\n        'yahoo_csv',\n        csv_ingester('YAHOO',\n                     every_min_bar=False, \n                     # the price is daily\n                     csvdir_env='YAHOO_CSVDIR',\n                     csvdir=_DEFAULT_PATH,\n                     index_column='Date',\n                     column_mapper={'Open': 'open',\n                                    'High': 'high',\n                                    'Low': 'low',\n                                    'Close': 'close',\n                                    'Volume': 'volume',\n                                    'Adj Close': 'price',\n                     },\n        ),\n        calendar_name='NYSE',\n    )\n    from zipline.data.bundles.ingester import direct_ingester\n    from zipline.data.bundles import yahoo\n    register('yahoo_direct', # bundle's name\n             direct_ingester('YAHOO',\n                             every_min_bar=False,\n                             symbol_list_env='YAHOO_SYM_LST', # the environemnt variable holding the comma separated list of assert names\n                             downloader=yahoo.get_downloader(start_date='2010-01-01',\n                                                             end_date='2020-01-01'\n                             ),\n             ),\n             calendar_name='NYSE',\n    )\n    from zipline.data.bundles import iex\n    import trading_calendars as tc\n    cal=tc.get_calendar('NYSE')\n    register('iex', # bundle's name\n             direct_ingester('IEX Cloud',\n                             every_min_bar=False,\n                             symbol_list_env='IEX_SYM_LST', # the environemnt variable holding the comma separated list of assert names\n                             downloader=iex.get_downloader(start_date='2020-01-01',\n                                                           end_date='2020-01-05'\n                             ),\n                             filter_cb=lambda df: df[[cal.is_session(dt) for dt in df.index]]\n             ),\n             calendar_name='NYSE',\n    )\n    ```", "```py\n    python -c \"import zipline.data.bundles as bdl; print(bdl.__path__)\"\n    ```", "```py\n    ['d:\\\\Anaconda3\\\\envs\\\\zipline_env\\\\lib\\\\site-packages\\\\zipline\\\\data\\\\bundles']\n    ```", "```py\n        set YAHOO_SYM_LST=GOOG,AAPL,GE,MSFT\n        set IEX_SYM_LST=GOOG,AAPL,GE,MSFT\n    ```", "```py\n        export YAHOO_SYM_LST=GOOG,AAPL,GE,MSFT\n        export IEX_SYM_LST=GOOG,AAPL,GE,MSFT\n    ```", "```py\n    set IEX_TOKEN=xxx\n    ```", "```py\n    export IEX_TOKEN=xxx\n    ```", "```py\n    zipline ingest -b yahoo_direct\n    zipline ingest -b iex\n    ```", "```py\nfrom zipline import run_algorithm \nfrom zipline.api import order_target_percent, symbol \nfrom datetime import datetime \nimport pytz \nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport pyfolio as pf\nfrom random import random\ndef initialize(context): \n    pass\ndef handle_data(context, data):      \n    pass\ndef analyze(context, perf): \n    returns, positions, transactions = \\\n    pf.utils.extract_rets_pos_txn_from_zipline(perf) \n    pf.create_returns_tear_sheet(returns, \n                                 benchmark_rets = None)\n\nstart_date = pd.to_datetime('1996-1-1', utc=True)\nend_date = pd.to_datetime('2020-12-31', utc=True)\n\nresults = run_algorithm(start = start_date, end = end_date, \n                        initialize = initialize, \n                        analyze = analyze, \n                        handle_data = handle_data, \n                        capital_base = 10000, \n                        data_frequency = 'daily', \n                        bundle ='quandl')\n```", "```py\nfrom zipline import run_algorithm  \nfrom zipline.api import order_target_percent, symbol, set_commission, schedule_function, date_rules, time_rules from datetime import datetime \nimport pytz \nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport pyfolio as pf\nfrom random import random\ndef initialize(context):  \n    # definition of the stocks and the trading parameters, e.g. commission\n    schedule_function(handle_data, date_rules.month_end(), \n                      time_rules.market_open(hours=1))  \ndef handle_data(context, data):      \n    pass\ndef analyze(context, perf): \n    returns, positions, transactions = \\\n    pf.utils.extract_rets_pos_txn_from_zipline(perf) \n    pf.create_returns_tear_sheet(returns, \n                                 benchmark_rets = None)\n\nstart_date = pd.to_datetime('1996-1-1', utc=True)\nend_date = pd.to_datetime('2020-12-31', utc=True)\n\nresults = run_algorithm(start = start_date, end = end_date, \n                        initialize = initialize, \n                        analyze = analyze, \n                        capital_base = 10000,\n                        data_frequency = 'daily', \n                        bundle ='quandl')\n```", "```py\ndef handle_data(context, data): \n    price_hist = data.history(context.stock, \"close\", \n                              context.rolling_window, \"1d\")\n    order_target_percent(context.stock, 1.0 if price_hist[-1] > price_hist.mean() else 0.0) \n```", "```py\ndef initialize(context): \n    context.stock = symbol('AAPL')\n    context.rolling_window = 90\n    set_commission(PerTrade(cost=5)) \n```", "```py\ndef initialize(context): \n    context.stock = symbol('AAPL')\n    context.rolling_window = 90\n    set_commission(PerTrade(cost=5)) \n    set_slippage(VolumeShareSlippage(volume_limit=0.025, \n                                     price_impact=0.05))\n```", "```py\nzipline run -f job.py --start 2016-1-1 --end 2021-1-1 -o job_results.pickle --no-benchmark\n```", "```py\ndates = pd.date_range('1992-01-01', '2012-10-22')\nnp.random.seed(1)\npnls = np.random.randint(-990, 1000, size=len(dates)) \n# slight positive bias\npnls = pnls.cumsum()\npositions = np.random.randint(-1, 2, size=len(dates))\npositions = positions.cumsum()\nstrategy_performance = \\\npd.DataFrame(index=dates, \n             data={'PnL': pnls, 'Position': positions})\nstrategy_performance\n              PnL    Position\n1992-01-01     71           0\n1992-01-02   -684           0\n1992-01-03    258           1\n     ...      ...         ...\n2012-10-21  32100         -27\n2012-10-22  32388         -26\n7601 rows × 2 columns\n```", "```py\nstrategy_performance['PnL'].plot(figsize=(12,6), color='black', legend='PnL')\n```", "```py\nstrategy_performance['PnLStdev'] = strategy_performance['PnL'].rolling(20).std().fillna(method='backfill')\nstrategy_performance['PnLStdev'].plot(figsize=(12,6), \n                                      color='black', \n                                      legend='PnLStdev')\n```", "```py\ndaily_pnl_series = strategy_performance['PnL'].shift(-1) - strategy_performance['PnL']\ndaily_pnl_series.fillna(0, inplace=True)\navg_daily_pnl = daily_pnl_series.mean()\nstd_daily_pnl = daily_pnl_series.std()\nsharpe_ratio = avg_daily_pnl/std_daily_pnl\nsharpe_ratio\n0.007417596376703097\n```", "```py\npnls = np.random.randint(-990, 1000, size=len(dates)) \n# slight positive bias\n```", "```py\nannualized_sharpe_ratio = sharpe_ratio * np.sqrt(252)\nannualized_sharpe_ratio\n0.11775069203166105\n```", "```py\nstrategy_performance['PnL'].plot(figsize=(12,6), \n                                 color='black', \n                                 legend='PnL')\nplt.axhline(y=28000, color='darkgrey', linestyle='--', \n            label='PeakPnLBeforeDrawdown')\nplt.axhline(y=-15000, color='darkgrey', linestyle=':', \n            label='TroughPnLAfterDrawdown')\nplt.vlines(x='2000', ymin=-15000, ymax=28000, \n           label='MaxDrawdown', color='black', linestyle='-.')\nplt.legend()\n```"]