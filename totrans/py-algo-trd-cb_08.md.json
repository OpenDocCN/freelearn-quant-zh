["```py\nclass MyCustomStrategy(StrategyBase):\n    def __init__(self, *args, **kwargs): # [Recipes 1, 7]\n        ...\n    def name(): # [Recipes 1, 7]\n        …\n    def versions_supported(): # [Recipes 1, 7]\n        ...\n    def initialize(self): # [Recipes 1, 7]\n        ...\n    def strategy_select_instruments_for_entry(self, candle, \n                                              instruments_bucket):\n        … # [Recipes 2, 8]\n    def strategy_enter_position(self, candle, instrument, sideband_info):\n        … # [Recipes 3, 9]\n    def strategy_select_instruments_for_exit(self, candle, \n                                             instruments_bucket):\n        … # [Recipes 4, 10]\n    def strategy_exit_position(self, candle, instrument, sideband_info):\n        … # [Recipes 5, 11]\n```", "```py\n$ brew install ta-lib\n```", "```py\n$ tar -xzf ta-lib-0.4.0-src.tar.gz\n```", "```py\n$ cd ta-lib/\n```", "```py\n$ ./configure --prefix=/usr\n```", "```py\n$ make\n```", "```py\n$ sudo make install \n```", "```py\n>>> from pyalgotrading.strategy.strategy_base import StrategyBase\n>>> from pyalgotrading.constants import *\n```", "```py\nclass StrategyEMARegularOrder(StrategyBase):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.timeperiod1 = self.strategy_parameters['timeperiod1']\n        self.timeperiod2 = self.strategy_parameters['timeperiod2']\n        self.main_order = None\n    def initialize(self):\n        self.main_order = {}\n    @staticmethod\n    def name():\n        return 'EMA Regular Order Strategy'\n    @staticmethod\n    def versions_supported():\n        return AlgoBullsEngineVersion.VERSION_3_2_0\n```", "```py\nclass StrategyEMARegularOrder(StrategyBase):\n    # Previous methods not shown\n    def get_crossover_value(self, instrument):\n        hist_data = self.get_historical_data(instrument)\n        ema_x = talib.EMA(hist_data['close'], timeperiod=self.timeperiod1)\n        ema_y = talib.EMA(hist_data['close'], timeperiod=self.timeperiod2)\n        crossover_value = self.utils.crossover(ema_x, ema_y)\n        return crossover_value\n    def strategy_select_instruments_for_entry(self, candle,\n                                              instruments_bucket):\n        selected_instruments_bucket = []\n        sideband_info_bucket = []\n        for instrument in instruments_bucket:\n            crossover_value = self.get_crossover_value(instrument)\n            if crossover_value == 1:\n                selected_instruments_bucket.append(instrument)\n                sideband_info_bucket.append({'action': 'BUY'})\n            elif crossover_value == -1:\n                if self.strategy_mode is StrategyMode.INTRADAY:\n                    selected_instruments_bucket.append(instrument)\n                    sideband_info_bucket.append({'action': 'SELL'})\n        return selected_instruments_bucket, sideband_info_bucket\n```", "```py\nclass StrategyEMARegularOrder(StrategyBase):\n    # Previous methods not shown\n    def strategy_enter_position(self, candle, instrument, sideband_info):\n        if sideband_info['action'] == 'BUY':\n            qty = self.number_of_lots * instrument.lot_size\n            self.main_order[instrument] = \\\n                self.broker.BuyOrderRegular(instrument=instrument,\n                          order_code=BrokerOrderCodeConstants.INTRADAY,\n                          order_variety=BrokerOrderVarietyConstants.MARKET,\n                          quantity=qty)\n        elif sideband_info['action'] == 'SELL':\n            qty = self.number_of_lots * instrument.lot_size\n            self.main_order[instrument] = \\\n                self.broker.SellOrderRegular(instrument=instrument,\n                          order_code=BrokerOrderCodeConstants.INTRADAY,\n                          order_variety=BrokerOrderVarietyConstants.MARKET,\n                          quantity=qty)\n        else:\n            raise SystemExit(f'Got invalid sideband_info value: \n                              {sideband_info}')\n        return self.main_order[instrument]\n```", "```py\nclass StrategyEMARegularOrder(StrategyBase):\n    # Previous methods not shown\n    def strategy_select_instruments_for_exit(self, candle, \n                                             instruments_bucket):\n        selected_instruments_bucket = []\n        sideband_info_bucket = []\n        for instrument in instruments_bucket:\n            if self.main_order.get(instrument) is not None:\n                crossover_value = self.get_crossover_value(instrument)\n                if crossover_value in [1, -1]:\n                    selected_instruments_bucket.append(instrument)\n                    sideband_info_bucket.append({'action': 'EXIT'})\n        return selected_instruments_bucket, sideband_info_bucket\n```", "```py\nclass StrategyEMARegularOrder(StrategyBase):\n    # Previous methods not shown\n    def strategy_exit_position(self, candle, instrument, sideband_info):\n        if sideband_info['action'] == 'EXIT':\n            self.main_order[instrument].exit_position()\n            self.main_order[instrument] = None\n            return True\n        return False\n\n```", "```py\n>>> import inspect\n>>> from pyalgotrading.algobulls import AlgoBullsConnection\n>>> from pyalgostrategypool.strategy_ema_regular_order import StrategyEMARegularOrder\n```", "```py\n>>> algobulls_connection = AlgoBullsConnection()\n```", "```py\n>>> algobulls_connection.get_authorization_url()\n```", "```py\nPlease login to this URL with your AlgoBulls credentials and get your developer access token: https://app.algobulls.com/user/login\n'https://app.algobulls.com/user/login'\n```", "```py\n>>> algobulls_connection.set_access_token('80b7a69b168c5b3f15d56688841a8f2da5e2ab2c')\n```", "```py\n>>> print(inspect.getsource(StrategyEMARegularOrder))\n```", "```py\nclass StrategyEMARegularOrder(StrategyBase):\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n        self.timeperiod1 = self.strategy_parameters['timeperiod1']\n        self.timeperiod2 = self.strategy_parameters['timeperiod2']\n\n        self.main_order = None\n\n    def initialize(self):\n        self.main_order = {}\n\n    @staticmethod\n    def name():\n        return 'EMA Regular Order Strategy'\n    ...\n    def strategy_exit_position(self, candle, instrument, \n                               sideband_info):\n        if sideband_info['action'] == 'EXIT':\n            self.main_order[instrument].exit_position()\n            self.main_order[instrument] = None\n            return True\n        return False\n```", "```py\n>>> algobulls_connection.create_strategy(StrategyEMARegularOrder)\n```", "```py\nValidating Strategy...\n{'details': `'strategy_code': '49287246f9704bbcbad76ade9e2091d9'}\n```", "```py\n>>> algobulls_connection.create_strategy(StrategyEMARegularOrder, \n                                         overwrite=True)\n```", "```py\nValidating Strategy…\n{'details': 'success'}\n```", "```py\nclass StrategyMACDBracketOrder(StrategyBase):\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n        self.fastMA_period = self.strategy_parameters['fastma_period']\n        self.slowMA_period = self.strategy_parameters['slowma_period']\n        self.signal_period = self.strategy_parameters['signal_period']\n        self.stoploss = self.strategy_parameters['stoploss_trigger']\n        self.target = self.strategy_parameters['target_trigger']\n        self.trailing_stoploss = \\\n                      self.strategy_parameters['trailing_stoploss_trigger']\n\n        self.main_order = None\n\n    def initialize(self):\n        self.main_order = {}\n\n    @staticmethod\n    def name():\n        return 'MACD Bracket Order Strategy'\n    @staticmethod\n    def versions_supported():\n        return VERSION_3_2_0\n```", "```py\nclass StrategyMACDBracketOrder(StrategyBase):\n    # Note: Some methods are not shown here    \n    def get_crossover_value(self, instrument):\n        hist_data = self.get_historical_data(instrument)\n        macdline, macdsignal, _ = talib.MACD(hist_data['close'], \n                                           fastperiod=self.fastMA_period, \n                                           slowperiod=self.slowMA_period, \n                                           signalperiod=self.signal_period)\n        crossover_value = self.utils.crossover(macdline, macdsignal)\n        return crossover_value\n    def strategy_select_instruments_for_entry(self, candle, \n                                              instruments_bucket):\n        selected_instruments_bucket = []\n        sideband_info_bucket = []\n        for instrument in instruments_bucket:\n            crossover_value = self.get_crossover_value(instrument)\n            if crossover_value == 1:\n                selected_instruments_bucket.append(instrument)\n                sideband_info_bucket.append({'action': 'BUY'})\n            elif crossover_value == -1:\n                if self.strategy_mode is StrategyMode.INTRADAY:\n                    selected_instruments_bucket.append(instrument)\n                    sideband_info_bucket.append({'action': 'SELL'})\n        return selected_instruments_bucket, sideband_info_bucket   \n```", "```py\nclass StrategyMACDBracketOrder(StrategyBase):\n    # Note: Some methods are not shown here \n    def strategy_enter_position(self, candle, instrument, sideband_info):\n        if sideband_info['action'] == 'BUY':\n            qty = self.number_of_lots * instrument.lot_size\n            ltp = self.broker.get_ltp(instrument)\n            self.main_order[instrument] = \\\n                self.broker.BuyOrderBracket(\n                    instrument=instrument,\n                    order_code= BrokerOrderCodeConstants.INTRADAY,\n                    order_variety= BrokerOrderVarietyConstants.LIMIT,\n                    quantity=qty,\n                    price=ltp,\n                    stoploss_trigger=ltp - (ltp * self.stoploss),\n                    target_trigger=ltp + (ltp * self.target),\n                    trailing_stoploss_trigger=ltp * self.trailing_stoploss)\n        elif sideband_info['action'] == 'SELL':\n            qty = self.number_of_lots * instrument.lot_size\n            ltp = self.broker.get_ltp(instrument)\n            self.main_order[instrument] = \\\n                self.broker.SellOrderBracket(\n                    instrument=instrument,\n                    order_code=BrokerOrderCodeConstants.INTRADAY,\n                    order_variety=BrokerOrderVarietyConstants.LIMIT,\n                    quantity=qty,\n                    price=ltp,\n                    stoploss_trigger=ltp + (ltp * self.stoploss),\n                    target_trigger=ltp - (ltp * self.target),\n                    trailing_stoploss_trigger=ltp * self.trailing_stoploss)\n        else:\n            raise SystemExit(f'Got invalid sideband_info value: \n                             {sideband_info}')\n        return self.main_order[instrument]\n```", "```py\nclass StrategyMACDBracketOrder(StrategyBase):\n    # Note: Some methods are not shown here   \n    def strategy_select_instruments_for_exit(self, candle, \n                                             instruments_bucket):\n        selected_instruments_bucket = []\n        sideband_info_bucket = []\n        for instrument in instruments_bucket:\n            if self.main_order.get(instrument) is not None:\n                crossover_value = self.get_crossover_value(instrument)\n                if crossover_value in [1, -1]:\n                    selected_instruments_bucket.append(instrument)\n                    sideband_info_bucket.append({'action': 'EXIT'})\n        return selected_instruments_bucket, sideband_info_bucket    \n```", "```py\nclass StrategyMACDBracketOrder(StrategyBase):\n    # Note: Some methods are not shown here   \n    def strategy_exit_position(self, candle, instrument, \n                               sideband_info):\n        if sideband_info['action'] == 'EXIT':\n            self.main_order[instrument].exit_position()\n            self.main_order[instrument] = None\n            return True\n        return False\n```", "```py\n>>> import inspect\n>>> from pyalgostrategypool.strategy_macd_bracket_order import StrategyMACDBracketOrder\n>>> from pyalgotrading.algobulls import AlgoBullsConnection\n```", "```py\n>>> algobulls_connection = AlgoBullsConnection()\n```", "```py\n>>> algobulls_connection.get_authorization_url()\n```", "```py\nPlease login to this URL with your AlgoBulls credentials and get your developer access token: https://app.algobulls.com/user/login\n'https://app.algobulls.com/user/login'\n```", "```py\n>>> algobulls_connection.set_access_token('80b7a69b168c5b3f15d56688841a8f2da5e2ab2c')\n```", "```py\n>>> print(inspect.getsource(StrategyMACDBracketOrder))\n```", "```py\nclass StrategyMACDBracketOrder(StrategyBase):\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n        self.fastMA_period = \\\n            self.strategy_parameters['fastma_period']\n        self.slowMA_period = \\\n            self.strategy_parameters['slowma_period']\n        self.signal_period = \\\n            self.strategy_parameters['signal_period']\n        self.stoploss = \n            self.strategy_parameters['stoploss_trigger']\n        self.target = \n            self.strategy_parameters['target_trigger']\n        self.trailing_stoploss = \n            self.strategy_parameters['trailing_stoploss_trigger']\n\n        self.main_order = None\n\n    def initialize(self):\n        self.main_order = {}\n\n    @staticmethod\n    def name():\n        return 'MACD Bracket Order Strategy'\n    ...\n    def strategy_exit_position(self, candle, instrument, \n                               sideband_info):\n        if sideband_info['action'] == 'EXIT':\n            self.main_order[instrument].exit_position()\n            self.main_order[instrument] = None\n            return True\n        return False\n```", "```py\n>>> algobulls_connection.create_strategy(StrategyMACDBracketOrder)\n```", "```py\nValidating Strategy...\n{'details': 'success', 'strategy_code': '4faf514fe096432b8e9f80f5951bd2ea'}\n```", "```py\n>>> algobulls_connection.create_strategy(StrategyMACDBracketOrder, \n                                         overwrite=True)\n```", "```py\nValidating Strategy…\n{'details': 'success'}\n```"]