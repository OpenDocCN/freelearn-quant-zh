["```py\n\nimport numpy as np\nket0 = np.array([[1.0], [0.0]])\n```", "```py\n\nhadamard = np.dot(1/np.sqrt(2), np.array([[1.0, 1.0], [1.0, -1.0]]))\n```", "```py\n\n>>> np.dot(hadamard, ket0)\narray([[0.70710678], [0.70710678]])\n```", "```py\n\nfrom qiskit.providers.fake_provider import FakeVigo\nfrom qiskit.visualization import plot_error_map\nemulator = FakeVigo()\nplot_error_map(emulator)\n```", "```py\n\nfrom qiskit import QuantumCircuit\nqc = QuantumCircuit(2)\nqc.h(0)\nqc.cx(0, 1)\nqc.draw('mpl')\n```", "```py\n\nfrom qiskit import transpile\nqc = transpile(qc, emulator)\nqc.draw('mpl')\n```", "```py\n\nimport jet\ndim = [2]\nket0 = [1, 0]\n# Initializing our qubits\nqbit0 = jet.Tensor([\"i\"], dim, ket0)\nqbit1 = jet.Tensor([\"j\"], dim, ket0)\n```", "```py\n\nHadamard = jet.Tensor([\"i\", \"k\"], [2, 2], [1/np.sqrt(2), 1/np.sqrt(2), 1/np.sqrt(2), -1/np.sqrt(2)])\n```", "```py\n\nCNOT = jet.Tensor([\"k\", \"j\", \"m\", \"n\"], [2, 2, 2, 2])\nCNOT.set_value((0, 0, 0, 0), 1) # |00> -> |00>\nCNOT.set_value((0, 1, 0, 1), 1) # |01> -> |01>\nCNOT.set_value((1, 0, 1, 1), 1) # |10> -> |11>\nCNOT.set_value((1, 1, 1, 0), 1) # |11> -> |10>\n```", "```py\n\ntnet = jet.TensorNetwork()\ntnet.add_tensor(qbit0)\ntnet.add_tensor(Hadamard)\ntnet.contract()\n```", "```py\n\nSize = 2\nIndices = {k}\nData = {(0.707107,0)  (0.707107,0)}\n```", "```py\n\ntnet = jet.TensorNetwork()\ntnet.add_tensor(qbit0)\ntnet.add_tensor(qbit1)\ntnet.add_tensor(Hadamard)\ntnet.add_tensor(CNOT)\ntnet.contract()\nSize = 4\nIndices = {m  n}\nData = {(0.707107,0)  (0,0)  (0,0)  (0.707107,0)}\n```", "```py\n\npip install qiskit-aer-gpu\n```", "```py\n\npip install pennylane-lightning[gpu]\ndev = qml.device(\"lightning.gpu\", wires=2)\n```"]