- en: Chapter 3. Time Value of Money
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In terms of finance per se, this chapter does not depend on the first two chapters.
    Since, in this book, Python is used as a computational tool to solve various finance
    problems, the minimum requirement is that readers should have installed Python
    plus NumPy and SciPy. In a sense, if a reader has installed Python via Anaconda,
    he/she will be fine without reading the first two chapters. Alternatively, readers
    could read Appendix A on how to install Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, various concepts and formulae associated with finance will
    be introduced and discussed in detail. Since those concepts and formulae are so
    basic, readers who have taken one finance course, or professionals with a few
    years'' working experience in the financial industry, could go through this chapter
    quickly. Again, one feature of this book, quite different from a typical finance
    textbook, is that Python is used as the computational tool. In particular, the
    following topics will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Present value of one future cash flow and the present value of perpetuity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Present value of growing perpetuity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Present and future value of annuity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perpetuity versus perpetuity due, annuity versus annuity due
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Relevant functions contained in SciPy and the `numpy.lib.financial` submodule
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A free financial calculator, written in Python, called `fincal`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Definition of NPV and NPV rule
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Definition of IRR and IRR rule
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python graphical presentation of time value of money, and NPV profile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Definition of payback period and payback period rule
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to write your own financial calculator using Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to time value of money
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s use a very simple example to illustrate. Assume that $100 is deposited
    in a bank today with an annual interest rate of 10%. What is the value of the
    deposit one year later? Here is the timeline with the dates and cash flows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to time value of money](img/B06175_03_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Obviously, our annual interest payment will be $10, that is, *100*0.1=10*.
    Thus, the total value will be *110*, that is, *100 + 10*. The original $100 is
    principal. Alternatively, we have the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to time value of money](img/B06175_03_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Assume that $100 will be kept in the bank for two years with the same 10% annual
    interest rate for two years. What will be the future value at the end of year
    two?
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to time value of money](img/B06175_03_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Since at the end of the first year, we have $110 and by applying the same logic,
    the future value at the end of year two should be:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to time value of money](img/B06175_03_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Since *110 = 100*(1+0.1)*, then we have the following expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to time value of money](img/B06175_03_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If $100 is deposited for five years with an annual interest rate of 10%, what
    is the future value at the end of year five? Based on the preceding logic, we
    could have the following formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to time value of money](img/B06175_03_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Generalization leads to our first formula to estimate the future value for
    one given present value:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to time value of money](img/B06175_03_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, *FV* is the future value, *PV* is the present value, *R* is the period
    rate and *n* is the number of periods. In the preceding example, *R* is the annual
    interest rate and *n* is the number of years. The frequencies of *R* and *n* should
    be the same. This means that if *R* is the annual (monthly/quarterly/daily) rate
    then *n* must be number of years (months/quarters/days). The corresponding function,
    called `fv()` in the SciPy module, could be used to estimate the future value;
    see the following code. To estimate the future value at the end of year two with
    a 10% annual interest rate, we have the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'For the function, the input format is `sp.fv(rate,nper,pmt,pv=0,when=''end'')`.
    At the moment, just ignore the last variable called when. For Equation (1), there
    is no pmt, thus the third input should be zero. Please pay attention to the negative
    sign of the previous result. The reason is that `scipy.fv()` function follows
    the Excel sign convention: a positive future value leads to a negative present
    value, and vice versa. To find more information about this function, we type `help(sp.fv),`
    see the following first several lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Help on function fv in module `numpy.lib.financial`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Compute the future value.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we accidentally enter `sp.fv(0.1,2,100,0)`, the result and corresponding
    cash flows are shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Later in this chapter, it will be shown that `sp.fv(0.1,2,100,0)` corresponds
    to the present value of two equal $100 occur at the end of the first and second
    years. From Equation (1), we could easily derive our second formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to time value of money](img/B06175_03_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The notations of *PV*, *FV*, *R*, and *n* remain the same as those in *Equation
    (1)*. If we plan to have $234 at the end of year five and the interest rate is
    1.45% per year, how much we have to deposit today? The result is shown here on
    the left after applying Equation (2) manually:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, the `sp.pv()` function could be used, see the following right
    result. To find out more information about the `sp.pv()` function, we use `help(sp.pv)`,
    see the part of the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![Introduction to time value of money](img/B06175_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Note that for the fourth input variable of a set of inputs, the `scipy.fv()`
    and `scipy.pv()` functions behave differently: `spicy.fv(0.1,1,100)` would give
    us an error message while `scipy.pv(0.1,1,100)` would work perfectly. The reason
    is that the default value of the fourth input variable in `scipy.pv()` function
    is zero while there is no default value for the fourth input variable in the `scipy.fv()`
    function. This is one type of inconsistency in terms of Python programming.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In finance, it is well known that $100 received today is more valuable than
    $100 received one year later, which in turn is more valuable than $100 received
    in year two. If different sizes are used to represent relative values, we will
    get the following figure. The first blue circle is the present value of $100 today,
    while the second one is the present value of $100 at the end of the first year
    and so on. The Python program to generate such an image is given in *Appendix
    B*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to time value of money](img/B06175_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The next concept is perpetuity, which is defined as *the same constant cash
    flows, at the same intervals forever*. Here is the timeline and those constant
    cash flows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to time value of money](img/B06175_03_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note that in the previous case, the first cash flow happens at the end of the
    first period. We could have other perpetuity with its first cash flow at the end
    of other period. Let's study this case first, and later in the chapter, we will
    have a simple extension. What is the present value of such perpetuity when the
    period discount rate is *R*?
  prefs: []
  type: TYPE_NORMAL
- en: 'First, Equation (2) could be applied to each of those future cash flows. Thus,
    the summation of all those present values will be the solution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to time value of money](img/B06175_03_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To make our derivation simpler, *PV(Perpetuity)* is replaced by *PV*. Let''s
    call it Equation (I):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to time value of money](img/B06175_03_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To derive the formula, both sides of *Equation (I)* are multiplied by *1/(1+R)*;
    see the following equation. Let''s call it *Equation (II)*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to time value of money](img/B06175_03_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Equation (I)* minus Equation *(II)* leads to the next equation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to time value of money](img/B06175_03_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Both sides time *(1+R)*, we have:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to time value of money](img/B06175_03_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Reorganizing the preceding result, finally we have the formula to estimate
    the present value of perpetuity:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to time value of money](img/B06175_03_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is one example. John plans to donate $3,000 per year to his alma mater
    to have a welcoming party for the forthcoming MBA students at the end of the year
    forever. If the annual discount rate is 2.5% and the first party will occur at
    the end of the first year, how much he should donate today? By applying the preceding
    formula, the answer is $120,000:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Assume that the first cash flow is *C* and the following cash flows enjoy a
    constant growth rate of g; see the following timeline and cash flows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to time value of money](img/B06175_03_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If the discount rate is *R*, then the formula to estimate the present value
    of a growing perpetuity has the following form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to time value of money](img/B06175_03_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Again, the frequencies of *C*, *R*, and *g* should be consistent, that is,
    have the same frequencies. One of the end-of-chapter problems asks readers to
    prove *Equation (4)*. For the previous example of John''s MBA welcoming party
    donation, the cost of $3,000 needed every year is based on zero inflation. Assume
    that the annual inflation is 1%, how much does he have to denote today? The amount
    needed each year is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to time value of money](img/B06175_03_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following result indicates that he needs $200,000 today:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'For perpetuity, if the first cash flow happens at the end of *k*th period,
    we have the following formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to time value of money](img/B06175_03_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Obviously, when the first cash flow happens at the end of the first period,
    *Equation (5)* collapses to *Equation (3)*. An annuity is defined as *the same
    cash flows at the same intervals for n periods*. If the first cash flow occurs
    at the end of the first period, the present value of an annuity is estimated by
    the following formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to time value of money](img/B06175_03_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here, *C* is a recursive cash flow that happens at the end of each period, *R*
    is the period discount rate, and *n* is the number of periods. *Equation (5)*
    is quite complex than other equations. However, with a little bit imagination,
    *Equation (6)* could be derived by combining Equations (2) and (3); see *Appendix
    C* for more detail.
  prefs: []
  type: TYPE_NORMAL
- en: 'To estimate the future value of annuity, we have the following formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to time value of money](img/B06175_03_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Conceptually, we could view *Equation (7)* as the combination of *Equations
    (6)* and (1). In the previous formulae related to perpetuity or annuity, all cash
    flows are assumed to happen at the end of periods. For annuity or perpetuity,
    when the cash flows happen at the beginning of each time period, they are called
    annuity due or perpetuity due. There are three ways to calculate their present
    values.
  prefs: []
  type: TYPE_NORMAL
- en: For the first method, the last input value in `scipy.pv()` or `numpy.lib.financial.pv()`
    will take a value of one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Assume that the discount rate is 1% per year. The annual cash flow is $20 for
    the next 10 years. The first cash flow will be paid today. What is the present
    value of those cash flows? The result is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Note that the input format for the `numpy.lib.financial.pv()` function is `rate`,
    `nper`, `pmt`, `fv`, and `when`. The default value of the last variable called
    `when` is zero, that is, at the end of the period. When the variable called `when`
    takes a value of one, it means it is annuity due.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the second method , the following formulae could be applied:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to time value of money](img/B06175_03_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is the methodology: treat annuity due as normal annuity, then multiply
    the result by *(1+R)*. The application is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'For the third method , we use the function called `fincal.pvAnnuityDue()` contained
    in the `fincal` package, a financial calculator written in Python; see the following
    result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'For how to download this `fincal` module, see *Appendix D – how to download
    a free financial calculator written in Python*. To get more information about
    this function, the `help()` function is applied; see the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![Introduction to time value of money](img/B06175_03_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'For more detail about such a financial calculator called `fincal`, see the
    next section. If cash flows will increase at a constant rate of *g*, we have the
    following formulae for a growing annuity:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to time value of money](img/B06175_03_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'There are no corresponding functions from SciPy nor from `numpy.lib.financial`.
    Fortunately, we have the functions called `pvGrowingAnnuity()` and `fvGrowingAnnuity()`
    functions from the financial calculator called `fincal`; for more detail, see
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'To find more information about this function, issue `help(fincal.pvGrowingAnnuity)`;
    see the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![Introduction to time value of money](img/B06175_03_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Writing a financial calculator in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When discussing the various concepts of the time value of money, learners need
    a financial calculator or Excel to solve various related problems.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the preceding illustrations, it is clear that several functions, such
    as `scipy.pv()`, could be used to estimate the present value of one future cash
    flow or present value of annuity. Actually, the functions related to finance contained
    in the SciPy module came from the `numpy.lib.financial` submodule:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: First, we import two modules related to various finance functions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The following table summarizes those functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Function | Input format |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `sp.fv()` | `fin.fv()` | `fv(rate, nper, pmt, pv, when=''end'')` |'
  prefs: []
  type: TYPE_TB
- en: '| `sp.pv()` | `fin.pv()` | `pv(rate, nper, pmt, fv=0.0, when=''end'')` |'
  prefs: []
  type: TYPE_TB
- en: '| `sp.pmt()` | `fin.pmt()` | `pmt(rate, nper, pv, fv=0, when=''end'')` |'
  prefs: []
  type: TYPE_TB
- en: '| `sp.npv()` | `fin.npv()` | `npv(rate, values)` |'
  prefs: []
  type: TYPE_TB
- en: '| `sp.rate()` | `fin.rate()` | `rate(nper, pmt, pv, fv, when=''end'', guess=0.1,
    tol=1e-06, maxiter=100)` |'
  prefs: []
  type: TYPE_TB
- en: '| `sp.nper()` | `fin.nper()` | `nper(rate, pmt, pv, fv=0, when=''end'')` |'
  prefs: []
  type: TYPE_TB
- en: '| `sp.irr()` | `fin.irr()` | `irr(values)` |'
  prefs: []
  type: TYPE_TB
- en: '| `sp.mirr()` | `fin.mirr()` | `mirr(values, finance_rate, reinvest_rate)`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `sp.ipmt()` | `fin.ipmt()` | `ipmt(rate, per, nper, pv, fv=0.0, when=''end'')`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `sp.ppmt()` | `fin.ppmt()` | `ppmt(rate, per, nper, pv, fv=0.0, when=''end'')`
    |'
  prefs: []
  type: TYPE_TB
- en: Table 3.1 A list of functions contained in Scipy and numpy.lib.financial
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The other financial calculator was written by the author of this book. *Appendix
    B* shows how to download it. Here is a list of functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'There are several advantages of using this financial calculator over the functions
    contained in both the SciPy module and `numpy.lib.financial` submodule. First,
    for three present values, `pv(one cash flow)`, `pv(annuity)`, and `pv(annuity
    due)`, there exist three corresponding functions called `pv_f()`, `pvAnnuity()`
    and `pvAnnuityDue()`. Thus, a new learner who has little knowledge about finance
    would have a much smaller chance to get confused. Second, for each function such
    as present value of one future cash flow, the output is exactly the same as the
    formula shown on a typical textbook; see the following formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing a financial calculator in Python](img/B06175_03_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In other words, there is no Excel sign convention. For *fv=100*, *r=0.1*, and
    *n=1*, from the preceding formula, we are supposed to get a value of 90.91\. With
    the following code, we show the results without and with the sign convention:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Third, for each function contained in `fincal`, we could find out which formula
    is used plus a few examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '![Writing a financial calculator in Python](img/B06175_03_39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Last but not least, a new learner could write his/her own financial calculator!
    For more detail, see the *Writing your own financial calculator written in Python*
    section and *Appendix H*.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the preceding discussion, it is known that for the present value of annuity,
    the following formula could be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing a financial calculator in Python](img/B06175_03_40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding formula, we have four variables of *pv*, *c*, *R*, and *n*.
    To estimate a present value, we are given *c*, *R*, and *n*. Actually, for any
    set of three values, we could estimate the number 4\. Let''s use the same notations
    in SciPy and NumPy:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing a financial calculator in Python](img/B06175_03_41.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The four corresponding functions are: `sp.pv()`, `sp.pmt()`, `sp.rate()`, and
    `sp.nper()`. Here is an example. John is planning to buy a used car with a price
    tag of $5,000\. Assume that he would pay $1,000 as the download payment and borrow
    the rest. The annual interest rate for a car load is 1.9% compounded monthly.
    What is his monthly payment if he plans to retire his load in three years? We
    could calculate the monthly payment manually; see the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Since the annual interest rate is compounded monthly, the effective monthly
    rate is 0.019/12\. In [Chapter 5](ch05.html "Chapter 5. Bond and Stock Valuation"),
    *Bond and Stock Valuation*, how to convert different effective rates will be discussed
    in more detail. Based on the preceding result, John''s monthly payment is $114.40\.
    Alternatively, we could use the `scipy.pmt()` function; see the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Similarly, for the rate in the preceding function, the `scipy.rate()` and `numpy.lib.rate()`
    functions could be applied. Here is one example. A company plans to lease a limousine
    for its CEO. If the monthly payment is $2,000 for the next three years and the
    present value of the car is $50,000, what is the implied annual rate?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The monthly effective rate is 2.12% while the annual rate is 25.45%.
  prefs: []
  type: TYPE_NORMAL
- en: With the same logic, for the `nper` in the preceding function, the `scipy.nper()`
    and `numpy.lib.financial.nper()` functions could be applied.
  prefs: []
  type: TYPE_NORMAL
- en: Here is one example. Peter borrows $5,000 to pay the cost to get a Python certificate.
    If the monthly rate is 0.25% and he plans to pay back $200 per month, how many
    months will he need to repay his loan?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the preceding result, he needs about 30 months to repay his whole
    loan. In the preceding two examples, the future value is zero. Following the same
    logic, for a future value annuity, we have the following function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing a financial calculator in Python](img/B06175_03_42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If using the same notations as SciPy and `numpy.lib.financial`, we have the
    following formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing a financial calculator in Python](img/B06175_03_43.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `scipy.pmt()`, `scipy.rate()`, `scipy.nper()`, `numy.lib.financial.pmt()`,
    `numpy.lib.financial.rate()`, and `numpy.lib.financial.nper()` functions could
    be used to estimate those values. We will discuss those formulae further in the
    *The general formulae for many functions* section used in Scipy and `numpy.lib.financial`.
  prefs: []
  type: TYPE_NORMAL
- en: Definition of NPV and NPV rule
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **Net Present Value** (**NPV**) is defined by the following formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Definition of NPV and NPV rule](img/B06175_03_44.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is an example. The initial investment is $100\. The cash inflows in the
    next five years are $50, $60, $70, $100, and $20, starting from year one. If the
    discount rate is 11.2%, what is the project''s NPV value? Since only six cash
    flows are involved, we could do the calculation manually:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the preceding result, the NPV of this project is $121.56\. A normal
    project is defined as follows: *cash outflows first, then cash inflows*. Anything
    else is an abnormal project. For a normal project, its NPV is negatively correlated
    with the discount rate; see the following graph. The reason is that when the discount
    rate increases, the present value of the future cash flows (most of times benefits)
    will decrease more than the current or the earliest cash flows (most of times
    costs). The NPV profile describes the relationship between NPV and discount rate
    as shown in the following graph. See *Appendix E* for the Python program to generate
    the graph. The *y*-axis is NPV while the *x*-axis is the discount rate:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Definition of NPV and NPV rule](img/B06175_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To estimate the NPV of a project, we could call the `npv()` function contained
    either in SciPy or `numpy.lib.financial`; see the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The `scipy.npv()` function estimates the present values for a given set of
    cash flows. The first input variable is the discount rate, while the second input
    is an array of cash flows. Note that the first cash flow in this cash flow array
    happens at time zero. This `scipy.npv()` function is different from the Excel''s
    NPV function, which is not a true NPV function. Actually, the Excel NPV is a PV
    function. It estimates the present value of future cash flows by assuming the
    first cash flow happens at the end of the first period. An example of using an
    Excel `npv()` function is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Definition of NPV and NPV rule](img/B06175_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'While using just one future cash flow, the meaning of the `scipy.npv()` function
    is clearer as shown in the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The related Excel function and its output is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Definition of NPV and NPV rule](img/B06175_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For just one future cash flow, the result based on Excel's `npv()` function
    is shown in the preceding right image. For the `numpy.lib.financial.npv()` function,
    the only cash flows of $100 would happen today, while for the Excel `npv()` function,
    the only cash flow of $100 would happen one period later. Thus, *100/(1+0.1)*
    leads to 90.91.
  prefs: []
  type: TYPE_NORMAL
- en: 'The NPV rule is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Definition of NPV and NPV rule](img/B06175_03_45.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Definition of IRR and IRR rule
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **Internal Rate of Return** (**IRR**) is defined as the discount rate that
    makes NPV equal zero. Assume that we invest $100 today and the future cash flows
    will be $30, $40, $40, and $50 for the next four years. Assuming that all cash
    flows happen at the end of the year, what is the IRR for this investment? In the
    following program, the `scipy.irr()` function is applied:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'We could verify whether such a rate does make NPV equal zero. Since the NPV
    is zero, 20.02% is indeed an IRR:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'For a normal project, the IRR rule is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Definition of IRR and IRR rule](img/B06175_03_46.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, *Rc* is the cost of capital. This IRR rule holds only for a normal project.
    Let''s look at the following investment opportunity. The initial investment is
    $100 today and $50 next year. The cash inflows for the next five years will be
    $50, $70, $100, $90, and $20\. If the cost of capital is 10%, should we take the
    project? The time line and corresponding cash flows are shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Definition of IRR and IRR rule](img/B06175_03_47.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The Python codes are given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Since the IRR is 25.9%, which is higher than the cost of capital of 10%, we
    should accept the project based on the IRR rule. In the preceding example, it
    is a normal project. For abnormal projects or projects with multiple IRRs, we
    could not apply the IRR rule. When the cash flows change direction more than once,
    we might have multiple IRRs. Assume that our cash flows will be `504`, -`432`,-`432`,
    -`432`, and `843`, starting today:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The related graph is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Definition of IRR and IRR rule](img/B06175_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Since the direction of our cash flows changes twice, the project might have
    two different IRRs. The preceding right image shows that this is the case. For
    the Python program to draw the preceding NPV profile, see *Appendix F*. Using
    the `spicy.npv()` function, we only got one IRR. From the `fincal.IRRs_f()` function,
    we could get both IRRs; see the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Definition of payback period and payback period rule
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A payback period is defined as the number of years needed to recover the initial
    investment. Assume that the initial investment is $100\. If every year the firm
    could recover $30, then the payback period is 3.3 years:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The decision rule for the payback rule is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Definition of payback period and payback period rule](img/B06175_03_48.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here, *T* is the payback period for a project while *Tc* is the maximum number
    of years required to recover the initial investment. Thus, if *Tc* is four, the
    preceding project with a payback period of 3.3 should be accepted.
  prefs: []
  type: TYPE_NORMAL
- en: The major advantage of the payback period rule is its simplicity. However, there
    are many shortcomings for such a rule. First, it does not consider the time value
    of money. In the previous case, $30 received at the end of the first year is the
    same as $30 received today. Second, any cash flows after the payback period is
    ignored. This bias would be against the project with a long period of future cash
    flows. Last but not least, there is no theoretical foundation to define a good
    cut-off point of *Tc*. In other words, there is no viable reason to argue why
    a cut-off of four years is better than five.
  prefs: []
  type: TYPE_NORMAL
- en: Writing your own financial calculator in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It could be viewed as a great achievement when a new Python learner could write
    his/her own financial calculator. The basic knowledge to do so includes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Knowledge on how to write a function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are the related finance formulae?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For the latter, we have learnt from the preceding sections, such as the formula
    to calculate the present value of one future cash flow. Let''s write the simplest
    Python function to double an input value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, `def` is the keyword for writing a function, `dd` is the function name,
    and `x` in the parentheses is an input variable. For Python, the indentation is
    critical. The preceding indentation indicates that the second line is the part
    of the `dd` function. Calling this function is the same as calling other built-in
    Python functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s write our simplest financial calculator. First, launch Python and
    use its editor to enter the following codes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'For simplicity, each function of the preceding three functions has just two
    lines. After activating those functions by running the whole program, the `dir()`
    function could be used to show their existence:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Calling this self-generated financial calculator is trivial; see the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, when entering input values, two methods could be used: the meaning of
    input variables depend on their order, see the first call, and with a keyword,
    see the last two preceding examples.'
  prefs: []
  type: TYPE_NORMAL
- en: A more elegant method to write one's own financial calculator is shown in *Appendix
    G*.
  prefs: []
  type: TYPE_NORMAL
- en: Two general formulae for many functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section is optional since it is quite complex in terms of mathematical
    expression. Skipping this section would not have any impact on the understanding
    of the other chapters. Thus, this section is for advanced learners. Up to now
    in this chapter, we have learnt the usage of several functions, such as `pv()`,
    `fv()`, `nper()`, `pmt()`, and `rate()` included in the SciPy module or `numpy.lib.financial`
    submodule. The first general formula is related to the present value:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Two general formulae for many functions](img/B06175_03_49.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'On the right-hand side of the preceding equation, the first one is the present
    value of one future cash flow, while the second part is the present value of annuity.
    The variable *type* takes a value of zero (default value); it is the present value
    of a normal annuity, while it is an annuity due if *type* takes a value of 1\.
    The negative sign is for the sign convention. If using the same notation as that
    used for the functions contained in SciPy and `numpy.lib.financial`, we have the
    following formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Two general formulae for many functions](img/B06175_03_50.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here are several examples using both Equation (14) and the `pv()` function
    from SciPy. James intends to invest *x* dollars today for the next 10 years. His
    annual rate of return is 5%. During the next 10 years, he will withdraw $5,000
    at the beginning of each year. In addition, he hopes that he will have $7,000
    at the end of his investment horizon. How much must he invest today, that is,
    what is the value of x? By applying the preceding equation manually, we have the
    following result. Please pay attention to the negative sign:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is the same as when the `scipy.pv()` function is called; see the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'To separate normal annuity from annuity due, we have the following two equations.
    For a normal annuity, we have the following equation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Two general formulae for many functions](img/B06175_03_51.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For annuity due, we have the following equation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Two general formulae for many functions](img/B06175_03_52.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Similarly, for the future value, we have the following general formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Two general formulae for many functions](img/B06175_03_53.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If using the same notations used in SciPy and `numpy.lib.financial`, we have
    the following formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Two general formulae for many functions](img/B06175_03_54.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Similarly, we could separate annuity from annuity due. For a normal annuity,
    we have the following formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Two general formulae for many functions](img/B06175_03_55.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For an annuity due, we have the following formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Two general formulae for many functions](img/B06175_03_56.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the following equations, **present value** (**pv**) appears twice. However,
    they have quite different meanings. Similarly, future value appears twice with
    different meanings as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Two general formulae for many functions](img/B06175_03_57.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s use a simple example to explain the links between those two equations.
    First, let''s simplify our functions by dropping the sign convention and assume
    normal annuity, that is, it is not annuity due:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Two general formulae for many functions](img/B06175_03_58.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Actually, we would have three *pv* (present value) and three *fv* (future value).
    We invest $100 for three years. In addition, at the end of each year for the next
    three years, we invest $20\. If the rate of return is 4% per year, what is the
    future value of our investment?
  prefs: []
  type: TYPE_NORMAL
- en: '![Two general formulae for many functions](img/B06175_03_59.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Obviously, we could apply the last equation to get our answer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Actually, we have three future values. Let''s call them **FV(total)**, **FV(
    annuity)** and **FV(one PV)**. The relationship between them is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Two general formulae for many functions](img/B06175_03_60.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following code shows how to calculate the future value of annuity and the
    future value of one present value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'The total future value is the summation of those two future values: *62.4320+
    112.4864=174.92*. Now, let''s see how to get three corresponding present values.
    Let''s call them **PV(total)**, **PV( annuity)**, and **PV(one PV)**. The relationship
    between them will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Two general formulae for many functions](img/B06175_03_61.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s use the same cash flows shown previously. Obviously, the first $100
    is itself the present value. The present value of three $20s could be calculated
    manually; see the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Thus, the total present value will be *100 + 55.51=155.51*. Alternatively,
    we could apply `scipy.pv()` to estimate the present value of annuity; see the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The relationship between total future value (`174.92`) and total present value
    (`155.51`), has the following relationship:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: In summary, when calling the `scipy.pv()` and `scipy.fv()` functions, the meaning
    of `fv` in the `scipy.pv()` function is different from the final value of `scipy.fv()`.
    Readers have to understand the difference between a total future, the future value
    of one present value, and the future value of annuity. This is true for the `pv`
    variable in the `scipy.fv()` function and the final result after calling the `scipy.pv()`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: Appendix A – Installation of Python, NumPy, and SciPy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install Python via Anaconda, we have the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [http://continuum.io/downloads](http://continuum.io/downloads).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find an appropriate package; see the following screenshot:![Appendix A – Installation
    of Python, NumPy, and SciPy](img/B06175_03_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For Python, different versions coexist. From the preceding screenshot, we see
    that there exist two versions of **3.5** and **2.7**. For this book, the version
    is not that critical. The old version has fewer problems while the new one usually
    has new improvements. After Python is installed via Anaconda, NumPy and SciPy
    will be installed at the same time. After launching Python through Spyder, issue
    the following two lines. If there is no error, then those two modules were pre-installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: The other method is to install Python directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to [http://www.python.org/download](http://www.python.org/download). Depending
    on your computer, choose the appropriate package, for example, Python 3.5.2 version.
    In terms of installing a module, find the Python documentation. The following
    command will install the latest version of a module and its dependencies from
    the **Python Packaging Index** (**PIP**):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'For POSIX users (including Mac OS X and Linux users), the examples in this
    guide assume the use of a virtual environment. To install a specific version,
    see the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Normally, if a suitable module is already installed, attempting to install
    it again will have no effect. Upgrading existing modules must be requested explicitly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Appendix B – visual presentation of time value of money
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If a reader has difficulty understanding the following code, she/he could just
    ignore this part. In finance, we know that $100 received today is more valuable
    than $100 received one year later. If we use size to represent the difference,
    we could have the following Python program to represent the same concept:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'The graph is shown here. The first blue circle is the present value, while
    the second one is the present value of the same $100 at the end of the second
    year:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Appendix B – visual presentation of time value of money](img/B06175_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Appendix C – Derivation of present value of annuity from present value of one
    future cash flow and present value of perpetuity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we have the following two formulae:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Appendix C – Derivation of present value of annuity from present value of
    one future cash flow and present value of perpetuity](img/B06175_03_62.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here, *FV* is the future value, *R* is the discount period rate, *n* is the
    number of periods, and *C* is the same cash flow happening at the end of each
    period with the first cash flow happening at the end of the first period.
  prefs: []
  type: TYPE_NORMAL
- en: 'An annuity is defined as *a set of equivalent cash flows occurring in the future*.
    If the first cash flow occurs at the end of the first period, the present value
    of an annuity is by the following formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Appendix C – Derivation of present value of annuity from present value of
    one future cash flow and present value of perpetuity](img/B06175_03_63.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, *C* is a recursive cash flow happening at the end of each period, *R*
    is period discount rate, and *n* is the number of periods. *Equation (3)* is quite
    complex. However, with a little bit of imagination, we could combine equations
    (1) and (2) to derive Equation (3). This can be done by decomposing an annuity
    into two perpetuities:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Appendix C – Derivation of present value of annuity from present value of
    one future cash flow and present value of perpetuity](img/B06175_03_64.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is equivalent to the following two perpetuities:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Appendix C – Derivation of present value of annuity from present value of
    one future cash flow and present value of perpetuity](img/B06175_03_65.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Conceptually, we could think this way: Mary would receive $20 per year for
    the next 10 years. This is equivalent to two perpetuities: she would receive $20
    every year forever and at the same time PAY $20 every year forever, starting at
    year 11\. Thus, the present value of her annuity will be the present value of
    the first perpetuity minus the present value of her second perpetuity:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Appendix C – Derivation of present value of annuity from present value of
    one future cash flow and present value of perpetuity](img/B06175_03_66.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If the same cash flow happens at the same interval forever, it is called perpetuity.
    If the discount rate is a constant and the first cash flows happens at the end
    of the first period, its present value has the following.
  prefs: []
  type: TYPE_NORMAL
- en: Appendix D – How to download a free financial calculat
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'ecutable file at [http://canisius.edu/~yany/fincal.pyc](http://canisius.edu/~yany/fincal.pyc).
    Assume that it was saved under `c:/temp/`. Change your path; see the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Appendix D – How to download a free financial calculat](img/B06175_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'To find out all contained functions, the `dir()` function is used; see the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'To find out the usage of each function, the `help()` function could be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '![Appendix D – How to download a free financial calculat](img/B06175_03_67.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Appendix E – The graphical presentation of the relationship between NPV and
    R
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An NPV profile is the relationship between a project''s NPV and its discount
    rate (cost of capital). For a normal project, where cash outflows first then cash
    inflows, its NPV will be a decreasing function of the discount rate; see the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'The associated graph is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Appendix E – The graphical presentation of the relationship between NPV and
    R](img/B06175_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To make our graph better, we could add a title, both labels, and one horizon
    line; see the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Appendix E – The graphical presentation of the relationship between NPV and
    R](img/B06175_03_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Appendix F – graphical presentation of NPV profile with two IRRs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Since the direction of cash flow changes twice, we might have two IRRs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'The corresponding graph is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Appendix F – graphical presentation of NPV profile with two IRRs](img/B06175_03_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Appendix G – Writing your own financial calculator in Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, let''s write our simplest financial calculator. First, launch Python and
    use the editor to enter the following codes. For simplicity, each function of
    preceding 10 functions has just two lines. Again, a proper indentation is critical.
    Thus, the second line of each function should be indented:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Assume that the preceding program is called `myCalculator`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following program would generate an executable filed called `myCalculator.cpython-35.pyc`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the present value of $206 received in 10 years with an annual discount
    rate of 2.5%?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the future value of perpetuity with a periodic annual payment of $1
    and a 2.4% annual discount rate?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For a normal project, its NPV is negatively correlated with the discount rate.
    Why?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: John deposits $5,000 in the bank for 25 years. If the annual rate is 0.25% per
    year, what is the future value?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the annual payment is $55 with 20 years remaining, what is the present value
    if the annual discount rate is 5.41%, compounded semi-annually?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If Mary plans to have $2,400 by the end of year 5, how much does she have to
    save each year if the corresponding annual rate is 3.12%?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why have we got a negative number of periods in the following code?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If a firm's earnings per share grows from $2 to $4 over a 9-year period (the
    total growth is 100%), what is its annual growth rate?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this chapter, while writing a present value function, we use `pv_f()`. Why
    not use `pv()`, the same as the following formula?![Exercises](img/B06175_03_68.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here *PV* is the present value, *FV* is the future value, *R* is the periodic
    discount rate, and *n* is the number of periods.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A project contributes cash inflows of $5,000 and $8,000 at the end of the first
    and second years. The initial cost is $3,000\. The appropriate discount rates
    are 10% and 12% for the first and the second years respectively. What is the NPV
    of the project?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Firm A will issue new bonds with annual coupon payment of $80 and a face value
    of $1,000\. Interest payments are made semi-annually, and the bond matures in
    2 years. The spot interest rate for the first year is 10%. At the end of the first
    year, the 1-year spot rate is expected to be 12%:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the present value of the bond?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the lump sum you are willing to accept at the end of the second year?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Peter's rich uncle has promised him a payment of $4,000 if he completes college
    in four years. Richard has just finished a very difficult sophomore (second) year,
    including taking several finance courses. Richard would very much like to take
    a long vacation. The appropriate discount rate is 10% compounded semi-annually.
    What is value that Peter would be giving up today if he took his vacation?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Today, you have $5,000 to invest and your investment horizon is 25 years. You
    are offered an investment plan that will pay you 6 percent per year for the next
    10 years and 9 percent per year for the last 15 years. How much will you have
    at the end of the 25 years? What is your average annual percentage return?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the advantages and disadvantages of using a default input value or
    values?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We know that the present value of growing perpetuity has the following formula:![Exercises](img/B06175_03_69.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Prove it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Today, Jane is 32 years old. She plans to retire at the age of 65 with $2.5
    million savings. If she could get a 3.41%, compounded monthly, return every year,
    what will be her monthly contribution?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assume that we have a set of small programs put together called `fin101.py`.
    What is the difference between the two Python commands, `import fin101` and `from
    fin101 import *`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you prevent erroneous inputs such as negative interest rate?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a Python program to estimate payback period. For example, the initial
    investment is $256, and the expected future cash inflows in the next 7 years will
    be $34, $44, $55, $67, $92, $70, and $50\. What is the project's payback period
    in years?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the preceding exercise, if the discount rate is 7.7 percent per year, what
    is the discounted payback period? Note: The discount payback period looks at how
    to recover our initial investment by checking the summation of present values
    of future cash flows.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, many basic concepts related to finance were introduced, such
    as present value of one future cash flow, present value of perpetuity, present
    value of annuity, future value of one cash flow/annuity, and the concept of present
    of annuity due. The several decision rules were discussed in detail, such as the
    NPV rule, IRR rule, and payback period rule. For the next chapter, we will discuss
    how to retrieve data associated with economics, finance, and accounting from several
    open sources such as Yahoo!Finance, Google finance, Prof. French's data library,
    and Federal Research's economic data library.
  prefs: []
  type: TYPE_NORMAL
