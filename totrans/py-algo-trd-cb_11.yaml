- en: Algorithmic Trading - Real Trading
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've built various algorithmic trading strategies and successfully
    backtested them with satisfactory results and paper traded them in live markets,
    it is finally time for real trading.
  prefs: []
  type: TYPE_NORMAL
- en: Real trading is where we execute a trading strategy in the live market hours
    with real money. If your strategy has performed well in backtesting and paper
    trading, you can expect similar results with real money. Please note that your
    strategy may not perform as expected in the real market, despite giving good backtesting
    and paper trading results. Profitable backtesting and paper trading results are
    prerequisites for a profitable real trading experience but are not sufficient
    to guarantee a profit for every session.
  prefs: []
  type: TYPE_NORMAL
- en: 'For real trading, a strategy configuration is required. It consists of multiple
    parameters, some of which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Start and end times**: The time duration within the current day for which
    paper trading should be run.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Financial instrument(s)**: One or more financial instruments for which paper
    trading should be performed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Candle interval**: One of various possible candle intervals; for example,
    `1 minute`, `15 minutes`, `hour`, or `day`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Strategy specific parameters**: Values for custom parameters defined in the
    strategy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Strategy mode**: One of intraday or delivery. Intraday strategies punch intraday
    orders, which are squared-off at the end of the day. Delivery strategies punch
    delivery orders, which don''t square-off at the end of the day and get carried
    forward to the next trading day.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A real trading engine is required to perform real trading on a given strategy.
    In this chapter, you will use the real trading engine provided by AlgoBulls ([https://algobulls.com](https://algobulls.com)),
    an algorithmic trading platform that makes its services available via its developer
    options. It provides a Python package called `pyalgotrading` ([https://github.com/algobulls/pyalgotrading](https://github.com/algobulls/pyalgotrading))
    to make these services available.
  prefs: []
  type: TYPE_NORMAL
- en: 'You coded two algorithmic trading strategies in [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml),
    *Algorithmic Trading Strategies – Coding Step by Step*. Recall that the strategy
    descriptions are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**EMA-Regular-Order strategy**: A strategy based on the technical indicator
    EMA and regular orders. (The first six recipes of [Chapter 7](d5760c5d-fa09-4008-ab45-5d7d69c4bde9.xhtml),
    *Placing Bracket and Cover Orders on the Exchange*)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MACD-Bracket-Order strategy**: A strategy based on the technical indicator
    MACD and bracket orders. (The remaining six recipes of [Chapter 7](d5760c5d-fa09-4008-ab45-5d7d69c4bde9.xhtml),
    *Placing Bracket and Cover Orders on the Exchange*)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These strategies are also available as part of a Python package, `pyalgostrategypool`.
    You can install it using pip with the `$ pip install pyalgostrategypool` command.
    You can also check them out on GitHub ([https://github.com/algobulls/pyalgostrategypool](https://github.com/algobulls/pyalgostrategypool)).
  prefs: []
  type: TYPE_NORMAL
- en: When following [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml), *Algorithmic
    Trading Strategies – Coding Step by Step*, you uploaded these two strategies to
    your AlgoBulls account. In this chapter, you will fetch these strategies from
    your AlgoBulls account and perform real trading on them. Real trading is fully
    automated and requires no involvement from your end while the trading session
    is going on. Upon real trading, you would gather strategy execution logs and various
    reports – namely, the profit and loss report and the statistics report. By using
    `pyalgotrading`, you ensure that you're focusing on developing and executing real
    trading strategies without worrying about the ecosystem needed for the strategy's
    execution.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter includes step-by-step recipes for the previously mentioned strategies,
    from setting up a connection to the AlgoBulls platform, fetching the strategy,
    and running real trading jobs to fetching the execution logs and fetching various
    types of reports.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: EMA-Regular-Order strategy – fetching the strategy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EMA-Regular-Order strategy – real trading the strategy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EMA-Regular-Order strategy – fetching real trading logs in real time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EMA-Regular-Order strategy – fetching a real trading report – P&L table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EMA-Regular-Order strategy – fetching a real trading report – statistics table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MACD-Bracket-Order strategy – fetching the strategy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MACD-Bracket-Order strategy – real trading the strategy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MACD-Bracket-Order strategy – fetching real trading logs in real time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MACD-Bracket-Order strategy – fetching a real trading report – P&L table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MACD-Bracket-Order strategy – fetching a real trading report – statistics table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Real trading is only meaningful if run during the live market hours, unlike
    backtesting, which can be run at any time. Please make sure you try out the recipes
    of this chapter in live market hours.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You will need the following to successfully execute the recipes in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Python 3.7+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Python package:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pyalgotrading` ( `$ pip install pyalgotrading` )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure you have added and bound your broking details on [https://algobulls.com](https://algobulls.com).
    Refer to *Appendix II* for more details. You can use any broker supported by the
    AlgoBulls platform for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The latest Jupyter notebook for this chapter can be found on GitHub at [https://github.com/PacktPublishing/Python-Algorithmic-Trading-Cookbook/tree/master/Chapter11](https://github.com/PacktPublishing/Python-Algorithmic-Trading-Cookbook/tree/master/Chapter11).
  prefs: []
  type: TYPE_NORMAL
- en: EMA–Regular–Order strategy – fetching the strategy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will fetch the `StrategyEMARegularOrder` strategy class
    from your account on the AlgoBulls platform. This recipe starts with setting up
    a connection to the AlgoBulls platform, querying all available strategies in your
    account, and fetching details of the required strategy class; that is, `StrategyEMARegularOrder`.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you have gone through the first six recipes of [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml), *Algorithmic
    Trading Strategies – Coding Step by Step*, to get a complete picture of the strategy
    class we will be using; that is, `StrategyEMARegularOrder`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We execute the following steps for this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the necessary modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new AlgoBulls connection object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch the authorization URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Log into the preceding link with your AlgoBulls credentials, fetch your token,
    and set it here (refer to *Appendix II* for more details):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch and display all the strategies you have created and uploaded so far:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output. Your output may differ (make sure you have followed
    the recipes in [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml), *Algorithmic
    Trading Strategies – Coding Step by Step*, to get a similar output):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4197d895-3742-4db6-aa0d-b5caac9f4a4e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fetch and display the strategy code of the first strategy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output (your output may differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Before real trading your strategy, you can inspect your strategy to ensure
    you have the right strategy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We got the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The complete output is not shown here. Please visit the following link to read
    the complete output, at [https://github.com/algobulls/pyalgostrategypool/blob/master/pyalgostrategypool/strategy_ema_regular_order.py](https://github.com/algobulls/pyalgostrategypool/blob/master/pyalgostrategypool/strategy_ema_regular_order.py).
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You import the necessary modules in *step 1*. In *step 2*, an instance of the
    `AlgoBullsConnection` class is created, named `algobulls_connection`. In *step
    3*, you get the authorization URL using the `get_authorization_url()` method of
    the `algobulls_connection` object. This prints the authorization URL. You should
    visit this URL from your web browser to sign into the AlgoBulls platform and fetch
    your developer access token. (You can find more details, along with screenshots,
    in *Appendix II* on fetching developer access tokens from the AlgoBulls platform.)
    You copy the access token and set it in *step 4* using the `set_access_token()`
    method of `algobulls_connection`. If the token is accepted, a successful connection
    is set up with the AlgoBulls platform.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 5*, you fetch all the strategies you have created and uploaded on the
    AlgoBulls platform so far. You use the `get_all_strategies()` method for this
    step and assign it to a new variable, `all_strategies`. This variable is a `pandas.DataFrame`
    object with `strategyCode` and `strategyName` columns. This table holds information
    on the strategy code and strategy names you have uploaded previously. If you followed
    the *EMA-Regular-Order strategy – uploading the strategy on the AlgoBulls trading
    platform* recipe from [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml),
    *Algorithmic Trading Strategies – Coding Step by Step*, you will find a strategy
    called **EMA regular order strategy**. In *step 6*, you assign the strategy code
    of the strategy, **EMA regular order strategy**, to a new variable called `strategy_code1`.
    The strategy code is shown in the output of this step. This strategy code is unique
    for every strategy on the AlgoBulls platform.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, in *step 7*, you ensure that the strategy being referred to by `strategy_code1`
    is indeed the one you uploaded earlier (in the *EMA-Regular-Order strategy – uploading
    the strategy on the AlgoBulls trading platform* recipe in [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml), *Algorithmic
    Trading Strategies – Coding Step by Step*). You use the `get_strategy_details()`
    method of the `algobulls_connection` object to inspect the strategy. This method
    takes strategy code as an argument. You pass `strategy_code1` here. This method
    returns the entire class code as a string. You assign it to a new variable, `strategy_details1`,
    and display it.
  prefs: []
  type: TYPE_NORMAL
- en: If, you would like to change the class code being referred to by `strategy_code1`,
    as shown in *step 7*, please refer to *There's more…* section of the *EMA-Regular-Order
    strategy – uploading the strategy on the AlgoBulls trading platform* recipe in
    [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml), *Algorithmic Trading
    Strategies – Coding Step by Step*.
  prefs: []
  type: TYPE_NORMAL
- en: EMA–Regular–Order strategy – real trading the strategy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will perform real trading on the **EMA-Regular-Order strategy**.
    You must have fetched this strategy from your account on the AlgoBulls platform
    in the preceding recipe of this chapter. You will leverage the real trading functionality
    facilitated by `pyalgotrading` for this recipe, which, in turn, submits a real
    trading job on the AlgoBulls platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once submitted, real trading will be run by the AlgoBulls real trading engine.
    You can query its status any time to find out about the state of the real trading
    job. The job goes through the following states, in the given order:'
  prefs: []
  type: TYPE_NORMAL
- en: '`STARTING` (intermediate state)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`STARTED` (stable state)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`STOPPING` (intermediate state)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`STOPPED` (stable state)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On submitting a job, it starts with an intermediate state, `STARTING`. In this
    state, the AlgoBulls real trading engine fetches the strategy and gets the execution
    environment ready, which may take a couple of minutes. Once done, the job moves
    to the `STARTED` state. The real trading strategy is implemented in this stage.
    Here, it stays as long as it takes for real trading to complete. Once done, the
    job moves to an intermediate state, `STOPPING`. In this state, the AlgoBulls real
    trading engine cleans up the resources that have been allocated for this job,
    which usually takes less than a minute. Finally, the job moves to the `STOPPED` state.
  prefs: []
  type: TYPE_NORMAL
- en: If you have already submitted a strategy real trading job, you cannot submit
    another job for the same strategy until the first job completes. This means you
    have to wait for the first job to move to the `STOPPED` state. If the first job
    is long-running and you would like to stop it immediately, you can submit a stop
    job request via `pyalgotrading`. You need to ensure the job is in the `STARTED` state
    before submitting the request.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following state machine diagram demonstrates the various states and transitions
    of a real trading job during its lifetime on the AlgoBulls platform:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4c0360d4-c14b-4cb0-a789-666710dcd2a4.png)'
  prefs: []
  type: TYPE_IMG
- en: After submitting a real trading job, you can fetch logs and reports for the
    strategy's execution in real time. The logs and reports help validate the strategy's
    performance and debug any potential issues.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you have gone through the first six recipes of [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml), *Algorithmic
    Trading Strategies – Coding Step by Step*, to get a complete picture of the strategy
    class we will be using; that is, `StrategyEMARegularORder`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the `algobulls_connection` and `strategy_code1` objects are available
    in your Python namespace. Refer to the preceding recipe to set up the `algobulls_connection`
    and `strategy_code1` objects.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We execute the following steps for this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the necessary modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Search for an instrument by using its trading symbol as a keyword. Assign the
    returned object to `instruments`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We got the following output (your output may differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Get `value` for the instrument of choice from `instruments`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We got the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Submit a real trading job for `strategy_code1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We got the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Check the status of the submitted real trading job:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We got the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Check the status of the submitted job again after some time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We got the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *step 1*, you import the `time` class from the `datetime` module and all
    the constants from the `pyalgotrading.constants` module. In *step 2*, you fetch
    the instrument that you would like to real trade the strategy for, **EMA-Regular-Order
    strategy**, using the `search_instrument()` method of the `algobulls_connection`
    object. The `search_instrument()` method accepts a search string as an argument,
    which should be the trading symbol, in part or complete, of the instrument you
    are interested in. You pass `'SBIN'` here. This function returns a list containing
    details of the instruments that match the search string. There could be multiple
    instruments that have the search string in their trading symbols. In *step 3*,
    you fetch the value of the first matched instrument and assign it to a new variable,
    `instrument`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In *step 4*, you submit a real trading job using the `realtrade()` method of
    the `algobulls_connection()` object. It takes the following arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '`strategy_code`: Strategy code of the strategy for which real trading has to
    be performed. This should be a string. You pass `strategy_code1` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`start_time`: Today''s time when real trading should be started. This should
    be a `datetime.time` object. Here, you pass an object holding the value for 9:15
    hours – `time(hour=9, minute=15)`. Refer to the first recipe of this book for
    details on creating a `time` object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`end_time`: Today''s time when real trading should be performed. This object
    should hold a time value ahead of the value held by `start_time`. This should
    be a `datetime.time` instance. Here, you pass an object holding the value 15:30
    hours – `time(hour=15, minute=30)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`instrument`: A financial instrument for which real trading should be run.
    Historical data will be fetched for this instrument. This should be a string.
    You pass `instrument` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lots`: Number of lots for which real trading should be performed. This should
    be an integer. The quantity is calculated by the strategy as *number of lots*
    × *lot size of the financial instrument*. You pass `1` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`strategy_parameters`: Parameter names and values expected by the strategy.
    This should be a dictionary, with `parameter-name` and `parameter-value` as key-value
    pairs. You pass the following parameters here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`timeperiod1: 5`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`timeperiod2: 12 `'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (Recall that the parameters for the EMA-Regular-Order strategy have been defined
    in its `__init__()` method, as shown in the first recipe of [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml), *Algorithmic
    Trading Strategies – Coding Step by Step*).
  prefs: []
  type: TYPE_NORMAL
- en: '`candle_interval`: The candle interval for the historical data being fetched
    for real trading. This should be an enum of the `CandleInterval` type. You pass
    `CandleInterval.MINUTES_15` here. (The `CandleInterval` enum provides various
    enums for candle intervals, some of which are `MINUTE_1`, `MINUTES_3` , `MINUTES_5`,
    `MINUTES_10`, `MINUTES_15`, `MINUTES_30`, `HOUR`, and `DAY`.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the job submission is successful, you will see `Success` messages printed
    by the `realtrade()` function.
  prefs: []
  type: TYPE_NORMAL
- en: Once a job has been submitted, it takes a while to start. After starting, it
    may take some time to finish, depending on the duration of real trading, as specified
    using the `start_time` and `end_time` arguments. Usually, real trading is run
    for the entire trading day, which means the job would be running for 6-8 hours.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 5*, you fetch the job's status using the `get_realtrading_job_status()`
    method of the `algobulls_connection` object. You pass `strategy_code1` as the
    argument here. This method returns a dictionary with a single key-value pair –
    the *data* and the *job* status. If you query the status immediately after placing
    the job, you get `'STARTING'` as the status. In *step 6*, you query the status
    again after some time, and if the job starts, you get a status of `'STARTED'`.
  prefs: []
  type: TYPE_NORMAL
- en: A successful submission implies that the minimum inputs needed to real trade
    a strategy have been passed in the required format. However, this does not ensure
    that the strategy will run without errors. The strategy's execution may still
    run into errors during real trading. To debug execution issues, you would need
    to fetch the output logs, which will be explained in the next recipe. Possible
    reasons for errors could be either bugs in the strategy class' Python code or
    that an incomplete `strategy_parameters` dictionary has been passed to the `realtrade()`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If a job is running for a long time and you would like to stop it before its
    completion, you can use the `stop_realtrading_job()` method of the `algobulls_connection`
    object. This method accepts strategy code as an argument. You pass `strategy_code1`
    here. This method submits a stop request to the AlgoBulls real trading engine.
    If the request is accepted, you will see a `Success` message here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'If you query the status after submitting the stop request, you''ll get `''STOPPING''` as
    the status:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'If you query the status again after some time, and if the job has stopped,
    you''ll get `''STOPPED''` as the status:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: EMA–Regular–Order strategy – fetching real trading logs in real time
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After submitting a real trading job on the AlgoBulls platform, the AlgoBulls
    real trading engine starts executing the strategy. During its execution, every
    event that occurs and the decisions that are made by the AlgoBulls real trading
    engine are recorded with exact timestamps in the form of textual logs.
  prefs: []
  type: TYPE_NORMAL
- en: Examples of recorded activities include the given strategy config, every new
    candle generated at regular intervals, trades punched by your strategy, the entry
    and exit of positions created by these trades, waits for new candles, and so on.
    These logs are quintessential when validating the strategy and debugging behavior
    or performance issues that are frequently encountered while developing a strategy.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you will fetch real trading logs for your strategy. The logs
    start coming up as soon as your submitted real trading job reaches the `'STARTED'`
    state (refer to the preceding recipe for more information on the states of a real
    trading job). The AlgoBulls platform allows you to fetch logs in real time, even
    while the real trading job is still going on. You can get insights into the strategy's
    execution without having to wait for the real trading job to complete. This is
    helpful as real trading jobs are usually long-running. The `pyalgotrading` package
    provides a simple method we can use to fetch the execution logs for a given strategy.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you have gone through the first six recipes of [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml),
    *Algorithmic Trading Strategies – Coding Step by Step*, to get a complete picture
    of the strategy class we will be using; that is, `StrategyEMARegularOrder`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the `algobulls_connection` and `strategy_code1` objects are available
    in your Python namespace. Refer to the first recipe of this chapter to set up
    the `algobulls_connection` and `strategy_code1` objects.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Execute the following steps to complete this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fetch the real trading execution logs for `strategy_code1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'We got the following output (your output may differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch the real trading execution logs for `strategy_code1` again after some
    time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'We got the following output (your output may differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The complete output is not shown here. Please visit the following link to read
    the complete output: [https://github.com/algobulls/pyalgostrategypool/blob/master/pyalgostrategypool/sample/realtrading/strategy_ema_regular_order/logs.txt](https://github.com/algobulls/pyalgostrategypool/blob/master/pyalgostrategypool/sample/realtrading/strategy_ema_regular_order/logs.txt).'
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *step 1*, you use the `get_realtrading_logs()` method of the `algobulls_connection`
    object to fetch the strategy real trading logs in real time. This method accepts
    strategy code as an argument. You pass `strategy_code1` here. The return data
    is a string. If you try this step immediately after submitting the job, you get
    a string, which says the logs are not ready yet (`[2020-07-09 09:12:25] Logs not
    available yet. Please retry in sometime.`). This happens if the real trading job
    is in the `'STARTING'` state.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 2*, you fetch the logs again after some time. If the job is out of
    the `'STARTING'` state, you start getting your strategy execution logs. You get
    all the real trading logs every time you call the `get_realtrading_logs()` function.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once the real trading job moves to the `'STOPPED'` state, no new logs are generated.
    You can fetch the complete logs any time before you submit the next real trading
    job for the same strategy. If a new real trading job is submitted (for the same
    strategy), these logs will no longer be accessible via the `get_realtrading_logs()`
    method. You can save the fetched logs to a file if you'd like to refer to them
    at a later date.
  prefs: []
  type: TYPE_NORMAL
- en: EMA–Regular–Order strategy – fetching a real trading report – profit and loss
    table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After submitting a real trading job on the AlgoBulls Platform, the AlgoBulls
    real trading engine starts executing the strategy. During its execution, along
    with the logs, the AlgoBulls real trading engine also generates a P&L table in
    real time. This table holds information on every trade punched in by the strategy.
    It also contains details on the mappings between entry and exit orders, the trade
    P&L, and the cumulative P&L, sorted chronologically, with the latest order first.
    This table gives us insight into the strategy's overall performance with the help
    of individual and cumulative P&L numbers. The entry-exit order mapping also helps
    validate the strategy's behavior.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you will fetch the P&L table report for your strategy. This
    report is available as soon as the first trade is punched in by your strategy
    after you submit a real trading job. The AlgoBulls platform allows you to fetch
    the P&L table in real time, even while the real trading job is still going on.
    You can get insights into the strategy's performance without having to wait for
    the real trading job to complete. This is helpful as real trading jobs are usually
    long-running. The `pyalgotrading` package provides a simple method we can use
    to fetch the P&L table for a given strategy.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you have gone through the first six recipes of [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml),
    *Algorithmic Trading Strategies – Coding Step by Step*, to get a complete picture
    of the strategy class we will be using; that is, `StrategyEMARegularOrder`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the `algobulls_connection` and `strategy_code1` objects are available
    in your Python namespace. Refer to the first recipe of this chapter to set up
    the `algobulls_connection` and `strategy_code1` objects.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Fetch the real trading P&L report for `strategy_code1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output. Your output may differ (note that the following
    output has been split into multiple tables for representation purposes. You will
    see a single wide table in your Jupyter Notebook):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c036f082-09ea-4980-98cc-78befbfd7668.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, you use the `get_realtrading_report_pnl_table()` method of
    the `algobulls_connection` object to fetch the real trading P&L table in real
    time. This method accepts strategy code as an argument. You pass `strategy_code1`
    here. The return data is a `pandas.DataFrame` object with multiple columns, described
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`instrument`: Financial instrument for which the trade was entered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`entry_timestamp`: The timestamp at which the entry order was placed. (Note
    that it may remain in the `''OPEN''` state for a while before it goes to the `''COMPLETE''`
    state.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`entry_transaction_type`: Entry order transaction type (either `BUY` or `SELL`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`entry_quantity`: Entry order quantity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`entry_price`: Price at which the entry order gets executed and goes to the `''COMPLETE''`
    state.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`exit_timestamp`: The timestamp at which the exit order was placed. (Note that
    it may remain in the `''OPEN''` state for a while before it goes to the `''COMPLETE''`
    state.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`exit_transaction_type`: Exit order transaction type (either `BUY` or `SELL`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`exit_quantity`: Exit order quantity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`exit_price`: Price at which the exit order gets executed and goes to the `''COMPLETE''`
    state.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pnl_absolute`: Difference between the exit order execution price and the entry
    order execution price. Mathematically, this is (*exit_price* - *entry_price*)**exit_quantity* for
    a long trade and (*entry_price* - *exit_price*)**exit_quantity* for a short trade.
    A positive value would imply that the trade is a profit-making trade. A negative
    value would imply that the trade is a loss-making trade.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pnl_percentage`: Percentage of profit or loss with respect to the entry price.
    Mathematically, this is *pnl_absolute* / *entry_price* / *exit_quantity* x *100*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pnl_cumulative_absolute`: Cumulative profit or loss. Mathematically, this
    is the sum of all the `pnl_absolute` values of the previous trades. This number
    gives us direct insight into the strategy''s performance against the simulation
    time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pnl_cumulative_percentage`: Percentage of cumulative profit or loss with respect
    to the entry price. Mathematically, this is *pnl_cumulative* / *entry_price /
    exit_quantity* × *100*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once the real trading job moves to the `'STOPPED'` state, the P&L table report
    will not update anymore. You can fetch the complete P&L report any time before
    you submit the next real trading job for the same strategy. If a new real trading
    job is submitted (for the same strategy), this report will no longer be accessible
    via the `get_realtrading_report_pnl_table()` method. You can save the fetched
    report to a `.csv` file if you'd like to refer to it at a later date.
  prefs: []
  type: TYPE_NORMAL
- en: EMA–Regular–Order strategy – fetching a real trading report – statistics table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After submitting a real trading job on the AlgoBulls platform, the AlgoBulls
    real trading engine starts executing the strategy. During its execution, along
    with the logs and P&L table, the AlgoBulls real trading engine also generates
    a summary from the P&L table in real time. This summary is a table of statistics
    containing various statistical numbers, such as `Net P&L` (absolute and percentage),
    `Max Drawdown` (absolute and percentage), count of total trades, winning trades,
    losing trades, long trades and short trades, the maximum gain and minimum gain
    (or maximum loss), and the average profit per winning and losing trade. This table
    gives an instant overview of the strategy's overall performance.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you will fetch the statistics table report for your strategy.
    This report is available as soon as the first trade is punched in by your strategy
    after you submit a real trading job. The AlgoBulls platform allows you to fetch
    the statistics table in real time, even while the real trading job is still going
    on. You can get insights into the strategy's performance without having to wait
    for the real trading job to complete. This is helpful as real trading jobs are
    usually long-running. The `pyalgotrading` package provides a simple method we
    can use to fetch the statistics table for a given strategy.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you have gone through the first six recipes of [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml), *Algorithmic
    Trading Strategies – Coding Step by Step*, to get a complete picture of the strategy
    class we will be using; that is, `StrategyEMARegularOrder`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the `algobulls_connection` and `strategy_code1` objects are available
    in your Python namespace. Refer to the first recipe of this chapter to set up
    the `algobulls_connection` and `strategy_code1` objects.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Fetch the real trading statistics report for `strategy_code1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'We got the following output (your output may differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d55b9486-05e7-49f2-b21c-25ce31ebd828.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, you use the `get_realtrading_report_statistics()` method of
    the `algobulls_connection` object to fetch the real trading statistics table in
    real time. This method accepts strategy code as an argument. You pass `strategy_code1`
    here. The return data is a `pandas.DataFrame` object with two columns – `highlight_type`
    and `highlight_value` – and multiple rows. The rows are described as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Net PnL`: The cumulative real trading P&L. This is also the `pnl_cumulative_absolute`
    value of the first entry in the P&L table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Net PnL %`: The cumulative real trading P&L percentage. This is also the `pnl_cumulative_percentage`
    value of the first entry in the P&L table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Max Drawdown`: The lowest value in the `pnl_cumulative` column of the P&L
    table. This indicates the maximum loss your strategy has encountered during the
    execution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Max Drawdown %`: Mathematically, this is *(Max Drawdown)* / *(corresponding
    entry_price) / exit_quantity* × *100*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Number of Trades`: Total trades (entry and exit counted as one) during the
    session.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Number of Wins`: Count of trades where the trade P&L was non-negative.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Number of Losses`: Count of trades where the trade P&L was negative.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Number of Long Trades`: Count of trades where the entry transaction type was
    `''BUY''`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Number of Short Trades`: Count of trades where the entry transaction type
    was `''SELL''`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Max Gain`: P&L of the trade with the maximum P&L value among all trades.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Min Gain`: P&L of the trade with the minimum P&L value among all trades.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Avg. Profit per winning trade`: Mathematically, this is *(Total P&L of winning
    trades)* / *(Count of winning trades)*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Avg. Profit per losing trade`: Mathematically, this is *(Total P&L of losing
    trades)* / *(Count of losing trades)*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If the statistics table is fetched while the real trading job is still running,
    the aforementioned numbers will be intermediate numbers, based on the trades completed
    until that time. The numbers may change as more trades are punched in, until the
    real trading job completes.
  prefs: []
  type: TYPE_NORMAL
- en: Once the real trading job moves to the `'STOPPED'` state, the statistics table
    will not change anymore. You can fetch the complete statistics table any time
    before you submit the next real trading job for the same strategy. If a new real
    trading job is submitted (for the same strategy), this table will no longer be
    accessible via the `get_realtrading_report_statistics()` method. You can save
    the fetched report table to a `.csv` file if you'd like to refer to it at a later
    date.
  prefs: []
  type: TYPE_NORMAL
- en: MACD–Bracket–Order strategy – fetching the strategy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will fetch the `StrategyMACDBracketOrder` strategy class
    from your account on the AlgoBulls platform, which you must have uploaded while
    going through the last recipe in [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml), *Algorithmic
    Trading Strategies – Coding Step by Step*. This recipe starts with setting up
    a connection to the AlgoBulls platform, querying all available strategies in your
    account, and fetching details about the required strategy class; that is, `StrategyMACDBracketOrder`.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you have gone through the last six recipes of [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml), *Algorithmic
    Trading Strategies – Coding Step by Step*, to get a complete picture of the strategy
    class we will be using; that is, `StrategyMACDBracketOrder`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Execute the following steps to complete this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the necessary modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new AlgoBulls connection object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch the authorization URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'We got the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Log into the preceding link with your AlgoBulls credentials, fetch your token,
    and set it here (refer to *Appendix II* for more details):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch and display all the strategies you have created and uploaded so far:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'We got the following output. Your output may differ (make sure you''ve followed
    the recipes in [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml), *Algorithmic
    Trading Strategies – Coding Step by Step*, to get a similar output):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b27e136e-3524-4f41-b887-664074f8d1da.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fetch and display the strategy code of the second strategy; that is, the MACD-Bracket-Order
    strategy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'We got the following output (your output may differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Before real trading your strategy, you can inspect your strategy to ensure
    you have the right strategy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'We got the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The complete output is not shown here. Please visit the following link to read
    the complete output: [https://github.com/algobulls/pyalgostrategypool/blob/master/pyalgostrategypool/strategy_macd_bracket_order.py](https://github.com/algobulls/pyalgostrategypool/blob/master/pyalgostrategypool/strategy_macd_bracket_order.py).
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You import the necessary modules in *step 1*. In *step 2*, you create an instance
    of the `AlgoBullsConnection` class, named `algobulls_connection`. In *step 3*,
    you get the authorization URL using the `get_authorization_url()` method of the
    `algobulls_connection` object. This prints the authorization URL. You should visit
    this URL from your web browser to sign into the AlgoBulls platform and fetch your
    developer access token. (You can find more details, along with screenshots, in
    *Appendix II* on fetching a developer access token from the AlgoBulls platform.)
    You copy the access token and set it in *step 4* using the `set_access_token()`
    method of `algobulls_connection`. If the token is accepted, a successful connection
    is set up with the AlgoBulls platform.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 5*, you fetch all the strategies you have created and uploaded on the
    AlgoBulls platform so far. You use the `get_all_strategies()` method for this
    step and assign it to a new variable, `all_strategies`. This variable is a `pandas.DataFrame`
    object with `strategyCode` and `strategyName` columns. This table holds information
    on the strategy codes and the strategy names you have uploaded previously.
  prefs: []
  type: TYPE_NORMAL
- en: If you followed the *MACD-Bracket-Order Strategy – uploading the strategy on
    the AlgoBulls trading platform* recipe from [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml),
    *Algorithmic Trading Strategies – Coding Step by Step*, you will find a strategy
    called **MACD-Regular-Order strategy**. In *step 6*, you assign the strategy code
    of the MACD-Regular-Order strategy to a new variable called `strategy_code2`.
    The strategy code is shown in the output of this step. This strategy code is unique
    for every strategy on the AlgoBulls platform.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, in *step 7*, you ensure that the strategy being referred to by `strategy_code2`
    is indeed the one you uploaded earlier (in the last recipe of [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml), *Algorithmic
    Trading Strategies – Coding Step by Step*). You use the `get_strategy_details()`
    method of the `algobulls_connection` object to inspect the strategy. This method
    takes strategy code as an argument. You pass `strategy_code2` here. This method
    returns the entire class code as a string. You assign it to a new variable, `strategy_details2`,
    and display it.
  prefs: []
  type: TYPE_NORMAL
- en: If, you'd like to change the class code being referred to by `strategy_code2`,
    as shown in *step 7*, please refer to the *There's more…* section of the last
    recipe in [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml), *Algorithmic
    Trading Strategies – Coding Step by Step*.
  prefs: []
  type: TYPE_NORMAL
- en: MACD–Bracket–Order strategy – real trading the strategy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will perform real trading on the MACD-Bracket-Order strategy.
    You must have fetched this strategy from your account on the AlgoBulls platform
    in the preceding recipe of this chapter. You will leverage the real trading functionality
    facilitated by `pyalgotrading` for this recipe, which, in turn, submits a real
    trading job on the AlgoBulls platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once submitted, real trading will be run by the AlgoBulls real trading engine.
    You can query the status anytime to find out the state of the real trading job.
    The job goes through the following states, in the given order:'
  prefs: []
  type: TYPE_NORMAL
- en: '`STARTING` (intermediate state)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`STARTED` (stable state)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`STOPPING` (intermediate state)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`STOPPED` (stable state)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On submitting a job, it starts with an intermediate state, `'STARTING'`. In
    this state, the AlgoBulls real trading engine fetches the strategy and get the
    execution environment ready, which may take a couple of minutes. Once done, the
    job moves to the `'STARTED'` state. Strategy real trading happens in this stage.
    Here, it stays as long as it takes for real trading to complete. Once done, the
    job moves to an intermediate state, `'STOPPING'`. In this state, the AlgoBulls
    real trading engine cleans up the resources allocated for this job, which usually
    takes less than a minute. Finally, the job moves to the `'STOPPED'` state.
  prefs: []
  type: TYPE_NORMAL
- en: If you have already submitted a real trading job for a strategy, you cannot
    submit another job for the same strategy until the first job completes. This means
    you have to wait for the first job to move to the `'STOPPED'` state. If the first
    job is long-running and you would like to stop it immediately, you can submit
    a stop job request via `pyalgotrading`. You need to ensure the job is in the `'STARTED'`
    state before submitting the request.
  prefs: []
  type: TYPE_NORMAL
- en: After submitting a real trading job, you can fetch logs and reports for the
    strategy execution in real time. These logs and reports help validate the strategy's
    performance and debug any potential issues.
  prefs: []
  type: TYPE_NORMAL
- en: You can refer to the second recipe of this chapter for the state machine diagram
    of a real trading job. It demonstrates the various states and transitions of a
    real trading job during its lifetime on the AlgoBulls platform.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you have gone through the last six recipes of [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml), *Algorithmic
    Trading Strategies – Coding Step by Step*, to get a complete picture of the strategy
    class we will be using; that is, `StrategyMACDBracketOrder`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the `algobulls_connection` and `strategy_code2` objects are available
    in your Python namespace. Refer to the preceding recipe of this chapter to set
    up the `algobulls_connection` and `strategy_code2` objects.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Execute the following steps to complete this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the necessary modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Search for an instrument and use its trading symbol as a keyword. Assign the
    returned object to `instruments`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'We got the following output (your output may differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Get `value` for the instrument of choice from `instruments`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'We got the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Submit a real trading job for `strategy_code2`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'We got the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Check the status of the submitted real trading job:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Check the status of the submitted real trading job again after some time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *step 1*, you import the `time` class from the `datetime` module and all
    the constants from the `pyalgotrading.constants` module. In *step 2*, you fetch
    the instrument that you would like to real trade the strategy for, the **MACD-Bracket-Order
    strategy**, using the `search_instrument()` method of the `algobulls_connection`
    object. The `search_instrument()` method accepts a search string as an argument,
    which should be the trading symbol, in part or complete, of the instrument you
    are interested in. You pass `'TATASTEEL'` here. This function returns a list with
    details of instruments that match the search string. There could be multiple instruments
    that could have the search string in their trading symbols. In *step 3*, you fetch
    the value of the first matched instrument and assign it to a new variable, `instrument`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In *step 4*, you submit a real trading job using the `realtrade()` method of
    the `algobulls_connection()` object. It takes the following arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '`strategy_code`: Strategy code of the strategy for which real trading has to
    be performed. This should be a string. You pass `strategy_code2` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`start_time`: Today''s time when real trading should be started. This should
    be a `datetime.time` object. Here, you pass an object holding the value 9:15 hours –
    `time(hour=9, minute=15)`. Refer to the first recipe of this book for details
    on creating a `datetime` object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`end_time`: Today''s time when real trading should be performed. This object
    should hold a time value ahead of the value held by `start_time`. This should
    be a `datetime.time` instance. Here, you pass an object holding the value 15:30
    hours – `time(hour=15, minute=30)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`instrument`: Financial instrument for which real trading should be run. Historical
    data will be fetched for this instrument. This should be a string. You pass `instrument`
    here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lots`: Number of lots for which real trading should be performed. This should
    be an integer. The quantity is calculated by the strategy as *number of lots*
    × *lot size of the financial instrument*. You pass `1` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`strategy_parameters`: Parameter names and values expected by the strategy.
    This should be a dictionary, with `parameter-name` and `parameter-value` as key-value
    pairs. You pass the following parameters here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fastma_period: 26`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`slowma_period: 6 `'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`signal_period: 9`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`target_trigger: 0.01`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stoploss_trigger: 0.01`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`trailing_stoploss_trigger: 1`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (Recall that the parameters for the MACD-Bracket-Order strategy have been defined
    in its `__init__()` method, as shown in the first recipe of [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml), *Algorithmic
    Trading Strategies – Coding Step by Step*).
  prefs: []
  type: TYPE_NORMAL
- en: '`candle_interval`: The candle interval for the historical data fetched for
    real trading. This should be an enum of the `CandleInterval` type. You pass `CandleInterval.MINUTES_15`
    here. (The `CandleInterval` enum provides various enums for candle intervals,
    some of which are `MINUTE_1`, `MINUTES_3` , `MINUTES_5`, `MINUTES_10`, `MINUTES_15`,
    `MINUTES_30`, `HOUR`, and `DAY`.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the job submission is successful, you will see `Success` messages being printed
    by the `realtrade()` function.
  prefs: []
  type: TYPE_NORMAL
- en: Once a job has been submitted, it takes a while to start. After starting, it
    may take some time to finish, depending on the duration of real trading specified
    using the `start_time` and `end_time` arguments. Usually, real trading is run
    for the entire trading day, which means the job would be running for 6-8 hours.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 5*, you fetch the job's status using the `get_realtrading_job_status()`
    method of the `algobulls_connection` object. You pass `strategy_code2` as the
    argument here. This method returns a dictionary with a single key-value pair – the
    *data* and the *job* status. If you query the status immediately after placing
    the job, you get `'STARTING'` as the status. In *step 6*, you query the status
    again after some time, and if the job has started, you get a status of `'STARTED'`.
  prefs: []
  type: TYPE_NORMAL
- en: A successful submission implies that the minimum inputs needed to real trade
    a strategy have been passed in the required format. However, this does not ensure
    that the strategy will run without errors. The strategy's execution may still
    run into errors during real trading. To debug execution issues, you will need
    to fetch the output logs, which will be explained in the next recipe. Possible
    reasons for errors could be either bugs in the strategy class' Python code or
    that an incomplete `strategy_parameters` dictionary has been passed to the `realtrade()`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If a job is running for a long time and you would like to stop it before its
    completion, you can use the `stop_realtrading_job()` method of the `algobulls_connection`
    object. This method accepts strategy code as an argument. You pass `strategy_code2`
    here. This method submits a stop request to the AlgoBulls real trading engine.
    If the request is accepted, you will see a `Success` message here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'If you query the status after submitting the stop request, you''ll get `''STOPPING''` as
    the status:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'If you query the status again after some time, and if the job has stopped,
    you''ll get `''STOPPED''` as the status:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: MACD–Bracket–Order strategy – fetching real trading logs in real time
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After submitting a real trading job on the AlgoBulls platform, the AlgoBulls
    real trading engine starts executing the strategy. During its execution, every
    event that occurs and every decision that's been made by the AlgoBulls real trading
    engine is recorded with exact timestamps in the form of textual logs.
  prefs: []
  type: TYPE_NORMAL
- en: Examples of recorded activities include the given strategy config, every new
    candle generated at regular intervals, trades punched in by your strategy, the
    entry and exit of positions created by these trades, waits for new candles, and
    so on. These logs are quintessential for validating the strategy and debugging
    behavior or performance issues that are frequently encountered while developing
    a strategy.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you will fetch real trading logs for your strategy. The logs
    start coming up as soon as your submitted real trading job reaches the `'STARTED'`
    state (refer to the preceding recipe for more information on the states of a real
    trading job). The AlgoBulls platform allows you to fetch logs in real time, even
    while the real trading job is still going on. You can get insights into the strategy's
    execution without having to wait for the real trading job to complete. This is
    helpful as real trading jobs are usually long-running. The `pyalgotrading` package
    provides a simple method we can use to fetch the execution logs for a given strategy.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you have gone through the last six recipes of [Chapter 8](https://cdp.packtpub.com/python_algorithmic_trading_cookbook/wp-admin/post.php?post=33&action=edit#post_30), *Algorithmic
    Trading Strategies – Coding Step by Step*, to get a complete picture of the strategy
    class we will be using; that is, `StrategyMACDBracketOrder`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the `algobulls_connection` and `strategy_code2` objects are available
    in your Python namespace. Refer to the *MACD-Bracket-Order strategy – fetching
    the strategy* recipe of this chapter to set up the `algobulls_connection` and
    `strategy_code2` objects.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Execute the following steps to complete this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fetch the real trading execution logs for `strategy_code2`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'We got the following output (your output may differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch the real trading execution logs for `strategy_code2` again after some
    time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'We got the following output (your output may differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'The complete output is not shown here. Please visit the following link to read
    the complete output: [https://github.com/algobulls/pyalgostrategypool/blob/master/pyalgostrategypool/sample/realtrading/strategy_macd_bracket_order/logs.txt](https://github.com/algobulls/pyalgostrategypool/blob/master/pyalgostrategypool/sample/realtrading/strategy_macd_bracket_order/logs.txt).'
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *step 1*, you use the `get_realtrading_logs()` method of the `algobulls_connection`
    object to fetch the strategy real trading logs in real time. This method accepts
    strategy code as an argument. You pass `strategy_code2` here. The return data
    is a string. If you try this step immediately after submitting the job, you get
    a string, which says the logs are not ready yet (`[2020-07-09 09:13:45] Logs not
    available yet. Please retry in sometime.`.) This happens if the real trading job
    is in the `'STARTING'` state.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 2*, you fetch the logs again after some time. If the job is out of
    the `'STARTING'` state, you start getting your strategy execution logs. You get
    all the real trading logs every time you call the `get_realtrading_logs()` function.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once the real trading job moves to the `'STOPPED'` state, no new logs are generated.
    You can fetch the complete logs any time before you submit the next real trading
    job for the same strategy. If a new real trading job is submitted (for the same
    strategy), these logs will no longer be accessible via the `get_realtrading_logs()`
    method. You can save the fetched logs to a file if you'd like to refer to them
    at a later date.
  prefs: []
  type: TYPE_NORMAL
- en: MACD–Bracket–Order strategy – fetching a real trading report – profit and loss
    table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After submitting a real trading job on the AlgoBulls platform, the AlgoBulls
    real trading engine starts executing the strategy. During its execution, along
    with the logs, the AlgoBulls real trading engine also generates a P&L table in
    real time. This table holds information on every trade punched in by the strategy.
    It also contains details on the mappings between entry and exit orders, the trade
    P&L, and the cumulative P&L, sorted chronologically, with the latest order first.
    This table gives us insight into the strategy's overall performance with the help
    of individual and cumulative P&L numbers. The entry-exit order mapping also helps
    validate the strategy's behavior.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you will fetch the P&L table report for your strategy. This
    report is available as soon as the first trade is punched in by your strategy
    after you submit a real trading job. The AlgoBulls platform allows you to fetch
    the P&L table in real time, even while the real trading job is still going on.
    You can get insights into the strategy's performance without having to wait for
    the real trading job to complete. This is helpful as real trading jobs are usually
    long-running. The `pyalgotrading` package provides a simple method we can use
    to fetch the P&L table for a given strategy.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you have gone through the last six recipes of [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml),
    *Algorithmic Trading Strategies – Coding Step by Step*, to get a complete picture
    of the strategy class we will be using; that is, `StrategyMACDBracketOrder`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the `algobulls_connection` and `strategy_code2` objects are available
    in your Python namespace. Refer to the *MACD-Bracket-Order strategy – fetching
    the strategy* recipe of this chapter to set up the `algobulls_connection` and
    `strategy_code2` objects.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Fetch the real trading P&L report for `strategy_code2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'We got the following output. Your output may differ (note that the following
    output has been split into multiple tables for representation purposes. You will
    see a single wide table in your Jupyter Notebook):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/025cf486-ac12-4e3d-8f06-3a7dbc4cf80f.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, you use the `get_realtrading_report_pnl_table()` method of
    the `algobulls_connection` object to fetch the real trading P&L table in real
    time. This method accepts strategy code as an argument. You pass `strategy_code2`
    here. The return data is a `pandas.DataFrame` object with multiple columns, described
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`instrument`: Financial instrument for which trade was entered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`entry_timestamp`: The timestamp at which the entry order was placed. (Note
    that it may remain in the `''OPEN''` state for a while before it goes to the `''COMPLETE''`
    state.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`entry_transaction_type`: Entry order transaction type (either `BUY` or `SELL`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`entry_quantity`: Entry order quantity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`entry_price`: Price at which the entry order gets executed and goes to the `''COMPLETE''`
    state.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`exit_timestamp`: The timestamp at which the exit order was placed. (Note that
    it may remain in the `''OPEN''` state for a while before it goes to the `''COMPLETE''`
    state.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`exit_transaction_type`: Exit order transaction type (either `BUY` or `SELL`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`exit_quantity`: Exit order quantity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`exit_price`: Price at which the exit order gets executed and goes to the `''COMPLETE''`
    state.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pnl_absolute`: Difference between the exit order execution price and the entry
    order execution price. Mathematically, this is (*exit_price* - *entry_price*)**exit_quantity* for
    a long trade and (*entry_price* - *exit_price*)**exit_quantity* for a short trade.
    A positive value would imply that the trade is a profit-making trade. A negative
    value would imply that the trade is a loss-making trade.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pnl_percentage`: Percentage of profit or loss with respect to the entry price.
    Mathematically, this is *pnl_absolute* / *entry_price* / *exit_quantity* x *100*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pnl_cumulative_absolute`: Cumulative profit or loss. Mathematically, this
    is the sum of all the `pnl_absolute` values of the previous trades. This number
    gives us direct insight into the strategy''s performance against the simulation
    time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pnl_cumulative_percentage`: Percentage of cumulative profit or loss with respect
    to the entry price. Mathematically, this is *pnl_cumulative* / *entry_price* /
    *exit_quantity* x *100*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once the real trading job moves to the `'STOPPED'` state, the P&L table report
    will not update anymore. You can fetch the complete P&L report any time before
    you submit the next real trading job for the same strategy. If a new real trading
    job is submitted (for the same strategy), this report will no longer be accessible
    via the `get_realtrading_report_pnl_table()` method. You can save the fetched
    report to a `.csv` file if you'd like to refer to it at a later date.
  prefs: []
  type: TYPE_NORMAL
- en: MACD–Bracket–Order strategy – fetching a real trading report – statistics table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After submitting a real trading job on the AlgoBulls platform, the AlgoBulls
    real trading engine starts executing the strategy. During its execution, along
    with the logs and P&L table, the AlgoBulls real trading engine also generates
    a summary from the P&L table in real time. This summary is a table of statistics
    containing various statistical numbers, such as `Net P&L` (absolute and percentage),
    `Max Drawdown` (absolute and percentage), count of total trades, winning trades,
    losing trades, long trades and short trades, the maximum gain and minimum gain
    (or maximum loss), and average profit per winning and losing trade. This table
    gives us an instant overview of the strategy's overall performance.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you will fetch the statistics table report for your strategy.
    This report is available as soon as the first trade is punched in by your strategy
    after you submit a real trading job. The AlgoBulls platform allows you to fetch
    the statistics table in real time, even while the real trading job is still going
    on. You can get insights into the strategy's performance without having to wait
    for the real trading job to complete. This is helpful as real trading jobs are
    usually long-running. The `pyalgotrading` package provides a simple method we
    can use to fetch the statistics table for a given strategy.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you have gone through the last six recipes of [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml),
    *Algorithmic Trading Strategies – Coding Step by Step*, to get a complete picture
    of the strategy class we will be using; that is, `StrategyMACDBracketOrder`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the `algobulls_connection` and `strategy_code2` objects are available
    in your Python namespace. Refer to the *MACD-Bracket-Order strategy – fetching
    the strategy* recipe of this chapter to set up the `algobulls_connection` and
    `strategy_code2` objects.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Fetch the real trading statistics report for `strategy_code2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'We got the following output (your output may differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ad70d4f2-8b7a-47fe-b213-16b345702865.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, you use the `get_realtrading_report_statistics()` method of
    the `algobulls_connection` object to fetch the real trading statistics table in
    real time. This method accepts strategy code as an argument. You pass `strategy_code2`
    here. The return data is a `pandas.DataFrame` object with two columns – `highlight_type`
    and `highlight_value` – and multiple rows. The rows are described as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Net PnL`: The cumulative real trading P&L. This is also the `pnl_cumulative_absolute`
    value of the first entry in the P&L table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Net PnL %`: The cumulative real trading P&L percentage. This is also the `pnl_cumulative_percentage`
    value of the first entry in the P&L table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Max Drawdown`: The lowest value in the `pnl_cumulative` column of the P&L
    table. This indicates the maximum loss your strategy has encountered during its
    execution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Max Drawdown %`: Mathematically, this is *(Max Drawdown)* / *(corresponding
    entry_price)* / *exit_quantity* x 100.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Number of Trades`: Total trades (entry and exit are counted as one) during
    the session.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Number of Wins`: Count of trades where the trade P&L was non-negative.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Number of Losses`: Count of trades where the trade P&L was negative.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Number of Long Trades`: Count of trades where the entry transaction type was
    `''BUY''`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Number of Short Trades`: Count of trades where the entry transaction type
    was `''SELL''`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Max Gain`: P&L of the trade with the maximum P&L value among all trades.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Min Gain`: P&L of the trade with the minimum P&L value among all trades.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Avg. Profit per winning trade`: Mathematically, this is *(Total P&L of winning
    trades)* / *(Count of winning trades)*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Avg. Profit per losing trade`: Mathematically, this is *(Total P&L of losing
    trades)* / *(Count of losing trades)*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If the statistics table is fetched while the real trading job is still running,
    the aforementioned numbers will be intermediate numbers, based on the trades completed
    until that time. The numbers may change as more trades are punched in, until the
    real trading job completes.
  prefs: []
  type: TYPE_NORMAL
- en: Once the real trading job moves to the `'STOPPED'` state, the statistics table
    will not change anymore. You can fetch the complete statistics table any time
    before you submit the next real trading job for the same strategy. If a new real
    trading job is submitted (for the same strategy), this table will no longer be
    accessible via the `get_realtrading_report_statistics()` method. You can save
    the fetched report to a `.csv` file if you'd like to refer to it at a later date.
  prefs: []
  type: TYPE_NORMAL
