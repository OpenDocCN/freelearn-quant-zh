["```py\n    printfn \"Hello World, from F\"\n    ```", "```py\n    printfn \"Hello World, from F#\";;\n    ```", "```py\n    > printfn \"Hello World, from F#\";;\n    Hello World, from F#\n    val it : unit = ()\n    ```", "```py\nlet sum = 4 + 5\nlet newsum = sum + 3\n```", "```py\nlet immutable = \"I am immutable!\"\nimmutable <- \"Try to change it...\"\n… error FS0027: This value is not mutable\n```", "```py\nlet mutable name = firstname + lastname\n```", "```py\nname ← \"John Johnson\"\n```", "```py\n> let anInt = 124;;\n\nval anInt : int = 124\n```", "```py\n> let anFloat = 124.00;;\n\nval anFloat : float = 124.0\n```", "```py\n> let anDouble : double = 1.23e10;;\n\nval anDouble : double = 1.23e+10\n```", "```py\n> let myString = \"This is a string\";;\n\nval myString : string = \"This is a string\"\n```", "```py\nlet sum (x,y) =\n\tx + y\n> sum (7, 7)\n```", "```py\nval sum : x:int -> y:int -> int\n```", "```py\nlet sum (x:float, y:float) =\n\tx + y\n\n> sum(7.0, 7.0);;\nval it : float = 14.0\n```", "```py\n> sum(7, 7);;\n...\nerror FS0001: This expression was expected to have type float\nbut here has type int\n```", "```py\nlet square = (fun x → x * x)\n> square 2\nval it : int = 4\n```", "```py\nlet squareByFour f\n\tf 4\n> squareByFour square\n```", "```py\nlet sum x y =\n\tx + y\n```", "```py\nsum 2 3\nsum 2 4\nsum 2 5\n```", "```py\nlet sumBy2 y = \n\tsum 2 y\n\n> sumBy2 3;;\nval it : int = 5\n\n> sumBy2 4;;\nval it : int = 5\n\n> sumBy2 5;;\nval it : int = 5\n```", "```py\nlet prices = [45.0; 45.1; 44.9; 46.0]\n> val prices : float list = [45.0; 45.1; 44.9; 46.0]\n```", "```py\nlet range = [0 .. 100]\nval range : int list =\n  [0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17;\n  18; 19; 20;21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32;\n  33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43; 44; 45; 46; 47;\n  48; 49; 50; 51; 52; 53; 54; 55; 56; 57; 58; 59; 60; 61; 62;\n  63; 64; 65; 66; 67; 68; 69; 70; 71; 72; 73; 74; 75; 76; 77;\n  78; 79; 80; 81; 82; 83; 84; 85; 86; 87; 88; 89; 90; 91; 92; \n  93; 94; 95; 96; 97; 98; 99; ...]\n```", "```py\nlet fineRange = [1.0 .. 0.1 .. 10.0]\nval fineRange : float list =\n[1.0; 1.1; 1.2; 1.3; 1.4; 1.5; 1.6; 1.7; 1.8; 1.9; 2.0; 2.1; 2.2; 2.3; 2.4; 2.5; 2.6; 2.7; 2.8; 2.9; 3.0; 3.1; 3.2; 3.3; 3.4; 3.5; 3.6; 3.7; 3.8; 3.9; 4.0; 4.1; 4.2; 4.3; 4.4; 4.5; 4.6; 4.7; 4.8; 4.9; 5.0; 5.1; 5.2; 5.3; 5.4; 5.5; 5.6; 5.7; 5.8; 5.9; 6.0; 6.1; 6.2; 6.3; 6.4; 6.5; 6.6; 6.7; 6.8; 6.9; 7.0; 7.1; 7.2; 7.3; 7.4; 7.5; 7.6; 7.7; 7.8; 7.9; 8.0; 8.1; 8.2; 8.3; 8.4; 8.5; 8.6; 8.7; 8.8; 8.9; 9.0; 9.1; 9.2; 9.3; 9.4; 9.5; 9.6; 9.7; 9.8; 9.9; 10.0]\n```", "```py\n> let myList = [\"One\"; \"Two\"; \"Three\"];;\nval myList : string list = [\"One\"; \"Two\"; \"Three\"]\n```", "```py\nlet myList = [\"One\"; \"Two\"; 3.0];; \n...\nThis expression was expected to have type\nstring but here has type float \n```", "```py\n> let myNewList = [1;2;3] @ [4;5;6];;\n\nval myNewList : int list = [1; 2; 3; 4; 5; 6]\n\n> myNewList;;\nval it : int list = [1; 2; 3; 4; 5; 6]\n```", "```py\n> myNewList.Length;;\nval it : int = 6\n```", "```py\n> myNewList.Head;;\nval it : int = 1\n```", "```py\n> myNewList.Tail;;\nval it : int list = [2; 3; 4; 5; 6]\n```", "```py\n> List.map (fun x -> x * x) myNewList;;\nval it : int list = [1; 4; 9; 16; 25; 36]\n```", "```py\n> List.filter (fun x -> x < 4) myNewList;;\nval it : int list = [1; 2; 3]\n```", "```py\n// Tuple of two floats\n(1.0, 2.0)\n\n// Tuple of mixed representations of numbers\n(1, 2.0, 3, '4', \"four\")\n\n// Tuple of expressions\n(1.0 + 2.0, 3, 4 + 5)\n```", "```py\n> (1.0, 2.0);;\nval it : float * float = (1.0, 2.0)\n```", "```py\n> (1, 2.0, 3, '4', \"four\");;\nval it : int * float * int * char * string = (1, 2.0, 3, '4', \"four\")\n```", "```py\n> (1.0 + 2.0, 3, 4 + 5);;\nval it : float * int * int = (3.0, 3, 9)\n```", "```py\nlet (a, b) = (1.0, 2.0)\nprintfn \"%f %f\" a b\n```", "```py\nlet (_, b) = (1.0, 2.0)\nprintfn \"only b %2.2f\" b\n```", "```py\n[0..100]|> List.filter (fun x -> x % 2 = 0)|> List.map (fun x -> x * 2)|> List.sum\n```", "```py\nval it : int = 5100\n```", "```py\n(*\nThis is a comment on multiple lines\n*)\n\n/// Single line comment, supporting XML-tags\n\n// This is also a single line comment\n```", "```py\n/// Sample stock data, from Yahoo Finance\nlet stockData = [\n    \"2013-06-06,51.15,51.66,50.83,51.52,9848400,51.52\";\n    \"2013-06-05,52.57,52.68,50.91,51.36,14462900,51.36\";\n    \"2013-06-04,53.74,53.75,52.22,52.59,10614700,52.59\";\n    \"2013-06-03,53.86,53.89,52.40,53.41,13127900,53.41\";\n    \"2013-05-31,54.70,54.91,53.99,54.10,12809700,54.10\";\n    \"2013-05-30,55.01,55.69,54.96,55.10,8751200,55.10\";\n    \"2013-05-29,55.15,55.40,54.53,55.05,8693700,55.05\"\n]\n```", "```py\nval stockData : string list =\n  [\"2013-06-06,51.15,51.66,50.83,51.52,9848400,51.52\";\n   ...\n   \"2013-05-29,55.15,55.40,54.53,55.05,8693700,55.05\"]\n\n// Split row on commas\nlet splitCommas (l:string) =\n    l.Split(',')\n\n// Get the row with lowest trading volume\nlet lowestVolume =\n    stockData\n    |> List.map splitCommas\n    |> List.minBy (fun x -> (int x.[5]))\n```", "```py\nval lowestVolume : string [] =\n  [|\"2013-05-29\"; \"55.15\"; \"55.40\"; \"54.53\"; \"55.05\"; \"8693700\";\"55.05\"|]\n```", "```py\n/// Open the System.IO namespace\nopen System.IO\n\n/// Sample stock data, from Yahoo Finance\nlet stockData = [\n    \"2013-06-06,51.15,51.66,50.83,51.52,9848400,51.52\";\n    \"2013-06-05,52.57,52.68,50.91,51.36,14462900,51.36\";\n    \"2013-06-04,53.74,53.75,52.22,52.59,10614700,52.59\";\n    \"2013-06-03,53.86,53.89,52.40,53.41,13127900,53.41\";\n    \"2013-05-31,54.70,54.91,53.99,54.10,12809700,54.10\";\n    \"2013-05-30,55.01,55.69,54.96,55.10,8751200,55.10\";\n    \"2013-05-29,55.15,55.40,54.53,55.05,8693700,55.05\"\n]\n\n/// Split row on commas\nlet splitCommas (l:string) =\n    l.Split(',')\n\n/// Get the row with lowest trading volume\nlet lowestVolume =\n    stockData\n    |> List.map splitCommas\n    |> List.minBy (fun x -> (int x.[5]))\n```", "```py\n/// Read a file into a string array\nlet openFile (name : string) =\n    try\n        let content = File.ReadAllLines(name)\n        content |> Array.toList\n    with\n        | :? System.IO.FileNotFoundException as e -> printfn \"Exception! %s \" e.Message; [\"empty\"]\n```", "```py\n/// Get the row with lowest trading volume, from file\nlet lowestVolume =\n    openFile filePath\n    |> List.map splitCommas\n    |> Seq.skip 1\n    |> Seq.minBy (fun x -> (int x.[5]))\n```", "```py\nprintfn \"Lowest volume, found in row: %A\" lowestVolume\n```", "```py\n> printfn \"This works for lists too: %A\" [1..5];;\nThis works for lists too: [1; 2; 3; 4; 5]\nval it : unit = ()\n```", "```py\n/// Open the System.IO namespace\nopen System.IO\n\nlet filePath = @\" table.csv\"\n\n/// Split row on commas\nlet splitCommas (l:string) =\n    l.Split(',')\n\n/// Read a file into a string array\nlet openFile (name : string) =\n    try\n        let content = File.ReadAllLines(name)\n        content |> Array.toList\n    with\n        | :? System.IO.FileNotFoundException as e -> printfn \"Exception! %s \" e.Message; [\"empty\"]\n\n/// Get the row with lowest trading volume, from file\nlet lowestVolume =\n    openFile filePath\n    |> List.map splitCommas\n    |> Seq.skip 1\n    |> Seq.minBy (fun x -> (int x.[5]))\n\n/// Use printfn with generic formatter, %A\nprintfn \"Lowest volume, found in row: %A\" lowestVolume\n```", "```py\n/// Reverses the price data from the CSV-file\nlet reversePrices =\n    openFile filePath\n    |> List.map splitCommas\n    |> List.rev\n```", "```py\n [|\"2013-02-22\"; \"54.96\"; \"55.13\"; \"54.57\"; \"55.02\"; \"5087300\"; \"55.02\"|]\n```", "```py\nlowestVolume.[0];;\t\nval it : string = \"2013-02-22\"\n```", "```py\n> let dateTime = System.DateTime.ParseExact(lowestVolume.[0], \"yyyy-mm-dd\", null);;\n\nval dateTime : System.DateTime = 2013-01-22 00:02:00\n```"]