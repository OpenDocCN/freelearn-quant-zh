- en: Placing Bracket and Cover Orders on the Exchange
  prefs: []
  type: TYPE_NORMAL
- en: This chapter introduces various types of bracket and cover orders that can be
    placed on exchanges via the broker APIs. The recipes include code for placing
    12 types of orders and querying their statuses, canceling open orders, and exiting
    completed orders. These recipes will be a fundamental part of your algorithmic
    trading strategies. Understanding all of the types of orders and knowing which
    one to place for the given requirement is crucial for building a successful trading
    strategy.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each order has four attributes that together define the order completely:'
  prefs: []
  type: TYPE_NORMAL
- en: Order transaction type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Order type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Order code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Order variety
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For placing an order, all four attributes should be known precisely. To know
    more about these attributes, refer to the introduction to [Chapter 6](077b54a1-c9c4-424c-912a-11f28db3797f.xhtml),
    *Placing Regular Orders on the Exchange*.
  prefs: []
  type: TYPE_NORMAL
- en: The recipes in this chapter provide detailed flowcharts for each order type.
    Every order placed on the exchange goes through various states during its lifetime.
    To know more about the order states supported by the broker used in this chapter,
    refer to the introduction to [Chapter 6](077b54a1-c9c4-424c-912a-11f28db3797f.xhtml),
    *Placing Regular Orders on the Exchange*.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Placing a bracket limit order
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Placing a bracket stoploss-limit order
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Placing a bracket limit order with a trailing stoploss
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Placing a bracket stoploss-limit order with a trailing stoploss
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Placing a cover market order
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Placing a cover limit order
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Please make sure you try all of these recipes during live market hours with
    sufficient balance in your broking account. If these recipes are tried outside
    of market hours or with insufficient balance, your orders will be rejected by
    the broker. This means the orders would never reach the exchange and you would
    not get the expected response.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You will need the following to successfully execute the recipes in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Python 3.7+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python packages: `pyalgotrading` (`$ pip install pyalgotrading`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The latest Jupyter notebook for this chapter can be found on GitHub at [https://github.com/PacktPublishing/Python-Algorithmic-Trading-Cookbook/tree/master/Chapter07](https://github.com/PacktPublishing/Python-Algorithmic-Trading-Cookbook/tree/master/Chapter07).
  prefs: []
  type: TYPE_NORMAL
- en: The first thing needed for setting connectivity with the broker is getting the
    API keys. The broker will provide each customer with unique keys, typically as
    an `api-key` and `api-secret` key pair. These API keys are chargeable, usually
    on a monthly subscription basis. You need to get your copy of `api-key` and `api-secret` from
    the broker website before starting this. You can refer to *Appendix I* for more
    details.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps will help you to set up the broker connection with Zerodha,
    which will be used by all of the recipes in this chapter. Please make sure you
    have followed these steps before trying out any recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the necessary modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: All `pyalgotrading` constants are now available in your Python namespace.
  prefs: []
  type: TYPE_NORMAL
- en: 'Get the `api_key` and `api_secret` keys from the broker. These are unique to
    you and will be used by the broker to identify your Demat account:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If you are running this for the first time and `kiteconnect` is not installed,
    `pyalgotrading` will automatically install it for you. The final output of *step
    2* will be a link. Click on the link and log in with your Zerodha credentials.
    If the authentication is successful, you will see a link in your browser's address
    bar similar to `https://127.0.0.1/?request_token=<alphanumeric-token>&action=login&status=success`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the alphanumeric-token and paste it in `request_token`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `broker_connection` instance is now ready for performing API calls.
  prefs: []
  type: TYPE_NORMAL
- en: The `pyalgotrading` package supports multiple brokers and provides a connection
    object class per broker, with the same methods. It abstracts broker APIs behind
    a unified interface so users need not worry about the underlying broker API calls
    and can use all of the recipes in this chapter as is. Only the procedure to set
    up the broker connection would vary from broker to broker. You can refer to the `pyalgotrading` documentation
    for setting up the broker connection if you are not using Zerodha as your broker.
    For Zerodha users, the steps mentioned in the preceding section would suffice.
  prefs: []
  type: TYPE_NORMAL
- en: Placing a bracket limit order
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Bracket orders are complex orders that are meant to help to make a profit when
    trade becomes favorable, or limit the loss when it becomes unfavorable, with predefined
    values. A bracket order is essentially a combination of three regular orders together—an
    initial order, a target order, and a stoploss order—which act together to help
    to achieve the specified profit or limit the loss. Along with the regular order
    parameters, a bracket order takes additional parameters—`target`, `stoploss`,
    and `trailing stoploss` (optional). The three regular orders are described as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Initial order**: This order is equivalent to a regular limit order or regular
    stoploss-limit order. Once placed, it remains in the `''OPEN''` state until the
    market price reaches its trigger price value. Once the market crosses the trigger
    price value, this order moves from the `''OPEN''` to `''COMPLETE''` state and
    the target and stoploss orders are placed, which are described next.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Target order**: This order is equivalent to a regular limit order, with its
    trigger price as the specified target value and transaction type opposite to that
    of the initial order. For a buy initial order, the target order is placed at a
    higher price than the initial order. This would be vice versa for a sell initial
    order. The quantity matches that of the initial order. So, if this order executes,
    it exits the position created by the initial order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stoploss order**: This order is equivalent to a regular stoploss-limit order,
    with the specified `stoploss` value as its trigger price and transaction type
    opposite to that of the initial order. For a buy initial order, the stoploss order
    is placed at a lower price than the initial order. This would be vice versa for
    a sell initial order. The quantity matches that of the initial order. So, if this
    order executes, it exits the position created by the initial order. If a `trailing
    stoploss` parameter is specified, every time the initial order price moves in
    the direction of the target order price, the stoploss order is modified in the
    direction of the initial order price by as many points as the value of `trailing
    stoploss`. This helps to further reduce the loss in case the price movement direction
    of the initial order changes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since a target order and a stoploss order are placed on opposite sides of an
    initial order, they form a *bracket* around the initial order, and hence this
    order is called a **bracket order**. Also, as the target and stoploss orders are
    on opposite sides, only one of them would get executed (which means its status
    would go from `'OPEN'` to `'COMPLETE'`) at a given time, and when it does, the
    order (either the stoploss order or the target order) is automatically canceled.
    The target and stoploss orders are also collectively called **child orders** of
    the initial order, and the latter is called the **parent order** of the former.
  prefs: []
  type: TYPE_NORMAL
- en: A bracket order is usually meant for intraday trading unless otherwise supported
    by the broker. If the initial order or the child orders are not completed by the
    end of the trading session, they are automatically canceled or exited by the broker.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following flowchart explains the workings of a **bracket order**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5819affc-5ab7-4caa-9952-144d28407690.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following are references to the state machine diagrams for a bracket limit
    order:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Initial order**: Refer to the state machine diagram from the *Placing a regular
    limit order* recipe in the previous chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Target order**: Refer to the state machine diagram from the *Placing a regular
    limit order* recipe in the previous chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stoploss order**: Refer to the state machine diagram from the *Placing a
    regular stoploss-limit order* recipe in the previous chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can use the bracket limit order when a buy bracket order has to be placed
    below the market price or a sell bracket order has to be placed above the market
    price.
  prefs: []
  type: TYPE_NORMAL
- en: 'This recipe demonstrates the placing of the following bracket limit orders
    and querying their statuses:'
  prefs: []
  type: TYPE_NORMAL
- en: The `BUY`, `BRACKET`, `INTRADAY`, `LIMIT` order (without trailing stoploss)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `SELL`, `BRACKET`, `INTRADAY`, `LIMIT` order (without trailing stoploss)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the `broker_connection` object and constants from the `pyalgotrading` package
    are available in your Python namespace. Refer to the *Technical requirements* section
    of this chapter to set up this object.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We execute the following steps for this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fetch a financial instrument and assign it to `instrument`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch the LTP. Place a `BUY`, `BRACKET`, `INTRADAY`, `LIMIT` order and display
    the order ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output (your output may differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch and display the order status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'If you log in to the broker site with your credentials and go to the orders
    section, you can find your order details as shown in the following screenshot
    (some data may differ for you):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/631828fe-0fe8-4aa2-a896-45ee6f01641d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fetch and display the order status again after some time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'If you log in to the broker site with your credentials and go to the orders
    section, you can find your order details as shown in the following screenshot
    (some data may differ for you):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ccc0bfcd-2f5b-4c4f-a1f3-69bbe005c826.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fetch the LTP. Place a `SELL`, `BRACKET`, `INTRADAY`, `LIMIT` order and display
    the order ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output (your output may differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch and display the order status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'If you log in to the broker site with your credentials and go to the orders
    section, you can find your order details as shown in the following screenshot
    (some data may differ for you):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1a348aea-c6b6-4d54-85db-80ff5943a842.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fetch and display the order status again after some time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'If you log in to the broker site with your credentials and go to the orders
    section, you can find your order details as shown in the following screenshot
    (some data may differ for you):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/de29d94f-3ea2-4ffd-bed1-f045c1e0acc0.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *step 1*, you use the `get_instrument()` method of the `BrokerConnectionZerodha` class
    to fetch an instrument and assign it to a new attribute, `instrument`. This object
    is an instance of the `Instrument` class. The two parameters needed to call `get_instrument` are
    the exchange (`'NSE'`) and the trading-symbol (`'SBI'`).
  prefs: []
  type: TYPE_NORMAL
- en: 'In *step 2*, you fetch the LTP of the instrument using the `get_ltp()` method
    of the `BrokerConnectionZerodha` class and assign it to a new attribute, `ltp`.
    The `instrument` object is passed as the parameter here. Next, you use the `place_order()` method
    of the `broker_connection` object to place a `BUY`, `BRACKET`, `INTRADAY`, `LIMIT`
    order on the exchange. The `place_order()` method is a wrapper on the broker-specific
    place order API. It takes the following attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`instrument`: This is the financial instrument for which the order must be
    placed and should be an instance of the `Instrument` class. We pass `instrument` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_transaction_type`: This is the order transaction type and should be
    an enum of the type, `BrokerOrderTransactionTypeConstants`. We pass `BrokerOrderTransactionTypeConstants.BUY` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_type`: This is the order type and should be an enum of the type, `BrokerOrderTypeConstants`.
    We pass `BrokerOrderTypeConstants.BRACKET` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_code`: This is the order code and should be an enum of the type, `BrokerOrderCodeConstants`.
    We pass `BrokerOrderCodeConstants.INTRADAY` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_variety`: This is the order variety and should be an enum of the type,
    `BrokerOrderVarietyConstants`. We pass `BrokerOrderVarietyConstants.LIMIT` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`quantity`: This is the number of shares to be traded for the given instrument
    and should be a positive integer. We pass `1` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`price`: This is the limit price at which the order should be placed. We pass
    `ltp-1` here, which means `1` unit price below `ltp`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stoploss`: This is the price difference from the initial order price, at which
    the stoploss order should be placed. It should be a positive `int` or `float`
    value. We pass `2` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`target`: This is the price difference from the initial order price, at which
    the target order should be placed. It should be a positive `int` or `float` value.
    We pass `2` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (The attributes passed to the `place_order()` method are broker-agnostic constants,
    imported earlier from the `pyalgotrading.constants` module.)
  prefs: []
  type: TYPE_NORMAL
- en: On placing the order in *step 2*, you get an order ID from the broker, which
    you assign to a new attribute, `order1_id`. The `order1_id` object is a string.
    If the order placement is not successful for some reason, you may not get an order
    ID. Observe that the price parameter is passed a value of `ltp-1`. This means
    the order is placed below the market price, which is a necessary condition for
    placing buy limit orders. The `stoploss` parameter is specified as `2`. This means
    the stoploss order would be placed at the price, which is two price units lower
    than the execution price of the initial order. Similarly, the `target` parameter
    is specified as `2`. This means the target order would be placed at the price
    that is two price units higher than the execution price of the initial order.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 3*, you fetch the status of the placed order using the `get_order_status()` method
    of the `broker_connection` object. You pass `order1_id` as a parameter to the
    `get_order_status()` method. You get the order status as `'OPEN'`, a string. You
    can use `order1_id` to fetch the status of the placed order at any later point
    of time as well.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 4*, you fetch the order status again, and if the order is completed,
    you get the order status as `'COMPLETE'`. Immediately after this, the target and
    stoploss orders are placed, at the prices mentioned earlier. The target order
    executes as a regular limit order. The stoploss order executes as a regular stoploss-limit
    order. When one of them gets executed and reaches the `'COMPLETE'` state, the
    other order is automatically canceled by the broker, so it moves to the `'CANCELLED'` state.
    Recall, both target and stoploss orders are on opposite sides of the initial order,
    so both target and stoploss orders cannot execute at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: You can also verify the successful placement of your order by logging in to
    the broking website and checking the orders section there. You should see data
    similar to the screenshot shown in the outputs of *step 3* and *step 4*.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 3*, if you see the status as `'COMPLETE'` instead of `'OPEN'`; this
    could be due to high volatility. If you want the order to stay in the `'OPEN'` state
    for a while, try placing the order further away from the market price.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are references for more details on the execution of the initial
    order, target order, and stoploss order:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Initial order**: Refer to the *Placing a regular limit order* recipe in the
    previous chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Target order**: Refer to the *Placing a regular limit order* recipe in the
    previous chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stoploss order**: Refer to the *Placing a regular stoploss-limit order* recipe
    in the previous chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The other steps in this recipe follow the same pattern of placing an order
    and getting its status for different combinations of attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Steps 5*, *6,* and *7*: The `SELL`, `BRACKET`, `INTRADAY`, `LIMIT` order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can exit a bracket order by exiting one of its child orders. The child order
    that you exit is executed at market price and moves to the `COMPLETE` state. The
    other child moves to the `CANCELLED` state.
  prefs: []
  type: TYPE_NORMAL
- en: For example, let's consider the case if you exit the stoploss order. In this
    case, the target order will be canceled and it will transition to the `CANCELLED` state.
    The stoploss order will be executed at market price and it will transition to
    the `COMPLETE` state. If you log in to the broker site with your credentials and
    go to the orders section, you can find the child order details as shown in the
    following screenshot. Some data may differ for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the target order, for the initial order placed in *step 2*,
    before exiting the bracket order:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/80d134bb-af03-4418-9102-de1e681df0f5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following is the target order after exiting the bracket order:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7df78a06-1f9d-4ade-bf0f-69df9df5a4e3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This screenshot shows the stoploss order, for the initial order placed in *step
    2*, before exiting:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cab945d8-a451-49e0-bbbe-8bdbb36954d9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the stoploss order after exiting:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3fd9a29c-e2a9-4e0a-8f7c-48e69017c8a7.png)'
  prefs: []
  type: TYPE_IMG
- en: Placing a bracket stoploss-limit order
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bracket orders are complex orders that are meant to help to make a profit when
    trade becomes favorable, or limit the loss when it becomes unfavorable, with predefined
    values. A bracket order is essentially a combination of three regular orders together
    —an initial order, a target order, and a stoploss order, which act together to
    help to achieve the specified profit or limit the loss. Along with the regular
    order parameters, a bracket order takes additional parameters—`target`, `stoploss`,
    and `trailing stoploss` (optional).
  prefs: []
  type: TYPE_NORMAL
- en: Please refer to the introduction of the *Placing a bracket limit order* recipe
    for an in-depth understanding of the working of bracket orders. You can use a
    bracket stoploss-limit order if you want to place a buy bracket order above the
    market price or a sell bracket order below the market price.
  prefs: []
  type: TYPE_NORMAL
- en: 'This recipe demonstrates the placing of the following bracket stoploss-limit
    orders and querying their statuses:'
  prefs: []
  type: TYPE_NORMAL
- en: The `BUY`, `BRACKET`, `INTRADAY`, `STOPLOSS_LIMIT` order (without trailing stoploss)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `SELL`, `BRACKET`, `INTRADAY`, `STOPLOSS_LIMIT` order (without trailing
    stoploss)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are references to the state machine diagrams for a bracket stoploss-limit
    order:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Initial order**: Refer to the state machine diagram from the *Placing a regular
    stoploss-limit order* recipe in the previous chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Target order**: Refer to the state machine diagram from the *Placing a regular
    limit order* recipe in the previous chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stoploss order**: Refer to the state machine diagram from the *Placing a
    regular stoploss-limit order* recipe in the previous chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the `broker_connection` object and constants from the `pyalgotrading` package
    are available in your Python namespace. Refer to the *Technical requirements* section
    of this chapter to set up this object.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We execute the following steps for this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fetch a financial instrument and assign it to `instrument`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch the LTP. Place a `BUY`, `BRACKET`, `INTRADAY`, `STOPLOSS_LIMIT` order
    and display the order ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output (your output may differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch and display the order status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch and display the order status again after some time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch the LTP. Place a `SELL`, `BRACKET`, `INTRADAY`, `STOPLOSS_LIMIT` order
    and display the order ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output (your output may differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch and display the order status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch and display the order status again after some time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *step 1*, you use the `get_instrument()` method of the `BrokerConnectionZerodha` class
    to fetch an instrument and assign it to a new attribute, `instrument`. This object
    is an instance of the `Instrument` class. The two parameters needed to call `get_instrument` are
    the exchange (`'NSE'`) and the trading-symbol (`'INDUSINDBK'`).
  prefs: []
  type: TYPE_NORMAL
- en: 'In *step 2*, you fetch the LTP of the instrument using the `get_ltp()` method
    of the `BrokerConnectionZerodha` class and assign it to a new attribute, `ltp`.
    The `instrument` object is passed as the parameter here. Next, you use the `place_order()` method
    of the `broker_connection` object to place a `BUY`, `BRACKET`, `INTRADAY`, `STOPLOSS_LIMIT`
    order on the exchange. The `place_order()` method is a wrapper on the broker-specific
    place order API. It takes the following attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`instrument`: This is the financial instrument for which the order must be
    placed and should be an instance of the `Instrument` class. We pass `instrument` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_transaction_type`: This is the order transaction type and should be
    an enum of the type, `BrokerOrderTransactionTypeConstants`. We pass `BrokerOrderTransactionTypeConstants.BUY` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_type`: This is the order type and should be an enum of the type, `BrokerOrderTypeConstants`.
    We pass `BrokerOrderTypeConstants.BRACKET` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_code`: This is the order code and should be an enum of the type, `BrokerOrderCodeConstants`.
    We pass `BrokerOrderCodeConstants.INTRADAY` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_variety`: This is the order variety and should be an enum of the type,
    `BrokerOrderVarietyConstants`. We pass `BrokerOrderVarietyConstants.STOPLOSS_LIMIT`
    here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`quantity`: This is the number of shares to be traded for the given instrument
    and should be a positive integer. We pass `1` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`price`: This is the limit price at which the order should be placed. We pass `ltp+1` here,
    which means `1` unit price above `ltp`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`trigger_price`: This is the trigger price at which the order should be placed.
    We pass `ltp+1` here, which means `1` unit price above `ltp`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stoploss`: This is the price difference from the Initial Order price, at which
    the stoploss order should be placed. It should be a positive `int` or `float`
    value. We pass `2` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`target`: This is the price difference from the Initial Order price, at which
    the target order should be placed. It should be a positive `int` or `float` value.
    We pass `2` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (The attributes passed to the `place_order()` method are broker-agnostic constants,
    imported earlier from the `pyalgotrading.constants` module.)
  prefs: []
  type: TYPE_NORMAL
- en: On placing the order in *step 2*, you get an order ID from the broker, which
    you assign to a new attribute, `order1_id`. The `order1_id` object is a string.
    If the order placement is not successful for some reason, you may not get an order
    ID. Observe that the `price` and `trigger_price` parameters are passed a value
    of `ltp+1`. This means the order is placed above the market price, which is a
    necessary condition for placing buy stoploss-limit orders. The stoploss parameter
    is specified as `2`. This means the stoploss order would be placed at the price
    that is 2 price units lower than the execution price of the initial order. Similarly,
    the target parameter is specified as `2`. This means the target order would be
    placed at the price that is 2 price units higher than the execution price of the
    Initial Order.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 3*, you fetch the status of the placed order using the `get_order_status()` method
    of the `broker_connection` object. You pass `order1_id` as a parameter to the
    `get_order_status()` method. You get the order status as `'TRIGGER PENDING'`,
    a string. You can use `order1_id` to fetch the status of the placed order at any
    later point of time as well. In *step 4*, you fetch the order status again, and
    if the order is completed, you get the order status as `'COMPLETE'`. Immediately
    after this, the target and stoploss orders are placed, at the prices mentioned
    earlier. The target order executes as a regular limit order. The stoploss order
    executes as a regular stoploss-limit order. When one of them gets executed and
    reaches the `'COMPLETE'` state, the other order is automatically canceled by the
    broker, so it moves to the `'CANCELLED'` state. Recall, both target and stoploss
    orders are on opposite sides of the initial order, so both target and stoploss
    orders cannot execute at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 3*, if you see the status as `'COMPLETE'` instead of `'TRIGGER PENDING'`,
    this could be due to high volatility. If you want the order to stay in the `'OPEN'` state
    for a while, try placing the order further away from the market price.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are references to more details on the execution of the initial
    order, target order, and stoploss order:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Initial order**: Refer to the *Placing a regular stoploss-limit order* recipe
    in the previous chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Target order**: Refer to the *Placing a regular limit order* recipe in the
    previous chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stoploss order**: Refer to the *Placing a regular stoploss-limit order* recipe
    in the previous chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can verify the successful placement of your order by logging in to the broking
    website and checking the orders section there. You should see data similar to
    the screenshots shown in the *Placing bracket limit orders on the exchange* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'The other steps in this recipe follow the same pattern of placing an order
    and getting its status for a different combination of attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Steps 5*, *6,* and *7*: The `SELL`, `BRACKET`, `INTRADAY`, `STOPLOSS_LIMIT`
    order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Placing a bracket limit order with trailing stoploss
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bracket orders are complex orders that are meant to help to make a profit when
    trade becomes favorable, or limit the loss when it becomes unfavorable, with predefined
    values. A bracket order is essentially a combination of three regular orders together—an
    initial order, a target order, and a stoploss order, which act together to help
    to achieve the specified profit or limit the loss. Along with the regular order
    parameters, a bracket order takes additional parameters—`target`, `stoploss`,
    and `trailing stoploss` (optional).
  prefs: []
  type: TYPE_NORMAL
- en: Please refer to the introduction of the *Placing a bracket limit order* recipe
    for an in-depth understanding of the working of bracket orders.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a bracket limit order if you want to place a buy bracket order below
    the market price or a sell bracket order above the market price. The trailing
    stoploss feature improvises the positioning of the stoploss order by modifying
    its price in the direction of the initial order price by as many points as the
    value of `trailing stoploss`. This happens every time the initial order price
    moves in the direction of the target order price. This helps to further reduce
    the loss in case the price movement direction of the initial order changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'This recipe demonstrates the placing of the following bracket limit orders
    with a trailing stoploss and querying their statuses:'
  prefs: []
  type: TYPE_NORMAL
- en: The `BUY`, `BRACKET`, `INTRADAY`, `LIMIT` order with trailing stoploss
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `SELL`, `BRACKET`, `INTRADAY`, `LIMIT` order with trailing stoploss
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are references to the state machine diagrams for a bracket limit
    order:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Initial order**: Refer to the state machine diagram from the *Placing a regular
    limit order* recipe in the previous chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Target order**: Refer to the state machine diagram from the *Placing a regular
    limit order* recipe in the previous chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stoploss order**: Refer to the state machine diagram from the *Placing a
    regular stoploss-limit order* recipe in the previous chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the `broker_connection` object and constants from the `pyalgotrading` package
    are available in your Python namespace. Refer to the *Technical requirements* section
    of this chapter to set up this object.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We execute the following steps for this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fetch a financial instrument and assign it to `instrument`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch the LTP. Place a `BUY`, `BRACKET`, `INTRADAY`, `LIMIT` order and display
    the order ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output (your output may differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch and display the order status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch and display the order status again after some time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch the LTP. Place a `SELL`, `BRACKET`, `INTRADAY`, `LIMIT` order and display
    the order ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output (your output may differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch and display the order status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch and display the order status again after some time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *step 1*, you use the `get_instrument()` method of the `BrokerConnectionZerodha` class
    to fetch an instrument and assign it to a new attribute, `instrument`. This object
    is an instance of the `Instrument` class. The two parameters needed to call `get_instrument` are
    the exchange (`'NSE'`) and the trading-symbol (`'FEDERALBNK'`).
  prefs: []
  type: TYPE_NORMAL
- en: 'In *step 2*, you fetch the LTP of the instrument using the `get_ltp()` method
    of the `BrokerConnectionZerodha` class and assign it to a new attribute, `ltp`.
    The `instrument` object is passed as the parameter here. Next, you use the `place_order()` method
    of the `broker_connection` object to place a `BUY`, `BRACKET`, `INTRADAY`, `LIMIT`
    order on the exchange. The `place_order()` method is a wrapper on the broker-specific
    place order API. It takes the following attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`instrument`: This is the financial instrument for which the order must be
    placed and should be an instance of the `Instrument` class. We pass `instrument` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_transaction_type`: This is the order transaction type and should be
    an enum of the type, `BrokerOrderTransactionTypeConstants`. We pass `BrokerOrderTransactionTypeConstants.BUY` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_type`: This is the order type and should be an enum of the type, `BrokerOrderTypeConstants`.
    We pass `BrokerOrderTypeConstants.BRACKET` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_code`: This is the order code and should be an enum of the type, `BrokerOrderCodeConstants`.
    We pass `BrokerOrderCodeConstants.INTRADAY` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_variety`: This is the order variety and should be an enum of the type,
    `BrokerOrderVarietyConstants`. We pass `BrokerOrderVarietyConstants.LIMIT` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`quantity`: This is the number of shares to be traded for the given instrument
    and should be a positive integer. We pass `1` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`price`: This is the limit price at which the order should be placed. We pass `ltp-1` here,
    which means `1` unit price below `ltp`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stoploss`: This is the price difference from the Initial Order price, at which
    the Stoploss Order should be placed. It should be a positive `int` or `float`
    value. We pass `2` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`target`: This is the price difference from the Initial Order price, at which
    the Target Order should be placed. It should be a positive `int` or `float` value.
    We pass `2` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`trailing_stoploss`: This is the price difference by which the stoploss order
    should be modified every time the market price moves in the direction of the target
    order. We pass `1` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (The attributes passed to the `place_order()` method are broker-agnostic constants,
    imported earlier from the `pyalgotrading.constants` module.)
  prefs: []
  type: TYPE_NORMAL
- en: On placing the order in *step 2*, you get an order ID from the broker, which
    you assign to a new attribute, `order1_id`. The `order1_id` object is a string.
    If the order placement is not successful for some reason, you may not get an order
    ID. Observe that the `price` parameter is passed a value of `ltp-1`. This means
    the order is placed below the market price, which is a necessary condition for
    placing buy limit orders. The `stoploss` parameter is specified as `2`. This means
    the stoploss order would be placed at the price that is two price units lower
    than the execution price of the initial order. Similarly, the target parameter
    is specified as `2`. This means the target order would be placed at the price
    that is two price units higher than the execution price of the initial order.
    Finally, the `trailing_stoploss` parameter is specified as `1`. This means, after
    the stoploss order is placed, the stoploss order would be modified and placed
    at a price higher than the previous price by one unit, every time the market price
    increases in multiples of one unit from the price of the initial order.
  prefs: []
  type: TYPE_NORMAL
- en: So, for example, let's say the market price for the instrument was 100 at the
    time of placing this order, and so the target and stoploss orders would be placed
    at 102 and 98, respectively. Suppose the market price reaches 101, which is one
    unit higher than 100, then the stoploss order would be modified and placed at
    99, which is again one unit higher than its previous price. By doing so, you have
    reduced your maximum loss from 2 to 1.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 3*, you fetch the status of the placed order using the `get_order_status()` method
    of the `broker_connection` object. You pass `order1_id` as a parameter to the
    `get_order_status()` method. You get the order status as `'OPEN'`, a string. You
    can use `order1_id` to fetch the status of the placed order at any later point
    in time as well. In *step 4*, you fetch the order status again, and if the order
    is completed, you get the order status as `'COMPLETE'`. Immediately after this,
    the target and stoploss orders are placed, at the prices mentioned earlier. The
    target order executes as a regular limit order. The stoploss order executes as
    a regular stoploss-limit order. When one of them gets executed and reaches the `COMPLETE` state,
    the other order is automatically canceled by the broker, so it moves to the `CANCELLED` state.
    Recall, both target and stoploss orders are on opposite sides of the initial order,
    so both target and stoploss orders cannot execute at the same time. The stoploss
    order may be modified by one price unit, as mentioned earlier.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 3*, if you see the status as ``COMPLETE`` instead of ``OPEN``, this
    could be due to high volatility. If you want the order to stay in the ``OPEN`` state
    for a while, try placing the order further away from the market price.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are references for more details on the execution of the initial
    order, target order, and stoploss order:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Initial order**: Refer to the *Placing a regular limit order* recipe in the
    previous chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Target order**: Refer to the *Placing a regular limit order* recipe in the
    previous chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stoploss order**: Refer to the *Placing a regular stoploss-limit order* recipe
    in the previous chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can verify the successful placement of your order by logging in to the broking
    website and checking the orders section there. You should see data similar to
    the screenshots shown in the *Placing bracket limit orders on the exchange* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'The other steps in this recipe follow the same pattern of placing an order
    and getting its status for a different combination of attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Steps 5*, *6*, and *7*: The `SELL`, `BRACKET`, `INTRADAY`, `LIMIT` order with
    trailing stoploss'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Placing a bracket stoploss-limit order with trailing stoploss
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bracket orders are complex orders that are meant to help to make a profit when
    trade becomes favorable, or limit the loss when it becomes unfavorable, with predefined
    values. A bracket order is essentially a combination of three regular orders together—an
    initial order, a target order, and a stoploss order, which act together to help
    to achieve the specified profit or limit the loss. Along with the regular order
    parameters, a bracket order takes additional parameters—`target`, `stoploss`, and `trailing
    stoploss` (optional).
  prefs: []
  type: TYPE_NORMAL
- en: Please refer to the introduction of the *Placing a bracket limit order* recipe
    for an in-depth understanding of the working of bracket orders.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a bracket stoploss-limit order if you want to place a buy bracket
    order above the market price or a sell bracket order below the market price. The
    trailing stoploss improvises the positioning of the stoploss order by modifying
    its price in the direction of the initial order price by as many points as the
    value of `trailing stoploss`, every time the initial order price moves in the
    direction of the target order price. This helps to further reduce the loss, in
    case the direction of the price movement of the initial order changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'This recipe demonstrates the placing of the following bracket stoploss-limit
    orders with trailing stoploss and querying their statuses:'
  prefs: []
  type: TYPE_NORMAL
- en: The `BUY`, `BRACKET`, `INTRADAY`, `STOPLOSS_LIMIT` order with trailing stoploss
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `SELL`, `BRACKET`, `INTRADAY`, `STOPLOSS_LIMIT` order with trailing stoploss
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are references to the state machine diagrams for a bracket stoploss-limit
    order:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Initial order**: Refer to the state machine diagram from the *Placing a regular
    stoploss-limit order* recipe in the previous chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Target order**: Refer to the state machine diagram from the *Placing a regular
    limit order* recipe in the previous chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stoploss order**: Refer to the state machine diagram from the *Placing a
    regular stoploss-limit order* recipe in the previous chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the `broker_connection` object and constants from the `pyalgotrading`
    package are available in your Python namespace. Refer to the *Technical requirements* section
    of this chapter to set up this object.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We execute the following steps for this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fetch a financial instrument and assign it to `instrument`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch the LTP. Place a `BUY`, `BRACKET`, `INTRADAY`, `STOPLOSS_LIMIT` order
    and display the order ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output (your output may differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch and display the order status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch and display the order status again after some time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch the LTP. Place a `SELL`, `BRACKET`, `INTRADAY`, `STOPLOSS_LIMIT` order
    and display the order ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output (your output may differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch and display the order status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch and display the order status again after some time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *step 1*, you use the `get_instrument()` method of the `BrokerConnectionZerodha`
    class to fetch an instrument and assign it to a new attribute, `instrument`. This
    object is an instance of the `Instrument` class. The two parameters needed to
    call `get_instrument` are the exchange (`'NSE'`) and the trading-symbol (`'RBLBANK'`).
  prefs: []
  type: TYPE_NORMAL
- en: 'In *step 2*, you fetch the LTP of the instrument using the `get_ltp()` method
    of the `BrokerConnectionZerodha` class and assign it to a new attribute, `ltp`.
    The `instrument` object is passed as the parameter here. Next, you use the `place_order()` method
    of the `broker_connection` object to place a `BUY`, `REGULAR`, `INTRADAY`, `STOPLOSS_LIMIT`
    order on the exchange. The `place_order()` method is a wrapper on the broker-specific
    place order API. It takes the following attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`instrument`: This is the financial instrument for which the order must be
    placed and should be an instance of the `Instrument` class. We pass `instrument` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_transaction_type`: This is the order transaction type and should be
    an enum of the type, `BrokerOrderTransactionTypeConstants`. We pass `BrokerOrderTransactionTypeConstants.BUY` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_type`: This is the order type and should be an enum of the type, `BrokerOrderTypeConstants`.
    We pass `BrokerOrderTypeConstants.BRACKET` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_code`: This is the order code and should be an enum of the type, `BrokerOrderCodeConstants`.
    We pass `BrokerOrderCodeConstants.INTRADAY` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_variety:` This is the order variety and should be an enum of the type,
    `BrokerOrderVarietyConstants`. We pass `BrokerOrderVarietyConstants.STOPLOSS_LIMIT`
    here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`quantity`: This is the number of shares to be traded for the given instrument
    and should be a positive integer. We pass `1` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`price`: This is the limit price at which the order should be placed. We pass `ltp+1` here,
    which means `1` unit price above `ltp`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`trigger_price`: This is the trigger price at which the order should be placed.
    We pass `ltp+1` here, which means 1 unit price above `ltp`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stoploss`: This is the price difference from the initial order price, at which
    the stoploss order should be placed. It should be a positive `int` or `float`
    value. We pass `2` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`target`: This is the price difference from the Initial Order price, at which
    the Target Order should be placed. It should be a positive `int` or `float` value.
    We pass `2` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`trailing_stoploss`: This is the price difference by which the stoploss order
    should be modified every time the market price moves in the direction of the target
    order. We pass `1` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (The attributes passed to the `place_order()` method are broker-agnostic constants,
    imported earlier from the `pyalgotrading.constants` module.)
  prefs: []
  type: TYPE_NORMAL
- en: On placing the order in *step 2*, you get an order ID from the broker, which
    you assign to a new attribute, `order1_id`. The `order1_id` object is a string.
    If the order placement is not successful for some reason, you may not get an order
    ID. Observe that the `price` and `trigger_price` parameters are passed a value
    of `ltp+1`. This means the order is placed above the market price, which is a
    necessary condition for placing buy stoploss-limit orders. The `stoploss` parameter
    is specified as `2`. This means the stoploss order would be placed at the price
    that is two price units lower than the execution price of the initial order. Similarly,
    the `target` parameter is specified as `2`. This means the target order would
    be placed at the price that is two price units higher than the execution price
    of the initial order. Finally, the `trailing_stoploss` parameter is specified
    as `1`. This means, after the stoploss order is placed, the stoploss order would
    be modified and placed at a price higher than the previous price by one unit,
    every time the market price increases in multiples of one unit from the price
    of the initial order.
  prefs: []
  type: TYPE_NORMAL
- en: So, for example, let's say the market price for the instrument was 100 at the
    time of placing this order, and so the target and stoploss orders would be placed
    at 102 and 98 respectively. Suppose the market price reaches 101, which is one
    unit higher than 100, then the stoploss order would be modified and placed at
    99, which is again one unit higher than its previous price. By doing so, you have
    reduced your maximum loss from 2 to 1.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 3*, you fetch the status of the placed order using the `get_order_status()` method
    of the `broker_connection` object. You pass `order1_id` as a parameter to the
    `get_order_status()` method. You get the order status as `'TRIGGER PENDING'`,
    a string. You can use `order1_id` to fetch the status of the placed order at any
    later point of time as well. In *step 4*, you fetch the order status again, and
    if the order is completed, you get the order status as `'COMPLETE'`. Immediately
    after this, the target and stoploss orders are placed, at the prices mentioned
    earlier. The target order executes as a regular limit order. The stoploss order
    executes as a regular stoploss-limit order. When one of them gets executed and
    reaches the `'COMPLETE'` state, the other order is automatically canceled by the
    broker, so it moves to the `'CANCELLED'` state. Recall, both target and stoploss
    orders are on opposite sides of the initial order, so both target and stoploss
    orders cannot execute at the same time. The stoploss order may be modified by
    one price unit, as mentioned earlier.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 3*, if you see the status as `'COMPLETE'` instead of `'TRIGGER PENDING'`,
    this could be due to high volatility. If you want the order to stay in the `'TRIGGER
    PENDING'` state for a while, try placing the order further away from the market
    price.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are references to more details on the execution of the target
    order and stoploss order:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Initial order**: Refer to the *Placing a regular stoploss-limit order* recipe
    in the previous chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Target order**: Refer to the *Placing a regular limit order* recipe in the
    previous chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stoploss order**: Refer to the *Placing a regular stoploss-limit order* recipe
    chapter in the previous chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can verify the successful placement of your order by logging in to the broking
    website and checking the orders section there. You should see data similar to
    the screenshots shown in the *Placing bracket limit orders on the exchange* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'The other steps in this recipe follow the same pattern of placing an order
    and getting its status for a different combination of attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Steps 5*, *6*, and *7*: The `SELL`, `BRACKET`, `INTRADAY`, `STOPLOSS_LIMIT` order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Placing a cover market order
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Cover orders are complex orders that are meant to help to limit the loss within
    predefined values if trade becomes unfavorable. A cover order is essentially a
    combination of two regular orders together—an initial order and a stoploss order:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Initial order**: This order can be equivalent to a regular market order or
    regular limit order, depending on whether you are placing a cover market order
    or cover limit order. Once the order moves to the `''COMPLETE''` state, the stoploss
    order is placed, which is described next.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stoploss order**: This order is equivalent to a regular stoploss-market order
    (the *Placing a regular stoploss-market order* recipe in the previous chapter),
    with the specified `trigger price` value as its trigger price and a transaction
    type opposite to that of the initial order. For a buy initial order, the stoploss
    order is placed at a lower price than the initial order. This would be vice versa
    for a sell initial order. The quantity matches that of the initial order. So,
    if this order executes, it exits the position created by the initial order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since the stoploss order is placed to cover the initial order from making unexpected
    losses, this order is called a **cover order**. Usually, the broker won't allow
    canceling the stoploss order once it is placed. It can only be exited via completion.
  prefs: []
  type: TYPE_NORMAL
- en: A cover order is usually meant for intraday trading unless otherwise supported
    by the broker. If the initial order or the stoploss order is not completed by
    the end of the trading session, they are automatically canceled or exited by the
    broker.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following flowchart summarizes the preceding points and explains the working
    of a cover order:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cb807908-5647-4dff-8284-55dda3938069.png)'
  prefs: []
  type: TYPE_IMG
- en: You can use the cover market order when a cover order has to be placed at the
    market price.
  prefs: []
  type: TYPE_NORMAL
- en: 'This recipe demonstrates placing the following cover market orders and querying
    their statuses:'
  prefs: []
  type: TYPE_NORMAL
- en: The `BUY`, `COVER`, `INTRADAY`, `MARKET` order
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `SELL`, `COVER`, `INTRADAY`, `MARKET` order
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are references to the state machine diagrams for a cover market
    order:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Initial orde**r: Refer to the state machine diagram from the *Placing a regular
    market order* recipe in the previous chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stoploss orde**r: Refer to the state machine diagram from the *Placing a
    regular stoploss-market order* recipe in the previous chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the `broker_connection` object and constants from the `pyalgotrading` package
    are available in your Python namespace. Refer to the *Technical requirements* section
    of this chapter to set up this object.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We execute the following steps for this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fetch a financial instrument and assign it to `instrument`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch the LTP. Place a `BUY`, `COVER`, `INTRADAY`, `MARKET` order and display
    the order ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output (your output may differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch and display the order status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'If you log in to the broker site with your credentials and go to the orders
    section, you can find your order details as shown in the following screenshots
    (some data may differ for you):'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the initial order:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/450f6bf4-aa2d-4ba3-a330-5e4b9b952b1b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the stoploss order:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/5a67b3f6-95a3-42de-86a7-45e682d5c982.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fetch the LTP. Place a `SELL`, `COVER`, `INTRADAY`, `MARKET` order and display
    the order ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output (your output may differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch and display the order status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'If you log in to the broker site with your credentials and go to the orders
    section, you can find your order details as shown in the following screenshots
    (some data may differ for you):'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the initial order:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/a1d3adfd-923b-4311-8f41-f6ff11ac774f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the stoploss order:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/8664f392-8449-48ab-adb4-c2d64e253bdf.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *step 1*, you use the `get_instrument()` method of the `BrokerConnectionZerodha` class
    to fetch an instrument and assign it to a new attribute, `instrument`. This object
    is an instance of the `Instrument` class. The two parameters needed to call `get_instrument` are
    the exchange (`'NSE'`) and the trading-symbol (`'BANKBARODA'`).
  prefs: []
  type: TYPE_NORMAL
- en: 'In *step 2*, you fetch the LTP of the instrument using the `get_ltp()` method
    of the `BrokerConnectionZerodha` class and assign it to a new attribute, `ltp`.
    The `instrument` object is passed as the parameter here. Next, you use the `place_order()` method
    of the `broker_connection` object to place a `BUY`, `COVER`, `INTRADAY`, `MARKET`
    order on the exchange. The `place_order()` method is a wrapper on the broker-specific
    place order API. It takes the following attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`instrument`: This is the financial instrument for which the order must be
    placed and should be an instance of the `Instrument` class. We pass `instrument` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_transaction_type`: This is the order transaction type and should be
    an enum of the type, `BrokerOrderTransactionTypeConstants`. We pass `BrokerOrderTransactionTypeConstants.BUY` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_type`: This is the order type and should be an enum of the type, `BrokerOrderTypeConstants`.
    We pass `BrokerOrderTypeConstants.COVER` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_code`: This is the order code and should be an enum of the type, `BrokerOrderCodeConstants`.
    We pass `BrokerOrderCodeConstants.INTRADAY` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_variety`: This is the order variety and should be an enum of the type,
    `BrokerOrderVarietyConstants`. We pass `BrokerOrderVarietyConstants.MARKET` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`quantity`: This is the number of shares to be traded for the given instrument
    and should be a positive integer. We pass `1` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`trigger_price`: This is the trigger price for the Stoploss Order. We pass
    `ltp-1` here, which means one unit price below `ltp`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (The attributes passed to the `place_order()` method are broker-agnostic constants,
    imported earlier from the `pyalgotrading.constants` module.)
  prefs: []
  type: TYPE_NORMAL
- en: On placing the order in *step 2*, you get an order ID from the broker, which
    you assign to a new attribute, `order1_id`. The `order1_id` object is a string.
    If the order placement is not successful for some reason, you may not get an order
    ID. Observe that the `trigger_price` parameter is passed a value of `ltp-1`. This
    means the stoploss order is placed below the market price, which is a necessary
    condition for placing sell stoploss-market orders.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 3*, you fetch the status of the placed order using the `get_order_status()` method
    of the `broker_connection` object. You pass `order1_id` as a parameter to the `get_order_status()`
    method. You get the order status as `'COMPLETE'`, a string. Immediately after
    this, the stoploss order is placed, at the price mentioned earlier. This order
    is then executed as a regular stoploss-market order.
  prefs: []
  type: TYPE_NORMAL
- en: If the stoploss order is executed at any point in time, it would mean your trade
    has incurred a loss, but has safe-guarded you from making more losses. The stoploss
    order transitions to the `'COMPLETE'` state and the position created by the cover
    order is exited. You can also verify the successful placement of your order by
    logging in to the broking website and checking the orders section there. You should
    see data similar to the screenshot shown in the output of *step 3*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are references to more details on the execution of stoploss orders:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Initial order**: Refer to the *Placing a regular market order* recipe in
    the previous chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stoploss order**: Refer to the *Placing a regular stoploss-market order* recipe
    in the previous chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The other steps in this recipe follow the same pattern of placing an order
    and getting its status for a different combination of attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Steps 4* and *5*: The `SELL`, `COVER`, `INTRADAY`, `MARKET` order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Placing a cover limit order
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cover orders are complex orders that are meant to help to limit the loss within
    predefined values if trade becomes unfavorable. A cover order is essentially a
    combination of two regular orders—an initial order and a stoploss order, which
    act together to help to limit the loss in case trade becomes unfavorable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Please refer to the introduction of the *Placing a cover market order* recipe
    for an in-depth understanding of the working of cover orders. You can use a cover
    limit order if you want to place a buy cover order below the market price or a
    sell cover order above the market price. This recipe demonstrates the placing
    of the following cover limit orders and querying their statuses:'
  prefs: []
  type: TYPE_NORMAL
- en: The `BUY`, `COVER`, `INTRADAY`, `LIMIT` order
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `SELL`, `COVER`, `INTRADAY`, `LIMIT` order
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are references to the state machine diagrams for a cover limit
    order:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Initial order**: Refer to the state machine diagram from the *Placing a regular
    limit order* recipe in the previous chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stoploss order**: Refer to the state machine diagram from the *Placing a
    regular stoploss-market order* recipe in the previous chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the `broker_connection` object and constants from the `pyalgotrading` package
    are available in your Python namespace. Refer to the *Technical requirements* section
    of this chapter to set up this object.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We execute the following steps for this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fetch a financial instrument and assign it to `instrument`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch the LTP. Place a `BUY`, `COVER`, `INTRADAY`, `LIMIT` order and display
    the order ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch and display the order status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'If you log in to the broker site with your credentials and go to the orders
    section, you can find your order details as shown in the following screenshots
    (some data may differ for you):'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the initial order:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/d454bbaf-2d0d-4651-87bd-4661a9ce26f0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the stoploss order:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/fa76e3f2-98c0-462b-bc69-e49022b23fc0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fetch and display the order status again after some time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch the LTP. Place a `SELL`, `COVER`, `INTRADAY`, `LIMIT` order and display
    the order ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output (your output may differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch and display the order status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'If you log in to the broker site with your credentials and go to the orders
    section, you can find your order details as shown in the following screenshots
    (some data may differ for you):'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the initial order:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/e99f6751-346a-4000-aaf7-aee90e0e4a91.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the stoploss order:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/e4ae8c89-9826-4bb7-bc30-3a8a50dd0d6a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fetch and display the order status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *step 1*, you use the `get_instrument()` method of the `BrokerConnectionZerodha` class
    to fetch an instrument and assign it to a new attribute, `instrument`. This object
    is an instance of the `Instrument` class. The two parameters needed to call `get_instrument` are
    the exchange (`'NSE'`) and the trading-symbol (`'YESBANK'`).
  prefs: []
  type: TYPE_NORMAL
- en: 'In *step 2*, you fetch the LTP of the instrument using the `get_ltp()` method
    of the `BrokerConnectionZerodha` class and assign it to a new attribute, `ltp`.
    The `instrument` object is passed as the parameter here. Next, you use the `place_order()` method
    of the `broker_connection` object to place a `BUY`, `COVER`, `INTRADAY`, `LIMIT`
    order on the exchange. The `place_order()` method is a wrapper on the broker-specific
    place order API. It takes the following attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`instrument`: This is the financial instrument for which the order must be
    placed and should be an instance of the `Instrument` class. We pass `instrument` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_transaction_type`: This is the order transaction type and should be
    an enum of the type, `BrokerOrderTransactionTypeConstants`. We pass `BrokerOrderTransactionTypeConstants.BUY` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_type`: This is the order type and should be an enum of the type, `BrokerOrderTypeConstants`.
    We pass `BrokerOrderTypeConstants.COVER` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_code`: This is the order code and should be an enum of the type, `BrokerOrderCodeConstants.`
    We pass `BrokerOrderCodeConstants.INTRADAY` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_variety`: This is the order variety and should be an enum of the type,
    `BrokerOrderVarietyConstants`. We pass `BrokerOrderVarietyConstants.LIMIT` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`quantity`: This is the number of shares to be traded for the given instrument
    and should be a positive integer. We pass `1` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`price`: This is the limit price for the Initial Order. We pass `ltp-0.5` here,
    which means 0.5 unit of a price below `ltp`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`trigger_price`: This is the trigger price for the Stoploss Order. We pass
    `ltp-1` here, which means one unit price below `ltp`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (The attributes passed to the `place_order()` method are broker-agnostic constants,
    imported earlier from the `pyalgotrading.constants` module.)
  prefs: []
  type: TYPE_NORMAL
- en: On placing the order in *step 2*, you get an order ID from the broker, which
    you assign to a new attribute, `order1_id`. The `order1_id` object is a string.
    If the order placement is not successful for some reason, you may not get an order
    ID. Observe that the `price` parameter is passed a value of `ltp-0.5`. This means
    the initial order is placed below the market price, which is a necessary condition
    for placing buy limit orders. Also, observe that the `trigger_price` parameter
    is passed a value of `ltp-1`. This means the stoploss order is placed below `price`
    (which will be the market price at the time of placing the stoploss order), which
    is a necessary condition for placing sell stoploss-market orders.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 3*, you fetch the status of the placed order using the `get_order_status()` method
    of the `broker_connection` object. You pass `order1_id` as a parameter to the `get_order_status()`
    method. You get the order status as `'OPEN'`, a string. You can use `order1_id` to
    fetch the status of the placed order at any later point of time as well. In *step
    4*, you fetch the order status again, and if the order is completed, you get the
    order status as `'COMPLETE'`. Immediately after this, the stoploss order is placed,
    at the price mentioned earlier. This order is then executed as a regular stoploss-market
    order.
  prefs: []
  type: TYPE_NORMAL
- en: If the stoploss order is executed at any point in time, it would mean your trade
    has incurred a loss, but has safe-guarded you from making more losses. The stoploss
    order transitions to the `'COMPLETE'` state and the position created by the cover
    order is exited. You can also verify the successful placement of your order by
    logging in to the broking website and checking the orders section there. You should
    see data similar to the screenshot shown in the output of *step 3*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are references to more details on the execution of the initial
    order and stoploss order:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Initial order**: Refer to the *Placing a regular limit order* recipe in the
    previous chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stoploss order**: Refer to the *Placing a regular stoploss-market order* recipe
    in the previous chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The other steps in this recipe follow the same pattern of placing an order
    and getting its status for a different combination of attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Steps 4* and *5*: The `SELL`, `COVER`, `INTRADAY`, `LIMIT` order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
