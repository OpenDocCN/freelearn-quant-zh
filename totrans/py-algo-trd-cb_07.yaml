- en: Placing Bracket and Cover Orders on the Exchange
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 在交易所放置括号和覆盖订单
- en: This chapter introduces various types of bracket and cover orders that can be
    placed on exchanges via the broker APIs. The recipes include code for placing
    12 types of orders and querying their statuses, canceling open orders, and exiting
    completed orders. These recipes will be a fundamental part of your algorithmic
    trading strategies. Understanding all of the types of orders and knowing which
    one to place for the given requirement is crucial for building a successful trading
    strategy.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了可以通过经纪人 API 在交易所上放置的各种类型的括号和覆盖订单。这些配方包括用于放置 12 种类型的订单、查询它们的状态、取消未完成的订单和退出已完成订单的代码。这些配方将是您算法交易策略的基本组成部分。了解所有订单类型并知道为给定要求放置哪种订单对于构建成功的交易策略至关重要。
- en: 'Each order has four attributes that together define the order completely:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 每个订单有四个属性，这四个属性共同完整定义了订单：
- en: Order transaction type
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 订单交易类型
- en: Order type
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 订单类型
- en: Order code
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 订单代码
- en: Order variety
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 订单种类
- en: For placing an order, all four attributes should be known precisely. To know
    more about these attributes, refer to the introduction to [Chapter 6](077b54a1-c9c4-424c-912a-11f28db3797f.xhtml),
    *Placing Regular Orders on the Exchange*.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要下订单，所有四个属性都应该被准确知道。要了解更多关于这些属性的信息，请参考[第 6 章](077b54a1-c9c4-424c-912a-11f28db3797f.xhtml)的介绍，*在交易所放置常规订单*。
- en: The recipes in this chapter provide detailed flowcharts for each order type.
    Every order placed on the exchange goes through various states during its lifetime.
    To know more about the order states supported by the broker used in this chapter,
    refer to the introduction to [Chapter 6](077b54a1-c9c4-424c-912a-11f28db3797f.xhtml),
    *Placing Regular Orders on the Exchange*.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的配方为每种订单类型提供了详细的流程图。在交易所上下的每个订单在其生命周期中经历各种状态。要了解更多关于本章使用的经纪人支持的订单状态，请参考[第
    6 章](077b54a1-c9c4-424c-912a-11f28db3797f.xhtml)的介绍，*在交易所放置常规订单*。
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下配方：
- en: Placing a bracket limit order
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 放置括号限价单
- en: Placing a bracket stoploss-limit order
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 放置括号止损限价单
- en: Placing a bracket limit order with a trailing stoploss
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 放置带有跟踪止损的括号限价单
- en: Placing a bracket stoploss-limit order with a trailing stoploss
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 放置带有跟踪止损的括号止损限价单
- en: Placing a cover market order
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 放置覆盖市价单
- en: Placing a cover limit order
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 放置覆盖限价单
- en: Please make sure you try all of these recipes during live market hours with
    sufficient balance in your broking account. If these recipes are tried outside
    of market hours or with insufficient balance, your orders will be rejected by
    the broker. This means the orders would never reach the exchange and you would
    not get the expected response.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保您在实时市场时间内具有足够的余额在您的经纪帐户中尝试所有这些配方。如果在非市场时间尝试这些配方或者余额不足，您的订单将被经纪人拒绝。这意味着订单永远不会达到交易所，您将无法获得预期的响应。
- en: Technical requirements
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'You will need the following to successfully execute the recipes in this chapter:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要以下内容才能成功执行本章的配方：
- en: Python 3.7+
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3.7+
- en: Python packages: `pyalgotrading` (`$ pip install pyalgotrading`)
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 软件包：`pyalgotrading`（`$ pip install pyalgotrading`）
- en: The latest Jupyter notebook for this chapter can be found on GitHub at [https://github.com/PacktPublishing/Python-Algorithmic-Trading-Cookbook/tree/master/Chapter07](https://github.com/PacktPublishing/Python-Algorithmic-Trading-Cookbook/tree/master/Chapter07).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章的最新 Jupyter 笔记本可以在 GitHub 上找到，网址为 [https://github.com/PacktPublishing/Python-Algorithmic-Trading-Cookbook/tree/master/Chapter07](https://github.com/PacktPublishing/Python-Algorithmic-Trading-Cookbook/tree/master/Chapter07)。
- en: The first thing needed for setting connectivity with the broker is getting the
    API keys. The broker will provide each customer with unique keys, typically as
    an `api-key` and `api-secret` key pair. These API keys are chargeable, usually
    on a monthly subscription basis. You need to get your copy of `api-key` and `api-secret` from
    the broker website before starting this. You can refer to *Appendix I* for more
    details.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 与经纪人建立连接的第一件事就是获取 API 密钥。经纪人将为每个客户提供唯一的密钥，通常是作为一个 `api-key` 和 `api-secret` 密钥对。这些
    API 密钥通常是收费的，通常是按月订阅的。您需要在开始之前从经纪人网站获取您的 `api-key` 和 `api-secret` 的副本。您可以参考 *附录
    I* 获取更多详细信息。
- en: 'The following steps will help you to set up the broker connection with Zerodha,
    which will be used by all of the recipes in this chapter. Please make sure you
    have followed these steps before trying out any recipe:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助您与 Zerodha 建立经纪人连接，该连接将被本章中的所有配方使用。请确保在尝试任何配方之前已经完成了这些步骤：
- en: 'Import the necessary modules:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入必要的模块：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: All `pyalgotrading` constants are now available in your Python namespace.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 所有`pyalgotrading`常量现在都可在您的Python命名空间中使用。
- en: 'Get the `api_key` and `api_secret` keys from the broker. These are unique to
    you and will be used by the broker to identify your Demat account:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从经纪人那里获取`api_key`和`api_secret`密钥。这些对你来说是唯一的，并且经纪人将用它们来识别你的证券账户：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We get the following output:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you are running this for the first time and `kiteconnect` is not installed,
    `pyalgotrading` will automatically install it for you. The final output of *step
    2* will be a link. Click on the link and log in with your Zerodha credentials.
    If the authentication is successful, you will see a link in your browser's address
    bar similar to `https://127.0.0.1/?request_token=<alphanumeric-token>&action=login&status=success`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是第一次运行此代码，并且没有安装`kiteconnect`，`pyalgotrading`将自动为您安装它。*步骤 2* 的最终输出将是一个链接。点击链接并使用您的
    Zerodha 凭据登录。如果验证成功，您将在浏览器的地址栏中看到一个类似于`https://127.0.0.1/?request_token=<字母数字令牌>&action=login&status=success`的链接。
- en: 'We have the following example:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有以下示例：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Copy the alphanumeric-token and paste it in `request_token`:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制字母数字令牌并粘贴到`request_token`中：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `broker_connection` instance is now ready for performing API calls.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`broker_connection`实例现在已准备好执行API调用。'
- en: The `pyalgotrading` package supports multiple brokers and provides a connection
    object class per broker, with the same methods. It abstracts broker APIs behind
    a unified interface so users need not worry about the underlying broker API calls
    and can use all of the recipes in this chapter as is. Only the procedure to set
    up the broker connection would vary from broker to broker. You can refer to the `pyalgotrading` documentation
    for setting up the broker connection if you are not using Zerodha as your broker.
    For Zerodha users, the steps mentioned in the preceding section would suffice.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`pyalgotrading`包支持多个经纪人，并为每个经纪人提供一个连接对象类，具有相同的方法。它将经纪人API抽象为统一接口，因此用户无需担心底层经纪人API调用，可以直接使用本章中的所有示例。只有设置经纪人连接的过程会因经纪人而异。如果您不是使用
    Zerodha 作为您的经纪人，则可以参考 `pyalgotrading` 文档来设置经纪人连接。对于 Zerodha 用户，前一节中提到的步骤就足够了。'
- en: Placing a bracket limit order
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 放置一个括号限价单
- en: 'Bracket orders are complex orders that are meant to help to make a profit when
    trade becomes favorable, or limit the loss when it becomes unfavorable, with predefined
    values. A bracket order is essentially a combination of three regular orders together—an
    initial order, a target order, and a stoploss order—which act together to help
    to achieve the specified profit or limit the loss. Along with the regular order
    parameters, a bracket order takes additional parameters—`target`, `stoploss`,
    and `trailing stoploss` (optional). The three regular orders are described as
    follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 括号订单是一种复杂的订单，旨在在交易变得有利时帮助盈利，或在变得不利时限制损失，具有预定义的值。括号订单本质上是三个常规订单的组合——初始订单、目标订单和止损订单——这三个订单共同起作用，以帮助实现指定的利润或限制损失。除了常规订单参数外，括号订单还接受附加参数——`target`、`stoploss`
    和 `trailing stoploss`（可选）。这三个常规订单描述如下：
- en: '**Initial order**: This order is equivalent to a regular limit order or regular
    stoploss-limit order. Once placed, it remains in the `''OPEN''` state until the
    market price reaches its trigger price value. Once the market crosses the trigger
    price value, this order moves from the `''OPEN''` to `''COMPLETE''` state and
    the target and stoploss orders are placed, which are described next.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**初始订单**：此订单相当于常规限价单或常规止损限价单。一旦下单，它将保持`''OPEN''`状态，直到市价达到其触发价格值。一旦市场越过触发价格值，此订单将从`''OPEN''`状态移至`''COMPLETE''`状态，并且将放置目标和止损订单，下面描述这些订单。'
- en: '**Target order**: This order is equivalent to a regular limit order, with its
    trigger price as the specified target value and transaction type opposite to that
    of the initial order. For a buy initial order, the target order is placed at a
    higher price than the initial order. This would be vice versa for a sell initial
    order. The quantity matches that of the initial order. So, if this order executes,
    it exits the position created by the initial order.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标订单**：此订单相当于常规限价单，其触发价格为指定的目标值，并且交易类型与初始订单相反。对于买入初始订单，目标订单以比初始订单更高的价格下单。对于卖出初始订单，则相反。数量与初始订单相匹配。因此，如果此订单执行，它将退出由初始订单创建的头寸。'
- en: '**Stoploss order**: This order is equivalent to a regular stoploss-limit order,
    with the specified `stoploss` value as its trigger price and transaction type
    opposite to that of the initial order. For a buy initial order, the stoploss order
    is placed at a lower price than the initial order. This would be vice versa for
    a sell initial order. The quantity matches that of the initial order. So, if this
    order executes, it exits the position created by the initial order. If a `trailing
    stoploss` parameter is specified, every time the initial order price moves in
    the direction of the target order price, the stoploss order is modified in the
    direction of the initial order price by as many points as the value of `trailing
    stoploss`. This helps to further reduce the loss in case the price movement direction
    of the initial order changes.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**止损订单**：此订单相当于常规止损限价订单，其指定的`stoploss`值为其触发价格，并且交易类型与初始订单相反。对于买入初始订单，止损订单放置在低于初始订单的价格处。对于卖出初始订单，情况则相反。数量与初始订单相匹配。因此，如果此订单执行，则退出初始订单创建的仓位。如果指定了`trailing
    stoploss`参数，每当初始订单价格朝着目标订单价格的方向移动时，止损订单就会按照`trailing stoploss`值的大小修改，朝着初始订单价格的方向进行修改。这有助于在初始订单价格运动方向发生变化时进一步减少损失。'
- en: Since a target order and a stoploss order are placed on opposite sides of an
    initial order, they form a *bracket* around the initial order, and hence this
    order is called a **bracket order**. Also, as the target and stoploss orders are
    on opposite sides, only one of them would get executed (which means its status
    would go from `'OPEN'` to `'COMPLETE'`) at a given time, and when it does, the
    order (either the stoploss order or the target order) is automatically canceled.
    The target and stoploss orders are also collectively called **child orders** of
    the initial order, and the latter is called the **parent order** of the former.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 由于目标订单和止损订单放置在初始订单的相对两侧，它们围绕初始订单形成了一个*括号*，因此这个订单称为**括号订单**。此外，由于目标订单和止损订单位于相对两侧，因此在给定时间内只有一个会执行（这意味着它的状态会从`'OPEN'`变为`'COMPLETE'`），并且当它执行时，该订单（无论是止损订单还是目标订单）都会自动取消。目标订单和止损订单也被称为初始订单的**子订单**，而初始订单则称为后者的**父订单**。
- en: A bracket order is usually meant for intraday trading unless otherwise supported
    by the broker. If the initial order or the child orders are not completed by the
    end of the trading session, they are automatically canceled or exited by the broker.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 除非经纪人另有支持，否则括号订单通常用于日内交易。如果初始订单或子订单在交易会话结束时未完成，则经纪人会自动取消或退出它们。
- en: 'The following flowchart explains the workings of a **bracket order**:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下流程图解释了**括号订单**的工作原理：
- en: '![](img/5819affc-5ab7-4caa-9952-144d28407690.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5819affc-5ab7-4caa-9952-144d28407690.png)'
- en: 'The following are references to the state machine diagrams for a bracket limit
    order:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是括号限价订单状态机图的参考：
- en: '**Initial order**: Refer to the state machine diagram from the *Placing a regular
    limit order* recipe in the previous chapter.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**初始订单**：请参考前一章节中*下达常规限价订单*配方的状态机图。'
- en: '**Target order**: Refer to the state machine diagram from the *Placing a regular
    limit order* recipe in the previous chapter.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标订单**：请参考前一章节中*下达常规限价订单*配方的状态机图。'
- en: '**Stoploss order**: Refer to the state machine diagram from the *Placing a
    regular stoploss-limit order* recipe in the previous chapter.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**止损订单**：请参考前一章节中*下达常规止损限价订单*配方的状态机图。'
- en: You can use the bracket limit order when a buy bracket order has to be placed
    below the market price or a sell bracket order has to be placed above the market
    price.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当买入括号订单必须低于市场价格放置，或卖出括号订单必须高于市场价格放置时，可以使用括号限价订单。
- en: 'This recipe demonstrates the placing of the following bracket limit orders
    and querying their statuses:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方演示了以下括号限价订单的下单和查询其状态：
- en: The `BUY`, `BRACKET`, `INTRADAY`, `LIMIT` order (without trailing stoploss)
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BUY`、`BRACKET`、`INTRADAY`、`LIMIT` 订单（不带跟踪止损）'
- en: The `SELL`, `BRACKET`, `INTRADAY`, `LIMIT` order (without trailing stoploss)
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SELL`、`BRACKET`、`INTRADAY`、`LIMIT` 订单（不带跟踪止损）'
- en: Getting ready
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure the `broker_connection` object and constants from the `pyalgotrading` package
    are available in your Python namespace. Refer to the *Technical requirements* section
    of this chapter to set up this object.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在你的 Python 命名空间中可用 `broker_connection` 对象和 `pyalgotrading` 包中的常量。请参考本章节的*技术要求*部分设置此对象。
- en: How to do it…
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现…
- en: 'We execute the following steps for this recipe:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对这个配方执行以下步骤：
- en: 'Fetch a financial instrument and assign it to `instrument`:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取一个金融工具并将其赋值给`instrument`：
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Fetch the LTP. Place a `BUY`, `BRACKET`, `INTRADAY`, `LIMIT` order and display
    the order ID:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取 LTP。下一个`BUY`，`BRACKET`，`INTRADAY`，`LIMIT` 订单并显示订单 ID：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We get the following output (your output may differ):'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出（您的输出可能会有所不同）：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Fetch and display the order status:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取并显示订单状态：
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We get the following output:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If you log in to the broker site with your credentials and go to the orders
    section, you can find your order details as shown in the following screenshot
    (some data may differ for you):'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用凭据登录经纪人网站并转到订单部分，您可以找到您的订单详细信息，如下面的屏幕截图所示（您的一些数据可能会有所不同）：
- en: '![](img/631828fe-0fe8-4aa2-a896-45ee6f01641d.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/631828fe-0fe8-4aa2-a896-45ee6f01641d.png)'
- en: 'Fetch and display the order status again after some time:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 过一段时间后再次获取并显示订单状态：
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We get the following output:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If you log in to the broker site with your credentials and go to the orders
    section, you can find your order details as shown in the following screenshot
    (some data may differ for you):'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用凭据登录经纪人网站并转到订单部分，您可以找到您的订单详细信息，如下面的屏幕截图所示（您的一些数据可能会有所不同）：
- en: '![](img/ccc0bfcd-2f5b-4c4f-a1f3-69bbe005c826.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ccc0bfcd-2f5b-4c4f-a1f3-69bbe005c826.png)'
- en: 'Fetch the LTP. Place a `SELL`, `BRACKET`, `INTRADAY`, `LIMIT` order and display
    the order ID:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取 LTP。下一个`SELL`，`BRACKET`，`INTRADAY`，`LIMIT` 订单并显示订单 ID：
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We get the following output (your output may differ):'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出（您的输出可能会有所不同）：
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Fetch and display the order status:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取并显示订单状态：
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We get the following output:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE15]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If you log in to the broker site with your credentials and go to the orders
    section, you can find your order details as shown in the following screenshot
    (some data may differ for you):'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用凭据登录经纪人网站并转到订单部分，您可以找到您的订单详细信息，如下面的屏幕截图所示（您的一些数据可能会有所不同）：
- en: '![](img/1a348aea-c6b6-4d54-85db-80ff5943a842.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1a348aea-c6b6-4d54-85db-80ff5943a842.png)'
- en: 'Fetch and display the order status again after some time:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 过一段时间后再次获取并显示订单状态：
- en: '[PRE16]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We get the following output:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE17]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If you log in to the broker site with your credentials and go to the orders
    section, you can find your order details as shown in the following screenshot
    (some data may differ for you):'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用凭据登录经纪人网站并转到订单部分，您可以找到您的订单详细信息，如下面的屏幕截图所示（您的一些数据可能会有所不同）：
- en: '![](img/de29d94f-3ea2-4ffd-bed1-f045c1e0acc0.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/de29d94f-3ea2-4ffd-bed1-f045c1e0acc0.png)'
- en: How it works…
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: In *step 1*, you use the `get_instrument()` method of the `BrokerConnectionZerodha` class
    to fetch an instrument and assign it to a new attribute, `instrument`. This object
    is an instance of the `Instrument` class. The two parameters needed to call `get_instrument` are
    the exchange (`'NSE'`) and the trading-symbol (`'SBI'`).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 1* 中，您使用 `BrokerConnectionZerodha` 类的 `get_instrument()` 方法获取一个工具并将其赋值给一个新属性
    `instrument`。这个对象是 `Instrument` 类的一个实例。调用 `get_instrument` 需要的两个参数是交易所（`'NSE'`）和交易符号（`'SBI'`）。
- en: 'In *step 2*, you fetch the LTP of the instrument using the `get_ltp()` method
    of the `BrokerConnectionZerodha` class and assign it to a new attribute, `ltp`.
    The `instrument` object is passed as the parameter here. Next, you use the `place_order()` method
    of the `broker_connection` object to place a `BUY`, `BRACKET`, `INTRADAY`, `LIMIT`
    order on the exchange. The `place_order()` method is a wrapper on the broker-specific
    place order API. It takes the following attributes:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 2* 中，您使用 `BrokerConnectionZerodha` 类的 `get_ltp()` 方法获取工具的 LTP，并将其赋值给新属性
    `ltp`。这里将 `instrument` 对象作为参数传递。接下来，您使用 `broker_connection` 对象的 `place_order()`
    方法在交易所上下一个 `BUY`，`BRACKET`，`INTRADAY`，`LIMIT` 订单。 `place_order()` 方法是经纪人特定的下单
    API 的包装器。它接受以下属性：
- en: '`instrument`: This is the financial instrument for which the order must be
    placed and should be an instance of the `Instrument` class. We pass `instrument` here.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instrument`：这是必须下订单的金融工具，应该是 `Instrument` 类的实例。我们在这里传递 `instrument`。'
- en: '`order_transaction_type`: This is the order transaction type and should be
    an enum of the type, `BrokerOrderTransactionTypeConstants`. We pass `BrokerOrderTransactionTypeConstants.BUY` here.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order_transaction_type`：这是订单交易类型，应该是 `BrokerOrderTransactionTypeConstants`
    类型的枚举。我们在这里传递 `BrokerOrderTransactionTypeConstants.BUY`。'
- en: '`order_type`: This is the order type and should be an enum of the type, `BrokerOrderTypeConstants`.
    We pass `BrokerOrderTypeConstants.BRACKET` here.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order_type`：这是订单类型，应该是 `BrokerOrderTypeConstants` 类型的枚举。我们在这里传递 `BrokerOrderTypeConstants.BRACKET`。'
- en: '`order_code`: This is the order code and should be an enum of the type, `BrokerOrderCodeConstants`.
    We pass `BrokerOrderCodeConstants.INTRADAY` here.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order_code`: 这是订单代码，应为`BrokerOrderCodeConstants`类型的枚举。我们在这里传递`BrokerOrderCodeConstants.INTRADAY`。'
- en: '`order_variety`: This is the order variety and should be an enum of the type,
    `BrokerOrderVarietyConstants`. We pass `BrokerOrderVarietyConstants.LIMIT` here.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order_variety`: 这是订单类型，应为`BrokerOrderVarietyConstants`类型的枚举。我们在这里传递`BrokerOrderVarietyConstants.LIMIT`。'
- en: '`quantity`: This is the number of shares to be traded for the given instrument
    and should be a positive integer. We pass `1` here.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quantity`: 这是要交易的股票数量，应为正整数。我们传递`1`。'
- en: '`price`: This is the limit price at which the order should be placed. We pass
    `ltp-1` here, which means `1` unit price below `ltp`.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`price`: 这是应该下单的限价。我们在这里传递`ltp-1`，意味着低于`ltp`的`1`单位价格。'
- en: '`stoploss`: This is the price difference from the initial order price, at which
    the stoploss order should be placed. It should be a positive `int` or `float`
    value. We pass `2` here.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stoploss`: 这是与初始订单价格的价格差，应该放置止损订单的价格。它应该是正整数或浮点数值。我们在这里传递`2`。'
- en: '`target`: This is the price difference from the initial order price, at which
    the target order should be placed. It should be a positive `int` or `float` value.
    We pass `2` here.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target`: 这是与初始订单价格的价格差，应该放置目标订单的价格。它应该是正整数或浮点数值。我们在这里传递`2`。'
- en: (The attributes passed to the `place_order()` method are broker-agnostic constants,
    imported earlier from the `pyalgotrading.constants` module.)
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: （传递给`place_order()`方法的属性是与经纪人无关的常量，之前从`pyalgotrading.constants`模块导入的。）
- en: On placing the order in *step 2*, you get an order ID from the broker, which
    you assign to a new attribute, `order1_id`. The `order1_id` object is a string.
    If the order placement is not successful for some reason, you may not get an order
    ID. Observe that the price parameter is passed a value of `ltp-1`. This means
    the order is placed below the market price, which is a necessary condition for
    placing buy limit orders. The `stoploss` parameter is specified as `2`. This means
    the stoploss order would be placed at the price, which is two price units lower
    than the execution price of the initial order. Similarly, the `target` parameter
    is specified as `2`. This means the target order would be placed at the price
    that is two price units higher than the execution price of the initial order.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第 2 步*中下单后，您会从经纪人那里获得一个订单 ID，您将其分配给一个新属性`order1_id`。`order1_id`对象是一个字符串。如果由于某种原因订单未能成功下达，则您可能不会获得订单
    ID。请注意，价格参数传递了一个值为`ltp-1`。这意味着订单是在市场价格下方下达的，这是下达买入限价订单的必要条件。`stoploss`参数指定为`2`。这意味着止损订单将以比初始订单的执行价格低两个价格单位的价格下达。同样，`target`参数指定为`2`。这意味着目标订单将以比初始订单的执行价格高两个价格单位的价格下达。
- en: In *step 3*, you fetch the status of the placed order using the `get_order_status()` method
    of the `broker_connection` object. You pass `order1_id` as a parameter to the
    `get_order_status()` method. You get the order status as `'OPEN'`, a string. You
    can use `order1_id` to fetch the status of the placed order at any later point
    of time as well.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第 3 步*中，您使用`broker_connection`对象的`get_order_status()`方法获取下单状态。您将`order1_id`作为`get_order_status()`方法的参数传递。您得到的订单状态为`'OPEN'`，是一个字符串。您还可以在以后的任何时间使用`order1_id`来获取已下单的状态。
- en: In *step 4*, you fetch the order status again, and if the order is completed,
    you get the order status as `'COMPLETE'`. Immediately after this, the target and
    stoploss orders are placed, at the prices mentioned earlier. The target order
    executes as a regular limit order. The stoploss order executes as a regular stoploss-limit
    order. When one of them gets executed and reaches the `'COMPLETE'` state, the
    other order is automatically canceled by the broker, so it moves to the `'CANCELLED'` state.
    Recall, both target and stoploss orders are on opposite sides of the initial order,
    so both target and stoploss orders cannot execute at the same time.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第 4 步*中，您再次获取订单状态，如果订单已完成，则将订单状态作为`'COMPLETE'`。此后立即放置目标和止损订单，价格如前所述。目标订单执行为常规限价订单。止损订单执行为常规止损限价订单。当它们中的一个被执行并达到`'COMPLETE'`状态时，经纪人会自动取消另一个订单，因此它进入`'CANCELLED'`状态。请注意，目标和止损订单在初始订单的相反方向上，因此目标和止损订单不能同时执行。
- en: You can also verify the successful placement of your order by logging in to
    the broking website and checking the orders section there. You should see data
    similar to the screenshot shown in the outputs of *step 3* and *step 4*.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过登录经纪网站并检查订单部分来验证订单的成功下达。您应该会看到与 *步骤 3* 和 *步骤 4* 的输出中显示的屏幕截图类似的数据。
- en: In *step 3*, if you see the status as `'COMPLETE'` instead of `'OPEN'`; this
    could be due to high volatility. If you want the order to stay in the `'OPEN'` state
    for a while, try placing the order further away from the market price.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 3* 中，如果您看到状态为 `'COMPLETE'` 而不是 `'OPEN'`；这可能是由于市场波动较大。如果您希望订单保持在 `'OPEN'`
    状态一段时间，请尝试将订单放置在市场价格之外。
- en: 'The following are references for more details on the execution of the initial
    order, target order, and stoploss order:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是有关执行初始订单、目标订单和止损订单的更多详细信息的参考资料：
- en: '**Initial order**: Refer to the *Placing a regular limit order* recipe in the
    previous chapter.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**初始订单**：参考上一章节中的 *下达常规限价订单* 部分。'
- en: '**Target order**: Refer to the *Placing a regular limit order* recipe in the
    previous chapter.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标订单**：参考上一章节中的 *下达常规限价订单* 部分。'
- en: '**Stoploss order**: Refer to the *Placing a regular stoploss-limit order* recipe
    in the previous chapter.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**止损订单**：参考上一章节中的 *下达常规止损限价订单* 部分。'
- en: 'The other steps in this recipe follow the same pattern of placing an order
    and getting its status for different combinations of attributes:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方中的其他步骤遵循相同的模式，即放置订单并获取其不同属性组合的状态：
- en: '*Steps 5*, *6,* and *7*: The `SELL`, `BRACKET`, `INTRADAY`, `LIMIT` order'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*步骤 5*、*6* 和 *7*：`SELL`、`BRACKET`、`INTRADAY`、`LIMIT` 订单'
- en: There's more…
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '还有更多… '
- en: You can exit a bracket order by exiting one of its child orders. The child order
    that you exit is executed at market price and moves to the `COMPLETE` state. The
    other child moves to the `CANCELLED` state.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过退出其中一个子订单来退出框架订单。您退出的子订单将以市场价格执行并转移到 `COMPLETE` 状态。另一个子订单将转移到 `CANCELLED`
    状态。
- en: For example, let's consider the case if you exit the stoploss order. In this
    case, the target order will be canceled and it will transition to the `CANCELLED` state.
    The stoploss order will be executed at market price and it will transition to
    the `COMPLETE` state. If you log in to the broker site with your credentials and
    go to the orders section, you can find the child order details as shown in the
    following screenshot. Some data may differ for you.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设您退出了止损订单。在这种情况下，目标订单将被取消，并且将转移到 `CANCELLED` 状态。止损订单将以市场价格执行，并且将转移到 `COMPLETE`
    状态。如果您使用您的凭据登录经纪站点并转到订单部分，则可以找到子订单详细信息，如以下屏幕截图所示。您的一些数据可能会有所不同。
- en: 'The following is the target order, for the initial order placed in *step 2*,
    before exiting the bracket order:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是退出框架订单前放置在 *步骤 2* 中的初始订单的目标订单：
- en: '![](img/80d134bb-af03-4418-9102-de1e681df0f5.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/80d134bb-af03-4418-9102-de1e681df0f5.png)'
- en: 'The following is the target order after exiting the bracket order:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是退出框架订单后的目标订单：
- en: '![](img/7df78a06-1f9d-4ade-bf0f-69df9df5a4e3.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7df78a06-1f9d-4ade-bf0f-69df9df5a4e3.png)'
- en: 'This screenshot shows the stoploss order, for the initial order placed in *step
    2*, before exiting:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 此屏幕截图显示了在退出之前放置在 *步骤 2* 中的初始订单的止损订单：
- en: '![](img/cab945d8-a451-49e0-bbbe-8bdbb36954d9.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cab945d8-a451-49e0-bbbe-8bdbb36954d9.png)'
- en: 'The following screenshot shows the stoploss order after exiting:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 退出后的止损订单如下图所示：
- en: '![](img/3fd9a29c-e2a9-4e0a-8f7c-48e69017c8a7.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3fd9a29c-e2a9-4e0a-8f7c-48e69017c8a7.png)'
- en: Placing a bracket stoploss-limit order
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下达框架止损限价订单
- en: Bracket orders are complex orders that are meant to help to make a profit when
    trade becomes favorable, or limit the loss when it becomes unfavorable, with predefined
    values. A bracket order is essentially a combination of three regular orders together
    —an initial order, a target order, and a stoploss order, which act together to
    help to achieve the specified profit or limit the loss. Along with the regular
    order parameters, a bracket order takes additional parameters—`target`, `stoploss`,
    and `trailing stoploss` (optional).
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 框架订单是复杂的订单，旨在在交易有利时帮助赚取利润，或在交易不利时限制损失，具有预定义的值。框架订单本质上是三个常规订单的组合 ——初始订单、目标订单和止损订单，它们共同起作用，帮助实现指定的利润或限制损失。除了常规订单参数外，框架订单还需要额外的参数
    ——`target`、`stoploss` 和 `trailing stoploss`（可选）。
- en: Please refer to the introduction of the *Placing a bracket limit order* recipe
    for an in-depth understanding of the working of bracket orders. You can use a
    bracket stoploss-limit order if you want to place a buy bracket order above the
    market price or a sell bracket order below the market price.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考*下达一个bracket限价订单*配方的介绍，深入理解bracket订单的工作原理。如果您想要在市价上方下达买入bracket订单或在市价下方下达卖出bracket订单，可以使用bracket
    stoploss-limit订单。
- en: 'This recipe demonstrates the placing of the following bracket stoploss-limit
    orders and querying their statuses:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 该配方演示了下述bracket stoploss-limit订单的下达和查询其状态：
- en: The `BUY`, `BRACKET`, `INTRADAY`, `STOPLOSS_LIMIT` order (without trailing stoploss)
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BUY`、`BRACKET`、`INTRADAY`、`STOPLOSS_LIMIT`订单（不带跟踪止损）'
- en: The `SELL`, `BRACKET`, `INTRADAY`, `STOPLOSS_LIMIT` order (without trailing
    stoploss)
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SELL`、`BRACKET`、`INTRADAY`、`STOPLOSS_LIMIT`订单（不带跟踪止损）'
- en: 'The following are references to the state machine diagrams for a bracket stoploss-limit
    order:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是用于bracket stoploss-limit订单的状态机图参考：
- en: '**Initial order**: Refer to the state machine diagram from the *Placing a regular
    stoploss-limit order* recipe in the previous chapter.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**初始订单**：请参考上一章节中*下达一个常规止损限价订单*配方的状态机图。'
- en: '**Target order**: Refer to the state machine diagram from the *Placing a regular
    limit order* recipe in the previous chapter.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标订单**：请参考上一章节中*下达常规限价订单*配方的状态机图。'
- en: '**Stoploss order**: Refer to the state machine diagram from the *Placing a
    regular stoploss-limit order* recipe in the previous chapter.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**止损订单**：请参考上一章节中*下达一个常规止损限价订单*配方的状态机图。'
- en: Getting ready
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Make sure the `broker_connection` object and constants from the `pyalgotrading` package
    are available in your Python namespace. Refer to the *Technical requirements* section
    of this chapter to set up this object.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 确保`pyalgotrading`包中的`broker_connection`对象和常量在你的Python命名空间中可用。请参考本章的*技术要求*部分设置该对象。
- en: How to do it…
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'We execute the following steps for this recipe:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对本配方执行以下步骤：
- en: 'Fetch a financial instrument and assign it to `instrument`:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取一个金融工具并将其分配给`instrument`：
- en: '[PRE18]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Fetch the LTP. Place a `BUY`, `BRACKET`, `INTRADAY`, `STOPLOSS_LIMIT` order
    and display the order ID:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取最新成交价（LTP）。下达一个`BUY`、`BRACKET`、`INTRADAY`、`STOPLOSS_LIMIT`订单并显示订单ID：
- en: '[PRE19]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We get the following output (your output may differ):'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出（你的输出可能会有所不同）：
- en: '[PRE20]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Fetch and display the order status:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取并显示订单状态：
- en: '[PRE21]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We get the following output:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE22]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Fetch and display the order status again after some time:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 过一段时间后再次获取并显示订单状态：
- en: '[PRE23]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We get the following output:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE24]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Fetch the LTP. Place a `SELL`, `BRACKET`, `INTRADAY`, `STOPLOSS_LIMIT` order
    and display the order ID:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取最新成交价（LTP）。下达一个`SELL`、`BRACKET`、`INTRADAY`、`STOPLOSS_LIMIT`订单并显示订单ID：
- en: '[PRE25]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We get the following output (your output may differ):'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出（你的输出可能会有所不同）：
- en: '[PRE26]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Fetch and display the order status:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取并显示订单状态：
- en: '[PRE27]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We get the following output:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE28]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Fetch and display the order status again after some time:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 过一段时间后再次获取并显示订单状态：
- en: '[PRE29]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We get the following output:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE30]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: How it works…
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: In *step 1*, you use the `get_instrument()` method of the `BrokerConnectionZerodha` class
    to fetch an instrument and assign it to a new attribute, `instrument`. This object
    is an instance of the `Instrument` class. The two parameters needed to call `get_instrument` are
    the exchange (`'NSE'`) and the trading-symbol (`'INDUSINDBK'`).
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤1*中，您使用`BrokerConnectionZerodha`类的`get_instrument()`方法获取一个金融工具并将其分配给一个新的属性`instrument`。该对象是`Instrument`类的一个实例。调用`get_instrument`所需的两个参数是交易所（`'NSE'`）和交易符号（`'INDUSINDBK'`）。
- en: 'In *step 2*, you fetch the LTP of the instrument using the `get_ltp()` method
    of the `BrokerConnectionZerodha` class and assign it to a new attribute, `ltp`.
    The `instrument` object is passed as the parameter here. Next, you use the `place_order()` method
    of the `broker_connection` object to place a `BUY`, `BRACKET`, `INTRADAY`, `STOPLOSS_LIMIT`
    order on the exchange. The `place_order()` method is a wrapper on the broker-specific
    place order API. It takes the following attributes:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤2*中，您使用`BrokerConnectionZerodha`类的`get_ltp()`方法获取该工具的最新成交价，并将其分配给一个新的属性`ltp`。这里的参数是`instrument`对象。接下来，您使用`broker_connection`对象的`place_order()`方法在交易所下达一个`BUY`、`BRACKET`、`INTRADAY`、`STOPLOSS_LIMIT`订单。`place_order()`方法是一个特定于经纪商的下单API的封装。它接受以下属性：
- en: '`instrument`: This is the financial instrument for which the order must be
    placed and should be an instance of the `Instrument` class. We pass `instrument` here.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instrument`：这是必须下订单的金融工具，应该是`Instrument`类的一个实例。我们在这里传递`instrument`。'
- en: '`order_transaction_type`: This is the order transaction type and should be
    an enum of the type, `BrokerOrderTransactionTypeConstants`. We pass `BrokerOrderTransactionTypeConstants.BUY` here.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order_transaction_type`：这是订单交易类型，应该是类型为`BrokerOrderTransactionTypeConstants`的枚举。我们在这里传递
    `BrokerOrderTransactionTypeConstants.BUY`。'
- en: '`order_type`: This is the order type and should be an enum of the type, `BrokerOrderTypeConstants`.
    We pass `BrokerOrderTypeConstants.BRACKET` here.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order_type`：这是订单类型，应该是类型为`BrokerOrderTypeConstants`的枚举。我们在这里传递 `BrokerOrderTypeConstants.BRACKET`。'
- en: '`order_code`: This is the order code and should be an enum of the type, `BrokerOrderCodeConstants`.
    We pass `BrokerOrderCodeConstants.INTRADAY` here.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order_code`：这是订单代码，应该是类型为`BrokerOrderCodeConstants`的枚举。我们在这里传递 `BrokerOrderCodeConstants.INTRADAY`。'
- en: '`order_variety`: This is the order variety and should be an enum of the type,
    `BrokerOrderVarietyConstants`. We pass `BrokerOrderVarietyConstants.STOPLOSS_LIMIT`
    here.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order_variety`：这是订单种类，应该是类型为`BrokerOrderVarietyConstants`的枚举。我们在这里传递 `BrokerOrderVarietyConstants.STOPLOSS_LIMIT`。'
- en: '`quantity`: This is the number of shares to be traded for the given instrument
    and should be a positive integer. We pass `1` here.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quantity`：这是要交易的股票数量，应该是一个正整数。我们在这里传递 `1`。'
- en: '`price`: This is the limit price at which the order should be placed. We pass `ltp+1` here,
    which means `1` unit price above `ltp`.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`price`：这是订单应该下达的限价。我们在这里传递 `ltp+1`，这意味着高于`ltp` 1 个单位的价格。'
- en: '`trigger_price`: This is the trigger price at which the order should be placed.
    We pass `ltp+1` here, which means `1` unit price above `ltp`.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`trigger_price`：这是订单应该下达的触发价格。我们在这里传递 `ltp+1`，这意味着高于`ltp` 1 个单位的价格。'
- en: '`stoploss`: This is the price difference from the Initial Order price, at which
    the stoploss order should be placed. It should be a positive `int` or `float`
    value. We pass `2` here.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stoploss`：这是与初始订单价格的价格差，止损订单应该被下达的价格。它应该是一个正的`int`或`float`值。我们在这里传递`2`。'
- en: '`target`: This is the price difference from the Initial Order price, at which
    the target order should be placed. It should be a positive `int` or `float` value.
    We pass `2` here.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target`：这是与初始订单价格的价格差，目标订单应该被下达的价格。它应该是一个正的`int`或`float`值。我们在这里传递 `2`。'
- en: (The attributes passed to the `place_order()` method are broker-agnostic constants,
    imported earlier from the `pyalgotrading.constants` module.)
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: （传递给`place_order()`方法的属性是经纪人无关的常量，之前从`pyalgotrading.constants`模块导入。）
- en: On placing the order in *step 2*, you get an order ID from the broker, which
    you assign to a new attribute, `order1_id`. The `order1_id` object is a string.
    If the order placement is not successful for some reason, you may not get an order
    ID. Observe that the `price` and `trigger_price` parameters are passed a value
    of `ltp+1`. This means the order is placed above the market price, which is a
    necessary condition for placing buy stoploss-limit orders. The stoploss parameter
    is specified as `2`. This means the stoploss order would be placed at the price
    that is 2 price units lower than the execution price of the initial order. Similarly,
    the target parameter is specified as `2`. This means the target order would be
    placed at the price that is 2 price units higher than the execution price of the
    Initial Order.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 2*中下单后，您将从经纪人那里获得一个订单 ID，将其分配给一个新属性，`order1_id`。`order1_id`对象是一个字符串。如果由于某种原因订单未能成功下达，您可能无法获得订单
    ID。请注意，`price`和`trigger_price`参数被赋予了`ltp+1`的值。这意味着订单的价格高于市场价格，这是下达买入止损限价订单的必要条件。止损参数被指定为`2`。这意味着止损订单将以比初始订单执行价格低
    2 个价格单位的价格下达。同样，目标参数被指定为`2`。这意味着目标订单将以比初始订单执行价格高 2 个价格单位的价格下达。
- en: In *step 3*, you fetch the status of the placed order using the `get_order_status()` method
    of the `broker_connection` object. You pass `order1_id` as a parameter to the
    `get_order_status()` method. You get the order status as `'TRIGGER PENDING'`,
    a string. You can use `order1_id` to fetch the status of the placed order at any
    later point of time as well. In *step 4*, you fetch the order status again, and
    if the order is completed, you get the order status as `'COMPLETE'`. Immediately
    after this, the target and stoploss orders are placed, at the prices mentioned
    earlier. The target order executes as a regular limit order. The stoploss order
    executes as a regular stoploss-limit order. When one of them gets executed and
    reaches the `'COMPLETE'` state, the other order is automatically canceled by the
    broker, so it moves to the `'CANCELLED'` state. Recall, both target and stoploss
    orders are on opposite sides of the initial order, so both target and stoploss
    orders cannot execute at the same time.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第3步*中，您使用`broker_connection`对象的`get_order_status()`方法获取已下达订单的状态。您将`order1_id`作为`get_order_status()`方法的参数传递。您将订单状态获取为`'TRIGGER
    PENDING'`，一个字符串。您还可以在任何后续时间点使用`order1_id`获取已下达订单的状态。在*第4步*中，您再次获取订单状态，如果订单已完成，则将订单状态获取为`'COMPLETE'`。紧接着，按照之前提及的价格下达目标订单和止损订单。目标订单作为常规限价订单执行。止损订单作为常规止损限价订单执行。当其中一个执行并达到`'COMPLETE'`状态时，另一个订单会被经纪人自动取消，因此它转移到`'CANCELLED'`状态。请注意，目标订单和止损订单位于初始订单的相对方向，因此目标订单和止损订单不能同时执行。
- en: In *step 3*, if you see the status as `'COMPLETE'` instead of `'TRIGGER PENDING'`,
    this could be due to high volatility. If you want the order to stay in the `'OPEN'` state
    for a while, try placing the order further away from the market price.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第3步*中，如果您看到状态为`'COMPLETE'`而不是`'TRIGGER PENDING'`，这可能是由于高波动性引起的。如果您希望订单在一段时间内保持`'OPEN'`状态，请尝试将订单价格进一步设置远离市场价格。
- en: 'The following are references to more details on the execution of the initial
    order, target order, and stoploss order:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是关于初始订单、目标订单和止损订单执行更多细节的参考：
- en: '**Initial order**: Refer to the *Placing a regular stoploss-limit order* recipe
    in the previous chapter.'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**初始订单**：参考上一章节中的*下达常规止损限价订单*一节。'
- en: '**Target order**: Refer to the *Placing a regular limit order* recipe in the
    previous chapter.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标订单**：参考上一章节中的*下达常规限价订单*一节。'
- en: '**Stoploss order**: Refer to the *Placing a regular stoploss-limit order* recipe
    in the previous chapter.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**止损订单**：参考上一章节中的*下达常规止损限价订单*一节。'
- en: You can verify the successful placement of your order by logging in to the broking
    website and checking the orders section there. You should see data similar to
    the screenshots shown in the *Placing bracket limit orders on the exchange* recipe.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过登录经纪网站并检查订单部分来验证您的订单成功下达。您应该看到类似于*在交易所上下达括号限价订单*一节中显示的屏幕截图的数据。
- en: 'The other steps in this recipe follow the same pattern of placing an order
    and getting its status for a different combination of attributes:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方中的其他步骤遵循相同的模式，用于不同属性组合的下单和获取其状态。
- en: '*Steps 5*, *6,* and *7*: The `SELL`, `BRACKET`, `INTRADAY`, `STOPLOSS_LIMIT`
    order'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*步骤5*、*6*和*7*：`SELL`、`BRACKET`、`INTRADAY`、`STOPLOSS_LIMIT`订单'
- en: Placing a bracket limit order with trailing stoploss
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下达带移动止损的括号限价订单
- en: Bracket orders are complex orders that are meant to help to make a profit when
    trade becomes favorable, or limit the loss when it becomes unfavorable, with predefined
    values. A bracket order is essentially a combination of three regular orders together—an
    initial order, a target order, and a stoploss order, which act together to help
    to achieve the specified profit or limit the loss. Along with the regular order
    parameters, a bracket order takes additional parameters—`target`, `stoploss`,
    and `trailing stoploss` (optional).
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 括号订单是复杂订单，旨在在交易有利时获利或在交易不利时限制损失，具有预定义值。括号订单基本上是三个常规订单的组合——初始订单、目标订单和止损订单，它们共同作用以帮助实现指定的利润或限制损失。除了常规订单参数外，括号订单还接受额外参数——`target`、`stoploss`和`trailing
    stoploss`（可选）。
- en: Please refer to the introduction of the *Placing a bracket limit order* recipe
    for an in-depth understanding of the working of bracket orders.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考*下达括号限价订单*一节的介绍，深入了解括号订单的工作原理。
- en: You can use a bracket limit order if you want to place a buy bracket order below
    the market price or a sell bracket order above the market price. The trailing
    stoploss feature improvises the positioning of the stoploss order by modifying
    its price in the direction of the initial order price by as many points as the
    value of `trailing stoploss`. This happens every time the initial order price
    moves in the direction of the target order price. This helps to further reduce
    the loss in case the price movement direction of the initial order changes.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在市价以下下达一个买入交易限价订单或者在市价以上下达一个卖出交易限价订单，你可以使用一个买入交易限价订单。跟踪止损功能通过将止损订单的价格修改为与初始订单价格朝着目标订单价格方向移动的点数相同的方式，改进了止损订单的定位。每当初始订单价格朝着目标订单价格方向移动时，都会发生这种情况。这有助于进一步减少初始订单价格移动方向发生变化时的损失。
- en: 'This recipe demonstrates the placing of the following bracket limit orders
    with a trailing stoploss and querying their statuses:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方演示了下面带有跟踪止损的两个交易限价订单的下单及查询其状态：
- en: The `BUY`, `BRACKET`, `INTRADAY`, `LIMIT` order with trailing stoploss
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有跟踪止损的`BUY`、`BRACKET`、`INTRADAY`、`LIMIT`订单
- en: The `SELL`, `BRACKET`, `INTRADAY`, `LIMIT` order with trailing stoploss
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有跟踪止损的`SELL`、`BRACKET`、`INTRADAY`、`LIMIT`订单
- en: 'The following are references to the state machine diagrams for a bracket limit
    order:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是关于买入交易限价订单的状态机图的参考：
- en: '**Initial order**: Refer to the state machine diagram from the *Placing a regular
    limit order* recipe in the previous chapter.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**初始订单**：参考上一章节中的*下达普通限价订单*配方中的状态机图。'
- en: '**Target order**: Refer to the state machine diagram from the *Placing a regular
    limit order* recipe in the previous chapter.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标订单**：参考上一章节中的*下达普通限价订单*配方中的状态机图。'
- en: '**Stoploss order**: Refer to the state machine diagram from the *Placing a
    regular stoploss-limit order* recipe in the previous chapter.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**止损订单**：参考上一章节中的*下达普通止损限价订单*配方中的状态机图。'
- en: Getting ready
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Make sure the `broker_connection` object and constants from the `pyalgotrading` package
    are available in your Python namespace. Refer to the *Technical requirements* section
    of this chapter to set up this object.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你的Python命名空间中有来自`pyalgotrading`包的`broker_connection`对象和常量。请参考本章节的*技术要求*部分来设置这个对象。
- en: How to do it…
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'We execute the following steps for this recipe:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们执行以下步骤：
- en: 'Fetch a financial instrument and assign it to `instrument`:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取一个金融工具并将其赋值给`instrument`：
- en: '[PRE31]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Fetch the LTP. Place a `BUY`, `BRACKET`, `INTRADAY`, `LIMIT` order and display
    the order ID:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取最新成交价。下达一个`BUY`、`BRACKET`、`INTRADAY`、`LIMIT`订单并显示订单ID：
- en: '[PRE32]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We get the following output (your output may differ):'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出（你的输出可能不同）：
- en: '[PRE33]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Fetch and display the order status:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取并显示订单状态：
- en: '[PRE34]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'We get the following output:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE35]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Fetch and display the order status again after some time:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 过一段时间后再次获取并显示订单状态：
- en: '[PRE36]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'We get the following output:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE37]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Fetch the LTP. Place a `SELL`, `BRACKET`, `INTRADAY`, `LIMIT` order and display
    the order ID:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取最新成交价。下达一个`SELL`、`BRACKET`、`INTRADAY`、`LIMIT`订单并显示订单ID：
- en: '[PRE38]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'We get the following output (your output may differ):'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出（你的输出可能不同）：
- en: '[PRE39]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Fetch and display the order status:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取并显示订单状态：
- en: '[PRE40]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'We get the following output:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE41]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Fetch and display the order status again after some time:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 过一段时间后再次获取并显示订单状态：
- en: '[PRE42]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'We get the following output:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE43]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: How it works...
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In *step 1*, you use the `get_instrument()` method of the `BrokerConnectionZerodha` class
    to fetch an instrument and assign it to a new attribute, `instrument`. This object
    is an instance of the `Instrument` class. The two parameters needed to call `get_instrument` are
    the exchange (`'NSE'`) and the trading-symbol (`'FEDERALBNK'`).
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第1步*中，你使用`BrokerConnectionZerodha`类的`get_instrument()`方法获取一个金融工具并将其赋值给一个新的属性`instrument`。这个对象是`Instrument`类的一个实例。调用`get_instrument`所需的两个参数是交易所（`'NSE'`）和交易符号（`'FEDERALBNK'`）。
- en: 'In *step 2*, you fetch the LTP of the instrument using the `get_ltp()` method
    of the `BrokerConnectionZerodha` class and assign it to a new attribute, `ltp`.
    The `instrument` object is passed as the parameter here. Next, you use the `place_order()` method
    of the `broker_connection` object to place a `BUY`, `BRACKET`, `INTRADAY`, `LIMIT`
    order on the exchange. The `place_order()` method is a wrapper on the broker-specific
    place order API. It takes the following attributes:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 2* 中，您可以使用 `BrokerConnectionZerodha` 类的 `get_ltp()` 方法获取金融工具的 LTP，并将其分配给一个新的属性
    `ltp`。这里将 `instrument` 对象作为参数传递。接下来，您可以使用 `broker_connection` 对象的 `place_order()`
    方法在交易所上放置 `BUY`、`BRACKET`、`INTRADAY`、`LIMIT` 订单。`place_order()` 方法是对特定于经纪商的放置订单
    API 的封装。它接受以下属性：
- en: '`instrument`: This is the financial instrument for which the order must be
    placed and should be an instance of the `Instrument` class. We pass `instrument` here.'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instrument`: 这是必须下订单的金融工具，应该是 `Instrument` 类的实例。我们在这里传递 `instrument`。'
- en: '`order_transaction_type`: This is the order transaction type and should be
    an enum of the type, `BrokerOrderTransactionTypeConstants`. We pass `BrokerOrderTransactionTypeConstants.BUY` here.'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order_transaction_type`: 这是订单交易类型，应该是 `BrokerOrderTransactionTypeConstants`
    类型的枚举。我们在这里传递 `BrokerOrderTransactionTypeConstants.BUY`。'
- en: '`order_type`: This is the order type and should be an enum of the type, `BrokerOrderTypeConstants`.
    We pass `BrokerOrderTypeConstants.BRACKET` here.'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order_type`: 这是订单类型，应该是 `BrokerOrderTypeConstants` 类型的枚举。我们在这里传递 `BrokerOrderTypeConstants.BRACKET`。'
- en: '`order_code`: This is the order code and should be an enum of the type, `BrokerOrderCodeConstants`.
    We pass `BrokerOrderCodeConstants.INTRADAY` here.'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order_code`: 这是订单代码，应该是 `BrokerOrderCodeConstants` 类型的枚举。我们在这里传递 `BrokerOrderCodeConstants.INTRADAY`。'
- en: '`order_variety`: This is the order variety and should be an enum of the type,
    `BrokerOrderVarietyConstants`. We pass `BrokerOrderVarietyConstants.LIMIT` here.'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order_variety`: 这是订单种类，应该是 `BrokerOrderVarietyConstants` 类型的枚举。我们在这里传递 `BrokerOrderVarietyConstants.LIMIT`。'
- en: '`quantity`: This is the number of shares to be traded for the given instrument
    and should be a positive integer. We pass `1` here.'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quantity`: 这是要交易给定金融工具的股票数量，应该是正整数。我们在这里传递 `1`。'
- en: '`price`: This is the limit price at which the order should be placed. We pass `ltp-1` here,
    which means `1` unit price below `ltp`.'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`price`: 这是应该下订单的限价。我们在这里传递 `ltp-1`，意思是低于 `ltp` 的 `1` 单位价格。'
- en: '`stoploss`: This is the price difference from the Initial Order price, at which
    the Stoploss Order should be placed. It should be a positive `int` or `float`
    value. We pass `2` here.'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stoploss`: 这是距离初始订单价格的价格差异，应该放置止损订单的位置。它应该是一个正整数或浮点值。我们在这里传递 `2`。'
- en: '`target`: This is the price difference from the Initial Order price, at which
    the Target Order should be placed. It should be a positive `int` or `float` value.
    We pass `2` here.'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target`: 这是距离初始订单价格的价格差异，应该放置目标订单的位置。它应该是一个正整数或浮点值。我们在这里传递 `2`。'
- en: '`trailing_stoploss`: This is the price difference by which the stoploss order
    should be modified every time the market price moves in the direction of the target
    order. We pass `1` here.'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`trailing_stoploss`: 这是每当市场价格朝向目标订单移动时应修改的止损订单的价格差异。我们在这里传递 `1`。'
- en: (The attributes passed to the `place_order()` method are broker-agnostic constants,
    imported earlier from the `pyalgotrading.constants` module.)
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: （传递给 `place_order()` 方法的属性是从 `pyalgotrading.constants` 模块中导入的与经纪商无关的常量。）
- en: On placing the order in *step 2*, you get an order ID from the broker, which
    you assign to a new attribute, `order1_id`. The `order1_id` object is a string.
    If the order placement is not successful for some reason, you may not get an order
    ID. Observe that the `price` parameter is passed a value of `ltp-1`. This means
    the order is placed below the market price, which is a necessary condition for
    placing buy limit orders. The `stoploss` parameter is specified as `2`. This means
    the stoploss order would be placed at the price that is two price units lower
    than the execution price of the initial order. Similarly, the target parameter
    is specified as `2`. This means the target order would be placed at the price
    that is two price units higher than the execution price of the initial order.
    Finally, the `trailing_stoploss` parameter is specified as `1`. This means, after
    the stoploss order is placed, the stoploss order would be modified and placed
    at a price higher than the previous price by one unit, every time the market price
    increases in multiples of one unit from the price of the initial order.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 2* 中放置订单时，你从经纪人那里获得一个订单 ID，并将其分配给一个新的属性 `order1_id`。`order1_id` 对象是一个字符串。如果由于某种原因订单未能成功下达，你可能不会得到订单
    ID。请注意，`price` 参数被赋予了一个值 `ltp-1`。这意味着订单被放置在市场价格之下，这是放置购买限价订单的必要条件。`stoploss` 参数被指定为
    `2`。这意味着止损订单将被放置在比初始订单执行价格低两个价格单位的价格上。类似地，目标参数被指定为 `2`。这意味着目标订单将被放置在比初始订单执行价格高两个价格单位的价格上。最后，`trailing_stoploss`
    参数被指定为 `1`。这意味着，在放置止损订单之后，每当市场价格以一个单位的倍数增加时，止损订单都将被修改并放置在比前一价格高一个单位的价格上。
- en: So, for example, let's say the market price for the instrument was 100 at the
    time of placing this order, and so the target and stoploss orders would be placed
    at 102 and 98, respectively. Suppose the market price reaches 101, which is one
    unit higher than 100, then the stoploss order would be modified and placed at
    99, which is again one unit higher than its previous price. By doing so, you have
    reduced your maximum loss from 2 to 1.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设工具的市场价格在下单时为 100，那么目标和止损订单将分别放置在 102 和 98。假设市场价格达到 101，即比 100 高一个单位，则止损订单将被修改并放置在
    99，即比其前一个价格高一个单位。通过这样做，你已将最大亏损从 2 减少到 1。
- en: In *step 3*, you fetch the status of the placed order using the `get_order_status()` method
    of the `broker_connection` object. You pass `order1_id` as a parameter to the
    `get_order_status()` method. You get the order status as `'OPEN'`, a string. You
    can use `order1_id` to fetch the status of the placed order at any later point
    in time as well. In *step 4*, you fetch the order status again, and if the order
    is completed, you get the order status as `'COMPLETE'`. Immediately after this,
    the target and stoploss orders are placed, at the prices mentioned earlier. The
    target order executes as a regular limit order. The stoploss order executes as
    a regular stoploss-limit order. When one of them gets executed and reaches the `COMPLETE` state,
    the other order is automatically canceled by the broker, so it moves to the `CANCELLED` state.
    Recall, both target and stoploss orders are on opposite sides of the initial order,
    so both target and stoploss orders cannot execute at the same time. The stoploss
    order may be modified by one price unit, as mentioned earlier.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 3* 中，你使用 `broker_connection` 对象的 `get_order_status()` 方法获取已下单订单的状态。你将 `order1_id`
    作为参数传递给 `get_order_status()` 方法。你将订单状态作为 `'OPEN'` 的字符串获取到。你也可以在以后的任何时间点使用 `order1_id`
    获取已下单订单的状态。在*步骤 4* 中，你再次获取订单状态，如果订单已完成，则订单状态为 `'COMPLETE'`。在此之后，立即放置目标和止损订单，价格与之前提到的相同。目标订单执行为常规限价订单。止损订单执行为常规止损限价订单。当其中一个订单被执行并达到
    `COMPLETE` 状态时，另一个订单会被经纪人自动取消，因此它转移到 `CANCELLED` 状态。回想一下，目标订单和止损订单位于初始订单的相反方向，因此目标订单和止损订单不能同时执行。如前所述，止损订单可能会被修改一个价格单位。
- en: In *step 3*, if you see the status as ``COMPLETE`` instead of ``OPEN``, this
    could be due to high volatility. If you want the order to stay in the ``OPEN`` state
    for a while, try placing the order further away from the market price.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 3* 中，如果你看到状态为 `COMPLETE` 而不是 `OPEN`，这可能是由于高波动性造成的。如果你希望订单在一段时间内保持 `OPEN`
    状态，请尝试将订单放置得离市场价格更远。
- en: 'The following are references for more details on the execution of the initial
    order, target order, and stoploss order:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是关于初始订单、目标订单和止损订单执行的更多详细信息的参考资料：
- en: '**Initial order**: Refer to the *Placing a regular limit order* recipe in the
    previous chapter.'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**初始订单**：参考前一章节中的*放置常规限价单*配方。'
- en: '**Target order**: Refer to the *Placing a regular limit order* recipe in the
    previous chapter.'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标订单**：参考前一章节中的*放置常规限价单*配方的状态机图。'
- en: '**Stoploss order**: Refer to the *Placing a regular stoploss-limit order* recipe
    in the previous chapter.'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**止损订单**：参考前一章节中的*放置常规止损限价单*配方。'
- en: You can verify the successful placement of your order by logging in to the broking
    website and checking the orders section there. You should see data similar to
    the screenshots shown in the *Placing bracket limit orders on the exchange* recipe.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过登录经纪网站并在那里检查订单部分来验证订单成功的放置。您应该看到类似于*在交易所上放置括号限价订单*配方中显示的屏幕截图的数据。
- en: 'The other steps in this recipe follow the same pattern of placing an order
    and getting its status for a different combination of attributes:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方中的其他步骤遵循相同的模式，即放置订单并获取其状态，用于不同属性组合的情况：
- en: '*Steps 5*, *6*, and *7*: The `SELL`, `BRACKET`, `INTRADAY`, `LIMIT` order with
    trailing stoploss'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*步骤5*、*6*和*7*：带有跟踪止损的`卖出`、`括号`、`即日`、`限价`订单'
- en: Placing a bracket stoploss-limit order with trailing stoploss
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 放置带有跟踪止损的括号止损限价单
- en: Bracket orders are complex orders that are meant to help to make a profit when
    trade becomes favorable, or limit the loss when it becomes unfavorable, with predefined
    values. A bracket order is essentially a combination of three regular orders together—an
    initial order, a target order, and a stoploss order, which act together to help
    to achieve the specified profit or limit the loss. Along with the regular order
    parameters, a bracket order takes additional parameters—`target`, `stoploss`, and `trailing
    stoploss` (optional).
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 括号订单是复杂订单，旨在在交易有利时帮助赚取利润，或在不利时限制损失，具有预定义值。括号订单本质上是三个常规订单的组合——一个初始订单、一个目标订单和一个止损订单，它们共同作用以帮助实现指定的利润或限制损失。除了常规订单参数外，括号订单还接受额外的参数——`目标`、`止损`和`跟踪止损`（可选）。
- en: Please refer to the introduction of the *Placing a bracket limit order* recipe
    for an in-depth understanding of the working of bracket orders.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考*放置括号限价单*配方的介绍，以深入了解括号订单的工作原理。
- en: You can use a bracket stoploss-limit order if you want to place a buy bracket
    order above the market price or a sell bracket order below the market price. The
    trailing stoploss improvises the positioning of the stoploss order by modifying
    its price in the direction of the initial order price by as many points as the
    value of `trailing stoploss`, every time the initial order price moves in the
    direction of the target order price. This helps to further reduce the loss, in
    case the direction of the price movement of the initial order changes.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在市价上方放置买入括号订单或在市价下方放置卖出括号订单，您可以使用括号止损限价订单。跟踪止损通过将其价格沿着初始订单价格的方向修改多少点，每当初始订单价格朝着目标订单价格的方向移动时，来改进止损订单的定位。这有助于在初始订单价格方向的价格变动改变时进一步减少损失。
- en: 'This recipe demonstrates the placing of the following bracket stoploss-limit
    orders with trailing stoploss and querying their statuses:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方演示了以下带有跟踪止损的括号止损限价单的放置以及查询其状态：
- en: The `BUY`, `BRACKET`, `INTRADAY`, `STOPLOSS_LIMIT` order with trailing stoploss
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有跟踪止损的`买入`、`括号`、`即日`、`止损限价`订单
- en: The `SELL`, `BRACKET`, `INTRADAY`, `STOPLOSS_LIMIT` order with trailing stoploss
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有跟踪止损的`卖出`、`括号`、`即日`、`止损限价`订单
- en: 'The following are references to the state machine diagrams for a bracket stoploss-limit
    order:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是关于带有跟踪止损的括号止损限价单的状态机图的参考：
- en: '**Initial order**: Refer to the state machine diagram from the *Placing a regular
    stoploss-limit order* recipe in the previous chapter.'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**初始订单**：参考前一章节中的*放置常规止损限价单*配方的状态机图。'
- en: '**Target order**: Refer to the state machine diagram from the *Placing a regular
    limit order* recipe in the previous chapter.'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标订单**：参考前一章节中的*放置常规限价单*配方的状态机图。'
- en: '**Stoploss order**: Refer to the state machine diagram from the *Placing a
    regular stoploss-limit order* recipe in the previous chapter.'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**止损订单**：参考前一章节中的*放置常规止损限价单*配方的状态机图。'
- en: Getting ready
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure the `broker_connection` object and constants from the `pyalgotrading`
    package are available in your Python namespace. Refer to the *Technical requirements* section
    of this chapter to set up this object.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 确保 `pyalgotrading` 包中的 `broker_connection` 对象和常量在您的 Python 命名空间中可用。请参考本章的 *技术要求*
    部分设置此对象。
- en: How to do it…
  id: totrans-271
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'We execute the following steps for this recipe:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为此配方执行以下步骤：
- en: 'Fetch a financial instrument and assign it to `instrument`:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取一个金融工具并将其分配给 `instrument`：
- en: '[PRE44]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Fetch the LTP. Place a `BUY`, `BRACKET`, `INTRADAY`, `STOPLOSS_LIMIT` order
    and display the order ID:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取 LTP。下一个 `BUY`，`BRACKET`，`INTRADAY`，`STOPLOSS_LIMIT` 订单并显示订单 ID：
- en: '[PRE45]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'We get the following output (your output may differ):'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出（您的输出可能会有所不同）：
- en: '[PRE46]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Fetch and display the order status:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取并显示订单状态：
- en: '[PRE47]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'We get the following output:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE48]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Fetch and display the order status again after some time:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再过一段时间后，重新获取并显示订单状态：
- en: '[PRE49]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'We get the following output:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE50]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Fetch the LTP. Place a `SELL`, `BRACKET`, `INTRADAY`, `STOPLOSS_LIMIT` order
    and display the order ID:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取 LTP。下一个 `SELL`，`BRACKET`，`INTRADAY`，`STOPLOSS_LIMIT` 订单并显示订单 ID：
- en: '[PRE51]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'We get the following output (your output may differ):'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出（您的输出可能会有所不同）：
- en: '[PRE52]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Fetch and display the order status:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取并显示订单状态：
- en: '[PRE53]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'We get the following output:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE54]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Fetch and display the order status again after some time:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再过一段时间后，重新获取并显示订单状态：
- en: '[PRE55]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'We get the following output:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE56]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: How it works...
  id: totrans-299
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In *step 1*, you use the `get_instrument()` method of the `BrokerConnectionZerodha`
    class to fetch an instrument and assign it to a new attribute, `instrument`. This
    object is an instance of the `Instrument` class. The two parameters needed to
    call `get_instrument` are the exchange (`'NSE'`) and the trading-symbol (`'RBLBANK'`).
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 1* 中，您使用 `BrokerConnectionZerodha` 类的 `get_instrument()` 方法获取一个工具，并将其分配给一个新属性
    `instrument`。该对象是 `Instrument` 类的一个实例。调用 `get_instrument` 需要的两个参数是交易所（`'NSE'`）和交易符号（`'RBLBANK'`）。
- en: 'In *step 2*, you fetch the LTP of the instrument using the `get_ltp()` method
    of the `BrokerConnectionZerodha` class and assign it to a new attribute, `ltp`.
    The `instrument` object is passed as the parameter here. Next, you use the `place_order()` method
    of the `broker_connection` object to place a `BUY`, `REGULAR`, `INTRADAY`, `STOPLOSS_LIMIT`
    order on the exchange. The `place_order()` method is a wrapper on the broker-specific
    place order API. It takes the following attributes:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 2* 中，您使用 `BrokerConnectionZerodha` 类的 `get_ltp()` 方法获取工具的 LTP，并将其分配给一个新属性
    `ltp`。在此处将 `instrument` 对象作为参数传递。接下来，您使用 `broker_connection` 对象的 `place_order()`
    方法在交易所上放置 `BUY`，`REGULAR`，`INTRADAY`，`STOPLOSS_LIMIT` 订单。`place_order()` 方法是特定于经纪人的放置订单
    API 的包装器。它接受以下属性：
- en: '`instrument`: This is the financial instrument for which the order must be
    placed and should be an instance of the `Instrument` class. We pass `instrument` here.'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instrument`: 这是必须放置订单的金融工具，并且应该是 `Instrument` 类的一个实例。我们在这里传递 `instrument`。'
- en: '`order_transaction_type`: This is the order transaction type and should be
    an enum of the type, `BrokerOrderTransactionTypeConstants`. We pass `BrokerOrderTransactionTypeConstants.BUY` here.'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order_transaction_type`: 这是订单交易类型，应该是 `BrokerOrderTransactionTypeConstants`
    类型的枚举。我们在这里传递 `BrokerOrderTransactionTypeConstants.BUY`。'
- en: '`order_type`: This is the order type and should be an enum of the type, `BrokerOrderTypeConstants`.
    We pass `BrokerOrderTypeConstants.BRACKET` here.'
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order_type`: 这是订单类型，应该是 `BrokerOrderTypeConstants` 类型的枚举。我们在这里传递 `BrokerOrderTypeConstants.BRACKET`。'
- en: '`order_code`: This is the order code and should be an enum of the type, `BrokerOrderCodeConstants`.
    We pass `BrokerOrderCodeConstants.INTRADAY` here.'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order_code`: 这是订单代码，应该是 `BrokerOrderCodeConstants` 类型的枚举。我们在这里传递 `BrokerOrderCodeConstants.INTRADAY`。'
- en: '`order_variety:` This is the order variety and should be an enum of the type,
    `BrokerOrderVarietyConstants`. We pass `BrokerOrderVarietyConstants.STOPLOSS_LIMIT`
    here.'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order_variety:` 这是订单类型，应该是 `BrokerOrderVarietyConstants` 类型的枚举。我们在这里传递 `BrokerOrderVarietyConstants.STOPLOSS_LIMIT`。'
- en: '`quantity`: This is the number of shares to be traded for the given instrument
    and should be a positive integer. We pass `1` here.'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quantity`: 这是要交易的股票数量，并应该是一个正整数。我们在这里传递 `1`。'
- en: '`price`: This is the limit price at which the order should be placed. We pass `ltp+1` here,
    which means `1` unit price above `ltp`.'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`price`: 这是应该放置订单的限价。我们在这里传递 `ltp+1`，意味着比 `ltp` 高 `1` 单位的价格。'
- en: '`trigger_price`: This is the trigger price at which the order should be placed.
    We pass `ltp+1` here, which means 1 unit price above `ltp`.'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`trigger_price`：这是应该放置订单的触发价格。我们在这里传递`ltp+1`，这意味着高出`ltp`的1个价格单位。'
- en: '`stoploss`: This is the price difference from the initial order price, at which
    the stoploss order should be placed. It should be a positive `int` or `float`
    value. We pass `2` here.'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stoploss`：这是与初始订单价格的价格差异，应该在其处放置止损订单。它应该是一个正整数或浮点数值。我们在这里传递`2`。'
- en: '`target`: This is the price difference from the Initial Order price, at which
    the Target Order should be placed. It should be a positive `int` or `float` value.
    We pass `2` here.'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target`：这是目标订单应该放置的与初始订单价格的价格差异。它应该是一个正整数或浮点数值。我们在这里传递`2`。'
- en: '`trailing_stoploss`: This is the price difference by which the stoploss order
    should be modified every time the market price moves in the direction of the target
    order. We pass `1` here.'
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`trailing_stoploss`：这是每当市场价格朝着目标订单的方向移动时应该修改止损订单的价格差异。我们在这里传递`1`。'
- en: (The attributes passed to the `place_order()` method are broker-agnostic constants,
    imported earlier from the `pyalgotrading.constants` module.)
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: （传递给`place_order()`方法的属性是与经纪人无关的常量，之前从`pyalgotrading.constants`模块导入。）
- en: On placing the order in *step 2*, you get an order ID from the broker, which
    you assign to a new attribute, `order1_id`. The `order1_id` object is a string.
    If the order placement is not successful for some reason, you may not get an order
    ID. Observe that the `price` and `trigger_price` parameters are passed a value
    of `ltp+1`. This means the order is placed above the market price, which is a
    necessary condition for placing buy stoploss-limit orders. The `stoploss` parameter
    is specified as `2`. This means the stoploss order would be placed at the price
    that is two price units lower than the execution price of the initial order. Similarly,
    the `target` parameter is specified as `2`. This means the target order would
    be placed at the price that is two price units higher than the execution price
    of the initial order. Finally, the `trailing_stoploss` parameter is specified
    as `1`. This means, after the stoploss order is placed, the stoploss order would
    be modified and placed at a price higher than the previous price by one unit,
    every time the market price increases in multiples of one unit from the price
    of the initial order.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 2*中下单后，您将从经纪人那里获得一个订单 ID，然后将其分配给一个新属性`order1_id`。`order1_id`对象是一个字符串。如果由于某种原因下单未成功，您可能不会获得订单
    ID。请注意，`price`和`trigger_price`参数传递了一个值`ltp+1`。这意味着订单价格高于市场价格，这是下买入止损限价订单的必要条件。`stoploss`参数被指定为`2`。这意味着止损订单将被放置在比初始订单执行价格低两个价格单位的价格处。同样，`target`参数被指定为`2`。这意味着目标订单将被放置在比初始订单执行价格高两个价格单位的价格处。最后，`trailing_stoploss`参数被指定为`1`。这意味着，在放置止损订单后，每当市场价格以初始订单价格的价格单位倍数增加时，止损订单将被修改并放置在比先前价格高一个单位的价格处。
- en: So, for example, let's say the market price for the instrument was 100 at the
    time of placing this order, and so the target and stoploss orders would be placed
    at 102 and 98 respectively. Suppose the market price reaches 101, which is one
    unit higher than 100, then the stoploss order would be modified and placed at
    99, which is again one unit higher than its previous price. By doing so, you have
    reduced your maximum loss from 2 to 1.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，例如，假设在下单时工具的市场价格为 100，那么目标和止损订单将分别放置在 102 和 98 处。假设市场价格达到 101，比 100 高一个单位，那么止损订单将被修改并放置在
    99 处，这再次比其先前价格高一个单位。通过这样做，您已将最大损失从 2 减少到 1。
- en: In *step 3*, you fetch the status of the placed order using the `get_order_status()` method
    of the `broker_connection` object. You pass `order1_id` as a parameter to the
    `get_order_status()` method. You get the order status as `'TRIGGER PENDING'`,
    a string. You can use `order1_id` to fetch the status of the placed order at any
    later point of time as well. In *step 4*, you fetch the order status again, and
    if the order is completed, you get the order status as `'COMPLETE'`. Immediately
    after this, the target and stoploss orders are placed, at the prices mentioned
    earlier. The target order executes as a regular limit order. The stoploss order
    executes as a regular stoploss-limit order. When one of them gets executed and
    reaches the `'COMPLETE'` state, the other order is automatically canceled by the
    broker, so it moves to the `'CANCELLED'` state. Recall, both target and stoploss
    orders are on opposite sides of the initial order, so both target and stoploss
    orders cannot execute at the same time. The stoploss order may be modified by
    one price unit, as mentioned earlier.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 3*中，您使用`broker_connection`对象的`get_order_status()`方法获取已下达订单的状态。您将`order1_id`作为参数传递给`get_order_status()`方法。您会得到订单状态为`'TRIGGER
    PENDING'`的结果，一个字符串。您可以在以后的任何时间使用`order1_id`来获取已下达订单的状态。在*步骤 4*中，您再次获取订单状态，如果订单已完成，您会得到订单状态为`'COMPLETE'`。在此之后立即，目标和止损订单按照先前提及的价格下达。目标订单作为常规限价订单执行。止损订单作为常规止损限价订单执行。当其中一个执行并达到`'COMPLETE'`状态时，另一个订单会被经纪人自动取消，因此它会进入`'CANCELLED'`状态。请记住，目标订单和止损订单位于初始订单的相对位置，因此目标订单和止损订单不能同时执行。如前所述，止损订单可能会被调整一个价格单位。
- en: In *step 3*, if you see the status as `'COMPLETE'` instead of `'TRIGGER PENDING'`,
    this could be due to high volatility. If you want the order to stay in the `'TRIGGER
    PENDING'` state for a while, try placing the order further away from the market
    price.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 3*中，如果您看到状态为`'COMPLETE'`而不是`'TRIGGER PENDING'`，这可能是由于高波动性引起的。如果您希望订单保持在`'TRIGGER
    PENDING'`状态一段时间，请尝试将订单放置在离市价较远的位置。
- en: 'The following are references to more details on the execution of the target
    order and stoploss order:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是有关执行目标订单和止损订单更多详细信息的参考：
- en: '**Initial order**: Refer to the *Placing a regular stoploss-limit order* recipe
    in the previous chapter.'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**初始订单**：请参考前一章节中的*下达常规止损限价订单*。'
- en: '**Target order**: Refer to the *Placing a regular limit order* recipe in the
    previous chapter.'
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标订单**：请参考前一章节中的*下达常规限价订单*。'
- en: '**Stoploss order**: Refer to the *Placing a regular stoploss-limit order* recipe
    chapter in the previous chapter.'
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**止损订单**：请参考前一章节中的*下达常规止损限价订单*。'
- en: You can verify the successful placement of your order by logging in to the broking
    website and checking the orders section there. You should see data similar to
    the screenshots shown in the *Placing bracket limit orders on the exchange* recipe.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过登录经纪网站并检查订单部分来验证订单的成功下达。您应该看到类似于*在交易所上下达括号限价订单*一节中显示的截图数据。
- en: 'The other steps in this recipe follow the same pattern of placing an order
    and getting its status for a different combination of attributes:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方中的其他步骤遵循相同的模式，用于不同属性组合的下达订单和获取其状态：
- en: '*Steps 5*, *6*, and *7*: The `SELL`, `BRACKET`, `INTRADAY`, `STOPLOSS_LIMIT` order'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*步骤 5*、*6*和*7*：`SELL`、`BRACKET`、`INTRADAY`、`STOPLOSS_LIMIT`订单'
- en: Placing a cover market order
  id: totrans-325
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下达平仓市价订单
- en: 'Cover orders are complex orders that are meant to help to limit the loss within
    predefined values if trade becomes unfavorable. A cover order is essentially a
    combination of two regular orders together—an initial order and a stoploss order:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 平仓订单是复杂的订单，旨在帮助将交易的损失限制在预定义的值范围内，如果交易变得不利。平仓订单实质上是两个常规订单的组合——初始订单和止损订单：
- en: '**Initial order**: This order can be equivalent to a regular market order or
    regular limit order, depending on whether you are placing a cover market order
    or cover limit order. Once the order moves to the `''COMPLETE''` state, the stoploss
    order is placed, which is described next.'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**初始订单**：此订单可以等同于常规市价订单或常规限价订单，具体取决于您是下达市价平仓订单还是限价平仓订单。一旦订单进入`''COMPLETE''`状态，下一个步骤是下达止损订单，接下来会进行描述。'
- en: '**Stoploss order**: This order is equivalent to a regular stoploss-market order
    (the *Placing a regular stoploss-market order* recipe in the previous chapter),
    with the specified `trigger price` value as its trigger price and a transaction
    type opposite to that of the initial order. For a buy initial order, the stoploss
    order is placed at a lower price than the initial order. This would be vice versa
    for a sell initial order. The quantity matches that of the initial order. So,
    if this order executes, it exits the position created by the initial order.'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since the stoploss order is placed to cover the initial order from making unexpected
    losses, this order is called a **cover order**. Usually, the broker won't allow
    canceling the stoploss order once it is placed. It can only be exited via completion.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: A cover order is usually meant for intraday trading unless otherwise supported
    by the broker. If the initial order or the stoploss order is not completed by
    the end of the trading session, they are automatically canceled or exited by the
    broker.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: 'The following flowchart summarizes the preceding points and explains the working
    of a cover order:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cb807908-5647-4dff-8284-55dda3938069.png)'
  id: totrans-332
  prefs: []
  type: TYPE_IMG
- en: You can use the cover market order when a cover order has to be placed at the
    market price.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: 'This recipe demonstrates placing the following cover market orders and querying
    their statuses:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: The `BUY`, `COVER`, `INTRADAY`, `MARKET` order
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `SELL`, `COVER`, `INTRADAY`, `MARKET` order
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are references to the state machine diagrams for a cover market
    order:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: '**Initial orde**r: Refer to the state machine diagram from the *Placing a regular
    market order* recipe in the previous chapter.'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stoploss orde**r: Refer to the state machine diagram from the *Placing a
    regular stoploss-market order* recipe in the previous chapter.'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-340
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the `broker_connection` object and constants from the `pyalgotrading` package
    are available in your Python namespace. Refer to the *Technical requirements* section
    of this chapter to set up this object.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-342
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We execute the following steps for this recipe:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: 'Fetch a financial instrument and assign it to `instrument`:'
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Fetch the LTP. Place a `BUY`, `COVER`, `INTRADAY`, `MARKET` order and display
    the order ID:'
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'We get the following output (your output may differ):'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Fetch and display the order status:'
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'We get the following output:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'If you log in to the broker site with your credentials and go to the orders
    section, you can find your order details as shown in the following screenshots
    (some data may differ for you):'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the initial order:'
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/450f6bf4-aa2d-4ba3-a330-5e4b9b952b1b.png)'
  id: totrans-356
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the stoploss order:'
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/5a67b3f6-95a3-42de-86a7-45e682d5c982.png)'
  id: totrans-358
  prefs: []
  type: TYPE_IMG
- en: 'Fetch the LTP. Place a `SELL`, `COVER`, `INTRADAY`, `MARKET` order and display
    the order ID:'
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'We get the following output (your output may differ):'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Fetch and display the order status:'
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'We get the following output:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'If you log in to the broker site with your credentials and go to the orders
    section, you can find your order details as shown in the following screenshots
    (some data may differ for you):'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用您的凭据登录到经纪人网站并转到订单部分，您可以在以下截图中找到您的订单详细信息（对于您可能会有些数据不同）：
- en: 'The following screenshot shows the initial order:'
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下截图显示了初始订单：
- en: '![](img/a1d3adfd-923b-4311-8f41-f6ff11ac774f.png)'
  id: totrans-369
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a1d3adfd-923b-4311-8f41-f6ff11ac774f.png)'
- en: 'The following screenshot shows the stoploss order:'
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下截图显示了止损订单：
- en: '![](img/8664f392-8449-48ab-adb4-c2d64e253bdf.png)'
  id: totrans-371
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8664f392-8449-48ab-adb4-c2d64e253bdf.png)'
- en: How it works...
  id: totrans-372
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In *step 1*, you use the `get_instrument()` method of the `BrokerConnectionZerodha` class
    to fetch an instrument and assign it to a new attribute, `instrument`. This object
    is an instance of the `Instrument` class. The two parameters needed to call `get_instrument` are
    the exchange (`'NSE'`) and the trading-symbol (`'BANKBARODA'`).
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 1* 中，您使用`BrokerConnectionZerodha`类的`get_instrument()`方法获取一个工具并将其分配给一个新属性`instrument`。此对象是`Instrument`类的一个实例。调用`get_instrument`所需的两个参数是交易所（`'NSE'`）和交易符号（`'BANKBARODA'`）。
- en: 'In *step 2*, you fetch the LTP of the instrument using the `get_ltp()` method
    of the `BrokerConnectionZerodha` class and assign it to a new attribute, `ltp`.
    The `instrument` object is passed as the parameter here. Next, you use the `place_order()` method
    of the `broker_connection` object to place a `BUY`, `COVER`, `INTRADAY`, `MARKET`
    order on the exchange. The `place_order()` method is a wrapper on the broker-specific
    place order API. It takes the following attributes:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 2* 中，您使用`BrokerConnectionZerodha`类的`get_ltp()`方法获取工具的最新交易价格（LTP），并将其分配给一个新属性`ltp`。这里将`instrument`对象作为参数传递。接下来，您使用`broker_connection`对象的`place_order()`方法在交易所上下一个`BUY`、`COVER`、`INTRADAY`、`MARKET`订单。`place_order()`方法是经纪人特定的下单API的包装器。它接受以下属性：
- en: '`instrument`: This is the financial instrument for which the order must be
    placed and should be an instance of the `Instrument` class. We pass `instrument` here.'
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instrument`：这是必须下单的金融工具，应该是`Instrument`类的一个实例。我们在这里传递了`instrument`。'
- en: '`order_transaction_type`: This is the order transaction type and should be
    an enum of the type, `BrokerOrderTransactionTypeConstants`. We pass `BrokerOrderTransactionTypeConstants.BUY` here.'
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order_transaction_type`：这是订单交易类型，应该是`BrokerOrderTransactionTypeConstants`类型的枚举。我们在这里传递了`BrokerOrderTransactionTypeConstants.BUY`。'
- en: '`order_type`: This is the order type and should be an enum of the type, `BrokerOrderTypeConstants`.
    We pass `BrokerOrderTypeConstants.COVER` here.'
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order_type`：这是订单类型，应该是`BrokerOrderTypeConstants`类型的枚举。我们在这里传递了`BrokerOrderTypeConstants.COVER`。'
- en: '`order_code`: This is the order code and should be an enum of the type, `BrokerOrderCodeConstants`.
    We pass `BrokerOrderCodeConstants.INTRADAY` here.'
  id: totrans-378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order_code`：这是订单代码，应该是`BrokerOrderCodeConstants`类型的枚举。我们在这里传递了`BrokerOrderCodeConstants.INTRADAY`。'
- en: '`order_variety`: This is the order variety and should be an enum of the type,
    `BrokerOrderVarietyConstants`. We pass `BrokerOrderVarietyConstants.MARKET` here.'
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order_variety`：这是订单种类，应该是`BrokerOrderVarietyConstants`类型的枚举。我们在这里传递了`BrokerOrderVarietyConstants.MARKET`。'
- en: '`quantity`: This is the number of shares to be traded for the given instrument
    and should be a positive integer. We pass `1` here.'
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quantity`：这是要交易的股票数量，应该是正整数。我们在这里传递了`1`。'
- en: '`trigger_price`: This is the trigger price for the Stoploss Order. We pass
    `ltp-1` here, which means one unit price below `ltp`.'
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`trigger_price`：这是止损订单的触发价格。我们在这里传递了`ltp-1`，这意味着低于`ltp`一个单位价格。'
- en: (The attributes passed to the `place_order()` method are broker-agnostic constants,
    imported earlier from the `pyalgotrading.constants` module.)
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: （传递给`place_order()`方法的属性是经纪人不可知的常量，之前从`pyalgotrading.constants`模块导入。）
- en: On placing the order in *step 2*, you get an order ID from the broker, which
    you assign to a new attribute, `order1_id`. The `order1_id` object is a string.
    If the order placement is not successful for some reason, you may not get an order
    ID. Observe that the `trigger_price` parameter is passed a value of `ltp-1`. This
    means the stoploss order is placed below the market price, which is a necessary
    condition for placing sell stoploss-market orders.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 2* 中下订单时，您从经纪人那里获得一个订单ID，将其分配给一个新属性`order1_id`。`order1_id`对象是一个字符串。如果由于某种原因下单失败，则可能不会收到订单ID。请注意，`trigger_price`参数传递了一个`ltp-1`的值。这意味着止损订单放在市价之下，这是放置卖出止损市价订单的必要条件。
- en: In *step 3*, you fetch the status of the placed order using the `get_order_status()` method
    of the `broker_connection` object. You pass `order1_id` as a parameter to the `get_order_status()`
    method. You get the order status as `'COMPLETE'`, a string. Immediately after
    this, the stoploss order is placed, at the price mentioned earlier. This order
    is then executed as a regular stoploss-market order.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 3* 中，您使用 `broker_connection` 对象的 `get_order_status()` 方法获取下达订单的状态。将 `order1_id`
    作为参数传递给 `get_order_status()` 方法。您将订单状态作为字符串 `'COMPLETE'` 立即在此之后，以前述价格下达止损订单。然后，该订单被执行为常规止损-市价订单。
- en: If the stoploss order is executed at any point in time, it would mean your trade
    has incurred a loss, but has safe-guarded you from making more losses. The stoploss
    order transitions to the `'COMPLETE'` state and the position created by the cover
    order is exited. You can also verify the successful placement of your order by
    logging in to the broking website and checking the orders section there. You should
    see data similar to the screenshot shown in the output of *step 3*.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 如果止损订单在任何时间点被执行，这意味着您的交易已经产生了损失，但已经保护您免受进一步的损失。止损订单转换为 `'COMPLETE'` 状态，并退出由盖板订单创建的头寸。您也可以通过登录经纪网站并检查订单部分来验证订单成功下达。您应该看到类似于
    *步骤 3* 输出中显示的屏幕截图的数据。
- en: 'The following are references to more details on the execution of stoploss orders:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是有关止损订单执行更多细节的参考：
- en: '**Initial order**: Refer to the *Placing a regular market order* recipe in
    the previous chapter.'
  id: totrans-387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**初始订单**：参考前一章节中 *下达常规市价订单* 配方。'
- en: '**Stoploss order**: Refer to the *Placing a regular stoploss-market order* recipe
    in the previous chapter.'
  id: totrans-388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**止损订单**：参考前一章节中 *下达常规止损-市价* 配方。'
- en: 'The other steps in this recipe follow the same pattern of placing an order
    and getting its status for a different combination of attributes:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方中的其他步骤遵循相同的模式，用于不同属性组合的下单和获取其状态：
- en: '*Steps 4* and *5*: The `SELL`, `COVER`, `INTRADAY`, `MARKET` order'
  id: totrans-390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*步骤 4* 和 *5*：`SELL`、`COVER`、`INTRADAY`、`MARKET` 订单'
- en: Placing a cover limit order
  id: totrans-391
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下达盖板限价订单
- en: Cover orders are complex orders that are meant to help to limit the loss within
    predefined values if trade becomes unfavorable. A cover order is essentially a
    combination of two regular orders—an initial order and a stoploss order, which
    act together to help to limit the loss in case trade becomes unfavorable.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 盖板订单是旨在在交易不利的情况下帮助限制损失的复杂订单。盖板订单实质上是两个常规订单的组合——一个初始订单和一个止损订单，它们一起协同工作以帮助在交易不利时限制损失。
- en: 'Please refer to the introduction of the *Placing a cover market order* recipe
    for an in-depth understanding of the working of cover orders. You can use a cover
    limit order if you want to place a buy cover order below the market price or a
    sell cover order above the market price. This recipe demonstrates the placing
    of the following cover limit orders and querying their statuses:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考 *下达盖板市价订单* 配方的介绍，深入了解盖板订单的工作原理。如果您想在市场价格下方下达买盖板订单或在市场价格上方下达卖盖板订单，则可以使用盖板限价订单。本配方演示以下盖板限价订单的下达和查询其状态：
- en: The `BUY`, `COVER`, `INTRADAY`, `LIMIT` order
  id: totrans-394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BUY`、`COVER`、`INTRADAY`、`LIMIT` 订单'
- en: The `SELL`, `COVER`, `INTRADAY`, `LIMIT` order
  id: totrans-395
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SELL`、`COVER`、`INTRADAY`、`LIMIT` 订单'
- en: 'The following are references to the state machine diagrams for a cover limit
    order:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是盖板限价订单状态机图的参考：
- en: '**Initial order**: Refer to the state machine diagram from the *Placing a regular
    limit order* recipe in the previous chapter.'
  id: totrans-397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**初始订单**：参考前一章节中 *下达常规限价订单* 配方的状态机图。'
- en: '**Stoploss order**: Refer to the state machine diagram from the *Placing a
    regular stoploss-market order* recipe in the previous chapter.'
  id: totrans-398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**止损订单**：参考前一章节中 *下达常规止损-市价* 配方的状态机图。'
- en: Getting ready
  id: totrans-399
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure the `broker_connection` object and constants from the `pyalgotrading` package
    are available in your Python namespace. Refer to the *Technical requirements* section
    of this chapter to set up this object.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 确保 `pyalgotrading` 包中的 `broker_connection` 对象和常量可在您的 Python 命名空间中使用。请参阅本章的 *技术要求*
    部分设置此对象。
- en: How to do it…
  id: totrans-401
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何执行…
- en: 'We execute the following steps for this recipe:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对这个配方执行以下步骤：
- en: 'Fetch a financial instrument and assign it to `instrument`:'
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取金融工具并将其分配给 `instrument`：
- en: '[PRE66]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Fetch the LTP. Place a `BUY`, `COVER`, `INTRADAY`, `LIMIT` order and display
    the order ID:'
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取 LTP。下达 `BUY`、`COVER`、`INTRADAY`、`LIMIT` 订单并显示订单 ID：
- en: '[PRE67]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'We get the following output:'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE68]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Fetch and display the order status:'
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取并显示订单状态：
- en: '[PRE69]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'We get the following output:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE70]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'If you log in to the broker site with your credentials and go to the orders
    section, you can find your order details as shown in the following screenshots
    (some data may differ for you):'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用您的凭据登录经纪人网站并转到订单部分，您可以像下面的屏幕截图所示找到您的订单详细信息（您的数据可能会有所不同）：
- en: 'The following screenshot shows the initial order:'
  id: totrans-414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了初始订单：
- en: '![](img/d454bbaf-2d0d-4651-87bd-4661a9ce26f0.png)'
  id: totrans-415
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d454bbaf-2d0d-4651-87bd-4661a9ce26f0.png)'
- en: 'The following screenshot shows the stoploss order:'
  id: totrans-416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了止损订单：
- en: '![](img/fa76e3f2-98c0-462b-bc69-e49022b23fc0.png)'
  id: totrans-417
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fa76e3f2-98c0-462b-bc69-e49022b23fc0.png)'
- en: 'Fetch and display the order status again after some time:'
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 过一段时间后再次获取并显示订单状态：
- en: '[PRE71]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'We get the following output:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE72]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Fetch the LTP. Place a `SELL`, `COVER`, `INTRADAY`, `LIMIT` order and display
    the order ID:'
  id: totrans-422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取LTP。放置一个`SELL`、`COVER`、`INTRADAY`、`LIMIT`订单并显示订单ID：
- en: '[PRE73]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'We get the following output (your output may differ):'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出（您的输出可能会有所不同）：
- en: '[PRE74]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Fetch and display the order status:'
  id: totrans-426
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取并显示订单状态：
- en: '[PRE75]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'We get the following output:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE76]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'If you log in to the broker site with your credentials and go to the orders
    section, you can find your order details as shown in the following screenshots
    (some data may differ for you):'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用您的凭据登录经纪人网站并转到订单部分，您可以像下面的屏幕截图所示找到您的订单详细信息（您的数据可能会有所不同）：
- en: 'The following screenshot shows the initial order:'
  id: totrans-431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了初始订单：
- en: '![](img/e99f6751-346a-4000-aaf7-aee90e0e4a91.png)'
  id: totrans-432
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e99f6751-346a-4000-aaf7-aee90e0e4a91.png)'
- en: 'The following screenshot shows the stoploss order:'
  id: totrans-433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了止损订单：
- en: '![](img/e4ae8c89-9826-4bb7-bc30-3a8a50dd0d6a.png)'
  id: totrans-434
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e4ae8c89-9826-4bb7-bc30-3a8a50dd0d6a.png)'
- en: 'Fetch and display the order status:'
  id: totrans-435
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取并显示订单状态：
- en: '[PRE77]'
  id: totrans-436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'We get the following output:'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE78]'
  id: totrans-438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: How it works...
  id: totrans-439
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In *step 1*, you use the `get_instrument()` method of the `BrokerConnectionZerodha` class
    to fetch an instrument and assign it to a new attribute, `instrument`. This object
    is an instance of the `Instrument` class. The two parameters needed to call `get_instrument` are
    the exchange (`'NSE'`) and the trading-symbol (`'YESBANK'`).
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤1*中，您使用`BrokerConnectionZerodha`类的`get_instrument()`方法获取一个工具并将其分配给一个新属性，`instrument`。这个对象是`Instrument`类的一个实例。调用`get_instrument`所需的两个参数是交易所（`'NSE'`）和交易符号（`'YESBANK'`）。
- en: 'In *step 2*, you fetch the LTP of the instrument using the `get_ltp()` method
    of the `BrokerConnectionZerodha` class and assign it to a new attribute, `ltp`.
    The `instrument` object is passed as the parameter here. Next, you use the `place_order()` method
    of the `broker_connection` object to place a `BUY`, `COVER`, `INTRADAY`, `LIMIT`
    order on the exchange. The `place_order()` method is a wrapper on the broker-specific
    place order API. It takes the following attributes:'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤2*中，您使用`BrokerConnectionZerodha`类的`get_ltp()`方法获取工具的LTP，并将其分配给一个新属性，`ltp`。在这里，将`instrument`对象作为参数传递。接下来，您使用`broker_connection`对象的`place_order()`方法在交易所上放置一个`BUY`、`COVER`、`INTRADAY`、`LIMIT`订单。`place_order()`方法是经纪人特定的下单API的包装器。它接受以下属性：
- en: '`instrument`: This is the financial instrument for which the order must be
    placed and should be an instance of the `Instrument` class. We pass `instrument` here.'
  id: totrans-442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instrument`: 这是必须放置订单的金融工具，应该是`Instrument`类的一个实例。我们在这里传递`instrument`。'
- en: '`order_transaction_type`: This is the order transaction type and should be
    an enum of the type, `BrokerOrderTransactionTypeConstants`. We pass `BrokerOrderTransactionTypeConstants.BUY` here.'
  id: totrans-443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order_transaction_type`: 这是订单交易类型，应该是类型的枚举，`BrokerOrderTransactionTypeConstants`。我们在这里传递`BrokerOrderTransactionTypeConstants.BUY`。'
- en: '`order_type`: This is the order type and should be an enum of the type, `BrokerOrderTypeConstants`.
    We pass `BrokerOrderTypeConstants.COVER` here.'
  id: totrans-444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order_type`: 这是订单类型，应该是类型的枚举，`BrokerOrderTypeConstants`。我们在这里传递`BrokerOrderTypeConstants.COVER`。'
- en: '`order_code`: This is the order code and should be an enum of the type, `BrokerOrderCodeConstants.`
    We pass `BrokerOrderCodeConstants.INTRADAY` here.'
  id: totrans-445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order_code`: 这是订单代码，应该是类型的枚举，`BrokerOrderCodeConstants.`。我们在这里传递`BrokerOrderCodeConstants.INTRADAY`。'
- en: '`order_variety`: This is the order variety and should be an enum of the type,
    `BrokerOrderVarietyConstants`. We pass `BrokerOrderVarietyConstants.LIMIT` here.'
  id: totrans-446
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order_variety`: 这是订单种类，应该是类型的枚举，`BrokerOrderVarietyConstants`。我们在这里传递`BrokerOrderVarietyConstants.LIMIT`。'
- en: '`quantity`: This is the number of shares to be traded for the given instrument
    and should be a positive integer. We pass `1` here.'
  id: totrans-447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quantity`: 这是要交易给定工具的股票数量，应该是一个正整数。我们在这里传递`1`。'
- en: '`price`: This is the limit price for the Initial Order. We pass `ltp-0.5` here,
    which means 0.5 unit of a price below `ltp`.'
  id: totrans-448
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`price`：这是初始订单的限价。我们在这里传递`ltp-0.5`，这意味着低于`ltp` 0.5单位的价格。'
- en: '`trigger_price`: This is the trigger price for the Stoploss Order. We pass
    `ltp-1` here, which means one unit price below `ltp`.'
  id: totrans-449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`trigger_price`：这是止损订单的触发价格。我们在这里传递`ltp-1`，这意味着低于`ltp`一单位的价格。'
- en: (The attributes passed to the `place_order()` method are broker-agnostic constants,
    imported earlier from the `pyalgotrading.constants` module.)
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: （传递给`place_order()`方法的属性是来自`pyalgotrading.constants`模块之前导入的与经纪人无关的常量。）
- en: On placing the order in *step 2*, you get an order ID from the broker, which
    you assign to a new attribute, `order1_id`. The `order1_id` object is a string.
    If the order placement is not successful for some reason, you may not get an order
    ID. Observe that the `price` parameter is passed a value of `ltp-0.5`. This means
    the initial order is placed below the market price, which is a necessary condition
    for placing buy limit orders. Also, observe that the `trigger_price` parameter
    is passed a value of `ltp-1`. This means the stoploss order is placed below `price`
    (which will be the market price at the time of placing the stoploss order), which
    is a necessary condition for placing sell stoploss-market orders.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第2步*放置订单时，您将从经纪人那里获得一个订单ID，将其分配给一个新属性`order1_id`。`order1_id`对象是一个字符串。如果由于某种原因订单未成功放置，您可能不会获得订单ID。请注意，`price`参数被赋予一个值为`ltp-0.5`。这意味着初始订单被放置在市场价格之下，这是放置购买限价订单的必要条件。另请注意，`trigger_price`参数被赋予一个值为`ltp-1`。这意味着止损订单被放置在`price`之下（这将是放置止损订单时的市场价格），这是放置卖出止损市价订单的必要条件。
- en: In *step 3*, you fetch the status of the placed order using the `get_order_status()` method
    of the `broker_connection` object. You pass `order1_id` as a parameter to the `get_order_status()`
    method. You get the order status as `'OPEN'`, a string. You can use `order1_id` to
    fetch the status of the placed order at any later point of time as well. In *step
    4*, you fetch the order status again, and if the order is completed, you get the
    order status as `'COMPLETE'`. Immediately after this, the stoploss order is placed,
    at the price mentioned earlier. This order is then executed as a regular stoploss-market
    order.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤3*中，您使用`broker_connection`对象的`get_order_status()`方法获取已放置订单的状态。您将`order1_id`作为参数传递给`get_order_status()`方法。您将订单状态获取为`'OPEN'`，一个字符串。您还可以随时使用`order1_id`获取已放置订单的状态。在*步骤4*中，您再次获取订单状态，如果订单已完成，您将获得订单状态为`'COMPLETE'`。在此之后立即放置止损订单，以前述价格。然后，此订单将作为常规止损市价订单执行。
- en: If the stoploss order is executed at any point in time, it would mean your trade
    has incurred a loss, but has safe-guarded you from making more losses. The stoploss
    order transitions to the `'COMPLETE'` state and the position created by the cover
    order is exited. You can also verify the successful placement of your order by
    logging in to the broking website and checking the orders section there. You should
    see data similar to the screenshot shown in the output of *step 3*.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在任何时间点执行了止损订单，这将意味着您的交易已经产生了损失，但是已经保护您免受进一步的损失。止损订单转移到`'COMPLETE'`状态，并且由覆盖订单创建的持仓被退出。您还可以通过登录经纪网站并检查订单部分来验证订单的成功放置。您应该看到类似于*步骤3*输出中显示的屏幕截图的数据。
- en: 'The following are references to more details on the execution of the initial
    order and stoploss order:'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是关于初始订单和止损订单执行更多细节的参考：
- en: '**Initial order**: Refer to the *Placing a regular limit order* recipe in the
    previous chapter.'
  id: totrans-455
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**初始订单**：请参阅前一章中的*放置常规限价订单*。'
- en: '**Stoploss order**: Refer to the *Placing a regular stoploss-market order* recipe
    in the previous chapter.'
  id: totrans-456
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**止损订单**：请参阅前一章中的*放置常规止损市价订单*。'
- en: 'The other steps in this recipe follow the same pattern of placing an order
    and getting its status for a different combination of attributes:'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 此食谱中的其他步骤遵循相同的模式，为不同的属性组合放置订单并获取其状态：
- en: '*Steps 4* and *5*: The `SELL`, `COVER`, `INTRADAY`, `LIMIT` order'
  id: totrans-458
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*步骤4*和*5*：`SELL`、`COVER`、`INTRADAY`、`LIMIT`订单'
