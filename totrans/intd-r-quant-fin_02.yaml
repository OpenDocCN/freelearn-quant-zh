- en: Chapter 2. Portfolio Optimization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By now we are familiar with the basics of the **R** language. We know how to
    analyze data, call its built-in functions, and apply them to the selected problems
    in a time series analysis. In this chapter we will use and extend this knowledge
    to discuss an important practical application: portfolio optimization, or in other
    words, security selection. This section covers the idea behind portfolio optimization:
    the mathematical models and theoretical solutions. To improve programming skills,
    we will implement an algorithm line by line using real data to solve a real-world
    example. We will also use the pre-written R packages on the same data set.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Imagine that we live in a tropical island and have only USD 100 to invest.
    Investment possibilities on the island are very limited; we can invest our entire
    fund into either ice creams or umbrellas. The payoffs that depend on the weather
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| weather | ice cream | umbrella |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| sunny | 120 | 90 |'
  prefs: []
  type: TYPE_TB
- en: '| rainy | 90 | 120 |'
  prefs: []
  type: TYPE_TB
- en: Suppose the probability of the weather being rainy or sunny is the same. If
    we cannot foresee or change the weather, the two options are clearly equivalent
    and we have an expected return of 5% [(0.5×120+0.5×90)/100-1=0.05] by investing
    in any of them.
  prefs: []
  type: TYPE_NORMAL
- en: What if we can split our funds between ice creams and umbrellas? Then we should
    invest USD 50 in both the options. This portfolio is riskless because whatever
    happens, we earn USD 45 with one asset and USD 60 with the other one. The expected
    return is still 5%, but now it is guaranteed since (45+60)/100-1=0.05.
  prefs: []
  type: TYPE_NORMAL
- en: The main concept of portfolio optimization (which won the Nobel Prize for Harry
    Markowitz in 1990) is captured in this example. Based on the correlation between
    investment products, we can reduce the risk (which in this case is measured by
    variance) of the portfolio and still get the desired expected return.
  prefs: []
  type: TYPE_NORMAL
- en: 'To be mathematically more precise, let *X* and *Y* be the random variables
    with the finite variances ![Portfolio Optimization](img/0933OS_02_01.jpg) and
    ![Portfolio Optimization](img/0933OS_02_02.jpg). The variance of their convex
    or affine combination is shown in the following quadratic function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Portfolio Optimization](img/0933OS_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For different values of their correlation, this quadratic function looks like
    the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Portfolio Optimization](img/0933OS_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The variance (as a measure of risk) can completely be eliminated if and only
    if the correlation between *X* and *Y* is -1 or +1, and the variance of *X* and
    *Y* are not the same. Otherwise, the variance of the portfolio with optimal weights
    depends (in an absolutely non-trivial way) on all the three parameters (![Portfolio
    Optimization](img/0933OS_02_06.jpg), ![Portfolio Optimization](img/0933OS_02_05.jpg),
    and ![Portfolio Optimization](img/0933OS_02_07.jpg)), as we will see later in
    the *Theorem (Lagrange)* section.
  prefs: []
  type: TYPE_NORMAL
- en: Mean-Variance model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Mean-Variance model by Markowitz (*Markowitz, H.M. (March 1952)*) is practically
    the ice-cream/umbrella business in higher dimensions. For the mathematical formulation,
    we need some definitions.
  prefs: []
  type: TYPE_NORMAL
- en: 'They are explained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: By asset ![Mean-Variance model](img/0933OS_02_08.jpg), we mean a random variable
    with finite variance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'By portfolio, we mean the combination of assets: ![Mean-Variance model](img/0933OS_02_09.jpg),
    where ![Mean-Variance model](img/0933OS_02_10.jpg), and ![Mean-Variance model](img/0933OS_02_11.jpg).
    The combination can be affine or convex. In the affine case, there is no extra
    restriction on the weights. In the convex case, all the weights are non-negative.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By optimization, we mean a process of choosing the best ![Mean-Variance model](img/0933OS_02_12.jpg)
    coefficients (weights) so that our portfolio meets our needs (that is, it has
    a minimal risk on the given expected return or has the highest expected return
    on a given level of risk, and so on).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let ![Mean-Variance model](img/0933OS_02_13.jpg) be the random return variables
    with a finite variance, ![Mean-Variance model](img/0933OS_02_14.jpg) be their
    covariance matrix, ![Mean-Variance model](img/0933OS_02_15.jpg) and ![Mean-Variance
    model](img/0933OS_02_16.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: 'We will focus on the following optimization problems:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Mean-Variance model](img/0933OS_02_17.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: '![Mean-Variance model](img/0933OS_02_18.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: '![Mean-Variance model](img/0933OS_02_19.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: '![Mean-Variance model](img/0933OS_02_20.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: '![Mean-Variance model](img/0933OS_02_21.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: 'It is clear that ![Mean-Variance model](img/0933OS_02_22.jpg) is the variance
    of the portfolio and ![Mean-Variance model](img/0933OS_02_23.jpg) is the expected
    return. For the sum of the weights we have ![Mean-Variance model](img/0933OS_02_24.jpg)
    which means that we would like to invest 1 unit of cash. (We can also consider
    adding the ![Mean-Variance model](img/0933OS_02_25.jpg) condition, which means
    that short selling is not allowed.) The problems are explained in detail in the
    following points:'
  prefs: []
  type: TYPE_NORMAL
- en: The first problem is to find the portfolio with a minimal risk. It can be nontrivial
    if there is no riskless asset.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second one is to maximize the expected return on a given level of variance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A slightly different approach is to find a portfolio with minimal variance on
    a desired level of expected return.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The fourth problem is to maximize a simple utility function ![Mean-Variance
    model](img/0933OS_02_26.jpg)where *λ* is the coefficient of risk tolerance; it's
    an arbitrary number that expresses our attitude to a risk. It is practically the
    same as the first problem.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the fifth problem, *Y* is an *n*+1th asset (for example, an index), which
    we cannot purchase or don't want to purchase, but want to replicate it. Other
    similar problems can be formulated in the same way.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is clear that the second problem is a linear optimization with a quadratic
    constraint; all the others are quadratic functions with linear constraints. As
    we will see later, this is an important difference because linear constraints
    can be handled easily while quadratic constraints are more difficult to handle.
    In the next two sections, we will focus on the complexity and possible solutions
    of these problems.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Solution concepts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last 50 years, many great algorithms have been developed for numerical
    optimization and these algorithms work well, especially in case of quadratic functions.
    As we have seen in the previous section, we only have quadratic functions and
    constraints; so these methods (that are implemented in R as well) can be used
    in the worst case scenarios (if there is nothing better).
  prefs: []
  type: TYPE_NORMAL
- en: However, a detailed discussion of numerical optimization is out of the scope
    of this book. Fortunately, in the special case of linear and quadratic functions
    and constraints, these methods are unnecessary; we can use the Lagrange theorem
    from the 18th century.
  prefs: []
  type: TYPE_NORMAL
- en: Theorem (Lagrange)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If ![Theorem (Lagrange)](img/0933OS_02_27.jpg) and ![Theorem (Lagrange)](img/0933OS_02_28.jpg),
    (where ![Theorem (Lagrange)](img/0933OS_02_29.jpg)) have continuous partial derivatives
    and ![Theorem (Lagrange)](img/0933OS_02_30.jpg) is a relative extreme point of
    *f(x)* subject to the ![Theorem (Lagrange)](img/0933OS_02_31.jpg) constraint where
    ![Theorem (Lagrange)](img/0933OS_02_32.jpg).
  prefs: []
  type: TYPE_NORMAL
- en: Then, there exist the coefficients ![Theorem (Lagrange)](img/0933OS_02_33.jpg)
    such that ![Theorem (Lagrange)](img/0933OS_02_34.jpg)
  prefs: []
  type: TYPE_NORMAL
- en: In other words, all of the partial derivatives of the function ![Theorem (Lagrange)](img/0933OS_02_35.jpg)
    are 0 (*Bertsekas Dimitri P. (1999)*).
  prefs: []
  type: TYPE_NORMAL
- en: In our case, the condition is also sufficient. The partial derivative of a quadratic
    function is linear, so the optimization leads to the problem of solving a linear
    system of equations, which is a high school task (unlike numerical methods).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see, how this can be used to solve the third problem:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Theorem (Lagrange)](img/0933OS_02_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'It can be shown that this problem is equivalent to the following system of
    linear equations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Theorem (Lagrange)](img/0933OS_02_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: (Two rows and two columns are added to the covariance matrix, so we have conditions
    to determine the two Lagrange multipliers as well.) We can expect a unique solution
    for this system.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is worth emphasizing that what we get with the Lagrange theorem is not an
    optimization problem anymore. Just as in one dimension, minimizing a quadratic
    function leads to taking a derivative and a linear system of equations, which
    is trivial from the point of complexity. Now let''s see what to do with the return
    maximization problem:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Theorem (Lagrange)](img/0933OS_02_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It's easy to see that the derivative of the Lagrange function subject to *λ*
    is the constraint itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see this, take the derivative of *L*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Theorem (Lagrange)](img/0933OS_02_39.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: '![Theorem (Lagrange)](img/0933OS_02_40.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: So this leads to non-linear equations, which is more of an art than a science.
  prefs: []
  type: TYPE_NORMAL
- en: Working with real data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is useful to know that portfolio optimization is totally integrated in various
    R packages that we will discuss later. However, it''s better to walk before we
    run; so let''s start with a simple self-made `R` function that we would also itemize
    line by line as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This is a direct implementation of the algorithm that we discussed in the *Theorem
    (Lagrange)* section.
  prefs: []
  type: TYPE_NORMAL
- en: 'For demonstration purposes, we have fetched some IT stock prices from a **Quandl**
    superset ([http://www.quandl.com/USER_1KR/1KT](http://www.quandl.com/USER_1KR/1KT)),
    which is a public service providing an easy access to a large amount of quant
    data. Although the URL points to a downloadable comma-separated values (CSV) file
    ([http://www.quandl.com/api/v1/datasets/USER_1KR/1KT.csv](http://www.quandl.com/api/v1/datasets/USER_1KR/1KT.csv))
    that can be saved to a disk and imported to R with `read.csv`, there is a more
    intuitive way to do so with the help of the keys included in the previous URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The preceding warning message would appear if you are not using an authentication
    token. Please visit [http://www.quandl.com/help/r](http://www.quandl.com/help/r)
    or you may download only 10 datasets a day from Quandl.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'So, we loaded the Quandl package that provides the `Quandl` function taking
    several arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: The first parameter (code="`USER_1KR/1KT`") is the dataset code on Quandl
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `start_date` and `end_date` parameters optionally specify the time period
    we are interested in and that is set to be the last 5 years from now
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Please see `?Quandl` for more options; for example, `type` could be used to
    import the data that already exists in some time-series object instead of a raw
    `data.frame`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `str` command run on the newly created `IT` variable shows the internal
    structure of the R object, which currently holds a `Date` field and the prices
    of five assets in a numeric format.
  prefs: []
  type: TYPE_NORMAL
- en: 'After assigning the prices from `IT` (without the first `Date` column) to `assets`,
    let us run the preceding `minvariance` function''s body line by line. First, we
    compute the return of the assets by dividing each but the first value (`tail`)
    with the preceding (`head`) and computing `log` for each quotient:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Please note that the return can be also computed with the `returns` function
    from the **timeSeries** package that we did not call here for didactical purposes.
    To verify what our command did, let us check the first few values of the newly
    created variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we start building the left side of the linear equality system specified
    at the Lagrange theorem: ![Working with real data](img/0933OS_02_41.jpg) where
    we combine the covariance matrix (`cov`), ones repeated (`rep`) by the number
    of columns (`ncol`) in the dataset and the means (`colMeans`) of the returns as
    rows (`rbind`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'That would end up as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Please note that we have rounded the results to five digits for the sake of
    readability. Also note that the average return of the Microsoft (MSFT) and AT&T
    was negative. Now, we also combine the last two rows of the matrix (`tail`) as
    new columns (`rbind`) on the left to make it complete for the linear system with
    the extra zeros specified in the Lagrange theorem (`matrix` of 2x2):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, `mu` is `0.005` (specified in the minvariance function''s argument);
    this is the last value of the vector on the right side of the linear system ![Working
    with real data](img/0933OS_02_42.jpg):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'After successfully building the parts of the linear equality system, you are
    only left with the task of solving it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code is equivalent to running the function in one go, which would
    take the dataset and optionally, the desired return as its arguments. The result
    is the vector of optimal weights and the Lagrange multipliers to get the desired
    expected return with a minimal variance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that on top of the Microsoft and AT&T stocks, Google is also shorted in
    the optimum. We can use this output to get a complete solution for the optimization
    problem, which can be also processed further with other software with the help
    of the `write.csv` function. And instead of calculating the minimum variance for
    a given level of return, we can also get the minimum variance for a larger range
    of returns. If we modify the code, we can get something as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The code is the same, except that it takes a number (`length = 100`) of different
    return values between (`seq`) the minimum and maximum asset returns and calculates
    the variance of the optimal portfolios. We can then plot the return-variance pairs
    (`s` and `rbase`) to illustrate the solution of the problem. The result is shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with real data](img/0933OS_02_43.jpg)'
  prefs: []
  type: TYPE_IMG
- en: On the variance-return plane, the desired return-minimum variance curve is called
    **Portfolio Frontier**. Ignoring its downward sloping part (the same variance
    can be reached with a higher return), we get **Efficient Frontier**; there is
    no reason to choose a portfolio outside Efficient Frontier.
  prefs: []
  type: TYPE_NORMAL
- en: It is well-known that it is enough to calculate Portfolio Frontier for two given
    levels of return and combine the resulting portfolios to get the whole frontier.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similar results can be achieved with some built-in functions of R packages
    without much coding. For example, the **fPortfolio** package provides a bunch
    of useful methods, ready to be applied on time-series objects. For this end, we
    have to transform the asset columns of the original `IT` dataset to a `timeSeries`
    object defined by the first column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Just like we did in the mean-variance function, the return can be defined in
    the time-series by dividing each element with the prior one and computing the
    logarithm, although some useful time-series commands (such as `lag`) can make
    this easier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Or even simpler with the other built-in functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'As we have a time-series object now, it is extremely easy to plot the returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The return of the five stocks in `IT_return` would then look like the following
    figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with real data](img/0933OS_02_44.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding frontier chart can be interactively drawn by plotting the results
    of `portfolioFrontier`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'To mimic what we have implemented in the preceding code, let us render the
    Frontier plot of short sale constraints:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we have set a special `portfolioSpec` S4 object with
    a function (`solveRshortExact`) that optimizes an unlimited short selling portfolio.
    The result of the computation (`portfolioFrontier`) is rendered by `frontierPlot`
    with orange colored circles (`pch = 19`); some smaller (`cex = 0.25`) Monte Carlo-simulated
    points are also added to the graph beside a grid in the background as shown in
    the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with real data](img/0933OS_02_45.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tangency portfolio and Capital Market Line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What happens when a riskless asset ![Tangency portfolio and Capital Market Line](img/0933OS_02_46.jpg)
    is added to the model? If ![Tangency portfolio and Capital Market Line](img/0933OS_02_47.jpg)
    and *X* is any risky portfolio, then ![Tangency portfolio and Capital Market Line](img/0933OS_02_48.jpg)
    and obviously, ![Tangency portfolio and Capital Market Line](img/0933OS_02_49.jpg).
    This means that those portfolios form a straight line on the mean-standard deviation
    plane. Any portfolio on this line is available by investing into R and X. It is
    clear that the best choice for *X* is the point where this line is tangent to
    Efficient Frontier. This tangency point is called the market portfolio or tangency
    portfolio, and the tangent of Efficient Frontier of risky assets at this point
    is called Capital Market Line (CML), which consists of the efficient portfolios
    of all the assets in this case. The last question that we address regarding the
    mean-variance model is how the market portfolio (or equivalently, the CML) can
    be determined.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can easily modify the variance minimization code to accomplish this. First
    of all, if we add a riskless asset, a full-zero row and column is added to the
    covariance matrix (where `n` is the number of assets including the riskless one):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'And the riskless return (let `rf` be `0.0001`) is added to the return vector:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'After this, we can use the new covariance matrix and the new return vector
    to determine the optimal portfolio weights and then eliminate the *n*th asset
    based on the `minvariance` code described in the *Working with real data* section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'With the following intermediate results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'After solving the equation, the result is the market portfolio:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Noise in the covariance matrix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we optimize a portfolio, we don't have the real covariance matrix and the
    expected return vector (that are the inputs of the mean-variance model); we use
    observations to estimate them, so `Q`, `r`, and the output of the model are also
    random variables.
  prefs: []
  type: TYPE_NORMAL
- en: Without going into the details, we can say that this leads to surprisingly great
    uncertainty in the model. In spite of the strong law of large numbers, optimal
    portfolio weights sometimes vary between ![Noise in the covariance matrix](img/0933OS_02_51.jpg).
    Fortunately, if we have a few years' data (daily returns), the relative error
    of the measured risk is only 20-25 %.
  prefs: []
  type: TYPE_NORMAL
- en: When variance is not enough
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Variance as a risk measure is convenient, but has some drawbacks. For instance,
    when using variance, positive changes in the return can be considered as the increase
    of risk. Therefore, more sophisticated risk measures have been developed.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, see the following short demo about various methods applied against
    the previously described `IT_return` assets for a quick overview about the options
    provided by the `fPortfolio` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: These R expressions return different portfolio weights computed by various methods
    not discussed in this introductory chapter. Please refer to the package bundled
    documentation, such as `?portfolio`, and the relevant articles and book chapters
    in the *References* section for details.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covered portfolio optimization. After presenting the main idea,
    we introduced the Markowitz model and its mathematical formulation. We discussed
    the methods for possible solutions and implemented a simple algorithm to demonstrate
    how these methods work on real data. We have also used pre-written R packages
    to solve the same problem. We broadly discussed other important subjects like
    the market portfolio, the uncertainty in the estimation of the covariance matrix,
    and the risk measures beyond variance. We hope that this was a useful first run
    on the topic and you are encouraged to study it further or check out the next
    chapter, which is about a related subject—asset pricing models.
  prefs: []
  type: TYPE_NORMAL
