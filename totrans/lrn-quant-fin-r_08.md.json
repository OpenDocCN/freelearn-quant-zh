["```py\n> GPSCMonthlyUrl<-'http://ichart.yahoo.com/table.csv?s=%5EGSPC&a=00&b=1&c=2010&d=00&e=1&f=2017&g=m' \n> GPSCMonthlyData <- read.csv(GPSCMonthlyUrl) \n> IBMMonthlyUrl<-'http://ichart.yahoo.com/table.csv?s=IBM&a=00&b=1&c=2010&d=00&e=1&f=2017&g=m' \n> IBMMonthlyData <- read.csv(IBMMonthlyUrl) \n> DateRange <- GPSCMonthlyData$Date == IBMMonthlyData$Date \n> GPSCPrice<-GPSCMonthlyData$Close[DateRange] \n> IBMPrice<-IBMMonthlyData$Close[DateRange] \n> GPSCReturns <- ( GPSCPrice[1:(length(GPSCPrice) - 1)] - GPSCPrice[2:length(GPSCPrice)] ) / GPSCPrice[2:length(GPSCPrice)] \n> IBMReturns <- ( IBMPrice[1:(length(IBMPrice) - 1)] - IBMPrice[2:length(IBMPrice)] ) / IBMPrice[2:length(IBMPrice)] \n> betafit <- lm(IBMReturns ~ GPSCReturns) \n> result <- summary(betafit) \n> beta <- result$coefficients[2,1] \n> print(beta) \n\n```", "```py\n[1] 0.72390819 \n\n```", "```py\n>GPSCMonthlyUrl<-'http://ichart.yahoo.com/table.csv?s=%5EGSPC&a=00&b=1&c=2015&d=00&e=1&f=2017&g=m' \n>GPSCMonthlyData <- read.csv(GPSCMonthlyUrl) \n>IBMMonthlyUrl<-'http://ichart.yahoo.com/table.csv?s=IBM&a=00&b=1&c=2015&d=00&e=1&f=2017&g=m' \n>IBMMonthlyData <- read.csv(IBMMonthlyUrl) \n>FBMonthlyUrl<-'http://ichart.yahoo.com/table.csv?s=FB&a=00&b=1&c=2015&d=00&e=1&f=2017&g=m' \n>FBMonthlyData <- read.csv(FBMonthlyUrl) \n>VMonthlyUrl<-'http://ichart.yahoo.com/table.csv?s=V&a=00&b=1&c=2015&d=00&e=1&f=2017&g=m' \nVMonthlyData <- read.csv(VMonthlyUrl) \n\n```", "```py\n> DateRange <- GPSCMonthlyData$Date \n> GPSCPrice<-GPSCMonthlyData$Close[DateRange] \n> IBMPrice<-IBMMonthlyData$Close[DateRange] \n> FBPrice<-FBMonthlyData$Close[DateRange] \n> VPrice<-VMonthlyData$Close[DateRange] \n> GPSCReturns <- ( GPSCPrice[1:(length(GPSCPrice) - 1)] - GPSCPrice[2:length(GPSCPrice)] ) / GPSCPrice[2:length(GPSCPrice)] \n> IBMReturns <- ( IBMPrice[1:(length(IBMPrice) - 1)] - IBMPrice[2:length(IBMPrice)] ) / IBMPrice[2:length(IBMPrice)] \n> FBReturns <- ( FBPrice[1:(length(FBPrice) - 1)] - FBPrice[2:length(FBPrice)] ) / FBPrice[2:length(FBPrice)] \n> VReturns <- ( VPrice[1:(length(VPrice) - 1)] - VPrice[2:length(VPrice)] ) / VPrice[2:length(VPrice)] \n\n```", "```py\n> EGPSCReturns<- GPSCReturns-.0015 \n> EIBMReturns<- IBMReturns-.0015 \n> EFBReturns<- FBReturns-.0015 \n> EVReturns<- VReturns-.0015 \n\n```", "```py\n> MeanSD<-rbind(cbind(\"GPSC\",mean(EGPSCReturns),sd(EGPSCReturns)),cbind(\"FB\",mean(EFBReturns),sd(EFBReturns)),cbind(\"IBM\",mean(EIBMReturns),sd(EIBMReturns)),cbind(\"V\",mean(EVReturns),sd(EVReturns))) \n> MeanSD \n\n```", "```py\n> lmIBM<- lm(IBMReturns ~ EGPSCReturns) \n> summary(lmIBM) \n\n```", "```py\nBeta of IBM*expected excess return of GPSC \n=1.1035670*(-.005955424) =  -0.0065722094 \n\n```", "```py\n> returns_avg<-matrix(c(-0.0180513406031643,-0.00357192217566396,0.12613583240944),nrow =1) \n> covariance<-matrix(c(0.001378118,0.000528808,0.004673302,0.000528808,0.000202913,0.001793228,0.004673302,0.001793228,0.015847524),nrow=3) \n> library(tseries) \n> sol<-portfolio.optim(x=returns_avg,covmat=covariance, shorts=F) \n> sol$pw \n\n```", "```py\nqnorm(p,mean,sd) \n\n```", "```py\n>mean = 2 \n>sigma = 4 \n>Alpha = .05 \n>Var_parametric = qnorm(alpha, mean, sigma) \n>Var_parametric \n\n```", "```py\n[1] -4.579 \n\n```", "```py\n> Var_parametric = mean + sigma*qnorm(alpha,0,1) \n> Var_parametric \n\n```", "```py\n[1] -4.579 \n\n```", "```py\nalpha_z=qnorm(alpha) \nES_parametric = mean + sigma*(dnorm(alpha_z)/(1-alpha)) \nES_parametric \n\n```", "```py\n[1] 2.434 \n\n```", "```py\n>library(quantmod) \n> symbollist = c(\"FB\", \"V\",\"JNJ\") \n> getSymbols(symbollist, from =\"2016-01-01\", to = \"2017-01-01\") \n> FB = FB[, \"FB.Adjusted\", drop=F] \n> V = V[, \"V.Adjusted\", drop=F] \n> JNJ = JNJ[, \"JNJ.Adjusted\", drop=F] \n> FB_return = CalculateReturns(FB,  method=\"log\") \n> V_return = CalculateReturns(V,  method=\"log\") \n> JNJ_return = CalculateReturns(JNJ,  method=\"log\") \n> FB_return = FB_return[-1,] \n> V_return = V_return[-1,] \n> JNJ_return = JNJ_return[-1,] \n> FB_V_JNJ_return<-cbind(FB_return,V_return,JNJ_return) \n> head(FB_V_JNJ_return) \n\n```", "```py\n> HVAR<-VaR(FB_V_JNJ_return, p=0.95, method=\"historical\") \n> HVAR \n\n```", "```py\n> HCVAR<-ES(FB_V_JNJ_return, p=0.95, method=\"historical\") \n> HCVAR \n\n```", "```py\n> VaR(FB_V_JNJ_return, p=0.95,portfolio_method=\"component\") \n\n```", "```py\n> VaR(FB_V_JNJ_return, p=0.95,portfolio_method=\"marginal\") \n\n```", "```py\n> Sample_Size<-2000 \n> set.seed(2345) \n> Z<-rnorm(Sample_Size) \n> mean<-.20 \n> sigma<-.25 \n> deltat<-.08333 \n> returns<-mean*deltat+sigma*Z*sqrt(deltat) \n> hist(returns, breaks = 50) \n\n```", "```py\n> Mean_new<-mean(returns)*12 \n> Mean_new \n> std_new<-sd(returns)*(12)^(.5) \n> std_new \n\n```", "```py\nVaR(returns, p = 0.95, method=\"historical\") \n\n```", "```py\nVaR -0.09665 \n\n```", "```py\n> CalcEAD(50,400) \n\n```", "```py\n> data(GermanCredit) \n> LRData<-GermanCredit[,1:10] \n\n```", "```py\n> str(LRData) \n\n```", "```py\n> summary(LRData) \n\n```", "```py\n> set.seed(100) \n> library(caTools) \n> res = sample.split(LRData$Class, 0.6) \n> Train_data = subset(LRData, res == TRUE) \n> Test_data=subset(LRData,res==FALSE) \n\n```", "```py\n> lgfit = glm(Class ~. , data=Train_data, family=\"binomial\") \n> summary(lgfit) \n\n```", "```py\n> lgfit = glm(Class ~Duration+InstallmentRatePercentage+Age , data=Train_data, family=\"binomial\") \n> summary(lgfit) \n\n```", "```py\n> Train_data$predicted.risk = predict(lgfit, newdata=Train_data, type=\"response\") \n> table(Train_data$Class, as.numeric(Train_data$predicted.risk >= 0.5)) \n\n```", "```py\n> library(ROCR) \n> pred = prediction(Train_data$predicted.risk, Train_data$Class) \n> as.numeric(performance(pred, \"auc\")@y.values) \n\n```", "```py\n0.67925265 \n\n```", "```py\n> predict_Train = predict(lgfit, type=\"response\") \n> ROCpred = prediction(predict_Train, Train_data$Class) \n> ROCperf = performance(ROCpred, \"tpr\", \"fpr\") \n> plot(ROCperf) \n\n```", "```py\n>data(GermanCredit) \n>FraudData<-GermanCredit[,1:10] \n> head(FraudData) \n\n```", "```py\n> len<-dim(FraudData)[1] \n> train<- sample(1:len , 0.8*len) \n> TrainData<-FraudData[train,] \n> TestData<-FraudData[-train,] \n\n```", "```py\n> fraud_model <- randomForest(Class~.,data=TrainData,ntree=50,proximity=TRUE) \n> print(fraud_model) \n\n```", "```py\n> plot(fraud_model) \n\n```", "```py\n> importance(fraud_model) \n\n```", "```py\n> TestPred<-predict(fraud_model,newdata=TestData) \n> table(TestPred, TestData$Class) \n\n```"]