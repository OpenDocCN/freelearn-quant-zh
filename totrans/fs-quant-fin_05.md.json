["```py\n// A normally distributed random generator\nlet normd = new Normal(0.0, 1.0)\nlet T = 1.0\nlet N = 500.0\nlet dt:float = T / N\n\n/// Sequences represent infinite number of elements\n// p -> probability mean\n// s -> scaling factor\nlet W s = let rec loop x = seq { yield x; yield! loop (x + sqrt(dt)*normd.Sample()*s)}\n  loop s;;\n```", "```py\n> Seq.take 50 (W 55.00);;\nval it : seq<float> = seq [55.0; 56.72907873; 56.96071054; 58.72850048; ...]\n```", "```py\nopen System\nopen System.Net\nopen System.Windows.Forms\nopen System.Windows.Forms.DataVisualization.Charting\nopen Microsoft.FSharp.Control.WebExtensions\nopen MathNet.Numerics.Distributions;\n\n// A normally distributed random generator\nlet normd = new Normal(0.0, 1.0)\n\n// Create chart and form\nlet chart = new Chart(Dock = DockStyle.Fill)\nlet area = new ChartArea(\"Main\")\nchart.ChartAreas.Add(area)\n\nlet mainForm = new Form(Visible = true, TopMost = true, Width = 700, Height = 500)\ndo mainForm.Text <- \"Wiener process in F#\"\nmainForm.Controls.Add(chart)\n\n// Create series for stock price\nlet wienerProcess = new Series(\"process\")\ndo wienerProcess.ChartType <- SeriesChartType.Line\ndo wienerProcess.BorderWidth <- 2\ndo wienerProcess.Color <- Drawing.Color.Red\nchart.Series.Add(wienerProcess)\n\nlet random = new System.Random()\nlet rnd() = random.NextDouble()\nlet T = 1.0\nlet N = 500.0\nlet dt:float = T / N\n\n/// Sequences represent infinite number of elements\nlet W s = let rec loop x = seq { yield x; yield! loop (x + sqrt(dt)*normd.Sample()*s)}\n  loop s;;\n\ndo (Seq.take 100 (W 55.00)) |> Seq.iter (wienerProcess.Points.Add >> ignore)\n```", "```py\nlet pow x n = exp(n * log(x))\n\ntype PutCallFlag = Put | Call\n\n/// Cumulative distribution function\nlet cnd x =\n  let a1 =  0.31938153\n  let a2 = -0.356563782\n  let a3 =  1.781477937\n  let a4 = -1.821255978\n  let a5 =  1.330274429\n  let pi = 3.141592654\n  let l  = abs(x)\n  let k  = 1.0 / (1.0 + 0.2316419 * l)\n  let w  = (1.0-1.0/sqrt(2.0*pi)*exp(-l*l/2.0)*(a1*k+a2*k*k+a3*(pow k 3.0)+a4*(pow k 4.0)+a5*(pow k 5.0)))\n  if x < 0.0 then 1.0 - w else w\n\n/// Black-Scholes\n// call_put_flag: Put | Call\n// s: stock price\n// x: strike price of option\n// t: time to expiration in years\n// r: risk free interest rate\n// v: volatility\nlet black_scholes call_put_flag s x t r v =\n  let d1=(log(s / x) + (r+v*v*0.5)*t)/(v*sqrt(t))\n  let d2=d1-v*sqrt(t)\n  //let res = ref 0.0\n\n  match call_put_flag with\n  | Put -> x*exp(-r*t)*cnd(-d2)-s*cnd(-d1)\n  | Call -> s*cnd(d1)-x*exp(-r*t)*cnd(d2)    \n```", "```py\n> black_scholes Call 58.60 60.0 0.5 0.01 0.3;;\nval it : float = 4.465202269\n```", "```py\n> black_scholes Put  58.60 60.0 0.5 0.01 0.3;;\nval it : float = 5.565951021\n```", "```py\n/// Convert the nr of days to years\nlet days_to_years d = (float d) / 365.25\n```", "```py\n> days_to_years 30;;\nval it : float = 0.08213552361\n```", "```py\n> black_scholes Call 58.60 60.0 (days_to_years 20) 0.01 0.3;;\nval it : float = 1.065115482\n\n> black_scholes Put 58.60 60.0 (days_to_years 20) 0.01 0.3;;\nval it : float = 2.432270266\n```", "```py\n/// Plot price of option as function of time left to maturity\n#r \"System.Windows.Forms.DataVisualization.dll\"\n\nopen System\nopen System.Net\nopen System.Windows.Forms\nopen System.Windows.Forms.DataVisualization.Charting\nopen Microsoft.FSharp.Control.WebExtensions\n\n/// Create chart and form\nlet chart = new Chart(Dock = DockStyle.Fill)\nlet area = new ChartArea(\"Main\")\nchart.ChartAreas.Add(area)\nchart.Legends.Add(new Legend())\n\nlet mainForm = new Form(Visible = true, TopMost = true, \n                        Width = 700, Height = 500)\ndo mainForm.Text <- \"Option price as a function of time\"\nmainForm.Controls.Add(chart)\n\n/// Create series for call option price\nlet optionPriceCall = new Series(\"Call option price\")\ndo optionPriceCall.ChartType <- SeriesChartType.Line\ndo optionPriceCall.BorderWidth <- 2\ndo optionPriceCall.Color <- Drawing.Color.Red\nchart.Series.Add(optionPriceCall)\n\n/// Create series for put option price\nlet optionPricePut = new Series(\"Put option price\")\ndo optionPricePut.ChartType <- SeriesChartType.Line\ndo optionPricePut.BorderWidth <- 2\ndo optionPricePut.Color <- Drawing.Color.Blue\nchart.Series.Add(optionPricePut)\n\n/// Calculate and plot call option prices\nlet opc = [for x in [(days_to_years 20)..(-(days_to_years 1))..0.0] do yield black_scholes Call 58.60 60.0 x 0.01 0.3]\ndo opc |> Seq.iter (optionPriceCall.Points.Add >> ignore)\n\n/// Calculate and plot put option prices\nlet opp = [for x in [(days_to_years 20)..(-(days_to_years 1))..0.0] do yield black_scholes Put 58.60 60.0 x 0.01 0.3]\ndo opp |> Seq.iter (optionPricePut.Points.Add >> ignore)\n```", "```py\n/// Normal distribution\nopen MathNet.Numerics.Distributions;\n\nlet normd = new Normal(0.0, 1.0)\n```", "```py\n/// Black-Scholes Delta\n// call_put_flag: Put | Call\n// s: stock price\n// x: strike price of option\n// t: time to expiration in years\n// r: risk free interest rate\n// v: volatility\nlet black_scholes_delta call_put_flag s x t r v =\n  let d1=(log(s / x) + (r+v*v*0.5)*t)/(v*sqrt(t))\n  match call_put_flag with\n  | Put -> cnd(d1) - 1.0\n  | Call -> cnd(d1) \n```", "```py\n/// Black-Scholes Gamma\n// s: stock price\n// x: strike price of option\n// t: time to expiration in years\n// r: risk free interest rate\n// v: volatility\nlet black_scholes_gamma s x t r v =\n  let d1=(log(s / x) + (r+v*v*0.5)*t)/(v*sqrt(t))\n  normd.Density(d1) / (s*v*sqrt(t)\n```", "```py\n/// Black-Scholes Vega\n// s: stock price\n// x: strike price of option\n// t: time to expiration in years\n// r: risk free interest rate\n// v: volatility\nlet black_scholes_vega s x t r v =\n  let d1=(log(s / x) + (r+v*v*0.5)*t)/(v*sqrt(t))    \n  s*normd.Density(d1)*sqrt(t)\n```", "```py\n/// Black-Scholes Theta\n// call_put_flag: Put | Call\n// s: stock price\n// x: strike price of option\n// t: time to expiration in years\n// r: risk free interest rate\n// v: volatility\nlet black_scholes_theta call_put_flag s x t r v =\n  let d1=(log(s / x) + (r+v*v*0.5)*t)/(v*sqrt(t))\n  let d2=d1-v*sqrt(t)\n  let res = ref 0.0\n  match call_put_flag with\n  | Put -> -(s*normd.Density(d1)*v)/(2.0*sqrt(t))+r*x*exp(-r*t)*cnd(-d2)\n  | Call -> -(s*normd.Density(d1)*v)/(2.0*sqrt(t))-r*x*exp(-r*t)*cnd(d2) \n```", "```py\n/// Black-Scholes Rho\n// call_put_flag: Put | Call\n// s: stock price\n// x: strike price of option\n// t: time to expiration in years\n// r: risk free interest rate\n// v: volatility\nlet black_scholes_rho call_put_flag s x t r v =\n  let d1=(log(s / x) + (r+v*v*0.5)*t)/(v*sqrt(t))\n  let d2=d1-v*sqrt(t)\n  let res = ref 0.0\n  match call_put_flag with\n  | Put -> -x*t*exp(-r*t)*cnd(-d2)\n  | Call -> x*t*exp(-r*t)*cnd(d2) \n```", "```py\n/// Plot delta of call option as function of underlying price\n#r \"System.Windows.Forms.DataVisualization.dll\"\n\nopen System\nopen System.Net\nopen System.Windows.Forms\nopen System.Windows.Forms.DataVisualization.Charting\nopen Microsoft.FSharp.Control.WebExtensions\n\n/// Create chart and form\nlet chart = new Chart(Dock = DockStyle.Fill)\nlet area = new ChartArea(\"Main\")\nchart.ChartAreas.Add(area)\nchart.Legends.Add(new Legend())\nlet mainForm = new Form(Visible = true, TopMost = true, Width = 700, Height = 500)\ndo mainForm.Text <- \"Option delta as a function of underlying price\"\nmainForm.Controls.Add(chart)\n\n/// Create series for call option delta\nlet optionDeltaCall = new Series(\"Call option delta\")\ndo optionDeltaCall.ChartType <- SeriesChartType.Line\ndo optionDeltaCall.BorderWidth <- 2\ndo optionDeltaCall.Color <- Drawing.Color.Red\nchart.Series.Add(optionDeltaCall)\n\n/// Calculate and plot call delta\nlet opc = [for x in [10.0..1.0..70.0] do yield black_scholes_delta Call x 60.0 0.5 0.01 0.3]\ndo opc |> Seq.iter (optionDeltaCall.Points.Add >> ignore)\n```", "```py\n#r \"System.Windows.Forms.DataVisualization.dll\"\n\nopen System\nopen System.Net\nopen System.Windows.Forms\nopen System.Windows.Forms.DataVisualization.Charting\nopen Microsoft.FSharp.Control.WebExtensions\n\n/// Create chart and form\nlet chart = new Chart(Dock = DockStyle.Fill)\nlet area = new ChartArea(\"Main\")\nchart.ChartAreas.Add(area)\nchart.Legends.Add(new Legend())\n\nlet mainForm = new Form(Visible = true, TopMost = true, Width = 700, Height = 500)\n\ndo mainForm.Text <- \"Option delta as a function of underlying price\"\nmainForm.Controls.Add(chart)\n```", "```py\n/// Create series for call option delta\nlet optionDeltaCall = new Series(\"Call option delta\")\ndo optionDeltaCall.ChartType <- SeriesChartType.Line\ndo optionDeltaCall.BorderWidth <- 2\ndo optionDeltaCall.Color <- Drawing.Color.Red\nchart.Series.Add(optionDeltaCall)\n\n/// Create series for call option gamma\nlet optionGammaCall = new Series(\"Call option gamma\")\ndo optionGammaCall.ChartType <- SeriesChartType.Line\ndo optionGammaCall.BorderWidth <- 2\ndo optionGammaCall.Color <- Drawing.Color.Blue\nchart.Series.Add(optionGammaCall)\n\n/// Create series for call option theta\nlet optionThetaCall = new Series(\"Call option theta\")\ndo optionThetaCall.ChartType <- SeriesChartType.Line\ndo optionThetaCall.BorderWidth <- 2\ndo optionThetaCall.Color <- Drawing.Color.Green\nchart.Series.Add(optionThetaCall)\n\n/// Create series for call option vega\nlet optionVegaCall = new Series(\"Call option vega\")\ndo optionVegaCall.ChartType <- SeriesChartType.Line\ndo optionVegaCall.BorderWidth <- 2\ndo optionVegaCall.Color <- Drawing.Color.Purple\nchart.Series.Add(optionVegaCall)\n```", "```py\n/// Calculate and plot call delta\nlet opd = [for x in [10.0..1.0..70.0] do yield black_scholes_delta Call x 60.0 0.5 0.01 0.3]\ndo opd |> Seq.iter (optionDeltaCall.Points.Add >> ignore)\n\n/// Calculate and plot call gamma\nlet opg = [for x in [10.0..1.0..70.0] do yield black_scholes_gamma x 60.0 0.5 0.01 0.3]\ndo opg |> Seq.iter (optionGammaCall.Points.Add >> ignore)\n\n/// Calculate and plot call theta\nlet opt = [for x in [10.0..1.0..70.0] do yield black_scholes_theta Call x 60.0 0.5 0.01 0.3]\ndo opt |> Seq.iter (optionThetaCall.Points.Add >> ignore)\n\n/// Calculate and plot call vega\nlet opv = [for x in [10.0..1.0..70.0] do yield black_scholes_vega x 60.0 0.1 0.01 0.3]\ndo opv |> Seq.iter (optionVegaCall.Points.Add >> ignore)\n```", "```py\n/// Monte Carlo implementation\n\n/// Convert the nr of days to years\nlet days_to_years d =\n  (float d) / 365.25\n\n/// Asset price at maturity for sample rnd\n// s: stock price\n// t: time to expiration in years\n// r: risk free interest rate\n// v: volatility\n// rnd: sample\nlet price_for_sample s t r v rnd =\n  s*exp((r-v*v/2.0)*t+v*rnd*sqrt(t))\n\n/// For each sample we run the monte carlo simulation\n// s: stock price\n// x: strike price of option\n// t: time to expiration in years\n// r: risk free interest rate\n// v: volatility\n// samples: random samples as input to simulation\nlet monte_carlo s x t r v (samples:seq<float>) = samples\n  |> Seq.map (fun rnd -> (price_for_sample s t r v rnd) - x)\n  |> Seq.average\n\n/// Generate sample sequence\nlet random = new System.Random()\nlet rnd() = random.NextDouble()\nlet data = [for i in 1 .. 1000 -> rnd() * 1.0]\n```", "```py\n  > black_scholes 'c' 58.60 60.0 0.5 0.01 0.3;;\n  val it : float = 4.465202269\n\n  /// Monte carlo for call option\n  > monte_carlo 58.60 60.0 0.5 0.01 0.3 data\n  val it : float = 4.243545757\n```", "```py\nlet random = new System.Random()\nlet rnd() = random.NextDouble()\nlet data = [for i in 1 .. 1000000 -> rnd() * 1.0]\n\n/// Monte carlo for call option\n> monte_carlo 58.60 60.0 0.5 0.01 0.3 data;;\nval it : float = 4.146170039\n```"]