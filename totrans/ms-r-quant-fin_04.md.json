["```py\ninstall.packages(\"Quandl\")\nlibrary(Quandl)\nlibrary(xts)\n\n```", "```py\ncurrencies <- c( \"USD\", \"CHF\", \"GBP\", \"JPY\", \"RUB\", \"CAD\", \"AUD\")\ncurrencies <- paste(\"CURRFX/EUR\", currencies, sep = \"\")\ncurrency_ts <- lapply(as.list(currencies), Quandl, start_date=\"2005-01-01\",end_date=\"2013-06-07\", type=\"xts\")\n\n```", "```py\nQ <- cbind(\ncurrency_ts[[1]]$Rate,currency_ts[[3]]$Rate,currency_ts[[6]]$Rate,currency_ts[[7]]$Rate)\nmatplot(Q, type = \"l\", xlab = \"\", ylab = \"\", main = \"USD, GBP, CAD, AUD\", xaxt = 'n', yaxt = 'n')\nticks = axTicksByTime(currency_ts[[1]])\nabline(v = ticks,h = seq(min(Q), max(Q), length = 5), col = \"grey\", lty = 4)\naxis(1, at = ticks, labels = names(ticks))\naxis(2, at = seq(min(Q), max(Q), length = 5), labels = round(seq(min(Q), max(Q), length = 5), 1))\nlegend(\"topright\", legend = c(\"USD/EUR\", \"GBP/EUR\", \"CAD/EUR\", \"AUD/EUR\"), col = 1:4, pch = 19)\n\n```", "```py\nlibrary(quantmod)\n\n```", "```py\nbmw_stock<- new.env()\ngetSymbols(\"BMW.DE\", env = bmw_stock, src = \"yahoo\", from = as.Date(\"2010-01-01\"), to = as.Date(\"2013-12-31\"))\n\n```", "```py\nBMW<-bmw_stock$BMW.DE\nhead(BMW)\n BMW.DE.Open BMW.DE.High BMW.DE.Low BMW.DE.Close BMW.DE.Volume\n2010-01-04       31.82       32.46      31.82        32.05       1808100\n2010-01-05       31.96       32.41      31.78        32.31       1564100\n2010-01-06       32.45       33.04      32.36        32.81       2218600\n2010-01-07       32.65       33.20      32.38        33.10       2026100\n2010-01-08       33.33       33.43      32.51        32.65       1925800\n2010-01-11       32.99       33.05      32.11        32.17       2157800\n BMW.DE.Adjusted\n2010-01-04           29.91\n2010-01-05           30.16\n2010-01-06           30.62\n2010-01-07           30.89\n2010-01-08           30.48\n2010-01-11           30.02\n\n```", "```py\nchartSeries(BMW,multi.col=TRUE,theme=\"white\")\naddMACD()\naddBBands()\n\n```", "```py\nBMW_return <- \nlog(BMW$BMW.DE.Close/BMW$BMW.DE.Open)\nqqnorm(BMW_return, main = \"Normal Q-Q Plot of BMW daily log return\",\n xlab = \"Theoretical Quantiles\",\n ylab = \"Sample Quantiles\", plot.it = TRUE, datax = FALSE\n )\nqqline(BMW_return, col=\"red\")\n\n```", "```py\ninstall.packages(\"bigmemory\")\ninstall.packages(\"biganalytics\")\nlibrary(bigmemory)\nlibrary(biganalytics)\n\n```", "```py\nx<-read.big.matrix( \"FlightTicketData.csv\", type='integer', header=TRUE, backingfile=\"data.bin\",descriptorfile=\"data.desc\")\nxm<-as.matrix(x)\nnrow(x)\n[1] 3156925\n\n```", "```py\nres_bigkmeans <- lapply(1:10, function(i) {\n bigkmeans(x, centers=i,iter.max=50,nstart=1)\n })\nlapply(res_bigkmeans, function(x) x$withinss)\nvar <- sapply(res_bigkmeans, function(x) sum(x$withinss))\nplot(1:10, var, type = \"b\", xlab = \"Number of clusters\", ylab = \"Percentage of variance explained\")\n\n```", "```py\nres_big<-bigkmeans(x, centers=3,iter.max=50,nstart=1)\nres_big\nK-means clustering with 3 clusters of sizes 919959, 1116275, 1120691\n\nCluster means:\n [,1]     [,2]    [,3]     [,4]      [,5]       [,6]     [,7]     [,8]\n[1,] 2.663235 12850.78 1285081 32097.61 0.6323662 0.03459393 2.084982 2305.836\n[2,] 2.744241 14513.19 1451322 32768.11 0.6545699 0.02660276 1.974971 2390.292\n[3,] 2.757645 11040.08 1104010 30910.66 0.6813850 0.03740460 1.989817 2211.801\n [,9]\n[1,] 1.929160\n[2,] 1.930394\n[3,] 1.949151\n\nClustering vector:\n[1] 3 3 3 3 3 3 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3\n[37] 3 3 3 3 3 3 3 3 3 3 1 1 1 1 1 1 2 2 2 2 3 3 3 3 3 1 1 1 1 1 1 1 1 1 1 1\n[73] 1 2 2 2 2 2 2 3 3 3 1 2 2 3 3 3 1 1 1 1 1 1 2 2\nWithin cluster sum of squares by cluster:\n[1] 2.010160e+15 2.466224e+15 2.183142e+15\n\nAvailable components:\n\n[1] \"cluster\"  \"centers\"  \"withinss\" \"size\" \n\n```", "```py\nsize<-round(seq(10,2500000,length=20))\nnsize<-length(size)\ncalc.time <- matrix(NA, nrow=nsize, ncol=2)\nfor (i in 1:nsize) {\n size.i<-size[i]\n xm.i<-xm[1:size.i,]\nvec1=rep(0,10)\nvec2=rep(0,10)\nfor (j in 1:10) {\nvec1[j]<-system.time(kmeans(xm.i,centers=3,iter.max=50,nstart=1))[3]\nvec2[j]<-system.time(bigkmeans(xm.i,centers=3,iter.max=50,nstart=1))[3]\n}\ncalc.time[i,1]<-mean(vec1)\ncalc.time[i,2]<-mean(vec2)\n}\n\n```", "```py\ninstall.packages(\"ff\")\ninstall.packages(\"biglm\")\nlibrary(ff)\nlibrary(biglm)\n\n```", "```py\ndownload.file(\"http://www.irs.gov/file_source/pub/irs-soi/12zpallagi.csv\",\"soi.csv\")\n\n```", "```py\nx <- read.csv.ffdf(file=\"soi.csv\",header=TRUE)\n\n```", "```py\nrequire(biglm)\n\n```", "```py\nmymodel<-biglm(A02300 ~  A00200+AGI_STUB+NUMDEP+MARS2,data=x)\nsummary(mymodel)\nLarge data regression model: biglm(A02300 ~ A00200 + AGI_STUB + NUMDEP + MARS2, data = x)\nSample size =  166904 \n Coef     (95%      CI)      SE      p\n(Intercept) 131.9412  44.3847 219.4977 43.7782 0.0026\nA00200       -0.0019  -0.0019  -0.0018  0.0000 0.0000\nAGI_STUB    -40.1597 -62.6401 -17.6794 11.2402 0.0004\nNUMDEP        0.9270   0.9235   0.9306  0.0018 0.0000\nMARS2        -0.1451  -0.1574  -0.1327  0.0062 0.0000\nA00200       -0.0019  -0.0019  -0.0018  0.0000 0.0000\nsummary(mymodel)$rsq\n[1] 0.8609021\n\n```"]