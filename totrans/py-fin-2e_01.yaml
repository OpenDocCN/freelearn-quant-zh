- en: Chapter 1. Python Basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will discuss basic concepts and several widely used functions
    related to Python. This chapter plus the next one ([Chapter 2](ch02.html "Chapter 2. Introduction
    to Python Modules"), *Introduction to Python Modules*) are only the chapters exclusively
    based on Python techniques. Those two chapters serve as a review for readers who
    have some basic Python knowledge. There is no way that a beginner, with no prior
    Python knowledge, could master Python by reading just those two chapters. For
    a new learner who wants to learn Python in more detail, he/she could find many
    good books. From [Chapter 3](ch03.html "Chapter 3. Time Value of Money"), *Time
    Value of Money* onward, we will use Python, which will help in explaining or demonstrating
    various finance concepts, running regression, and processing data related to economics,
    finance, and accounting. Because of this, we will offer more Python-related techniques
    and usages in each of the upcoming chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'In particular, in this chapter, we will discuss the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Python installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Variable assignment, empty space, and writing our own programs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing a Python function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data input
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data manipulation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data output
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will discuss how to install Python. More specifically,
    we will discuss two methods: installing Python via Anaconda and installing Python
    directly.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several reasons why the first method is preferred:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we can use a Python editor called Spyder, which is quite convenient
    for writing and editing our Python programs. For example, it has several windows
    (panels): one for the console, where we can type our commands directly; one for
    the program editor, where we can write and edit our programs; one for *Variable
    Explorer*,where we can view our variables and their values; and one for help,
    where we can seek help.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Second, different colors for codes or comment lines will help us avoid some
    obvious typos and mistakes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Third, when installing Anaconda, many modules are installed simultaneously.
    A module is a set of programs written by experts, professionals, or any person
    around a specific topic. It could be viewed as a toolbox for a specific task.
    To speed up the process of developing new tools, a new module usually depends
    on the functions embedded in other, already developed modules. This is called
    module dependency. One disadvantage of such a module dependency is how to install
    them at the same time. For more information about this, see [Chapter 2](ch02.html
    "Chapter 2. Introduction to Python Modules"), *Introduction to Python Modules*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installation of Python via Anaconda
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We could install Python in several ways. The consequence is that we will have
    different environments for writing a Python program and running a Python program.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a simple two-step approach. First, we go to [http://continuum.io/downloads](http://continuum.io/downloads)
    and find an appropriate package; see the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installation of Python via Anaconda](img/B06175_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For Python, different versions coexist. From the preceding screenshot, we see
    that there exist two versions, 3.5 and 2.7.
  prefs: []
  type: TYPE_NORMAL
- en: For this book, the version is not that critical. The old version had fewer problems
    while the new one usually has new improvements. Again, module dependency could
    be a big headache; see [Chapter 2](ch02.html "Chapter 2. Introduction to Python
    Modules"), *Introduction to Python Modules* for more detail. The version of Anaconda
    is 4.2.0\. Since we will launch Python through Spyder, it might have different
    versions as well.
  prefs: []
  type: TYPE_NORMAL
- en: Launching Python via Spyder
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After Python is installed via Anaconda, we can navigate to **Start** (for a
    Windows version) |**All Programs** |**Anaconda3(32-bit)**, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Launching Python via Spyder](img/B06175_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After we click **Spyder**, the last entry in the preceding screenshot, we will
    see the following four panels:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Launching Python via Spyder](img/B06175_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The top-left panel (window) is our program editor, where we write our programs.
    The bottom-right panel is the IPython console, where we cantype our simple commands.
    IPython is the default one. To know more about IPython, just type a question mark;
    see the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Launching Python via Spyder](img/B06175_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Alternatively, we could launch Python console by clicking **Consoles** on the
    menu bar and then **Open a Python console**. After that, the following window
    will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Launching Python via Spyder](img/B06175_01_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: From the image with four panels, the top-right panel is our help window, where
    we can seek help. The middle one is called *Variable Explorer*, where the names
    of variables and their values are shown. Depending on personal preference, users
    will scale those panels or reorganize them.
  prefs: []
  type: TYPE_NORMAL
- en: Direct installation of Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For most users, knowing how to install Python via Anaconda is more than enough.
    Just for completeness, here the second way to install Python is presented.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps are involved:'
  prefs: []
  type: TYPE_NORMAL
- en: First, go to [www.python.org/download](http://www.python.org/download):![Direct
    installation of Python](img/B06175_01_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Depending on your computer, choose the appropriate package, for example, Python
    version 3.5.2\. For this book, the version of Python is not important. At this
    stage, a new user could just install Python with the latest version. After installation,
    we will see the following entries for a Windows version:![Direct installation
    of Python](img/B06175_01_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To launch Python, we could click `IDLE (Python 3.5\. 32 bit)` and get to see
    the following screen:![Direct installation of Python](img/B06175_01_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the IPython shown in the screenshot with four panels, or from the Python
    console panel or from the previous screenshot showing Python Shell, we could type
    various commands, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To write a Python program, we click **File**, then **New File**:![Direct installation
    of Python](img/B06175_01_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type this program and then save it:![Direct installation of Python](img/B06175_01_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Run**, then **Run module**. If no error occurs, we can use the function
    just like other embedded functions, as shown here:![Direct installation of Python](img/B06175_01_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Variable assignment, empty space, and writing our own programs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, for Python language, an empty space or spaces is very important. For
    example, if we accidently have a space before typing `pv=100`, we will see the
    following error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Variable assignment, empty space, and writing our own programs](img/B06175_01_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The name of the error is called `IndentationError`. The reason is that, for
    Python, indentation is important. Later in the chapter, we will learn that a proper
    indentation will regulate/define how we write a function or why a group of codes
    belongs to a specific topic, function, or loop.
  prefs: []
  type: TYPE_NORMAL
- en: 'Assume that we deposit $100 in the bank today. What will be the value 3 years
    later if the bank offers us an annual deposit rate of 1.5%? The related codes
    is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding codes, `**` means a power function. For example, `2**3` has
    a value of `8`. To view the value of a variable, we simply type its name; see
    the previous example. The formula used is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Variable assignment, empty space, and writing our own programs](img/B06175_01_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here, *FV* is the future value, *PV* is the present value, *R* is the period
    deposit rate while *n* is the number of periods. In this case, *R* is the annual
    rate of *0.015* while *n* is *3*. At the moment, readers should focus on simple
    Python concepts and operations.
  prefs: []
  type: TYPE_NORMAL
- en: 'In [Chapter 3](ch03.html "Chapter 3. Time Value of Money"), *Time Value of
    Money*, this formula will be explained in detail. Since Python is case-sensitive,
    an error message will pop up if we type `PV` instead of `pv`; see the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Unlike some languages, such as C and FORTRAN, for Python a new variable does
    not need to be defined before a value is assigned to it. To show all variables
    or function, we use the `dir()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To find out all built-in functions, we type `dir(__builtings__)`. The output
    is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Variable assignment, empty space, and writing our own programs](img/B06175_01_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Writing a Python function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Assume that we are interested in writing a Python function for equation (1).
  prefs: []
  type: TYPE_NORMAL
- en: After launching Spyder, click **File**, then **New File**. We write the following
    two lines, as shown in the left panel. The keyword `def` is for function,`fv_f`
    is the function name, and the three values of `pv`, `r` , and `n` in the pair
    of parentheses are input variables.
  prefs: []
  type: TYPE_NORMAL
- en: The colon (`:`) indicates the function hasn't finished yet. After we hit the
    *Enter* key, the next line will be automatically indented.
  prefs: []
  type: TYPE_NORMAL
- en: After we enter return `pv*(1+r)**n` and hit the *Enter* key twice, this simple
    program is completed. Obviously, for the second line, `**` represents a power
    function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Assume that we save it under `c:/temp/temp.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing a Python function](img/B06175_01_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To run or debug the program, click the arrow key under **Run** on the menu
    bar; see the preceding top-right image. The compiling result is shown by the bottom
    image right (the second image on top right). Now, we can use this function easily
    by calling it with three input values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If some comments are added by explaining the meanings of input variables, the
    formula used, plus a few examples, it will be extremely helpful for other users
    or programmers. Check the following program with comments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The comments or explanations are included in a pair of three double quotation
    marks (`"""` and `"""`). The indentation within a comment is not consequential.
    When compiling, the underlying software will ignore all comments. The beauty of
    those comments is that we can use `help(pv_f)` to see them, as illustrated here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing a Python function](img/B06175_01_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In [Chapter 2](ch02.html "Chapter 2. Introduction to Python Modules"), *Introduction
    to Python Modules*, we will show how to upload a financial calculator written
    in Python, and in [Chapter 3](ch03.html "Chapter 3. Time Value of Money"), *Time
    Value of Money*, we will explain how to generate such a financial calculator.
  prefs: []
  type: TYPE_NORMAL
- en: Python loops
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we discuss a very important concept: loop or loops. A loop
    is used to repeat the same task with slightly different input or other factors.'
  prefs: []
  type: TYPE_NORMAL
- en: Python loops, if...else conditions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s look at a simple loop through all the data items in an array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: One type of data is called a tuple, where we use a pair of parentheses, `()`,
    to include all input values. One feature of a tuple variable is that we cannot
    modify its value. This special property could be valuable if some our variables
    should never be changed.A tuple is different from a dictionary, which stores data
    with key-value pairs. It is not ordered and it requires that the keys are hashable.
    Unlike a tuple, the value for a dictionary can be modified.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that for Python, the subscription for a vector or tuple starts from `0`.
    If `x` has a length of `3`, the subscriptions will be `0`, `1` and `2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Assuming that we invest $100 today and $30 next year, the future cash inflow
    will be $10, $40, $50, $45, and $20 at the end of each year for the next 5 years,
    starting at the end of the second year; see the following timeline and its corresponding
    cash flows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'What is the **Net Present Value** (**NPV**) if the discount rate is 3.5%? NPVis
    defined as the present values of all benefits minus the present values of all
    costs. If a cash inflow has a positive sign while a cash outflow has a negative
    sign, then NPV can be defined conveniently as the summation of the present values
    of all cash flows. The present value of one future value is estimated by applying
    the following formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Python loops, if...else conditions](img/B06175_01_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here,*PV* is the present value, *FV* is the future value,*R* is the period
    discount rate and *n* is the number of periods. In [Chapter 3](ch03.html "Chapter 3. Time
    Value of Money"), *Time Value of Money*, the meaning of this formula will be explained
    in more detail. At the moment, we just want to write an`npv_f()` function which
    applies the preceding equation *n* times, where n is the number of cash flows.
    The complete NPV program is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In the program, we used a `for` loop. Again, the correct indentation is important
    for Python. Lines from 2 to 5 are all indented by one unit, thus they belong to
    the same function, called `npv_f`. Similarly, line 4 is indented two units, that
    is, after the second column (`:`), it belongs to the `for`loop. The command of
    `total +=a` is equivalent to `total=total +a`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the NPV function, we use a `for` loop. Note that the subscription of a
    vector in Python starts from zero, and the intermediate variable `i` starts from
    zero as well. We could call this function easily by entering two sets of input
    values. The output is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is another `npv_f()` function with a function called `enumerate()`. This
    function willgenerate a pair of indices, starting from`0`, and its corresponding
    value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an example illustrating the usage of `enumerate()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Unlike the `npv_f` function specified previously, the NPV function from Microsoft
    Excel is actually a `PV` function, meaning that it can be applied only to the
    future values. Its equivalent Python program, which is called `npv_Excel`, is
    shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The comparisons are shown in the following table. The result from the Python
    program is shown in the left panel while the result by calling the Excel NPV function
    is shown in the right panel. Please pay enough attention to the preceding program
    shown itself and how to call such a function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Python loops, if...else conditions](img/B06175_01_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'By using a loop, we can repeat the same task with different inputs. For example,
    we plan to print a set of values. The following is such an example for a `while`
    loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The following program will report a discount (or any number of discount rates),
    making its corresponding NPV equal zero. Assume the cash flow will be `550`, `-500`,
    `-500`, `-500`, and `1000` at time `0`, at the end of each year of the next 4
    years. In [Chapter 3](ch03.html "Chapter 3. Time Value of Money"), *Time Value
    of Money*, we will explain the concept of this exercise in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: 'Write a Python program to find out which discount rate makes NPV equal zero.
    Since the direction of cash flows changes twice, we might have two different rates
    making NPV equal zero:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The corresponding output is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Later in the chapter, a `for`loop is used to estimate the NPV of a project.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we need to use a few math functions, we can import the `math` module first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The `sqrt()`, square root, function is contained in the `math` module. Thus,
    to use the `sqrt()` function, we need to use `math.sqrt()`; see the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'If we want to call those functions directly, we can use `from math import *`;
    see the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'To learn about individual embedded functions, we can use the`help()` function;see
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Data input
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s generate a very simple input dataset first, as shown here. Its name
    and location is `c:/temp/test.txt`. The format of the dataset is text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The code is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The `print()` function could be used to show the value of `x`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'For the second example, let''s download the daily historical price for IBM
    from **Yahoo!Finance** first. To do so, we visit [http://finance.yahoo.com](http://finance.yahoo.com):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Data input](img/B06175_01_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Enter `IBM` to find its related web page. Then click **Historical Data**, then
    click **Download**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Data input](img/B06175_01_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Assume that we save the daily data as `ibm.csv` under `c:/temp/`. The first
    five lines are shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The first line shows the variable names: date, open price, high price achieved
    during the trading day, low price achieved during the trading day, close price
    of the last transaction during the trading day, trading volume, and adjusted price
    for the trading day. The delimiter is a comma. There are several ways of loading
    the text file. Some methods are discussed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Method I**: We could use `read_csv` from the `pandas` module:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Method II**: We could use `read_table` from the `pandas` module; see the
    following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Alternatively, we could download the IBM daily price data directly from Yahoo!Finance;
    see the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'We could retrieve data from an Excel file by using the `ExcelFile()` function
    from the`pandas` module. First, we generate an Excel file with just a few observations;
    see the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Data input](img/B06175_01_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s call this Excel file `stockReturns.xlxs` and assume that it is saved
    under `c:/temp/`. The Python code is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: To retrieve Python datasets with an extension of `.pkl` or `.pickle`, we can
    use the following code. First, we download the Python dataset called `ffMonthly.pkl`
    from the author's web page at [http://www3.canisius.edu/~yany/python/ffMonthly.pkl](http://www3.canisius.edu/~yany/python/ffMonthly.pkl).
  prefs: []
  type: TYPE_NORMAL
- en: 'Assume that the dataset is saved under `c:/temp/`. The function called `read_pickle()`
    included in the `pandas` module can be used to load the dataset with an extension
    of `.pkl` or `.pickle`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the simplest `if` function: when our interest rate is negative,
    print a warning message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Conditions related to logical `AND` and `OR` are shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'For the multiple `if...elif` conditions, the following program illustrates
    its application by converting a number grade to a letter grade:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Note that it is a good idea for such multiple `if...elif` functions to end with
    an `else` condition since we know exactly what the result is if none of those
    conditions are met.
  prefs: []
  type: TYPE_NORMAL
- en: Data manipulation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are many different types of data, such as integer, real number, or string.
    The following table offers a list of those data types:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Data types | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Bool` | Boolean (`TRUE` or `FALSE`) stored as a byte |'
  prefs: []
  type: TYPE_TB
- en: '| `Int` | Platform integer (normally either `int32` or `int64`) |'
  prefs: []
  type: TYPE_TB
- en: '| `int8` | Byte (`-128` to `127`) |'
  prefs: []
  type: TYPE_TB
- en: '| `int16` | Integer (`-32768` to `32767`) |'
  prefs: []
  type: TYPE_TB
- en: '| `int32` | Integer (`-2147483648` to `2147483647`) |'
  prefs: []
  type: TYPE_TB
- en: '| `int64` | Integer (`9223372036854775808` to `9223372036854775807`) |'
  prefs: []
  type: TYPE_TB
- en: '| `unit8` | Unsigned integer (`0` to `255`) |'
  prefs: []
  type: TYPE_TB
- en: '| `unit16` | Unsigned integer (`0` to `65535`) |'
  prefs: []
  type: TYPE_TB
- en: '| `unit32` | Unsigned integer (`0` to `4294967295`) |'
  prefs: []
  type: TYPE_TB
- en: '| `unit64` | Unsigned integer (`0` to `18446744073709551615`) |'
  prefs: []
  type: TYPE_TB
- en: '| `float` | Short and for `float6` |'
  prefs: []
  type: TYPE_TB
- en: '| `float32` | Single precision float: sign `bit23` bits mantissa; 8 bits exponent
    |'
  prefs: []
  type: TYPE_TB
- en: '| `float64` | 52 bits mantissa |'
  prefs: []
  type: TYPE_TB
- en: '| `complex` | Shorthand for `complex128` |'
  prefs: []
  type: TYPE_TB
- en: '| `complex64` | Complex number; represented by two 32-bit floats (real and
    imaginary components) |'
  prefs: []
  type: TYPE_TB
- en: '| `complex128` | Complex number; represented by two 64-bit floats (real and
    imaginary components) |'
  prefs: []
  type: TYPE_TB
- en: Table 1.1 List of different data types
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In the following examples, we assign a value to `r`, which is a scalar, and
    several values to `pv`, which is an array (vector).The `type()` function is used
    to show their types:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'To choose the appropriate decision, we use the `round()`function; see the following
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'For data manipulation, let''s look at some simple operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Some so-called `dot` functions are quite handy and useful:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Anything after the number sign of `#` will be a comment. Arrays are another
    important data type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'We could assign a string to a variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'To find out all string-related functions, we use `dir('''')`; see the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, from the preceding list we see a function called `split`. After
    typing`help(''''.split)`, we will have related help information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'We could try the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Matrix manipulation is important when we deal with various matrices:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Data manipulation](img/B06175_01_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The condition for equation (3) is that matrices *A* and *B* should have the
    same dimensions. For the product of two matrices, we have the following equation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Data manipulation](img/B06175_01_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here,*A* is an *n* by *k* matrix (*n* rows and *k* columns), while *B* is a
    *k* by *m* matrix. Remember that the second dimension of the first matrix should
    be the same as the first dimension of the second matrix. In this case, it is *k*.
    If we assume that the individual data items in *C*, *A*, and *B* are *Ci,j* (the
    *ith* row and the *jth* column), *Ai,j*, and *Bi,j*, we have the following relationship
    between them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Data manipulation](img/B06175_01_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `dot()` function from the NumPy module could be used to carry the preceding
    matrix multiplication:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'We could manually calculate *c(1,1): 1*1 + 2*3 + 3*4=19*.'
  prefs: []
  type: TYPE_NORMAL
- en: After retrieving data or downloading data from the internet, we need to process
    it. Such a skill to process various types of raw data is vital to finance students
    and to professionals working in the finance industry. Here we will see how to
    download price data and then estimate returns.
  prefs: []
  type: TYPE_NORMAL
- en: 'Assume that we have *n* values of *x1*, *x2*, … and *xn*. There exist two types
    of means: arithmetic mean and geometric mean; see their genetic definitions here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Data manipulation](img/B06175_01_25.jpg)![Data manipulation](img/B06175_01_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Assume that there exist three values of `2`,`3`, and `4`. Their arithmetic
    and geometric means are calculated here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'For returns, the arithmetic mean''s definition remains the same, while the
    geometric mean of returns is defined differently; see the following equations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Data manipulation](img/B06175_01_27.jpg)![Data manipulation](img/B06175_01_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In [Chapter 3](ch03.html "Chapter 3. Time Value of Money"), *Time Value of Money*,
    we will discuss both means again.
  prefs: []
  type: TYPE_NORMAL
- en: 'We could say that NumPy is a basic module while SciPy is a more advanced one.
    NumPy tries to retain all features supported by either of its predecessors, while
    most new features belong in SciPy rather than NumPy. On the other hand, NumPy
    and SciPy have many overlapping features in terms of functions for finance. For
    those two types of definitions, see the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Our second example is related to processing theFama-French 3 factor time series.
    Since this example is more complex than the previous one, if a user feels it is
    difficult to understand, he/she could simply skip this example. First, a ZIP file
    called `F-F_Research_Data_Factor_TXT.zip` could be downloaded from Prof. French''s
    Data Library. After unzipping and removing the first few lines and annual datasets,
    we will have a monthly Fama-French factor time series. The first few lines and
    last few lines are shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Assume that the final file is called `ffMonthly.txt` under `c:/temp/`. The
    following program is used to retrieve and process the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'To view the first and last few observations for the dataset called `ff`, the
    functions of `.head()` and `.tail()`can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Data manipulation](img/B06175_01_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Data output
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The simplest example is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'For the next example, we download historical stock price data first, then write
    data to an output file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'To retrieve the file, we have the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'One issue is that the preceding saved text file contains many unnecessary characters,
    such as `[` and`]`. We could apply a substitution function called `sub()` contained
    in the Python module;see the simplest example given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, we will replace the letter `a` with`9`. Interested
    readers could try the following two lines of code for the preceding program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'It is a good idea to generate Python datasets with an extension of `.pickle`
    since we can retrieve such data quite efficiently. The following is the complete
    Python code to generate `ffMonthly.pickle`. Here, we show how to download price
    data and then estimate returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Where can you download and install Python?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Is Python case-sensitive?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you assign a set of values to *pv* in the format of a tuple. Could we
    change its values after the assignment?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Estimate the area of a circle if the diameter is 9.7 using Python.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you assign a value to a new variable?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you find some sample examples related to Python?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you launch Python's help function?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you find out more information about a specific function, such as `print()`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the definition of built-in functions?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Is `pow()` a built-in function? How do we use it?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we find all built-in functions? How many built-in functions are present?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When we estimate the square root of 3, which Python function should we use?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assume that the present value of a perpetuity is $124 and the annual cash flow
    is $50; what is the corresponding discount rate? The formula is given here:![Exercises](img/B06175_01_30.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Based on the solution of the previous question, what is the corresponding quarterly
    rate?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For a perpetuity, the same cash flow happens at the same interval forever.
    A growing perpetuity is defined as follows: the future cash flow is increased
    at a constant growth rate forever. If the first cash flow happens at the end of
    the first period, we have the following formula:![Exercises](img/B06175_01_31.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here *PV* is the present value, *C* is the cash flow of the next period, *g*
    is a growth rate, and *R* is the discount rate. If the first cash flow is $12.50,
    the constant growth rate is 2.5 percent, and the discount rate is 8.5 percent.
    What is the present value of this growing perpetuity?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For an *n*-day variance, we have the following formula:![Exercises](img/B06175_01_32.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here ![Exercises](img/B06175_01_36.jpg)is the daily variance and is ![Exercises](img/B06175_01_37.jpg)
    is the daily standard deviation (volatility). If the volatility (daily standard
    deviation) of a stock is 0.2, what is its 10-day volatility?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We expect to have $25,000 in 5 years. If the annual deposit rate is 4.5 percent,
    how much do we have to deposit today?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The substitution function called `sub()` is from a Python module. Find out how
    many functions are contained in that module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a Python program to convert the standard deviation estimated based on
    daily data or monthly data to an annual one by using the following formulas:![Exercises](img/B06175_01_33.jpg)![Exercises](img/B06175_01_34.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Sharpe ratio is a measure of trade-off between benefit (excess return) and
    cost (total risk) for an investment such as a portfolio. Write a Python program
    to estimate the Sharpe ratio by applying the following formula:![Exercises](img/B06175_01_35.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here ![Exercises](img/B06175_01_38.jpg) is the portfolio mean return, ![Exercises](img/B06175_01_39.jpg)
    is the mean risk-free rate and σ is the risk of the portfolio. Again, at this
    moment, it is perfectly fine that a reader does not understand the economic meaning
    of this ratio since the Sharpe ratio will be discussed in more detail in [Chapter
    7,](ch07.html "Chapter 7. Multifactor Models and Performance Measures") *Multifactor
    Models and Performance Measures*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, many basic concepts and several widely used functions related
    to Python werediscussed. In [Chapter 2](ch02.html "Chapter 2. Introduction to
    Python Modules"), *Introduction to Python Modules*, we will discuss a key component
    of the Python language: Python modules and theirrelated issues. A module is a
    set of programs written by experts, professionals, or any person around a specific
    topic. A module could be viewed as a toolbox for a specific task. The chapter
    willfocus on the five most important modules: NumPy, SciPy, `matplotlib`, `statsmodels`,
    and `pandas`.'
  prefs: []
  type: TYPE_NORMAL
