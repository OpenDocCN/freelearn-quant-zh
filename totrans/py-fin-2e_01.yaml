- en: Chapter 1. Python Basics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章：Python 基础
- en: In this chapter, we will discuss basic concepts and several widely used functions
    related to Python. This chapter plus the next one ([Chapter 2](ch02.html "Chapter 2. Introduction
    to Python Modules"), *Introduction to Python Modules*) are only the chapters exclusively
    based on Python techniques. Those two chapters serve as a review for readers who
    have some basic Python knowledge. There is no way that a beginner, with no prior
    Python knowledge, could master Python by reading just those two chapters. For
    a new learner who wants to learn Python in more detail, he/she could find many
    good books. From [Chapter 3](ch03.html "Chapter 3. Time Value of Money"), *Time
    Value of Money* onward, we will use Python, which will help in explaining or demonstrating
    various finance concepts, running regression, and processing data related to economics,
    finance, and accounting. Because of this, we will offer more Python-related techniques
    and usages in each of the upcoming chapters.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将讨论基本概念和一些与 Python 相关的广泛使用的函数。本章以及下一章（[第二章](ch02.html "第 2 章：Python 模块简介")，*Python
    模块简介*）是唯一完全基于 Python 技术的章节。这两章作为对有一定 Python 基础的读者的复习内容。没有任何 Python 基础的初学者，仅通过阅读这两章是不可能掌握
    Python 的。对于想要更详细学习 Python 的新手，他们可以找到许多优秀的书籍。从[第三章](ch03.html "第 3 章：货币时间价值")，*货币时间价值*开始，我们将使用
    Python 来解释或演示各种金融概念、运行回归分析以及处理与经济学、金融和会计相关的数据。因此，我们将在接下来的每一章中提供更多与 Python 相关的技术和使用方法。
- en: 'In particular, in this chapter, we will discuss the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章特别讨论以下主题：
- en: Python installation
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 安装
- en: Variable assignment, empty space, and writing our own programs
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量赋值、空格和编写我们自己的程序
- en: Writing a Python function
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写 Python 函数
- en: Data input
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据输入
- en: Data manipulation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据处理
- en: Data output
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据输出
- en: Python installation
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 安装
- en: 'In this section, we will discuss how to install Python. More specifically,
    we will discuss two methods: installing Python via Anaconda and installing Python
    directly.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将讨论如何安装 Python。更具体地说，我们将讨论两种方法：通过 Anaconda 安装 Python 和直接安装 Python。
- en: 'There are several reasons why the first method is preferred:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个原因说明为什么首选第一种方法：
- en: 'First, we can use a Python editor called Spyder, which is quite convenient
    for writing and editing our Python programs. For example, it has several windows
    (panels): one for the console, where we can type our commands directly; one for
    the program editor, where we can write and edit our programs; one for *Variable
    Explorer*,where we can view our variables and their values; and one for help,
    where we can seek help.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，我们可以使用一个名为 Spyder 的 Python 编辑器，它对于编写和编辑我们的 Python 程序非常方便。例如，它有几个窗口（面板）：一个用于控制台，我们可以在其中直接输入命令；一个用于程序编辑器，我们可以在其中编写和编辑我们的程序；一个用于
    *变量浏览器*，我们可以查看我们的变量及其值；还有一个用于帮助，我们可以在其中寻求帮助。
- en: Second, different colors for codes or comment lines will help us avoid some
    obvious typos and mistakes.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二，不同颜色的代码或注释行将帮助我们避免一些明显的拼写错误和失误。
- en: Third, when installing Anaconda, many modules are installed simultaneously.
    A module is a set of programs written by experts, professionals, or any person
    around a specific topic. It could be viewed as a toolbox for a specific task.
    To speed up the process of developing new tools, a new module usually depends
    on the functions embedded in other, already developed modules. This is called
    module dependency. One disadvantage of such a module dependency is how to install
    them at the same time. For more information about this, see [Chapter 2](ch02.html
    "Chapter 2. Introduction to Python Modules"), *Introduction to Python Modules*.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三，安装 Anaconda 时，许多模块会同时安装。模块是由专家、专业人士或任何围绕特定主题的人编写的一组程序。它可以看作是某个特定任务的工具箱。为了加速新工具的开发过程，一个新的模块通常依赖于其他已经开发的模块中的功能。这被称为模块依赖性。这样的模块依赖性有一个缺点，就是如何同时安装它们。有关更多信息，请参阅[第二章](ch02.html
    "第 2 章：Python 模块简介")，*Python 模块简介*。
- en: Installation of Python via Anaconda
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过 Anaconda 安装 Python
- en: We could install Python in several ways. The consequence is that we will have
    different environments for writing a Python program and running a Python program.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过几种方式安装 Python。结果是我们将有不同的环境来编写和运行 Python 程序。
- en: 'The following is a simple two-step approach. First, we go to [http://continuum.io/downloads](http://continuum.io/downloads)
    and find an appropriate package; see the following screenshot:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个简单的两步法。首先，我们访问[http://continuum.io/downloads](http://continuum.io/downloads)并找到合适的安装包；请参见以下截图：
- en: '![Installation of Python via Anaconda](img/B06175_01_01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![通过Anaconda安装Python](img/B06175_01_01.jpg)'
- en: For Python, different versions coexist. From the preceding screenshot, we see
    that there exist two versions, 3.5 and 2.7.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Python，不同版本共存。从前面的截图中，我们看到有两个版本，分别是3.5和2.7。
- en: For this book, the version is not that critical. The old version had fewer problems
    while the new one usually has new improvements. Again, module dependency could
    be a big headache; see [Chapter 2](ch02.html "Chapter 2. Introduction to Python
    Modules"), *Introduction to Python Modules* for more detail. The version of Anaconda
    is 4.2.0\. Since we will launch Python through Spyder, it might have different
    versions as well.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本书，版本并不是非常关键。旧版本问题较少，而新版本通常有新的改进。同样，模块依赖可能会成为一个大难题；详见[第2章](ch02.html "第2章
    Python模块简介")，*Python模块简介*，以获取更多信息。Anaconda的版本是4.2.0。由于我们将通过Spyder启动Python，因此它也可能有不同的版本。
- en: Launching Python via Spyder
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过Spyder启动Python
- en: 'After Python is installed via Anaconda, we can navigate to **Start** (for a
    Windows version) |**All Programs** |**Anaconda3(32-bit)**, as shown in the following
    screenshot:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通过Anaconda安装Python后，我们可以导航到**Start**（Windows版本）|**All Programs**|**Anaconda3(32-bit)**，如以下截图所示：
- en: '![Launching Python via Spyder](img/B06175_01_02.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![通过Spyder启动Python](img/B06175_01_02.jpg)'
- en: 'After we click **Spyder**, the last entry in the preceding screenshot, we will
    see the following four panels:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们点击**Spyder**，即前面截图中的最后一个条目后，下面将显示四个面板：
- en: '![Launching Python via Spyder](img/B06175_01_03.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![通过Spyder启动Python](img/B06175_01_03.jpg)'
- en: 'The top-left panel (window) is our program editor, where we write our programs.
    The bottom-right panel is the IPython console, where we cantype our simple commands.
    IPython is the default one. To know more about IPython, just type a question mark;
    see the following screenshot:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 左上方的面板（窗口）是我们的程序编辑器，在这里我们编写程序。右下方的面板是IPython控制台，我们可以在其中输入简单的命令。IPython是默认的控制台。要了解更多关于IPython的信息，只需输入一个问号；请参见以下截图：
- en: '![Launching Python via Spyder](img/B06175_01_04.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![通过Spyder启动Python](img/B06175_01_04.jpg)'
- en: 'Alternatively, we could launch Python console by clicking **Consoles** on the
    menu bar and then **Open a Python console**. After that, the following window
    will appear:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，我们可以通过点击菜单栏上的**Consoles**，然后选择**Open a Python console**来启动Python控制台。之后，以下窗口将出现：
- en: '![Launching Python via Spyder](img/B06175_01_05.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![通过Spyder启动Python](img/B06175_01_05.jpg)'
- en: From the image with four panels, the top-right panel is our help window, where
    we can seek help. The middle one is called *Variable Explorer*, where the names
    of variables and their values are shown. Depending on personal preference, users
    will scale those panels or reorganize them.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在四个面板的图像中，右上方的面板是我们的帮助窗口，在这里我们可以寻求帮助。中间的面板称为*变量浏览器*，其中显示了变量的名称及其值。根据个人喜好，用户可以调整这些面板的大小或重新组织它们。
- en: Direct installation of Python
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 直接安装Python
- en: For most users, knowing how to install Python via Anaconda is more than enough.
    Just for completeness, here the second way to install Python is presented.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数用户来说，了解如何通过Anaconda安装Python已经足够了。为了完整性，下面展示了安装Python的第二种方式。
- en: 'The following steps are involved:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是涉及的步骤：
- en: First, go to [www.python.org/download](http://www.python.org/download):![Direct
    installation of Python](img/B06175_01_06.jpg)
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，访问[www.python.org/download](http://www.python.org/download)：![直接安装Python](img/B06175_01_06.jpg)
- en: Depending on your computer, choose the appropriate package, for example, Python
    version 3.5.2\. For this book, the version of Python is not important. At this
    stage, a new user could just install Python with the latest version. After installation,
    we will see the following entries for a Windows version:![Direct installation
    of Python](img/B06175_01_07.jpg)
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据你的电脑选择合适的安装包，例如Python版本3.5.2。对于本书而言，Python的版本并不重要。在这个阶段，新的用户可以直接安装最新版本的Python。安装后，我们将看到以下Windows版本的条目：![直接安装Python](img/B06175_01_07.jpg)
- en: To launch Python, we could click `IDLE (Python 3.5\. 32 bit)` and get to see
    the following screen:![Direct installation of Python](img/B06175_01_08.jpg)
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要启动Python，我们可以点击`IDLE (Python 3.5\. 32 bit)`并看到以下界面：![直接安装Python](img/B06175_01_08.jpg)
- en: 'From the IPython shown in the screenshot with four panels, or from the Python
    console panel or from the previous screenshot showing Python Shell, we could type
    various commands, as shown here:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从截图中显示的四个面板中的IPython，或者从Python控制台面板，或从之前显示Python Shell的截图中，我们可以输入各种命令，如下所示：
- en: '[PRE0]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: To write a Python program, we click **File**, then **New File**:![Direct installation
    of Python](img/B06175_01_09.jpg)
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要编写一个Python程序，我们点击**文件**，然后点击**新建文件**：![直接安装Python](img/B06175_01_09.jpg)
- en: Type this program and then save it:![Direct installation of Python](img/B06175_01_10.jpg)
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入这个程序并保存：![直接安装Python](img/B06175_01_10.jpg)
- en: Click **Run**, then **Run module**. If no error occurs, we can use the function
    just like other embedded functions, as shown here:![Direct installation of Python](img/B06175_01_11.jpg)
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**运行**，然后点击**运行模块**。如果没有错误发生，我们就可以像使用其他内置函数一样使用该函数，如下所示：![直接安装Python](img/B06175_01_11.jpg)
- en: Variable assignment, empty space, and writing our own programs
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变量赋值、空格和编写我们自己的程序
- en: 'First, for Python language, an empty space or spaces is very important. For
    example, if we accidently have a space before typing `pv=100`, we will see the
    following error message:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，对于Python语言，空格或空格非常重要。例如，如果我们在输入`pv=100`之前不小心多了一个空格，我们将看到如下错误信息：
- en: '![Variable assignment, empty space, and writing our own programs](img/B06175_01_12.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![变量赋值、空格和编写我们自己的程序](img/B06175_01_12.jpg)'
- en: The name of the error is called `IndentationError`. The reason is that, for
    Python, indentation is important. Later in the chapter, we will learn that a proper
    indentation will regulate/define how we write a function or why a group of codes
    belongs to a specific topic, function, or loop.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 错误的名称是`IndentationError`。原因是，对于Python来说，缩进非常重要。在本章稍后的内容中，我们将学习如何通过适当的缩进来规范/定义我们编写的函数，或者为何一组代码属于特定的主题、函数或循环。
- en: 'Assume that we deposit $100 in the bank today. What will be the value 3 years
    later if the bank offers us an annual deposit rate of 1.5%? The related codes
    is shown here:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们今天在银行存入100美元。如果银行提供我们年存款利率1.5%，那么3年后的价值是多少？相关代码如下所示：
- en: '[PRE1]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the preceding codes, `**` means a power function. For example, `2**3` has
    a value of `8`. To view the value of a variable, we simply type its name; see
    the previous example. The formula used is given here:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，`**`表示幂运算。例如，`2**3`的值是`8`。要查看变量的值，我们只需输入变量名；请参见前面的例子。使用的公式如下所示：
- en: '![Variable assignment, empty space, and writing our own programs](img/B06175_01_13.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![变量赋值、空格和编写我们自己的程序](img/B06175_01_13.jpg)'
- en: Here, *FV* is the future value, *PV* is the present value, *R* is the period
    deposit rate while *n* is the number of periods. In this case, *R* is the annual
    rate of *0.015* while *n* is *3*. At the moment, readers should focus on simple
    Python concepts and operations.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，*FV*是未来值，*PV*是现值，*R*是周期存款利率，而*n*是周期数。在这个例子中，*R*是年利率*0.015*，而*n*是*3*。此时，读者应该专注于简单的Python概念和操作。
- en: 'In [Chapter 3](ch03.html "Chapter 3. Time Value of Money"), *Time Value of
    Money*, this formula will be explained in detail. Since Python is case-sensitive,
    an error message will pop up if we type `PV` instead of `pv`; see the following
    code:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](ch03.html "第3章 时间价值")中，*时间价值*，该公式将详细解释。由于Python是区分大小写的，如果我们输入`PV`而不是`pv`，就会弹出错误信息；请参见以下代码：
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Unlike some languages, such as C and FORTRAN, for Python a new variable does
    not need to be defined before a value is assigned to it. To show all variables
    or function, we use the `dir()` function:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 与一些语言（如C和FORTRAN）不同，Python中变量不需要在赋值之前定义。要显示所有变量或函数，我们使用`dir()`函数：
- en: '[PRE3]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To find out all built-in functions, we type `dir(__builtings__)`. The output
    is shown here:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看所有内置函数，我们输入`dir(__builtings__)`。输出如下所示：
- en: '![Variable assignment, empty space, and writing our own programs](img/B06175_01_14.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![变量赋值、空格和编写我们自己的程序](img/B06175_01_14.jpg)'
- en: Writing a Python function
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写一个Python函数
- en: Assume that we are interested in writing a Python function for equation (1).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有兴趣为方程式（1）编写一个Python函数。
- en: After launching Spyder, click **File**, then **New File**. We write the following
    two lines, as shown in the left panel. The keyword `def` is for function,`fv_f`
    is the function name, and the three values of `pv`, `r` , and `n` in the pair
    of parentheses are input variables.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 启动Spyder后，点击**文件**，然后点击**新建文件**。我们编写以下两行代码，如左侧面板所示。关键字`def`表示函数，`fv_f`是函数名称，括号中的三个值`pv`、`r`和`n`是输入变量。
- en: The colon (`:`) indicates the function hasn't finished yet. After we hit the
    *Enter* key, the next line will be automatically indented.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 冒号（`:`）表示函数尚未结束。当我们按下 *Enter* 键时，下一行将自动缩进。
- en: After we enter return `pv*(1+r)**n` and hit the *Enter* key twice, this simple
    program is completed. Obviously, for the second line, `**` represents a power
    function.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们输入 `return pv*(1+r)**n` 并按下 *Enter* 键两次时，这个简单的程序就完成了。显然，在第二行中，`**` 代表了一个幂运算。
- en: 'Assume that we save it under `c:/temp/temp.py`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们将其保存为 `c:/temp/temp.py`：
- en: '![Writing a Python function](img/B06175_01_15.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![编写 Python 函数](img/B06175_01_15.jpg)'
- en: 'To run or debug the program, click the arrow key under **Run** on the menu
    bar; see the preceding top-right image. The compiling result is shown by the bottom
    image right (the second image on top right). Now, we can use this function easily
    by calling it with three input values:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行或调试程序，请点击菜单栏下方 **Run** 旁的箭头键；见前面的右上方图像。编译结果由右下方的图像显示（右上方第二张图）。现在，我们可以通过传入三个输入值轻松调用这个函数：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If some comments are added by explaining the meanings of input variables, the
    formula used, plus a few examples, it will be extremely helpful for other users
    or programmers. Check the following program with comments:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在程序中添加一些注释，解释输入变量的含义、使用的公式以及一些示例，将对其他用户或程序员非常有帮助。请查看以下带注释的程序：
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The comments or explanations are included in a pair of three double quotation
    marks (`"""` and `"""`). The indentation within a comment is not consequential.
    When compiling, the underlying software will ignore all comments. The beauty of
    those comments is that we can use `help(pv_f)` to see them, as illustrated here:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 注释或解释内容包含在一对三重双引号中（`"""` 和 `"""`）。注释中的缩进不重要。在编译时，底层软件会忽略所有注释。这些注释的美妙之处在于，我们可以通过
    `help(pv_f)` 查看它们，如下所示：
- en: '![Writing a Python function](img/B06175_01_16.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![编写 Python 函数](img/B06175_01_16.jpg)'
- en: In [Chapter 2](ch02.html "Chapter 2. Introduction to Python Modules"), *Introduction
    to Python Modules*, we will show how to upload a financial calculator written
    in Python, and in [Chapter 3](ch03.html "Chapter 3. Time Value of Money"), *Time
    Value of Money*, we will explain how to generate such a financial calculator.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第 2 章](ch02.html "第 2 章：Python 模块介绍")，*Python 模块介绍* 中，我们将展示如何上传用 Python 编写的金融计算器；在
    [第 3 章](ch03.html "第 3 章：货币的时间价值")，*货币的时间价值* 中，我们将解释如何生成这样的金融计算器。
- en: Python loops
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 循环
- en: 'In this section, we discuss a very important concept: loop or loops. A loop
    is used to repeat the same task with slightly different input or other factors.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论一个非常重要的概念：循环。循环用于重复执行相同的任务，只是输入或其他因素略有不同。
- en: Python loops, if...else conditions
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 循环，if...else 条件
- en: 'Let''s look at a simple loop through all the data items in an array:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个简单的循环，遍历数组中的所有数据项：
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: One type of data is called a tuple, where we use a pair of parentheses, `()`,
    to include all input values. One feature of a tuple variable is that we cannot
    modify its value. This special property could be valuable if some our variables
    should never be changed.A tuple is different from a dictionary, which stores data
    with key-value pairs. It is not ordered and it requires that the keys are hashable.
    Unlike a tuple, the value for a dictionary can be modified.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一种数据类型叫做元组，我们使用一对圆括号 `()` 来包含所有输入值。元组变量的一个特点是我们不能修改它的值。如果有些变量永远不应该被修改，这个特殊的属性可能非常有用。元组与字典不同，字典通过键值对存储数据。字典是无序的，并且要求键是可哈希的。与元组不同，字典的值是可以修改的。
- en: 'Note that for Python, the subscription for a vector or tuple starts from `0`.
    If `x` has a length of `3`, the subscriptions will be `0`, `1` and `2`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，对于 Python，向量或元组的下标是从 `0` 开始的。如果 `x` 的长度为 `3`，那么下标将是 `0`、`1` 和 `2`：
- en: '[PRE7]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Assuming that we invest $100 today and $30 next year, the future cash inflow
    will be $10, $40, $50, $45, and $20 at the end of each year for the next 5 years,
    starting at the end of the second year; see the following timeline and its corresponding
    cash flows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们今天投资 $100，并且明年再投资 $30，那么未来 5 年每年年末的现金流入将分别是 $10、$40、$50、$45 和 $20，从第二年年末开始；见下方的时间轴及其对应的现金流：
- en: '[PRE8]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'What is the **Net Present Value** (**NPV**) if the discount rate is 3.5%? NPVis
    defined as the present values of all benefits minus the present values of all
    costs. If a cash inflow has a positive sign while a cash outflow has a negative
    sign, then NPV can be defined conveniently as the summation of the present values
    of all cash flows. The present value of one future value is estimated by applying
    the following formula:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果折现率为 3.5%，**净现值**（**NPV**）是多少？NPV 定义为所有收益的现值减去所有成本的现值。如果现金流入为正，现金流出为负，那么 NPV
    可以方便地定义为所有现金流现值的总和。一个未来价值的现值是通过应用以下公式估算的：
- en: '![Python loops, if...else conditions](img/B06175_01_17.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![Python 循环，if...else 条件](img/B06175_01_17.jpg)'
- en: 'Here,*PV* is the present value, *FV* is the future value,*R* is the period
    discount rate and *n* is the number of periods. In [Chapter 3](ch03.html "Chapter 3. Time
    Value of Money"), *Time Value of Money*, the meaning of this formula will be explained
    in more detail. At the moment, we just want to write an`npv_f()` function which
    applies the preceding equation *n* times, where n is the number of cash flows.
    The complete NPV program is given here:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，*PV* 是现值，*FV* 是未来值，*R* 是期间折现率，*n* 是期数。在[第 3 章](ch03.html "第 3 章. 货币的时间价值")，*货币的时间价值*中，我们将更详细地解释这个公式的意义。目前，我们只想编写一个`npv_f()`函数，应用上述公式*n*
    次，其中n是现金流的数量。完整的 NPV 程序如下所示：
- en: '[PRE9]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the program, we used a `for` loop. Again, the correct indentation is important
    for Python. Lines from 2 to 5 are all indented by one unit, thus they belong to
    the same function, called `npv_f`. Similarly, line 4 is indented two units, that
    is, after the second column (`:`), it belongs to the `for`loop. The command of
    `total +=a` is equivalent to `total=total +a`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在程序中，我们使用了`for`循环。同样，Python 中正确的缩进非常重要。第 2 到第 5 行都缩进了一个单位，因此它们属于同一个函数，名为`npv_f`。类似地，第
    4 行缩进了两个单位，也就是在第二个冒号（`:`）后，它属于`for`循环。`total +=a` 命令等价于 `total=total +a`。
- en: 'For the NPV function, we use a `for` loop. Note that the subscription of a
    vector in Python starts from zero, and the intermediate variable `i` starts from
    zero as well. We could call this function easily by entering two sets of input
    values. The output is shown here:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 NPV 函数，我们使用`for`循环。注意，Python 中向量的索引从零开始，临时变量`i`也从零开始。我们可以通过输入两组值来轻松调用此函数。输出如下所示：
- en: '[PRE10]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here is another `npv_f()` function with a function called `enumerate()`. This
    function willgenerate a pair of indices, starting from`0`, and its corresponding
    value:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个带有`enumerate()`函数的`npv_f()`函数。这个函数将生成一对索引，从`0`开始，并返回其对应的值：
- en: '[PRE11]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here is an example illustrating the usage of `enumerate()`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个使用`enumerate()`的例子：
- en: '[PRE12]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Unlike the `npv_f` function specified previously, the NPV function from Microsoft
    Excel is actually a `PV` function, meaning that it can be applied only to the
    future values. Its equivalent Python program, which is called `npv_Excel`, is
    shown here:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前指定的`npv_f`函数不同，Microsoft Excel 中的 NPV 函数实际上是一个 `PV` 函数，这意味着它只能应用于未来值。其等效的
    Python 程序，称为 `npv_Excel`，如下所示：
- en: '[PRE13]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The comparisons are shown in the following table. The result from the Python
    program is shown in the left panel while the result by calling the Excel NPV function
    is shown in the right panel. Please pay enough attention to the preceding program
    shown itself and how to call such a function:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 比较结果如下表所示。左侧面板显示了 Python 程序的结果，右侧面板显示了调用 Excel NPV 函数的结果。请特别注意前面的程序以及如何调用这样的函数：
- en: '![Python loops, if...else conditions](img/B06175_01_18.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![Python 循环，if...else 条件](img/B06175_01_18.jpg)'
- en: 'By using a loop, we can repeat the same task with different inputs. For example,
    we plan to print a set of values. The following is such an example for a `while`
    loop:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用循环，我们可以用不同的输入重复相同的任务。例如，我们计划打印一组值。以下是一个`while`循环的例子：
- en: '[PRE14]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The following program will report a discount (or any number of discount rates),
    making its corresponding NPV equal zero. Assume the cash flow will be `550`, `-500`,
    `-500`, `-500`, and `1000` at time `0`, at the end of each year of the next 4
    years. In [Chapter 3](ch03.html "Chapter 3. Time Value of Money"), *Time Value
    of Money*, we will explain the concept of this exercise in more detail.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 以下程序将报告一个折现率（或多个折现率），使其相应的 NPV 等于零。假设现金流分别为 `550`、`-500`、`-500`、`-500` 和 `1000`，时间点为
    `0`，并且接下来 4 年每年的年末。有关此练习的概念，我们将在[第 3 章](ch03.html "第 3 章. 货币的时间价值")中进一步解释。
- en: 'Write a Python program to find out which discount rate makes NPV equal zero.
    Since the direction of cash flows changes twice, we might have two different rates
    making NPV equal zero:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个Python程序，找出哪个折扣率使得NPV等于零。由于现金流的方向变化两次，我们可能有两个不同的折扣率使得NPV为零：
- en: '[PRE15]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The corresponding output is given here:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 相应的输出如下：
- en: '[PRE16]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Later in the chapter, a `for`loop is used to estimate the NPV of a project.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章后面，将使用`for`循环来估算一个项目的NPV。
- en: 'When we need to use a few math functions, we can import the `math` module first:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要使用一些数学函数时，可以先导入`math`模块：
- en: '[PRE17]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The `sqrt()`, square root, function is contained in the `math` module. Thus,
    to use the `sqrt()` function, we need to use `math.sqrt()`; see the following
    code:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`sqrt()`平方根函数包含在`math`模块中。因此，要使用`sqrt()`函数，我们需要使用`math.sqrt()`；请参见以下代码：'
- en: '[PRE18]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If we want to call those functions directly, we can use `from math import *`;
    see the following code:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们希望直接调用这些函数，可以使用`from math import *`；请参见以下代码：
- en: '[PRE19]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'To learn about individual embedded functions, we can use the`help()` function;see
    the following code:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解各个嵌入函数，我们可以使用`help()`函数；请参见以下代码：
- en: '[PRE20]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Data input
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据输入
- en: 'Let''s generate a very simple input dataset first, as shown here. Its name
    and location is `c:/temp/test.txt`. The format of the dataset is text:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们生成一个非常简单的输入数据集，如下所示。它的名称和位置为`c:/temp/test.txt`。数据集的格式是文本：
- en: '[PRE21]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The code is shown here:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 代码如下：
- en: '[PRE22]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The `print()` function could be used to show the value of `x`:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`print()`函数来显示`x`的值：
- en: '[PRE23]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'For the second example, let''s download the daily historical price for IBM
    from **Yahoo!Finance** first. To do so, we visit [http://finance.yahoo.com](http://finance.yahoo.com):'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第二个示例，首先让我们从**Yahoo!Finance**下载IBM的每日历史价格数据。为此，我们访问[http://finance.yahoo.com](http://finance.yahoo.com)：
- en: '![Data input](img/B06175_01_19.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![数据输入](img/B06175_01_19.jpg)'
- en: 'Enter `IBM` to find its related web page. Then click **Historical Data**, then
    click **Download**:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 输入`IBM`以找到其相关网页。然后点击**历史数据**，再点击**下载**：
- en: '![Data input](img/B06175_01_20.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![数据输入](img/B06175_01_20.jpg)'
- en: 'Assume that we save the daily data as `ibm.csv` under `c:/temp/`. The first
    five lines are shown here:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们将每日数据保存为`ibm.csv`，并放在`c:/temp/`目录下。前五行如下所示：
- en: '[PRE24]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The first line shows the variable names: date, open price, high price achieved
    during the trading day, low price achieved during the trading day, close price
    of the last transaction during the trading day, trading volume, and adjusted price
    for the trading day. The delimiter is a comma. There are several ways of loading
    the text file. Some methods are discussed here:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行显示了变量名：日期、开盘价、交易日内的最高价、交易日内的最低价、交易日内最后一次交易的收盘价、交易量和交易日的调整价格。分隔符是逗号。加载文本文件有几种方法，这里讨论了一些方法：
- en: '**Method I**: We could use `read_csv` from the `pandas` module:'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**方法一**：我们可以使用`pandas`模块中的`read_csv`：'
- en: '[PRE25]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '**Method II**: We could use `read_table` from the `pandas` module; see the
    following code:'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**方法二**：我们可以使用`pandas`模块中的`read_table`；请参见以下代码：'
- en: '[PRE26]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Alternatively, we could download the IBM daily price data directly from Yahoo!Finance;
    see the following code:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，我们可以直接从Yahoo!Finance下载IBM的每日价格数据；请参见以下代码：
- en: '[PRE27]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We could retrieve data from an Excel file by using the `ExcelFile()` function
    from the`pandas` module. First, we generate an Excel file with just a few observations;
    see the following screenshot:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用`pandas`模块中的`ExcelFile()`函数从Excel文件中检索数据。首先，我们生成一个包含少量观测值的Excel文件；请参见以下截图：
- en: '![Data input](img/B06175_01_21.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![数据输入](img/B06175_01_21.jpg)'
- en: 'Let''s call this Excel file `stockReturns.xlxs` and assume that it is saved
    under `c:/temp/`. The Python code is given here:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们将此Excel文件命名为`stockReturns.xlxs`，并保存到`c:/temp/`。Python代码如下：
- en: '[PRE28]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: To retrieve Python datasets with an extension of `.pkl` or `.pickle`, we can
    use the following code. First, we download the Python dataset called `ffMonthly.pkl`
    from the author's web page at [http://www3.canisius.edu/~yany/python/ffMonthly.pkl](http://www3.canisius.edu/~yany/python/ffMonthly.pkl).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 要检索扩展名为`.pkl`或`.pickle`的Python数据集，我们可以使用以下代码。首先，我们从作者的网页[http://www3.canisius.edu/~yany/python/ffMonthly.pkl](http://www3.canisius.edu/~yany/python/ffMonthly.pkl)下载名为`ffMonthly.pkl`的Python数据集。
- en: 'Assume that the dataset is saved under `c:/temp/`. The function called `read_pickle()`
    included in the `pandas` module can be used to load the dataset with an extension
    of `.pkl` or `.pickle`:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 假设数据集保存在`c:/temp/`目录下。可以使用`pandas`模块中名为`read_pickle()`的函数加载扩展名为`.pkl`或`.pickle`的数据集：
- en: '[PRE29]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The following is the simplest `if` function: when our interest rate is negative,
    print a warning message:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是最简单的 `if` 函数：当我们的利率为负时，打印一个警告信息：
- en: '[PRE30]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Conditions related to logical `AND` and `OR` are shown here:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 与逻辑 `AND` 和 `OR` 相关的条件如下所示：
- en: '[PRE31]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'For the multiple `if...elif` conditions, the following program illustrates
    its application by converting a number grade to a letter grade:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 对于多个 `if...elif` 条件，以下程序通过将数字等级转换为字母等级来说明其应用：
- en: '[PRE32]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Note that it is a good idea for such multiple `if...elif` functions to end with
    an `else` condition since we know exactly what the result is if none of those
    conditions are met.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，对于这种多重 `if...elif` 函数，最好以 `else` 条件结尾，因为如果没有满足这些条件，我们确切知道结果是什么。
- en: Data manipulation
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据操作
- en: 'There are many different types of data, such as integer, real number, or string.
    The following table offers a list of those data types:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 数据有很多不同的类型，比如整数、实数或字符串。以下表格列出了这些数据类型：
- en: '| Data types | Description |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| 数据类型 | 描述 |'
- en: '| --- | --- |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `Bool` | Boolean (`TRUE` or `FALSE`) stored as a byte |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| `Bool` | 布尔值（`TRUE` 或 `FALSE`）以字节存储 |'
- en: '| `Int` | Platform integer (normally either `int32` or `int64`) |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| `Int` | 平台整数（通常为 `int32` 或 `int64`） |'
- en: '| `int8` | Byte (`-128` to `127`) |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| `int8` | 字节（`-128` 到 `127`） |'
- en: '| `int16` | Integer (`-32768` to `32767`) |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| `int16` | 整数（`-32768` 到 `32767`） |'
- en: '| `int32` | Integer (`-2147483648` to `2147483647`) |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| `int32` | 整数（`-2147483648` 到 `2147483647`） |'
- en: '| `int64` | Integer (`9223372036854775808` to `9223372036854775807`) |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| `int64` | 整数（`9223372036854775808` 到 `9223372036854775807`） |'
- en: '| `unit8` | Unsigned integer (`0` to `255`) |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| `unit8` | 无符号整数（`0` 到 `255`） |'
- en: '| `unit16` | Unsigned integer (`0` to `65535`) |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| `unit16` | 无符号整数（`0` 到 `65535`） |'
- en: '| `unit32` | Unsigned integer (`0` to `4294967295`) |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| `unit32` | 无符号整数（`0` 到 `4294967295`） |'
- en: '| `unit64` | Unsigned integer (`0` to `18446744073709551615`) |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| `unit64` | 无符号整数（`0` 到 `18446744073709551615`） |'
- en: '| `float` | Short and for `float6` |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| `float` | 短浮点数，用于 `float6` |'
- en: '| `float32` | Single precision float: sign `bit23` bits mantissa; 8 bits exponent
    |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| `float32` | 单精度浮点数：符号位 `bit23` 位尾数；8位指数 |'
- en: '| `float64` | 52 bits mantissa |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| `float64` | 52位尾数 |'
- en: '| `complex` | Shorthand for `complex128` |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| `complex` | `complex128` 的简写 |'
- en: '| `complex64` | Complex number; represented by two 32-bit floats (real and
    imaginary components) |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| `complex64` | 复数；由两个32位浮点数表示（实部和虚部） |'
- en: '| `complex128` | Complex number; represented by two 64-bit floats (real and
    imaginary components) |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| `complex128` | 复数；由两个64位浮点数表示（实部和虚部） |'
- en: Table 1.1 List of different data types
  id: totrans-166
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 表1.1 不同数据类型的列表
- en: 'In the following examples, we assign a value to `r`, which is a scalar, and
    several values to `pv`, which is an array (vector).The `type()` function is used
    to show their types:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们将一个标量值赋给 `r`，并将多个值赋给 `pv`，它是一个数组（向量）。`type()` 函数用于显示它们的类型：
- en: '[PRE33]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'To choose the appropriate decision, we use the `round()`function; see the following
    example:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 为了选择合适的决策，我们使用 `round()` 函数；见以下示例：
- en: '[PRE34]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'For data manipulation, let''s look at some simple operations:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 对于数据操作，我们来看一些简单的操作：
- en: '[PRE35]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Some so-called `dot` functions are quite handy and useful:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 一些所谓的 `dot` 函数非常方便和有用：
- en: '[PRE36]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Anything after the number sign of `#` will be a comment. Arrays are another
    important data type:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 任何在 `#` 符号后面的内容都是注释。数组是另一种重要的数据类型：
- en: '[PRE37]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'We could assign a string to a variable:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将字符串赋值给变量：
- en: '[PRE38]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'To find out all string-related functions, we use `dir('''')`; see the following
    code:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 为了找出所有与字符串相关的函数，我们使用 `dir('')`；见以下代码：
- en: '[PRE39]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'For example, from the preceding list we see a function called `split`. After
    typing`help(''''.split)`, we will have related help information:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，从前面的列表中，我们看到一个名为 `split` 的函数。输入 `help(''.split)` 后，我们将得到相关的帮助信息：
- en: '[PRE40]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'We could try the following example:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以尝试以下示例：
- en: '[PRE41]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Matrix manipulation is important when we deal with various matrices:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 矩阵操作在我们处理各种矩阵时非常重要：
- en: '![Data manipulation](img/B06175_01_22.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![数据操作](img/B06175_01_22.jpg)'
- en: 'The condition for equation (3) is that matrices *A* and *B* should have the
    same dimensions. For the product of two matrices, we have the following equation:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 方程（3）的条件是矩阵 *A* 和 *B* 应该有相同的维度。对于两个矩阵的乘积，我们有以下方程：
- en: '![Data manipulation](img/B06175_01_23.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![数据操作](img/B06175_01_23.jpg)'
- en: 'Here,*A* is an *n* by *k* matrix (*n* rows and *k* columns), while *B* is a
    *k* by *m* matrix. Remember that the second dimension of the first matrix should
    be the same as the first dimension of the second matrix. In this case, it is *k*.
    If we assume that the individual data items in *C*, *A*, and *B* are *Ci,j* (the
    *ith* row and the *jth* column), *Ai,j*, and *Bi,j*, we have the following relationship
    between them:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，*A* 是一个 *n* 行 *k* 列的矩阵（*n* 行和 *k* 列），而 *B* 是一个 *k* 行 *m* 列的矩阵。记住，第一个矩阵的第二维度应该与第二个矩阵的第一维度相同。在这种情况下，它是
    *k*。如果我们假设 *C*、*A* 和 *B* 中的各个数据项分别为 *Ci,j*（第 *i* 行和第 *j* 列）、*Ai,j* 和 *Bi,j*，我们可以得到它们之间的关系：
- en: '![Data manipulation](img/B06175_01_24.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![数据处理](img/B06175_01_24.jpg)'
- en: 'The `dot()` function from the NumPy module could be used to carry the preceding
    matrix multiplication:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 NumPy 模块中的 `dot()` 函数进行上述矩阵乘法：
- en: '[PRE42]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'We could manually calculate *c(1,1): 1*1 + 2*3 + 3*4=19*.'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '我们可以手动计算 *c(1,1): 1*1 + 2*3 + 3*4=19*。'
- en: After retrieving data or downloading data from the internet, we need to process
    it. Such a skill to process various types of raw data is vital to finance students
    and to professionals working in the finance industry. Here we will see how to
    download price data and then estimate returns.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在获取数据或从互联网下载数据后，我们需要处理这些数据。这种处理各种类型原始数据的技能对于金融学学生和从事金融行业的专业人士来说至关重要。这里我们将展示如何下载价格数据并估算收益率。
- en: 'Assume that we have *n* values of *x1*, *x2*, … and *xn*. There exist two types
    of means: arithmetic mean and geometric mean; see their genetic definitions here:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有 *n* 个 *x1*、*x2*、… 和 *xn* 的值。存在两种类型的均值：算术均值和几何均值；请参阅它们的基因定义：
- en: '![Data manipulation](img/B06175_01_25.jpg)![Data manipulation](img/B06175_01_26.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![数据处理](img/B06175_01_25.jpg)![数据处理](img/B06175_01_26.jpg)'
- en: 'Assume that there exist three values of `2`,`3`, and `4`. Their arithmetic
    and geometric means are calculated here:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 假设存在三个值 `2`、`3` 和 `4`。它们的算术均值和几何均值在此计算：
- en: '[PRE43]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'For returns, the arithmetic mean''s definition remains the same, while the
    geometric mean of returns is defined differently; see the following equations:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 对于收益率，算术平均数的定义保持不变，而几何平均数的定义则不同；请参阅以下公式：
- en: '![Data manipulation](img/B06175_01_27.jpg)![Data manipulation](img/B06175_01_28.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![数据处理](img/B06175_01_27.jpg)![数据处理](img/B06175_01_28.jpg)'
- en: In [Chapter 3](ch03.html "Chapter 3. Time Value of Money"), *Time Value of Money*,
    we will discuss both means again.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 3 章](ch03.html "第 3 章. 货币的时间价值")中，我们将再次讨论这两种均值。
- en: 'We could say that NumPy is a basic module while SciPy is a more advanced one.
    NumPy tries to retain all features supported by either of its predecessors, while
    most new features belong in SciPy rather than NumPy. On the other hand, NumPy
    and SciPy have many overlapping features in terms of functions for finance. For
    those two types of definitions, see the following example:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以说，NumPy 是一个基础模块，而 SciPy 是一个更高级的模块。NumPy 尝试保留其前辈所支持的所有特性，而大多数新特性属于 SciPy，而不是
    NumPy。另一方面，NumPy 和 SciPy 在金融功能方面有许多重叠的特性。关于这两种定义，请参阅以下示例：
- en: '[PRE44]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Our second example is related to processing theFama-French 3 factor time series.
    Since this example is more complex than the previous one, if a user feels it is
    difficult to understand, he/she could simply skip this example. First, a ZIP file
    called `F-F_Research_Data_Factor_TXT.zip` could be downloaded from Prof. French''s
    Data Library. After unzipping and removing the first few lines and annual datasets,
    we will have a monthly Fama-French factor time series. The first few lines and
    last few lines are shown here:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第二个示例与处理 Fama-French 三因子时间序列相关。由于此示例比前一个更复杂，如果用户觉得难以理解，可以简单跳过此示例。首先，可以从 French
    教授的数据库下载名为 `F-F_Research_Data_Factor_TXT.zip` 的 ZIP 文件。解压后，去除前几行和年度数据集，我们将得到一个月度的
    Fama-French 因子时间序列。这里展示了前几行和后几行：
- en: '[PRE45]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Assume that the final file is called `ffMonthly.txt` under `c:/temp/`. The
    following program is used to retrieve and process the data:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 假设最终文件名为 `ffMonthly.txt`，位于 `c:/temp/` 目录下。以下程序用于检索和处理数据：
- en: '[PRE46]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'To view the first and last few observations for the dataset called `ff`, the
    functions of `.head()` and `.tail()`can be used:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看名为 `ff` 的数据集的前几行和后几行观察值，可以使用 `.head()` 和 `.tail()` 函数：
- en: '![Data manipulation](img/B06175_01_29.jpg)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![数据处理](img/B06175_01_29.jpg)'
- en: Data output
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据输出
- en: 'The simplest example is given here:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的示例如下：
- en: '[PRE47]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'For the next example, we download historical stock price data first, then write
    data to an output file:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 对于下一个示例，我们首先下载历史股票价格数据，然后将数据写入输出文件：
- en: '[PRE48]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'To retrieve the file, we have the following code:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检索文件，我们有以下代码：
- en: '[PRE49]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'One issue is that the preceding saved text file contains many unnecessary characters,
    such as `[` and`]`. We could apply a substitution function called `sub()` contained
    in the Python module;see the simplest example given here:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 一个问题是，前面保存的文本文件包含了许多不必要的字符，比如 `[` 和 `]`。我们可以应用一个名为 `sub()` 的替换函数，它包含在 Python
    模块中；请参见这里给出的最简单示例：
- en: '[PRE50]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'In the preceding example, we will replace the letter `a` with`9`. Interested
    readers could try the following two lines of code for the preceding program:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们将字母 `a` 替换为 `9`。感兴趣的读者可以尝试以下两行代码来运行前面的程序：
- en: '[PRE51]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'It is a good idea to generate Python datasets with an extension of `.pickle`
    since we can retrieve such data quite efficiently. The following is the complete
    Python code to generate `ffMonthly.pickle`. Here, we show how to download price
    data and then estimate returns:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 使用扩展名 `.pickle` 生成 Python 数据集是一个好主意，因为我们可以高效地检索此类数据。以下是生成 `ffMonthly.pickle`
    的完整 Python 代码。在这里，我们展示了如何下载价格数据并估算收益：
- en: '[PRE52]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Exercises
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: Where can you download and install Python?
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以在哪里下载并安装 Python？
- en: Is Python case-sensitive?
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Python 是否区分大小写？
- en: How do you assign a set of values to *pv* in the format of a tuple. Could we
    change its values after the assignment?
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何将一组值以元组的形式赋值给 *pv*？在赋值之后，我们可以更改其值吗？
- en: Estimate the area of a circle if the diameter is 9.7 using Python.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果直径为 9.7，使用 Python 估算圆的面积。
- en: How do you assign a value to a new variable?
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何为一个新变量赋值？
- en: How can you find some sample examples related to Python?
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何找到与 Python 相关的一些示例代码？
- en: How do you launch Python's help function?
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何启动 Python 的帮助函数？
- en: How can you find out more information about a specific function, such as `print()`?
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何获得更多关于某个特定函数的信息，例如 `print()`？
- en: What is the definition of built-in functions?
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 内置函数的定义是什么？
- en: Is `pow()` a built-in function? How do we use it?
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pow()` 是一个内置函数吗？我们该如何使用它？'
- en: How do we find all built-in functions? How many built-in functions are present?
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何找到所有内置函数？内置函数共有多少个？
- en: When we estimate the square root of 3, which Python function should we use?
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们估算 3 的平方根时，应该使用哪个 Python 函数？
- en: Assume that the present value of a perpetuity is $124 and the annual cash flow
    is $50; what is the corresponding discount rate? The formula is given here:![Exercises](img/B06175_01_30.jpg)
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设永久年金的现值为 124 美元，年现金流为 50 美元；那么相应的贴现率是多少？公式如下：![Exercises](img/B06175_01_30.jpg)
- en: Based on the solution of the previous question, what is the corresponding quarterly
    rate?
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据上一个问题的解答，什么是相应的季度利率？
- en: 'For a perpetuity, the same cash flow happens at the same interval forever.
    A growing perpetuity is defined as follows: the future cash flow is increased
    at a constant growth rate forever. If the first cash flow happens at the end of
    the first period, we have the following formula:![Exercises](img/B06175_01_31.jpg)'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于永久年金，现金流在相同的时间间隔内永远发生。增长的永久年金定义如下：未来的现金流将永远以固定的增长率增长。如果第一个现金流发生在第一个期间结束时，我们有以下公式：![Exercises](img/B06175_01_31.jpg)
- en: Here *PV* is the present value, *C* is the cash flow of the next period, *g*
    is a growth rate, and *R* is the discount rate. If the first cash flow is $12.50,
    the constant growth rate is 2.5 percent, and the discount rate is 8.5 percent.
    What is the present value of this growing perpetuity?
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，*PV* 是现值，*C* 是下一个期间的现金流，*g* 是增长率，*R* 是贴现率。如果第一个现金流为 12.50 美元，常数增长率为 2.5%，贴现率为
    8.5%，那么这个持续增长的永久年金的现值是多少？
- en: For an *n*-day variance, we have the following formula:![Exercises](img/B06175_01_32.jpg)
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于 *n* 天的方差，我们有以下公式：![Exercises](img/B06175_01_32.jpg)
- en: Here ![Exercises](img/B06175_01_36.jpg)is the daily variance and is ![Exercises](img/B06175_01_37.jpg)
    is the daily standard deviation (volatility). If the volatility (daily standard
    deviation) of a stock is 0.2, what is its 10-day volatility?
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里 ![Exercises](img/B06175_01_36.jpg) 是日波动率，! [Exercises](img/B06175_01_37.jpg)
    是日标准差（波动率）。如果某只股票的波动率（每日标准差）为 0.2，那么它的 10 天波动率是多少？
- en: We expect to have $25,000 in 5 years. If the annual deposit rate is 4.5 percent,
    how much do we have to deposit today?
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们预计在 5 年内将有 25,000 美元。如果年存款利率为 4.5%，我们今天需要存入多少金额？
- en: The substitution function called `sub()` is from a Python module. Find out how
    many functions are contained in that module.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个名为 `sub()` 的替换函数来自一个 Python 模块。找出该模块包含了多少个函数。
- en: Write a Python program to convert the standard deviation estimated based on
    daily data or monthly data to an annual one by using the following formulas:![Exercises](img/B06175_01_33.jpg)![Exercises](img/B06175_01_34.jpg)
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个Python程序，通过使用以下公式，将基于日数据或月数据估算的标准差转换为年标准差：![Exercises](img/B06175_01_33.jpg)![Exercises](img/B06175_01_34.jpg)
- en: The Sharpe ratio is a measure of trade-off between benefit (excess return) and
    cost (total risk) for an investment such as a portfolio. Write a Python program
    to estimate the Sharpe ratio by applying the following formula:![Exercises](img/B06175_01_35.jpg)
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 夏普比率是衡量投资（如投资组合）在收益（超额收益）与成本（总风险）之间权衡的一种指标。编写一个Python程序，通过以下公式估算夏普比率：![Exercises](img/B06175_01_35.jpg)
- en: Here ![Exercises](img/B06175_01_38.jpg) is the portfolio mean return, ![Exercises](img/B06175_01_39.jpg)
    is the mean risk-free rate and σ is the risk of the portfolio. Again, at this
    moment, it is perfectly fine that a reader does not understand the economic meaning
    of this ratio since the Sharpe ratio will be discussed in more detail in [Chapter
    7,](ch07.html "Chapter 7. Multifactor Models and Performance Measures") *Multifactor
    Models and Performance Measures*.
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里，![Exercises](img/B06175_01_38.jpg)是投资组合的平均收益，![Exercises](img/B06175_01_39.jpg)是无风险利率的平均值，而σ是投资组合的风险。同样，在此时，读者不理解该比率的经济含义是完全可以接受的，因为夏普比率将在[第7章](ch07.html
    "第7章. 多因子模型与绩效衡量")，*多因子模型与绩效衡量*中进行更详细的讨论。
- en: Summary
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, many basic concepts and several widely used functions related
    to Python werediscussed. In [Chapter 2](ch02.html "Chapter 2. Introduction to
    Python Modules"), *Introduction to Python Modules*, we will discuss a key component
    of the Python language: Python modules and theirrelated issues. A module is a
    set of programs written by experts, professionals, or any person around a specific
    topic. A module could be viewed as a toolbox for a specific task. The chapter
    willfocus on the five most important modules: NumPy, SciPy, `matplotlib`, `statsmodels`,
    and `pandas`.'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了许多与 Python 相关的基本概念和几个广泛使用的函数。在[第2章](ch02.html "第2章. Python模块介绍")，*Python模块介绍*中，我们将讨论Python语言的一个关键组成部分：Python模块及其相关问题。模块是由专家、专业人士或任何围绕特定主题的人编写的一组程序。模块可以视为完成特定任务的工具箱。本章将重点介绍五个最重要的模块：NumPy、SciPy、`matplotlib`、`statsmodels`和`pandas`。
