["```py\n>>> import numpy as np\n>>> import statsmodels.api as sm\n>>> y=[1,2,3,4,2,3,4]\n>>> x=range(1,8)\n>>> x=sm.add_constant(x)\n>>> results=sm.OLS(y,x).fit()\n>>> print(results.params)\n     [ 1.28571429  0.35714286]\n```", "```py\n>>> from scipy import stats \n>>> ret = [0.065, 0.0265, -0.0593, -0.001,0.0346] \n>>> mktRet = [0.055, -0.09, -0.041,0.045,0.022] \n>>>(beta, alpha, r_value,p_value,std_err)=stats.linregress(ret,mktRet)\n```", "```py\n>>> print(beta, alpha) \n0.507743187877 -0.00848190035246\n>>> print(\"R-squared=\", r_value**2)\nR-squared= 0.147885662966\n>>> print(\"p-value =\", p_value)\np-value = 0.522715523909\n```", "```py\n>>>help(stats.linregress)\n```", "```py\nlinregress(x, y=None)\n```", "```py\nfrom scipy import stats \nimport scipy as sp\nsp.random.seed(12456)\nalpha=1\nbeta=0.8\nn=100\nx=sp.arange(n)\ny=alpha+beta*x+sp.random.rand(n)\n(beta,alpha,r_value,p_value,std_err)=stats.linregress(y,x) \nprint(alpha,beta) \nprint(\"R-squared=\", r_value**2)\nprint(\"p-value =\", p_value)\n```", "```py\n%run \"C:/yan/teaching/Python2/codes/c6_02_random_OLS.py\"\n(-1.9648401142472594,1.2521836174247121,)\n('R-squared=', 0.99987143193925765)\n('p-value =', 1.7896498998980323e-192)\n```", "```py\nfrom scipy import stats \nfrom matplotlib.finance import quotes_historical_yahoo_ochl as getData\nbegdate=(2012,1,1)\nenddate=(2016,12,31)\n\nticker='MSFT'\np =getData(ticker, begdate, enddate,asobject=True,adjusted=True)\nretIBM = p.aclose[1:]/p.aclose[:1]-1\n\nticker='^GSPC'\np2 = getData(ticker, begdate, enddate,asobject=True,adjusted=True)\nretMkt = p2.aclose[1:]/p2.aclose[:1]-1\n(beta,alpha,r_value,p_value,std_err)=stats.linregress(retMkt,retIBM) \nprint(alpha,beta) \nprint(\"R-squared=\", r_value**2)\nprint(\"p-value =\", p_value)\n```", "```py\nhelp(quotes_historical_yahoo_ochl)\nHelp on function quotes_historical_yahoo_ochl in \nmodule matplotlib.finance:\nquotes_historical_yahoo_ochl(ticker, date1, date2, asobject=False, adjusted=True, cachename=None)\n Get historical data for ticker between date1 and date2.\n\nSee :func:`parse_yahoo_historical` for explanation of \noutput formats and the *asobject* and *adjusted* kwargs.\nParameters\n    ----------\nticker : str   stock ticker\ndate1 : sequence of form (year, month, day), `datetime`, \n           or `date` start date\ndate2 : sequence of form (year, month, day), `datetime`, or \n              `date`  end date\n  cachename : str or `None`\n            is the name of the local file cache.  If None, will\n            default to the md5 hash or the url (which incorporates \n            the ticker and date range)\n   Examples\n    --------\n    sp=f.quotes_historical_yahoo_ochl('^GSPC',d1,d2,asobject=True,\n        adjusted=True)\n      returns = (sp.open[1:] - sp.open[:-1])/sp.open[1:]\n     [n,bins,patches] = hist(returns, 100)\n     mu = mean(returns)\n     sigma = std(returns)\n     x = normpdf(bins, mu, sigma)\n     plot(bins, x, color='red', lw=2)\n```", "```py\nfrom scipy import stats \nfrom matplotlib.finance import quotes_historical_yahoo_ochl as aa \n#\ndef dailyReturn(ticker,begdate,enddate):\n     p = aa(ticker, begdate,enddate,asobject=True,adjusted=True)\n     return p.aclose[1:]/p.aclose[:-1]-1\n#\nbegdate=(2012,1,1)\nenddate=(2017,1,9)\nretIBM=dailyReturn(\"wmt\",begdate,enddate)\nretMkt=dailyReturn(\"^GSPC\",begdate,enddate)\noutputs=stats.linregress(retMkt,retIBM) \nprint(outputs)\n```", "```py\nimport p4f\nx=dailyReturn(\"ibm\",(2016,1,1),(2016,1,10))\nprint(x)\nOut[51]: array([-0.0007355 , -0.00500558, -0.01708957, -0.00925784])\n```", "```py\nimport datetime\ntoday=datetime.date.today()\nyear=today.year                   # Method I\nprint(year)\n2017\nprint(today.strftime(\"%Y\"))       # Method II\n '2017'\n```", "```py\nimport numpy as np\nimport scipy as sp\nimport pandas as pd\nfrom scipy import stats \nfrom matplotlib.finance import quotes_historical_yahoo_ochl \n\ndef ret_f(ticker,begdate, enddate):\n    p = quotes_historical_yahoo_ochl(ticker, begdate,    \n    enddate,asobject=True,adjusted=True)\n    return((p.aclose[1:] - p.aclose[:-1])/p.aclose[:-1])\n#\nbegdate=(2010,1,1)\nenddate=(2016,12,31)\n#\ny0=pd.Series(ret_f('IBM',begdate,enddate))\nx0=pd.Series(ret_f('^GSPC',begdate,enddate))\n#\nd=quotes_historical_yahoo_ochl('^GSPC', begdate, enddate,asobject=True,adjusted=True).date[0:-1]\nlag_year=d[0].strftime(\"%Y\")\ny1=[]\nx1=[]\nbeta=[]\nindex0=[]\nfor i in sp.arange(1,len(d)):\n    year=d[i].strftime(\"%Y\")\n    if(year==lag_year):\n       x1.append(x0[i])\n       y1.append(y0[i])\n    else:\n       (beta,alpha,r_value,p_value,std_err)=stats.linregress(y1,x1) \n       alpha=round(alpha,8)\n       beta=round(beta,3)\n       r_value=round(r_value,3)\n       p_vaue=round(p_value,3)\n       print(year,alpha,beta,r_value,p_value)\n       x1=[]\n       y1=[]\n       lag_year=year\n```", "```py\nimport pandas as pd\nimport scipy as sp\nx=sp.arange(1,5,0.5)\ny=pd.DataFrame(x,columns=['Ret'])\ny['Lag']=y.shift(1)\nprint(y)\n```", "```py\nimport pandas as pd\nimport scipy as sp\nx=sp.arange(1,5,0.5)\ny=pd.DataFrame(x,columns=['Ret'])\ny['Lag']=y.shift(1)\ny['Forward']=y['Ret'].shift(-1)\nprint(y)\n\n    Ret Lag  Forward\n0  1.0  NaN      1.5\n1  1.5  1.0      2.0\n2  2.0  1.5      2.5\n3  2.5  2.0      3.0\n4  3.0  2.5      3.5\n5  3.5  3.0      4.0\n6  4.0  3.5      4.5\n7  4.5  4.0      NaN\n```", "```py\nimport pandas as pd\nx=pd.read_pickle(\"c:/temp/yanMonthly.pkl\")\nprint(x[0:10])\n```", "```py\nimport pandas as pd\nimport numpy as np\ndf=pd.read_pickle(\"c:/temp/yanMonthly.pkl\")\nunique=np.unique(df.index)\nprint(len(unique))\nprint(unique)\n```", "```py\nimport pandas as pd\nimport numpy as np\ndf=pd.read_pickle(\"c:/temp/yanMonthly.pkl\")\nsp500=df[df.index=='^GSPC']\nprint(sp500[0:5])\nret=sp500['VALUE'].diff()/sp500['VALUE'].shift(1)\nprint(ret[0:5])\n```", "```py\nimport pandas_datareader.data as getData\nimport re\nticker='msft'\nf=open(\"c:/temp/msft.txt\",\"w\")\np = getData.DataReader(ticker, \"google\")\nf.write(str(p))\nf.close()\n```", "```py\nfrom matplotlib.finance import quotes_historical_yahoo_ochl as getData\nimport csv\nf=open(\"c:/temp/c.csv\",\"w\")\n\nticker='c'\nbegdate=(2016,1,1)\nenddate=(2017,1,9)\np = getData(ticker, begdate, enddate,asobject=True,adjusted=True)\n\nwriter = csv.writer(f)\nwriter.writerows(p)\nf.close()\n```", "```py\nimport pandas as pd\ndf=pd.read_csv(\"http://chart.yahoo.com/table.csv?s=IBM\")\nf= pd.ExcelWriter('c:/temp/ibm.xlsx')\ndf.to_excel(f, sheet_name='IBM')\nf.save()\n```", "```py\nimport pandas as pd\ndf=pd.read_csv(\"http://chart.yahoo.com/table.csv?s=IBM\")\nf= pd.ExcelWriter('c:/temp/ibm.xlsx')\ndf.to_excel(f,index=False,sheet_name='IBM')\nf.save() \n```", "```py\n>>>import pandas as pd \n>>>import numpy as np \n>>>np.random.seed(1234) \n>>> a = pd.DataFrame(np.random.randn(6,5))\n>>>a.to_pickle('c:/temp/a.pickle') \n```", "```py\n>>>import array \n>>>import numpy as np \n>>>outfile = \"c:/temp/tmp.bin\" \n>>>fileobj = open(outfile, mode='wb') \n>>>outvalues = array.array('f') \n>>>data=np.array([1,2,3]) \n>>>outvalues.fromlist(data.tolist()) \n>>>outvalues.tofile(fileobj) \n>>>fileobj.close()\n```", "```py\n>>>import array \n>>>infile=open(\"c:/temp/tmp.bin\", \"rb\") \n>>>s=infile.read() # read all bytes into a string \n>>>d=array.array(\"f\", s) # \"f\" for float \n>>>print(d) \n>>>infile.close()\n```", "```py\n>>> x=\"This is great\"\n>>> type(x)\n<class 'str'>\n```", "```py\n>>> type='s2a'\n>>> type[0]\n's'\n>>> len(type)\n3\n```", "```py\n>>>x='Hello World!'\n>>>len(x)\n13\n```", "```py\nstring='Hello World!'\n\n# find the length of the string\nn_length=len(string)\nprint(n_length)\n\n# the number of appearance of letter l\nn=string.count('l') \nprint(n) \n\n# find teh locatoin of work of 'World'\nloc=string.index(\"World\") \nprint(loc) \n\n# number of spaces\nn2=string.count(' ')\nprint(n2)\n\nprint(string[0]) # print the first letter \nprint(string[0:1]) # print the first letter (same as above)\nprint(string[0:3]) # print the first three letters\nprint(string[:3]) # same as above \nprint(string[-3:]) # print the last three letters\nprint(string[3:]) # ignore the first three \nprint(string[:-3]) # except the last three\n```", "```py\nstring='Hello World!'\n\nprint(string.lower())\nprint(string.title())\nprint(string.capitalize())\nprint(string.swapcase())\n\nstring2=string.replace(\"World\", \"John\")\nprint(string2)\n\n# strip() would remove spaces before and the end of string\n# lstrip() would remove spaces before and the end of string\n# rstrip() would remove spaces before and the end of string\nstring3=' Hello World! '\nprint(string3)\nprint(string3.strip())\nprint(string3.lstrip())\nprint(string3.rstrip())\n```", "```py\nfrom string import maketrans \nimport pandas as pd \nword_freq = {}\ninfile=\"c:/temp/AV1611.txt\"\nword_list = open(infile, \"r\").read().split() \nttt='!\"#$%&()*+,./:;<=>?@[\\\\]^_`{|}~0123456789'\nfor word in word_list:\n    word = word.translate(maketrans(\"\",\"\"),ttt )\n    if word.startswith('-'): \n        word = word.replace('-','')\n    if len(word): \n        word_freq[word] = word_freq.get(word, 0) + 1 \nkeys = sorted(word_freq.keys())\nx=pd.DataFrame(keys) \nx.to_pickle('c:/temp/uniqueWordsBible.pkl')\n```", "```py\n    import p4f\n    x=dailyReturn(\"ibm\",(2016,1,1),(2016,1,10))\n    ```", "```py\n    def dailyReturn(ticker,begdate,enddate):\n        from scipy import stats \n        from matplotlib.finance import quotes_historical_yahoo_ochl\n        p = quotes_historical_yahoo_ochl(ticker, begdate,    \n              enddate,asobject=True,adjusted=True)\n        return p.aclose[1:]/p.aclose[:-1]-1\n    ```", "```py\n    from scipy import stats \n    from matplotlib.finance import quotes_historical_yahoo_ochl\n\n    def dailyReturn(ticker,begdate=(1962,1,1),enddate=(2017,1,10)):\n    p = quotes_historical_yahoo_ochl(ticker, begdate, enddate,asobject=True,adjusted=True)\n    return p.aclose[1:]/p.aclose[:-1]-1\n\n    retIBM=dailyReturn(\"wmt\")\n    retMkt=dailyReturn(\"^GSPC\")\n\n    outputs=stats.linregress(retIBM,retMkt) \n    print(outputs)\n    ```"]