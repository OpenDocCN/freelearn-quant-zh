- en: Placing Regular Orders on the Exchange
  prefs: []
  type: TYPE_NORMAL
- en: This chapter introduces various types of regular orders that can be placed on
    exchanges via the broker APIs. The recipes include code on placing 16 types of
    orders, querying their statuses, and exiting completed orders. These recipes will
    be a fundamental part of your algorithmic trading strategies. Understanding all
    of the types of orders and knowing which one to place for the given requirement
    is crucial for building a successful trading strategy.
  prefs: []
  type: TYPE_NORMAL
- en: 'Every order has multiple attributes, as described in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Order transaction type**: This attribute simply defines whether the order
    is a `BUY` transaction or a `SELL` transaction. Possible values, obviously, can
    be one of `BUY` or `SELL`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Order type**: This attribute defines the type of the order, which would imply
    the high-level behavior of the order. Commonly used order types are `REGULAR`
    order, `BRACKET` order, `COVER` order, and so on. Your broker may define many
    more types of orders. This chapter includes recipes on `REGULAR` orders.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Order code**: This attribute defines whether the order would be squared-off
    (that is, exited) at the end of the trading hours for the day or be carried to
    the next trading day. Possible values can be one of `INTRADAY` or `DELIVERY`.
    An `INTRADAY` order, as the name suggests, has a lifespan of only one day and
    would be exited at the end of the day by the broker, if it''s not exited before.
    A `DELIVERY` order, on the other hand, is delivered to the user''s Demat account
    and exists until it is explicitly squared-off by the user. A `DELIVERY` order
    may go through multiple states before getting finally delivered to the user''s
    Demat account, as in this example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DELIVERY T+0` (on the day of placing the order)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DELIVERY T+1` (on the next trading day of placing the order)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DELIVERY T+2` (on and after the second trading day of placing the order)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This depends on the underlying segment. For example, a `DELIVERY` order for
    an equity segment instrument would go through these states. A `DELIVERY` order
    for a futures and options segment instrument would not go through these states.
  prefs: []
  type: TYPE_NORMAL
- en: '**Order variety**: This attribute is related to the pricing and activation
    of the order. Possible values can be one of the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MARKET`: The order is placed immediately at the best available market price.
    The user need not specify the price while placing the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LIMIT`: The order is placed at a specified price, which is either below the
    **Last Traded Price** (**LTP**) (for `BUY` orders) or above the LTP (for `SELL`
    orders). The user should specify a *limit price* when placing the order. The *limit
    price* would be the price at which the user intends to buy/sell the instrument.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`STOPLOSS_LIMIT`: The order is placed at a specified price, which is either
    above the LTP (for `BUY` orders) or below the LTP (for `SELL` orders). The user
    should specify the *trigger price* and the *limit price*. When the `LTP` crosses
    the *trigger price*, the order is activated and places an order at the specified
    *limit* *price*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`STOPLOSS_MARKET`: The order is placed at a specified price, which is either
    above the LTP (for `BUY` orders) or below the LTP (for `SELL` orders). The user
    should specify the *trigger price*. When the LTP crosses the *trigger price*,
    the order is activated and places an order at the market price.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All of these attributes together define a complete order. To place an order,
    all four attributes should be known precisely.
  prefs: []
  type: TYPE_NORMAL
- en: The aforementioned attributes, namely, the order transaction type, order type,
    order code, and order variety, are defined by the `pyalgotrading` package. The
    same attribute may be named differently by the broker of your choice. The `pyalgotrading`
    package handles such translations internally.
  prefs: []
  type: TYPE_NORMAL
- en: 'Every order placed on the exchange goes through various states during its lifetime.
    The broker used in this chapter supports the following states for every order:'
  prefs: []
  type: TYPE_NORMAL
- en: '`PUT ORDER REQ RECEIVED`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`VALIDATION PENDING`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OPEN PENDING`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TRIGGER PENDING`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CANCEL PENDING`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`COMPLETE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CANCELLED`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OPEN`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`REJECTED`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The recipes in this chapter provide detailed state machine diagrams for the
    state transitions of every variety of a regular order.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using a different broker, the broker might support different order
    states or name the order states differently. You can consult the broker API documentation
    to understand the meaning of each of the states.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Placing a regular market order
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Placing a regular limit order
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Placing a regular stoploss-limit order
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Placing a regular stoploss-market order
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Please make sure you try all of these recipes during live market hours with
    sufficient balance in your broking account. If these recipes are tried outside
    of market hours or with insufficient balance, your orders would be rejected by
    the broker. This means the orders would never reach the exchange and you would
    not get the expected response.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You will need the following to successfully execute the recipes in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Python 3.7+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python packages: `pyalgotrading` (`$ pip install pyalgotrading`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The latest Jupyter notebook for this chapter can be found on GitHub at [https://github.com/PacktPublishing/Python-Algorithmic-Trading-Cookbook/tree/master/Chapter06](https://github.com/PacktPublishing/Python-Algorithmic-Trading-Cookbook/tree/master/Chapter06).
  prefs: []
  type: TYPE_NORMAL
- en: The first thing needed for setting connectivity with the broker is getting the
    API keys. The broker would provide each customer with unique keys, typically as
    an `api-key` and `api-secret` key pair. These API keys are chargeable, usually
    on a monthly subscription basis. You need to get your copy of `api-key` and `api-secret` from
    the broker website before starting this. You can refer to *Appendix I* for more
    details.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps will help you to set up the broker connection with Zerodha,
    which will be used by all of the recipes in this chapter. Please make sure you
    have followed these steps before trying out any recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the necessary modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: All `pyalgotrading` constants are now available in your Python namespace.
  prefs: []
  type: TYPE_NORMAL
- en: 'Get the `api_key` and `api_secret` keys from the broker. These are unique to
    you and will be used by the broker to identify your Demat account:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If you are running this for the first time and `kiteconnect` is not installed,
    `pyalgotrading` will automatically install it for you. The final output of *step
    2* will be a link. Click on the link and log in with your Zerodha credentials.
    If the authentication is successful, you will see a link in your browser's address
    bar similar to `https://127.0.0.1/?request_token=<alphanimeric-toke>&action=login&status=success`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the alphanumeric-token and paste it in `request_token`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `broker_connection` instance is now ready for performing API calls.
  prefs: []
  type: TYPE_NORMAL
- en: The `pyalgotrading` package supports multiple brokers and provides a connection
    object class per broker, with the same methods. It abstracts broker APIs behind
    a unified interface so users need not worry about the underlying broker API calls
    and can use all of the recipes in this chapter as is. Only the procedure to set
    up the broker connection would vary from broker to broker. You can refer to the `pyalgotrading`
    documentation for setting up the broker connection if you are not using Zerodha
    as your broker. For Zerodha users, the steps mentioned in the preceding section
    would suffice.
  prefs: []
  type: TYPE_NORMAL
- en: Placing a regular market order
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A regular market order is the simplest type of order. This order type is used
    for placing a single order immediately at the best available market price. The
    market price is equivalent to the LTP (as explained in the *Last traded price
    of a financial instrument* recipe of [Chapter 3](d82aae2c-b9a8-4a79-bfea-44719adf1acf.xhtml),
    *Fetching Financial Data*).
  prefs: []
  type: TYPE_NORMAL
- en: 'On placing a regular market order, it goes through various intermediate states
    before finally reaching an end state (`COMPLETE` or `REJECTED`). A regular market
    order immediately moves to the end state without waiting on any intermediate states.
    The following state machine diagram demonstrates the various states of a regular market
    order during its lifetime:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b41fd051-0228-400b-8f0b-cc9a0bd77409.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This recipe demonstrates placing of the following regular market orders and
    querying their status:'
  prefs: []
  type: TYPE_NORMAL
- en: '`BUY`, `REGULAR`, `INTRADAY`, `MARKET` order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SELL`, `REGULAR`, `INTRADAY`, `MARKET` order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BUY`, `REGULAR`, `DELIVERY`, `MARKET` order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SELL`, `REGULAR`, `DELIVERY`, `MARKET` order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the `broker_connection` object and constants from the `pyalgotrading`
    package are available in your Python namespace. Refer to the *Technical requirements*
    section of this chapter to set up this object.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We execute the following steps for this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fetch a financial instrument and assign it to `instrument`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Place a `BUY`, `REGULAR`, `INTRADAY`, `MARKET` order and display the order
    ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output (your output may differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch and display the order status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'If you log in to the broker site with your credentials and go to the orders
    section, you can find your order details as shown in the following screenshot
    (some data may differ for you):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9d06a98e-80e3-4e9d-8f06-01b23534c607.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Place a `SELL`, `REGULAR`, `INTRADAY`, `MARKET` order and display the order
    ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output (your output would differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch and display the order status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'If you log in to the broker site with your credentials and go to the orders
    section, you can find your order details as shown in the following screenshot
    (some data may differ for you):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/56776fec-c06e-4699-b617-32b26a293431.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Place a `BUY`, `REGULAR`, `DELIVERY`, `MARKET` order and display the order
    ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output (your output may differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch and display the order status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'If you log in to the broker site with your credentials and go to the orders
    section, you can find your order details as shown in the following screenshot
    (some data may differ for you):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a43f6a7c-008a-4b3a-a16e-6564af2c96af.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Place a `SELL`, `REGULAR`, `DELIVERY`, `MARKET` order and display the order
    ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output (your output may differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch and display the order status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'If you log in to the broker site with your credentials and go to the orders
    section, you can find your order details as shown in the following screenshot
    (some data may differ for you):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d98335e5-6541-4fe1-a9ab-0068ab48066b.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *step 1*, you use the `get_instrument()` method of the `BrokerConnectionZerodha`
    class to fetch an instrument and assign it to a new attribute, `instrument`. This
    object is an instance of the `Instrument` class. The two parameters needed to
    call `get_instrument` are the exchange (`'NSE'`) and the trading-symbol (`'HDFCBANK'`).
  prefs: []
  type: TYPE_NORMAL
- en: 'In *step 2*, you use the `place_order` method of the `broker_connection` object
    to place a `BUY`, `REGULAR`, `INTRADAY`, `MARKET` order on the exchange. The `place_order`
    method is a wrapper on the broker specific place order API. It takes the following
    attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`instrument`: This is the financial instrument for which the order must be
    placed and should be an instance of the `Instrument` class. We pass `instrument`
    here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_transaction_type`: This is the order transaction type and should be
    an enum of the `BrokerOrderTransactionTypeConstants` type. We pass `BrokerOrderTransactionTypeConstants.BUY`
    here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_type`: This is the order type and should be an enum of the `BrokerOrderTypeConstants` type.
    We pass `BrokerOrderTypeConstants.REGULAR` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_code`: This is the order code and should be an enum of the `BrokerOrderCodeConstants` type.
    We pass `BrokerOrderCodeConstants.INTRADAY` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_variety`: This is the order variety and should be an enum of the `BrokerOrderVarietyConstants` type.
    We pass `BrokerOrderVarietyConstants.MARKET` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`quantity`: This is the number of shares to be traded for the given instrument
    and it should be a positive integer. We pass `1` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (The attributes passed to the `place_order` method are broker-agnostic constants,
    imported earlier from the `pyalgotrading.constants` module.)
  prefs: []
  type: TYPE_NORMAL
- en: On placing the order in *step 2*, you get an order ID from the broker, which
    you assign to a new attribute, `order1_id`. The `order1_id` object is a `string`
    type. If the order placement is not successful for some reason, you may not get
    an order ID. In *step 3*, you fetch the status of the placed order using the `get_order_status()`
    method of the `broker_connection` object. You pass `order1_id` as the parameter
    to the `get_order_status()` method. You get the order status as `'COMPLETE'`,
    a `string` type. You can use `order1_id` to fetch the status of the placed order
    at any later point of time as well.
  prefs: []
  type: TYPE_NORMAL
- en: You can also verify the successful placement of your order by logging in to
    the broker website and checking the orders section there. You should see data
    similar to the screenshot shown in the output of *step 3*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The other steps in this recipe follow the same pattern of placing an order
    and getting its status, for a different combination of attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Steps 4* and *5*: `SELL`, `REGULAR`, `INTRADAY`, `MARKET` order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Steps 6* and *7*: `BUY`, `REGULAR`, `DELIVERY`, `MARKET` order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Steps 8* and *9*: `SELL`, `REGULAR`, `DELIVERY`, `MARKET` order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The order ID returned by the broker for an order is unique across all its clients.
    You will never get the same order ID again and you will never get an order ID
    that was assigned to an order placed by someone else.
  prefs: []
  type: TYPE_NORMAL
- en: Placing a regular limit order
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A regular limit order is a type of order where a single order is placed at
    a specific price. Unlike the regular market order, this is not the market price.
    To place this order, a specific parameter called the *limit price* is needed.
    This parameter should satisfy the following conditions:'
  prefs: []
  type: TYPE_NORMAL
- en: The *limit price* should be below the market price for a `BUY` order.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *limit price* should be above the market price for a `SELL` order.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If these conditions are not satisfied, the order may either get placed at the
    market price, essentially converting it into a regular market order, or it may
    be rejected by the broker as an invalid order.
  prefs: []
  type: TYPE_NORMAL
- en: 'On placing a regular limit order, it goes through various intermediate states
    before finally reaching an end state (`COMPLETE`, `CANCELLED`, or `REJECTED`).
    A regular limit order could stay in the `OPEN` state for a while until favorable
    market conditions are achieved, before moving to the `COMPLETE` state. The following
    state machine diagram demonstrates the various states of a regular limit order
    during its lifetime:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7d539482-0de2-4a86-9dd0-dfdb4f511c01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This recipe demonstrates placing the following regular limit orders and querying
    their statuses:'
  prefs: []
  type: TYPE_NORMAL
- en: '`BUY`, `REGULAR`, `INTRADAY`, `LIMIT` order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SELL`, `REGULAR`, `INTRADAY`, `LIMIT` order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BUY`, `REGULAR`, `DELIVERY`, `LIMIT` order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SELL`, `REGULAR`, `DELIVERY`, `LIMIT` order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the `broker_connection` object and constants from the `pyalgotrading`
    package are available in your Python namespace. Refer to the *Technical requirements*
    section of this chapter to set up this object.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We execute the following steps for this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fetch a financial instrument and assign it to `instrument`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch the LTP. Place a `BUY`, `REGULAR`, `INTRADAY`, `LIMIT` order and display
    the order ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output (your output may differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch and display the order status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output (your output may differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'If you log in to the broker site with your credentials and go to the orders
    section, you can find your order details as shown in the following screenshot
    (some data may differ for you):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/86556936-7312-4c08-9b0c-0257645107f4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fetch and display the order status again after some time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output (your output may differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'If you log in to the broker site with your credentials and go to the orders
    section, you can find your order details as shown in the following screenshot
    (some data may differ for you):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dcb4a09b-8d92-41c7-a6be-9b54aa64ded7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fetch the LTP. Place a `SELL`, `REGULAR`, `INTRADAY`, `LIMIT` order and display
    the order ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output (your output may differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch and display the order status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'If you log in to the broker site with your credentials and go to the orders
    section, you can find your order details as shown in the following screenshot
    (some data may differ for you):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d11da58f-7cf9-4287-a7d6-ddc67d7c8a1b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fetch and display the order status again after some time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output (your output may differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'If you log in to the broker site with your credentials and go to the orders
    section, you can find your order details as shown in the following screenshot
    (some data may differ for you):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ce277caa-0f16-4a66-abd3-e50dd524f400.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fetch the LTP. Place a `BUY`, `REGULAR`, `DELIVERY`, `LIMIT` order and display
    the order ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output (your output may differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch and display the order status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'If you log in to the broker site with your credentials and go to the orders
    section, you can find your order details as shown in the following screenshot
    (some data may differ for you):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ca9d5bee-592a-4697-89c3-3f9b3cbb73eb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fetch and display the order status again after some time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'If you log in to the broker site with your credentials and go to the orders
    section, you can find your order details as shown in the following screenshot
    (some data may differ for you):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/78a6f220-f74d-4fd7-9f21-6d7739777ab0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fetch the LTP. Place a `SELL`, `REGULAR`, `DELIVERY`, `LIMIT` order and display
    the order ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output (your output may differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch and display the order status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'If you log in to the broker site with your credentials and go to the orders
    section, you can find your order details as shown in the following screenshot
    (some data may differ for you):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1ea9d941-f7c9-4145-9e91-1397ab459f7f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fetch and display the order status again after some time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'If you log in to the broker site with your credentials and go to the orders
    section, you can find your order details as shown in the following screenshot
    (some data may differ for you):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/be8d7386-2b8d-4316-8b75-af5dc8a5e273.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *step 1*, you use the `get_instrument()` method of the `BrokerConnectionZerodha`
    class to fetch an instrument and assign it to a new attribute, `instrument`. This
    object is an instance of the `Instrument` class. The two parameters needed to
    call `get_instrument` are the exchange (`'NSE'`) and the trading-symbol (`'ICICIBANK'`).
  prefs: []
  type: TYPE_NORMAL
- en: 'In *step 2*, you fetch the LTP of the instrument using the `get_ltp()` method
    of the `BrokerConnectionZerodha` class and assign it to a new attribute, `ltp`.
    The `instrument` object is passed as the parameter here. Next, you use the `place_order`
    method of the `broker_connection` object to place a `BUY`, `REGULAR`, `INTRADAY`, `LIMIT` order
    on the exchange. The `place_order` method is a wrapper on the broker specific
    place order API. It takes the following attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`instrument`: This is the financial instrument for which the order must be
    placed and should be an instance of the `Instrument` class. We pass `instrument`
    here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_transaction_type`: This is the order transaction type and should be
    an enum of the `BrokerOrderTransactionTypeConstants` type. We pass `BrokerOrderTransactionTypeConstants.BUY`
    here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_type`: This is the order type and should be an enum of the `BrokerOrderTypeConstants` type.
    We pass `BrokerOrderTypeConstants.REGULAR` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_code`: This is the order code and should be an enum of the `BrokerOrderCodeConstants` type.
    We pass `BrokerOrderCodeConstants.INTRADAY` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_variety`: This is the order variety and should be an enum of the `BrokerOrderVarietyConstants` type.
    We pass `BrokerOrderVarietyConstants.LIMIT` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`quantity`: The number of shares to be traded for the given instrument and
    should be a positive integer. We pass `1` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`price`: This is the limit price at which the order should be placed. We pass
    `ltp-1` here, which means 1 unit price below `ltp`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (The attributes passed to the `place_order` method are broker-agnostic constants,
    imported earlier from the `pyalgotrading.constants` module.)
  prefs: []
  type: TYPE_NORMAL
- en: On placing the order in *step 2*, you get an order ID from the broker, which
    you assign to a new attribute, `order1_id`. The `order1_id` object is a string.
    If the order placement is not successful for some reason, you may not get an order
    ID. Observe that the price parameter is passed a value of `ltp-1`. This means
    the order is placed below the market price, which is a necessary condition for
    placing `BUY LIMIT` orders.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 3*, you fetch the status of the placed order using the `get_order_status()`
    method of the `broker_connection` object. You pass `order1_id` as the parameter
    to the `get_order_status()` method. You get the order status as `'OPEN'`, a string.
    You can use `order1_id` to fetch the status of the placed order at any later point
    of time as well. In *step 4*, you fetch the order status again, and if the order
    is completed, you get the order status as `'COMPLETE'`.
  prefs: []
  type: TYPE_NORMAL
- en: You can also verify the successful placement of your order by logging in to
    the broker website and checking the orders section there. You should see data
    similar to the screenshot shown in the outputs of *step 3* and *step 4*.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 3*, if you see the status as `'COMPLETE'` instead of `'OPEN'`, this
    could be due to high volatility. If you want the order to stay in the `'OPEN'` state
    for a while, try placing the order further away from the market price.
  prefs: []
  type: TYPE_NORMAL
- en: 'The other steps in this recipe follow the same pattern of placing an order
    and getting its status, for a different combination of attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Steps 5*, *6,* and *7*: `SELL`, `REGULAR`, `INTRADAY`, `LIMIT` order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Steps 8*, *9,* and *10*: `BUY`, `REGULAR`, `DELIVERY`, `LIMIT` order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Steps 11*, *12,* and *13*: `SELL`, `REGULAR`, `DELIVERY`, `LIMIT` order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Placing a regular stoploss-limit order
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A regular stoploss-limit order is a type of order where a single order is placed
    at a specific price. Unlike the regular market order, this is not the market price.
    To place this order, two specific parameters are needed, the *trigger price* and
    the *limit price*. These parameters should satisfy the following conditions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For a `BUY` order, we need to observe the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *trigger price* and *limit price* should be above the market price.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *limit price* should be greater than the *trigger price.*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For a `SELL` order, the following should be observed:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *trigger price* and *limit price* should be below the market price.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *limit price* should be lower than the *trigger price.*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If these conditions are not satisfied, the order may either get placed at the
    market price, essentially converting it into a regular market order, or may be
    rejected by the broker as an invalid order.
  prefs: []
  type: TYPE_NORMAL
- en: 'On placing a regular stoploss-limit order, it goes through various intermediate
    states before finally reaching an end state (`COMPLETE`, `CANCELLED`, or `REJECTED`).
    A regular stoploss-limit order could stay in the `TRIGGER_PENDING` state for a
    while until favorable market conditions are achieved, before moving to the `COMPLETE`
    state. The following state machine diagram demonstrates the various states of
    a regular stoploss-limit order during its lifetime:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d4c353fe-a89d-4444-b068-18a0446521d3.png)'
  prefs: []
  type: TYPE_IMG
- en: After the order is placed, it stays in the `TRIGGER_PENDING` state until the
    market price breaches the *trigger price* but not the *limit price*. That is when
    this order gets activated and is sent to the exchange. The order then gets executed
    at the best available market price, which is between the *trigger price* and the
    *limit price*. The order state transitions from `TRIGGER_PENDING` to `OPEN` to
    the `COMPLETE` state. If the market is too volatile and the market price breaches
    both *trigger price* and *limit price*, the order remains in the `TRIGGER_PENDING`
    state.
  prefs: []
  type: TYPE_NORMAL
- en: 'This recipe demonstrates placing the following regular stoploss-limit orders
    and querying their statuses:'
  prefs: []
  type: TYPE_NORMAL
- en: '`BUY`, `REGULAR`, `INTRADAY`, `STOPLOSS_LIMIT` order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SELL`, `REGULAR`, `INTRADAY`, `STOPLOSS_LIMIT` order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BUY`, `REGULAR`, `DELIVERY`, `STOPLOSS_LIMIT` order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SELL`, `REGULAR`, `DELIVERY`, `STOPLOSS_LIMIT` order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the `broker_connection` object and constants from the `pyalgotrading`
    package are available in your Python namespace. Refer to the *Technical requirements*
    section of this chapter to set up this object.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We execute the following steps for this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fetch a financial instrument and assign it to `instrument`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch the LTP. Place a `BUY`, `REGULAR`, `INTRADAY`, `STOPLOSS_LIMIT` order
    and display the order ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output (your output may differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch and display the order status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'If you log in to the broker site with your credentials and go to the orders
    section, you can find your order details as shown in the following screenshot
    (some data may differ for you):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b411757f-d52d-4686-9b7f-b2eb90fc2778.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fetch and display the order status again after some time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'If you log in to the broker site with your credentials and go to the orders
    section, you can find your order details as shown in the following screenshot
    (some data may differ for you):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/887a0773-eab0-4c85-8c3f-bfb9a172ca03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fetch the LTP. Place a `SELL`, `REGULAR`, `INTRADAY`, `STOPLOSS_LIMIT` order
    and display the order ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output (your output may differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch and display the order status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'If you log in to the broker site with your credentials and go to the orders
    section, you can find your order details as shown in the following screenshot
    (some data may differ for you):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fb717075-7c67-4b7e-9e43-15254c9df24d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fetch and display the order status again after some time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'If you log in to the broker site with your credentials and go to the orders
    section, you can find your order details as shown in the following screenshot
    (some data may differ for you):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/826bbc07-ee6a-455e-8ca5-32860e32712c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fetch the LTP. Place a `BUY`, `REGULAR`, `DELIVERY`, `STOPLOSS_LIMIT` order
    and display the order id:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output (your output may differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch and display the order status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'If you log in to the broker site with your credentials and go to the orders
    section, you can find your order details as shown in the following screenshot
    (some data may differ for you):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/63bfc394-32b8-4796-85bd-386c912a9588.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fetch and display the order status again after some time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'If you log in to the broker site with your credentials and go to the orders
    section, you can find your order details as shown in the following screenshot
    (some data may differ for you):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9d2fb42c-0f5a-4514-8910-cb44c76aa75d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fetch the LTP. Place a `SELL`, `REGULAR`, `DELIVERY`, `STOPLOSS_LIMIT` order
    and display the order ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output (your output may differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch and display the order status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'If you log in to the broker site with your credentials and go to the orders
    section, you can find your order details as shown in the following screenshot
    (some data may differ for you):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f44556e0-f9e7-44c7-ab45-6e1053ff82c0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fetch and display the order status again after some time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'If you log in to the broker site with your credentials and go to the orders
    section, you can find your order details as shown in the following screenshot
    (some data may differ for you):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/41796f34-4d09-4982-ae54-cf0a2803497b.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *step 1*, you use the `get_instrument()` method of the `BrokerConnectionZerodha`
    class to fetch an instrument and assign it to a new attribute, `instrument`. This
    object is an instance of the `Instrument` class. The two parameters needed to
    call `get_instrument` are the exchange (`'NSE'`) and the trading-symbol (`'AXISBANK'`).
  prefs: []
  type: TYPE_NORMAL
- en: 'In *step 2*, you fetch the LTP of the instrument using the `get_ltp()` method
    of the `BrokerConnectionZerodha` class and assign it to a new attribute, `ltp`.
    The `instrument` object is passed as the parameter here. Next, you use the `place_order`
    method of the `broker_connection` object to place a `BUY`, `REGULAR`, `INTRADAY`,
    `STOPLOSS_LIMIT` order on the exchange. The `place_order` method is a wrapper
    on the broker specific place order API. It takes the following attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`instrument`: This is the financial instrument for which the order must be
    placed and should be an instance of the `Instrument` class. We pass `instrument`
    here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_transaction_type`: This is the order transaction type and should be
    an enum of the type, `BrokerOrderTransactionTypeConstants`. We pass `BrokerOrderTransactionTypeConstants.BUY`
    here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_type`: This is the order type and should be an enum of the type `BrokerOrderTypeConstants`.
    We pass `BrokerOrderTypeConstants.REGULAR` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_code`: This is the order code and should be an enum of the type `BrokerOrderCodeConstants`.
    We pass `BrokerOrderCodeConstants.INTRADAY` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_variety`: This is the order variety and should be an enum of the type
    `BrokerOrderVarietyConstants`. We pass `BrokerOrderVarietyConstants.STOPLOSS_LIMIT`
    here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`quantity`: This is the number of shares to be traded for the given instrument
    and should be a positive integer. We pass `1` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`price`: This is the limit price at which the order should be placed. We pass
    `ltp+1` here, which means `1` unit price above `ltp`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`trigger_price`: This is the trigger price at which the order should be placed. We
    pass `ltp+1` here, which means `1` unit price above `ltp`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (The attributes passed to the `place_order` method are broker-agnostic constants,
    imported earlier from the `pyalgotrading.constants` module.)
  prefs: []
  type: TYPE_NORMAL
- en: On placing the order in *step 2*, you get an order ID from the broker, which
    you assign to a new attribute, `order1_id`. The `order1_id` object is a string.
    If the order placement is not successful for some reason, you may not get an order
    ID. Observe that the price and `trigger_price` parameters are passed a value of
    `ltp+1`. This means the order is placed above the market price, which is a necessary
    condition for placing `BUY STOPLOSS_LIMIT` orders.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 3*, you fetch the status of the placed order using the `get_order_status()`
    method of the `broker_connection` object. You pass `order1_id` as the parameter
    to the `get_order_status()` method. You get the order status as `'TRIGGER PENDING'`,
    a string. You can use `order1_id` to fetch the status of the placed order at any
    later point of time as well. In *step 4*, you fetch the order status again, and
    if the order is completed, you get the order status as `'COMPLETE'`.
  prefs: []
  type: TYPE_NORMAL
- en: You can also verify the successful placement of your order by logging in to
    the broker website and checking the orders section there. You should see data
    similar to the screenshots shown in the outputs of *step 3* and *step 4*.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 3*, if you see the status as `'COMPLETE'` instead of `'TRIGGER PENDING'`,
    this could be due to high volatility. If you want the order to stay in the `'OPEN'` state
    for a while, try placing the order further away from the market price.
  prefs: []
  type: TYPE_NORMAL
- en: 'The other steps in this recipe follow the same pattern of placing an order
    and getting its status, for a different combination of attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Steps 5*, *6,* and *7*: `SELL`, `REGULAR`, `INTRADAY`, `STOPLOSS_LIMIT` order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Steps 8*, *9,* and *10*: `BUY`, `REGULAR`, `DELIVERY`, `STOPLOSS_LIMIT` order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Steps 11*, *12,* and *13*: `SELL`, `REGULAR`, `DELIVERY`, `STOPLOSS_LIMIT`
    order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Placing a regular stoploss-market order
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A regular stoploss-market order is a type of order where a single order is
    placed at a specific price. Unlike the regular market order, this is not the market
    price. To place this order, a specific parameter called the *trigger price* is
    needed. This parameter should satisfy the following conditions:'
  prefs: []
  type: TYPE_NORMAL
- en: The *trigger price* should be above the market price for a `BUY` order.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *trigger price* should be below the market price for a `SELL` order.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If these conditions are not satisfied, the order may either get placed at the
    market price, essentially converting it into a regular market order, or may be
    rejected by the broker as an invalid order.
  prefs: []
  type: TYPE_NORMAL
- en: On placing a regular stoploss-market order, it goes through various intermediate
    states before finally reaching an end state (`COMPLETE`, `CANCELLED`, or `REJECTED`).
    A regular stoploss-market order could stay in the `TRIGGER_PEDNING` state for
    a while until favorable market conditions are achieved, before moving to the `COMPLETE`
    state.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following state machine diagram demonstrates the various states of a regular
    stoploss-market order during its lifetime:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/22c83c5b-f98a-49a9-82ea-b6206949b8df.png)'
  prefs: []
  type: TYPE_IMG
- en: After the order is placed, it stays in the `TRIGGER_PENDING` state until the
    market price breaches the *trigger price*. That is when this order is activated
    and sent to the exchange. The order is then executed at the best available market
    price. The order state transitions from `TRIGGER_PENDING` to `OPEN` to the `COMPLETE`
    state.
  prefs: []
  type: TYPE_NORMAL
- en: A regular stoploss-market order behaves similarly to a regular stoploss-limit
    order (see the *Placing a regular stoploss-Limit Order* recipe), except for one
    difference—the stoploss-market order requires only the *trigger price* and not
    the *limit price*, whereas the stoploss-limit order requires both parameters.
    You can consider a stoploss-market order as a stoploss-limit order with an unbounded
    *limit price*.
  prefs: []
  type: TYPE_NORMAL
- en: 'This recipe demonstrates placing of the following regular stoploss-market orders
    and querying their statuses:'
  prefs: []
  type: TYPE_NORMAL
- en: '`BUY`, `REGULAR`, `INTRADAY`, `STOPLOSS_MARKET` order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SELL`, `REGULAR`, `INTRADAY`, `STOPLOSS_MARKET` order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BUY`, `REGULAR`, `DELIVERY`, `STOPLOSS_MARKET` order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SELL`, `REGULAR`, `DELIVERY`, `STOPLOSS_MARKET` order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the `broker_connection` object and constants from `pyalgotrading`
    package are available in your Python namespace. Refer to the *Technical requirements*
    section of this chapter to set up this object.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We execute the following steps for this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fetch a financial instrument and assign it to `instrument`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch the LTP. Place a `BUY`, `REGULAR`, `INTRADAY`, `STOPLOSS_MARKET` order
    and display the order ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output (your output may differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch and display the order status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'If you log in to the broker site with your credentials and go to the orders
    section, you can find your order details as shown in the following screenshot
    (some data may differ for you):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a88793ce-2a5b-4560-9cf0-4a425a274ec2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fetch and display the order status again after some time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'If you log in to the broker site with your credentials and go to the orders
    section, you can find your order details as shown in the following screenshot
    (some data may differ for you):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/82d093f4-487a-41dd-847b-fca922289993.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fetch the LTP. Place a `SELL`, `REGULAR`, `INTRADAY`, `STOPLOSS_MARKET` order
    and display the order ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output (your output may differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch and display the order status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'If you log in to the broker site with your credentials and go to the orders
    section, you can find your order details as shown in the following screenshot
    (some data may differ for you):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a8af82e5-3fab-4b50-bfce-bfe4f4e7c8de.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fetch and display the order status again after some time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'If you log in to the broker site with your credentials and go to the orders
    section, you can find your order details as shown in the following screenshot
    (some data may differ for you):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a8456af7-c617-41b9-9a08-00f5dd61906a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fetch the LTP. Place a `BUY`, `REGULAR`, `DELIVERY`, `STOPLOSS_MARKET` order
    and display the order ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output (your output may differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch and display the order status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'If you log in to the broker site with your credentials and go to the orders
    section, you can find your order details as shown in the following screenshot
    (some data may differ for you):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/42e11774-850a-4f20-b3b6-9c93482c3a45.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fetch and display the order status again after some time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'If you log in to the broker site with your credentials and go to the orders
    section, you can find your order details as shown in the following screenshot
    (some data may differ for you):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c3e1d077-e3c0-40fd-a9a0-59aaff89bcf6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fetch the LTP. Place a `SELL`, `REGULAR`, `DELIVERY`, `STOPLOSS_MARKET` order
    and display the order ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output (your output may differ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch and display the order status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'If you log in to the broker site with your credentials and go to the orders
    section, you can find your order details as shown in the following screenshot
    (some data may differ for you):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d4ca4bed-588e-4c90-8d74-b68834c14c7a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fetch and display the order status again after some time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: 'If you log in to the broker site with your credentials and go to the orders
    section, you can find your order details as shown in the following screenshot
    (some data may differ for you):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/28d4334a-58ed-4e08-9e65-99b6e165144d.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *step 1*, you use the `get_instrument()` method of the `BrokerConnectionZerodha`
    class to fetch an instrument and assign it to a new attribute, `instrument`. This
    object is an instance of the `Instrument` class. The two parameters needed to
    call `get_instrument` are the exchange (`'NSE'`) and the trading-symbol (`'KOTAKBANK'`).
  prefs: []
  type: TYPE_NORMAL
- en: 'In *step 2*, you fetch the LTP of the instrument using the `get_ltp()` method
    of the `BrokerConnectionZerodha` class and assign it to a new attribute, `ltp`.
    The `instrument` object is passed as the parameter here. Next, you use the `place_order`
    method of the `broker_connection` object to place a `BUY`, `REGULAR`, `INTRADAY`,
    `STOPLOSS_MARKET` order on the exchange. The `place_order` method is a wrapper
    on the broker specific place order API. It takes the following attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`instrument`: This is the financial instrument for which the order must be
    placed and should be an instance of the `Instrument` class. We pass `instrument`
    here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_transaction_type`: This is the order transaction type and should be
    an enum of the `BrokerOrderTransactionTypeConstants` type. We pass `BrokerOrderTransactionTypeConstants.BUY`
    here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_type`: This is the order type and should be an enum of the `BrokerOrderTypeConstants` type. We
    pass `BrokerOrderTypeConstants.REGULAR` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_code`: This is the order code and should be an enum of the `BrokerOrderCodeConstants` type. We
    pass `BrokerOrderCodeConstants.INTRADAY` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order_variety`: This is the order variety and should be an enum of the `BrokerOrderVarietyConstants` type. We
    pass `BrokerOrderVarietyConstants.STOPLOSS_MARKET` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`quantity`: This is the number of shares to be traded for the given instrument
    and should be a positive integer. We pass `1` here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`trigger_price`: This is the trigger price at which the order should be placed.
    We pass `ltp+1` here, which means `1` unit price above `ltp`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (The attributes passed to the `place_order` method are broker-agnostic constants,
    imported earlier from the `pyalgotrading.constants` module.)
  prefs: []
  type: TYPE_NORMAL
- en: On placing the order in *step 2*, you get an order ID from the broker, which
    you assign to a new attribute, `order1_id`. The `order1_id` object is a string.
    If the order placement is not successful for some reason, you may not get an order
    ID. Observe that the `trigger_price` parameter is passed a value of `ltp+1`. This
    means the order is placed above the market price, which is a necessary condition
    for placing `BUY STOPLOSS_MARKET` orders.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 3*, you fetch the status of the placed order using `get_order_status()`
    method of the `broker_connection` object. You pass `order1_id` as the parameter
    to the `get_order_status()` method. You get the order status as `'TRIGGER PENDING'`,
    a string. You can use `order1_id` to fetch the status of the placed order at any
    later point of time as well. In *step 4*, you fetch the order status again, and
    if the order is completed, you get the order status as `'COMPLETE'`.
  prefs: []
  type: TYPE_NORMAL
- en: You can also verify the successful placement of your order by logging in to
    the broker website and checking the orders section there. You should see data
    similar to the screenshot shown in the outputs of *step 3* and *step 4*.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 3*, if you see the status as `'COMPLETE'` instead of `'TRIGGER PENDING'`,
    this could be due to high volatility. If you want the order to stay in the `'OPEN'` state
    for a while, try placing the order further away from the market price.
  prefs: []
  type: TYPE_NORMAL
- en: 'The other steps in this recipe follow the same pattern of placing an order
    and getting its status, for a different combination of attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Steps 5*, *6*, and *7*: `SELL`, `REGULAR`, `INTRADAY`, `STOPLOSS_MARKET` order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Steps 8*, *9,* and *10*: `BUY`, `REGULAR`, `DELIVERY`, `STOPLOSS_MARKET` order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Steps 11*, *12,* and *13*: `SELL`, `REGULAR`, `DELIVERY`, `STOPLOSS_MARKET`
    order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
