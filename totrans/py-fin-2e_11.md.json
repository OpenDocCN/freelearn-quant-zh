["```py\nimport scipy.stats as stats\nfrom scipy import sqrt, exp,pi\nd1=stats.norm.pdf(0,0.1,0.05)      \nprint(\"d1=\",d1)\nd2=1/sqrt(2*pi*0.05**2)*exp(-(0-0.1)**2/0.05**2/2)  # verify manually\nprint(\"d2=\",d2) \n('d1=', 1.0798193302637611)\n('d2=', 1.0798193302637611)\n```", "```py\nfrom scipy import exp,sqrt,stats,pi\nd1=stats.norm.pdf(0)\nprint(\"d1=\",d1)\nd2=1/sqrt(2*pi)           # verify manually\nprint(\"d2=\",d2)\n('d1=', 0.3989422804014327)\n('d2=', 0.3989422804014327)\n```", "```py\nimport scipy as sp\nimport matplotlib.pyplot as plt\nx = sp.arange(-3,3,0.1)\ny=sp.stats.norm.pdf(x)\nplt.title(\"Standard Normal Distribution\")\nplt.xlabel(\"X\")\nplt.ylabel(\"Y\")\nplt.plot(x,y)\nplt.show()\n```", "```py\nimport scipy as sp\nfrom matplotlib import pyplot as plt\nz=-2.325       # user can change this number \nxStart=-3.8    # arrow line start x\nyStart=0.2     # arrow line start x\nxEnd=-2.5      # arrow line start x\nyEnd=0.05      # arrow line start x\ndef f(t):\n    return sp.stats.norm.pdf(t) \n\nplt.ylim(0,0.45)\nx = sp.arange(-3,3,0.1) \ny1=f(x)\nplt.plot(x,y1)\nx2= sp.arange(-4,z,1/40.) \nsum=0\ndelta=0.05\ns=sp.arange(-10,z,delta) \nfor i in s:\n    sum+=f(i)*delta\n\nplt.annotate('area is '+str(round(sum,4)),xy=(xEnd,yEnd),xytext=(xStart,yStart), arrowprops=dict(facecolor='red',shrink=0.01))\nplt.annotate('z= '+str(z),xy=(z,0.01)) \nplt.fill_between(x2,f(x2))\nplt.show()\n```", "```py\nfrom scipy.stats import norm\nconfidence_level=0.99\nz=norm.ppf(1-confidence_level)\nprint(z)\n-2.32634787404\n```", "```py\nimport scipy as sp\nimport scipy as sp\nfrom scipy.stats import norm\nfrom matplotlib import pyplot as plt\n\nconfidence_level=0.95   # input \nz=norm.ppf(1-confidence_level) \ndef f(t):\n    return sp.stats.norm.pdf(t)\n#\nplt.ylim(0,0.5)\nx = sp.arange(-7,7,0.1) \nret=f(x)\nplt.plot(x,ret)\nx2= sp.arange(-4,z,1/40.) \nx3=sp.arange(z,4,1/40.)\nsum=0\ndelta=0.05\ns=sp.arange(-3,z,delta) \nfor i in s:\n    sum+=f(i)*delta\nnote1='Red area to the left of the'\nnote2='dotted red line reprsesents'\nnote3='5% of the total area'\n#\nnote4='The curve represents a hypothesis'\nnote5='profit/loss density function. The'\nnote6='5% VaR is 1.64 standard deviation'\nnote7='from the mean, i.e.,zero'\n#\nnote8='The blue area to the righ of the'\nnote9='red dotted line represents 95%'\nnote10='of the returns space'\n# this is for the vertical line\nplt.axvline(x=z, ymin=0.1, ymax = 1, linewidth=2,ls='dotted', color='r')\nplt.figtext(0.14,0.5,note1)\nplt.figtext(0.14,0.47,note2)\nplt.figtext(0.14,0.44,note3)\n#\nplt.figtext(0.5,0.85,note4)\nplt.figtext(0.5,0.82,note5)\nplt.figtext(0.5,0.79,note6)\nplt.figtext(0.5,0.76,note7)\nplt.annotate(\"\",xy=(-2.5,0.08),xytext=(-2.5,0.18), arrowprops=dict(facecolor='red',shrink=0.001))\n#\nplt.figtext(0.57,0.5,note8)\nplt.figtext(0.57,0.47,note9)\nplt.figtext(0.57,0.44,note10)\nplt.annotate(\"\",xy=(1.5,0.28),xytext=(4.5,0.28), arrowprops=dict(facecolor='blue',shrink=0.001))\n#\nplt.annotate('z= '+str(z),xy=(2.,0.1)) \nplt.fill_between(x2,f(x2), color='red')\nplt.fill_between(x3,f(x3), color='blue')\nplt.title(\"Visual presentation of VaR, 5% vs. 95%\")\nplt.show()\n```", "```py\nimport numpy as np\nimport pandas as pd\nfrom scipy.stats import norm\nfrom matplotlib.finance import quotes_historical_yahoo_ochl as getData\n#\n# input area\nticker='IBM'              # input 1\nn_shares=1000             # input 2\nconfidence_level=0.99     # input 3\nbegdate=(2012,2,7)        # input 4\nenddate=(2017,2,7)        # input 5\n#\nz=norm.ppf(1-confidence_level) \nx=getData(ticker,begdate,enddate,asobject=True,adjusted=True)\nprint(x[0])\nret = x.aclose[1:]/x.aclose[:-1]-1\n#\nposition=n_shares*x.close[0] \nstd=np.std(ret)\n#\nVaR=position*z*std\nprint(\"Holding=\",position, \"VaR=\", round(VaR,4), \"tomorrow\")\n(datetime.date(2012, 2, 7), 2012, 2, 7, 734540.0, 167.75861437920275, 168.543152, 169.23178870104016, 167.34020198573538, 3433000.0, 168.543152)\n('Holding=', 168543.152, 'VaR=', -4603.5087, 'tomorrow')\n```", "```py\nimport numpy as np\nimport pandas as pd\nfrom scipy.stats import norm\nfrom matplotlib.finance import quotes_historical_yahoo_ochl as getData\nticker='WMT'            # input 1\nn_shares=50             # input 2\nconfidence_level=0.99   # input 3\nn_days=10               # input 4\nbegdate=(2012,1,1)      # input 5\nenddate=(2016,12,31)    # input 6\n\nz=norm.ppf(confidence_level) \n\nx=getData(ticker,begdate,enddate,asobject=True,adjusted=True)\nret = x.aclose[1:]/x.aclose[:-1]-1 \nposition=n_shares*x.close[0] \nVaR=position*z*np.std(ret)*np.sqrt(n_days)\nprint(\"Holding=\",position, \"VaR=\", round(VaR,4), \"in \", n_days, \"Days\")\n('Holding=', 2650.3070499999999, 'VaR=', 205.0288, 'in ', 10, 'Days')\n```", "```py\nx = getData(ticker, begdate, enddate,asobject=True, adjusted=True)\nlogret = np.log(x.aclose[1:]/x.aclose[:-1])\n\n# method 2: calculate 10 day returns \nddate=[]\nd0=x.date\nfor i in range(0,np.size(logret)): \n    ddate.append(int(i/nDays))\ny=pd.DataFrame(logret,ddate,columns=['retNdays']) \nretNdays=y.groupby(y.index).sum()\n#print(retNdays.head())\nposition=n_shares*x.close[0] \nVaR=position*z*np.std(retNdays)\nprint(\"Holding=\",position, \"VaR=\", round(VaR,4), \"in \", nDays, \"Days\")\n('Holding=', 2650.3070499999999, 'VaR=', 209.1118, 'in ', 10, 'Days')\n```", "```py\nimport pandas as pd\nx=pd.read_pickle(\"c:/temp/ff5VWindustryMonthly.pkl\")\nprint(x.head())\nprint(x.tail())\n         CNSMR   MANUF   HITEC   HLTH    OTHER\n192607  0.0543  0.0273  0.0183  0.0177  0.0216\n192608  0.0276  0.0233  0.0241  0.0425  0.0438\n192609  0.0216 -0.0044  0.0106  0.0069  0.0029\n192610 -0.0390 -0.0242 -0.0226 -0.0057 -0.0285\n192611  0.0370  0.0250  0.0307  0.0542  0.0211\n         CNSMR   MANUF   HITEC   HLTH    OTHER\n201608 -0.0101  0.0040  0.0068 -0.0323  0.0326\n201609 -0.0143  0.0107  0.0202  0.0036 -0.0121\n201610 -0.0252 -0.0231 -0.0141 -0.0743  0.0059\n201611  0.0154  0.0539  0.0165  0.0137  0.1083\n201612  0.0132  0.0158  0.0163  0.0084  0.0293\n```", "```py\nimport pandas as pd\nimport scipy as sp\nfrom scipy.stats import norm\n#\nconfidence_level=0.99   # input \nposition=([1000,1000,1000,1000,1000])\nz=norm.ppf(1-confidence_level)\nx=pd.read_pickle(\"c:/temp/ff5VWindustryMonthly.pkl\")\n#\nstd=sp.std(x,axis=0)\nmean=sp.mean(x,axis=0)\n#\nt=sp.dot(position,z)\nVaR=t*std\n#\n# output area\nprint(sp.shape(x))\nprint(\"Position=\",position)\nprint(\"VaR=\")\nprint(VaR)\n1086, 5)\n('Position=', [1000, 1000, 1000, 1000, 1000])\nVaR=\nCNSMR   -122.952735\nMANUF   -128.582446\nHITEC   -129.918893\nHLTH    -130.020356\nOTHER   -149.851230\ndtype: float64\n```", "```py\nfrom scipy import stats \nfrom matplotlib.finance import quotes_historical_yahoo_ochl as getData \nimport numpy as np \n#\t\nticker='MSFT' \nbegdate=(2012,1,1) \nenddate=(2016,12,31) \n#\np =getData(ticker, begdate, enddate,asobject=True, adjusted=True) \nret = (p.aclose[1:] - p.aclose[:-1])/p.aclose[1:] \nprint 'ticker=',ticker,'W-test, and P-value' \nprint(stats.shapiro(ret))\nprint( stats.anderson(ret))\nticker= MSFT W-test, and P-value\n(0.9130843877792358, 3.2116320877511604e-26)\nAndersonResult(statistic=14.629260310763584, critical_values=array([ 0.574,  0.654,  0.785,  0.915,  1.089]), significance_level=array([ 15\\. ,  10\\. ,   5\\. ,   2.5,   1\\. ]))\n```", "```py\nimport numpy as np \nfrom scipy import stats \nfrom matplotlib.finance import quotes_historical_yahoo_ochl as getData \n#\nticker='^GSPC'    # ^GSPC is for S&P500\nbegdate=(2012,1,1) \nenddate=(2016,12,31) \n#\np =getData(ticker, begdate, enddate,asobject=True, adjusted=True) \nret = (p.aclose[1:] - p.aclose[:-1])/p.aclose[1:] \nprint 'ticker=',ticker,'W-test, and P-value' \nprint(stats.shapiro(ret))\nprint( stats.anderson(ret) )\nticker= ^GSPC W-test, and P-value\n(0.9743353128433228, 3.7362179458122827e-14)\nAndersonResult(statistic=8.6962226557502618, critical_values=array([ 0.574,  0.654,  0.785,  0.915,  1.089]), significance_level=array([ 15\\. ,  10\\. ,   5\\. ,   2.5,   1\\. ]))\n```", "```py\nfrom scipy import stats,random\nimport numpy as np\nnp.random.seed(12345)\nn=5000000   \n#\nret = random.normal(0,1,n)\nprint('mean    =', np.mean(ret))\nprint('std     =',np.std(ret))\nprint('skewness=',stats.skew(ret))\nprint('kurtosis=',stats.kurtosis(ret))\n('mean    =', 0.00035852273706422504)\n('std     =', 0.99983435063933623)\n('skewness=', -0.00040545999711941665)\n('kurtosis=', -0.001162270913658947)\n```", "```py\nimport numpy as np\nimport pandas as pd\nfrom scipy.stats import stats,norm\nfrom matplotlib.finance import quotes_historical_yahoo_ochl as getData\n#\nticker='WMT'            # input 1\nn_shares=500            # input 2\nconfidence_level=0.99   # input 3\nbegdate=(2000,1,1)      # input 4\nenddate=(2016,12,31)    # input 5\n#\n# Method I: based on the first two moments\nz=abs(norm.ppf(1-confidence_level)) x=getData(ticker,begdate,enddate,asobject=True,adjusted=True)\nret = x.aclose[1:]/x.aclose[:-1]-1\nposition=n_shares*x.close[0] \nmean=np.mean(ret)\nstd=np.std(ret)\nVaR1=position*(mean-z*std)\nprint(\"Holding=\",round(position,2), \"VaR1=\", round(VaR1,2), \"for 1 day \")\n#\n# Modified VaR: based on 4 moments\ns=stats.skew(ret)\nk=stats.kurtosis(ret)\nt=z+1/6.*(z**2-1)*s+1/24.*(z**3-3*z)*k-1/36.*(2*z**3-5*z)*s**2\nmVaR=position*(mean-t*std)\nprint(\"Holding=\",round(position,2), \"modified VaR=\", round(mVaR,2), \"for 1 day \")\n('Holding=', 24853.46, 'VaR1=', -876.84, 'for 1 day ')\n('Holding=', 24853.46, 'modified VaR=', -1500.41, 'for 1 day ')\n```", "```py\nimport numpy as np\na = np.array([[1,-4],[9,10]])\nb=np.sort(a)                \nprint(\"a=\",a)\nprint(\"b=\",b)\n('a=', array([[ 1, -4],\n       [ 9, 10]]))\n('b=', array([[-4,  1],\n       [ 9, 10]]))\n```", "```py\nimport pandas as pd\na = pd.DataFrame([[9,4],[9,2],[1,-1]],columns=['A','B'])\nprint(a)\n# sort by A ascedning, then B descending \nb= a.sort_values(['A', 'B'], ascending=[1, 0])\nprint(b)\n# sort by A and B, both ascedning \nc= a.sort_values(['A', 'B'], ascending=[1, 1])\nprint(c)\n```", "```py\n#\nz=norm.ppf(confidence_level) \nx=getData(ticker,begdate,enddate,asobject=True,adjusted=True)\nret = x.aclose[1:]/x.aclose[:-1]-1\n#\nposition=n_shares*x.close[0] \nstd=np.std(ret)\n#\nVaR=position*z*std\nprint(\"Holding=\",position, \"VaR=\", round(VaR,4), \"tomorrow\")\n('Holding=', 26503.070499999998, 'VaR=', 648.3579, 'tomorrow')\n```", "```py\nret = np.array(x.aclose[1:]/x.aclose[:-1]-1)\nret2=np.sort(ret) \n#\nposition=n_shares*x.close[0] \nn=np.size(ret2)\nleftTail=int(n*(1-confidence_level))\nprint(leftTail)\n#\nVaR2=position*ret2[leftTail]\nprint(\"Holding=\",position, \"VaR=\", round(VaR2,4), \"tomorrow\")\n('Holding=', 26503.070499999998, 'VaR=', -816.7344, 'tomorrow')\n```", "```py\nret = x.aclose[1:]/x.aclose[:-1]-1\nposition=n_shares*x.close[0] \n#\n# Method 1: based on normality \nmean=np.mean(ret)\nstd=np.std(ret)\nmeanNdays=(1+mean)**nDays-1\nstdNdays=std*np.sqrt(nDays)\nz=norm.ppf(confidence_level) \nVaR1=position*z*stdNdays\nprint(\"Holding=\",position, \"VaR1=\", round(VaR1,0), \"in \", nDays, \"Days\")\n#\n# method 2: calculate 10 day returns \nddate=[]\nd0=x.date\nfor i in range(0,np.size(logret)): \n    ddate.append(int(i/nDays))\ny=pd.DataFrame(logret,index=ddate,columns=['retNdays']) \nlogRet=y.groupby(y.index).sum()\nretNdays=np.exp(logRet)-1\n# \nVaR2=position*z*np.std(retNdays)\nprint(\"Holding=\",position, \"VaR2=\", round(VaR2,0), \"in \", nDays, \"Days\")\n# \n# Method III\nret2=np.sort(retNdays) \nn=np.size(ret2)\nleftTail=int(n*(1-confidence_level))\nprint(leftTail)\n#\nVaR3=position*ret2[leftTail]\nprint(\"Holding=\",position, \"VaR=\", round(VaR3,0), \"in \",nDays, \"Days\")\n('Holding=', 24853.456000000002, 'VaR1=', 2788.0, 'in ', 10, 'Days')\n('Holding=', 24853.456000000002, 'VaR2=', 2223.0, 'in ', 10, 'Days')\n4\n('Holding=', 24853.456000000002, 'VaR=', 1301.0, 'in ', 10, 'Days')\n```", "```py\n#\nposition=n_shares*x.close[0] \nmean=np.mean(ret)\nstd=np.std(ret)\n#\nVaR=position*(mean+z*std)\nprint(\"Holding=\",position, \"VaR=\", round(VaR,4), \"tomorrow\")\n('Holding=', 26503.070499999998, 'VaR=', -641.2911, 'tomorrow')\n```", "```py\n#\nposition=n_shares*x.close[0] \nmean=np.mean(ret)\nstd=np.std(ret)\n#\nn_simulation=5000\nsp.random.seed(12345) \nret2=sp.random.normal(mean,std,n_simulation) \nret3=np.sort(ret2) \nm=int(n_simulation*(1-confidence_level))\nVaR=position*(ret3[m])\nprint(\"Holding=\",position, \"VaR=\", round(VaR,4), \"tomorrow\")\n('Holding=', 26503.070499999998, 'VaR=', -627.3443, 'tomorrow')\n```", "```py\nfrom matplotlib.finance import quotes_historical_yahoo_ochl as getData\n\n# Step 1: input area\ntickers=('IBM','WMT','C')  # tickers\nbegdate=(2012,1,1)         # beginning date \nenddate=(2016,12,31)       # ending date\nweight=(0.2,0.5,0.3)       # weights\nconfidence_level=0.99      # confidence level \nposition=5e6               # total value\n#\nz=norm.ppf(confidence_level) \n# Step 2: define a function\ndef ret_f(ticker,begdate,enddte):\n    x=getData(ticker,begdate,enddate,asobject=True,adjusted=True)\n    ret=x.aclose[1:]/x.aclose[:-1]-1\n    d0=x.date[1:]\n    return pd.DataFrame(ret,index=d0,columns=[ticker])\n# Step 3\nn=np.size(tickers)\nfinal=ret_f(tickers[0],begdate,enddate)\nfor i in np.arange(1,n):\n    a=ret_f(tickers[i],begdate,enddate)\n    if i>0:\n        final=pd.merge(final,a,left_index=True,right_index=True)\n#\n# Step 4: get porfolio returns\nportRet=sp.dot(final,weight)\nportStd=sp.std(portRet)\nportMean=sp.mean(portRet)\nVaR=position*(portMean-z*portStd)\nprint(\"Holding=\",position, \"VaR=\", round(VaR,2), \"tomorrow\")\n\n# compare\ntotal2=0.0\nfor i in np.arange(n):\n    stock=tickers[i]\n    ret=final[stock]\n    position2=position*weight[i]\n    mean=sp.mean(ret)\n    std=sp.std(ret)\n    VaR=position2*(mean-z*std)\n    total2+=VaR\n    print(\"For \", stock, \"with a value of \", position2, \"VaR=\", round(VaR,2))\nprint(\"Sum of three VaR=\",round(total2,2))\n('Holding=', 5000000.0, 'VaR=', -109356.22, 'tomorrow')\n('For ', 'IBM', 'with a value of ', 1000000.0, 'VaR=', -27256.67)\n('For ', 'WMT', 'with a value of ', 2500000.0, 'VaR=', -60492.15)\n('For ', 'C', 'with a value of ', 1500000.0, 'VaR=', -59440.77)\n('Sum of three VaR=', -147189.59)\n```", "```py\n#\nposition=n_shares*x.close[0] \nmean=np.mean(ret)\nz=norm.ppf(1-confidence_level)\nstd=np.std(ret)\n#\nVaR=position*(mean+z*std)\nprint(\"Holding=\",position, \"VaR=\", round(VaR,4), \"tomorrow\")\nprint(\"VaR/holding=\",VaR/position)\n(datetime.date(2016, 2, 8), 2016, 2, 8, 736002.0, 121.65280462310274, 122.598996, 123.11070921267809, 119.84731962624865, 7364000.0, 122.598996)\n('Holding=', 122598.996, 'VaR=', -3186.5054, 'tomorrow')\n('VaR/holding=', -0.025991284652254254)\n```", "```py\nVaR=-3186.5054            # from the previous program\nposition=122598.996       # from the previous program\n#('Holding=', 122598.996, 'VaR=', -3186.5054, 'tomorrow')\n#('VaR/holding=', -0.025991284652254254)\n#\nz=norm.ppf(1-confidence_level) \nx=getData(ticker,begdate,enddate,asobject=True,adjusted=True)\nprint(\"first day=\",x[0])\nret = x.aclose[1:]/x.aclose[:-1]-1\n#\ncutOff=VaR/position \nn=len(ret)\nret2=ret[ret<=cutOff]\nn2=len(ret2)\nprint(\"n2=\",n2)\nratio=n2*1./(n*1.)\nprint(\"Ratio=\", ratio)\n('first day=', (datetime.date(2016, 2, 8), 2016, 2, 8, 736002.0, 121.65280462310274, 122.598996, 123.11070921267809, 119.84731962624865, 7364000.0, 122.598996))\n('n2=', 4)\n('Ratio=', 0.015873015873015872)\n```", "```py\nimport scipy as sp\nimport scipy.stats as stats\nx = sp.arange(-3,3,0.01)\nret=stats.norm.pdf(x)\nconfidence=0.99\nposition=10000\nz=stats.norm.ppf(1-confidence)\nprint(\"z=\",z)\nzES=-stats.norm.pdf(z)/(1-confidence)\nprint(\"zES=\", zES)\nstd=sp.std(ret)\nVaR=position*z*std\nprint(\"VaR=\",VaR)\nES=position*zES*std\nprint(\"ES=\",ES)\n```", "```py\nx=getData(ticker,begdate,enddate,asobject=True,adjusted=True)\nret = np.array(x.aclose[1:]/x.aclose[:-1]-1)\nret2=np.sort(ret) \n#\nposition=n_shares*x.close[0] \nn=np.size(ret2)\nm=int(n*(1-confidence_level))\nprint(\"m=\",m)\n#\nsum=0.0\nfor i in np.arange(m):\n    sum+=ret2[i]\nret3=sum/m\nES=position*ret3\nprint(\"Holding=\",position, \"Expected Shortfall=\", round(ES,4), \"tomorrow\")\n('m=', 12)\n('Holding=', 26503.070499999998, 'Expected Shortfall=', -1105.1574, 'tomorrow')\n```"]