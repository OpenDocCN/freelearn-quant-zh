["```py\n    import pandas as pd\n    import numpy as np\n    import yfinance as yf \n    ```", "```py\n    df = yf.download(\"AAPL\",\n                     start=\"2010-01-01\",\n                     end=\"2020-12-31\",\n                     progress=False)\n    df = df.loc[:, [\"Adj Close\"]] \n    ```", "```py\n    df[\"simple_rtn\"] = df[\"Adj Close\"].pct_change()\n    df[\"log_rtn\"] = np.log(df[\"Adj Close\"]/df[\"Adj Close\"].shift(1)) \n    ```", "```py\n    df.head() \n    ```", "```py\n    import pandas as pd\n    import nasdaqdatalink\n    nasdaqdatalink.ApiConfig.api_key = \"YOUR_KEY_HERE\" \n    ```", "```py\n    df = df.resample(\"M\").last() \n    ```", "```py\n    df_cpi = (\n        nasdaqdatalink.get(dataset=\"RATEINF/CPI_USA\", \n                           start_date=\"2009-12-01\", \n                           end_date=\"2020-12-31\")\n        .rename(columns={\"Value\": \"cpi\"})\n    )\n    df_cpi \n    ```", "```py\n    df = df.join(df_cpi, how=\"left\") \n    ```", "```py\n    df[\"simple_rtn\"] = df[\"Adj Close\"].pct_change()\n    df[\"inflation_rate\"] = df[\"cpi\"].pct_change() \n    ```", "```py\n    df[\"real_rtn\"] = (\n        (df[\"simple_rtn\"] + 1) / (df[\"inflation_rate\"] + 1) - 1\n    )\n    df.head() \n    ```", "```py\n    import cpi \n    ```", "```py\n    StaleDataWarning: CPI data is out of date \n    ```", "```py\n    cpi.update() \n    ```", "```py\n    cpi_series = cpi.series.get() \n    ```", "```py\n    df_cpi_2 = cpi_series.to_dataframe() \n    ```", "```py\n    df_cpi_2.query(\"period_type == 'monthly' and year >= 2010\") \\\n            .loc[:, [\"date\", \"value\"]] \\\n            .set_index(\"date\") \\\n            .head(12) \n    ```", "```py\n    import pandas as pd\n    import numpy as np \n    ```", "```py\n    def  realized_volatility(x):\n        return np.sqrt(np.sum(x**2)) \n    ```", "```py\n    df_rv = (\n        df.groupby(pd.Grouper(freq=\"M\"))\n        .apply(realized_volatility)\n        .rename(columns={\"log_rtn\": \"rv\"})\n    ) \n    ```", "```py\n    df_rv.rv = df_rv[\"rv\"] * np.sqrt(12) \n    ```", "```py\n    fig, ax = plt.subplots(2, 1, sharex=True)\n    ax[0].plot(df)\n    ax[0].set_title(\"Apple's log returns (2000-2012)\")\n    ax[1].plot(df_rv)\n    ax[1].set_title(\"Annualized realized volatility\")\n    plt.show() \n    ```", "```py\n    import pandas as pd\n    import numpy as np\n    import nasdaqdatalink \n    ```", "```py\n    nasdaqdatalink.ApiConfig.api_key = \"YOUR_KEY_HERE\"\n     df = (\n        nasdaqdatalink.get(dataset=\"RATEINF/CPI_USA\", \n                           start_date=\"2015-01-01\", \n                           end_date=\"2020-12-31\")\n        .rename(columns={\"Value\": \"cpi\"})\n    ) \n    ```", "```py\n    np.random.seed(42)\n    rand_indices = np.random.choice(df.index, 5, replace=False)\n    df[\"cpi_missing\"] = df.loc[:, \"cpi\"]\n    df.loc[rand_indices, \"cpi_missing\"] = np.nan\n    df.head() \n    ```", "```py\n    for method in [\"bfill\", \"ffill\"]:\n        df[f\"method_{method}\"] = (\n            df[[\"cpi_missing\"]].fillna(method=method)\n        ) \n    ```", "```py\n    df.loc[rand_indices].sort_index() \n    ```", "```py\n    df.loc[:\"2017-01-01\"] \\\n      .drop(columns=[\"cpi_missing\"]) \\\n      .plot(title=\"Different ways of filling missing values\"); \n    ```", "```py\n    df[\"method_interpolate\"] = df[[\"cpi_missing\"]].interpolate() \n    ```", "```py\n    df.loc[rand_indices].sort_index() \n    ```", "```py\n    df.loc[:\"2017-01-01\"] \\\n      .drop(columns=[\"cpi_missing\"]) \\\n      .plot(title=\"Different ways of filling missing values\"); \n    ```", "```py\n    import pandas as pd\n    import yfinance as yf\n    from forex_python.converter import CurrencyRates \n    ```", "```py\n    df = yf.download(\"AAPL\",\n                     start=\"2020-01-01\",\n                     end=\"2020-01-31\",\n                     progress=False)\n    df = df.drop(columns=[\"Adj Close\", \"Volume\"]) \n    ```", "```py\n    c = CurrencyRates() \n    ```", "```py\n    df[\"usd_eur\"] = [c.get_rate(\"USD\", \"EUR\", date) for date in df.index] \n    ```", "```py\n    for column in df.columns[:-1]:\n        df[f\"{column}_EUR\"] = df[column] * df[\"usd_eur\"]\n    df.head() \n    ```", "```py\n    usd_rates = c.get_rates(\"USD\")\n    usd_rates \n    ```", "```py\n    {'EUR': 0.8441668073611345,\n     'JPY': 110.00337666722943,\n     'BGN': 1.651021441836907,\n     'CZK': 21.426641904440316,\n     'DKK': 6.277224379537396,\n    } \n    ```", "```py\n    df = yf.download(\"USDEUR=X\",\n                     start=\"2000-01-01\",\n                     end=\"2010-12-31\",\n                     progress=False)\n    df.head() \n    ```", "```py\n    from binance.spot import Spot as Client\n    import pandas as pd\n    import numpy as np \n    ```", "```py\n    spot_client = Client(base_url=\"https://api3.binance.com\")\n    r = spot_client.trades(\"BTCEUR\") \n    ```", "```py\n    df = (\n        pd.DataFrame(r)\n        .drop(columns=[\"isBuyerMaker\", \"isBestMatch\"])\n    )\n    df[\"time\"] = pd.to_datetime(df[\"time\"], unit=\"ms\")\n    for column in [\"price\", \"qty\", \"quoteQty\"]:\n        df[column] = pd.to_numeric(df[column])\n    df \n    ```", "```py\n    def  get_bars(df, add_time=False):\n        ohlc = df[\"price\"].ohlc()\n        vwap = (\n            df.apply(lambda x: np.average(x[\"price\"], weights=x[\"qty\"]))\n            .to_frame(\"vwap\")\n        )\n        vol = df[\"qty\"].sum().to_frame(\"vol\")\n        cnt = df[\"qty\"].size().to_frame(\"cnt\")\n        if add_time:\n            time = df[\"time\"].last().to_frame(\"time\")\n            res = pd.concat([time, ohlc, vwap, vol, cnt], axis=1)\n        else:\n            res = pd.concat([ohlc, vwap, vol, cnt], axis=1)\n        return res \n    ```", "```py\n    df_grouped_time = df.groupby(pd.Grouper(key=\"time\", freq=\"1Min\"))\n    time_bars = get_bars(df_grouped_time)\n    time_bars \n    ```", "```py\n    bar_size = 50\n    df[\"tick_group\"] = (\n        pd.Series(list(range(len(df))))\n        .div(bar_size)\n        .apply(np.floor)\n        .astype(int)\n        .values\n    )\n    df_grouped_ticks = df.groupby(\"tick_group\")\n    tick_bars = get_bars(df_grouped_ticks, add_time=True)\n    tick_bars \n    ```", "```py\n    bar_size = 1\n    df[\"cum_qty\"] = df[\"qty\"].cumsum()\n    df[\"vol_group\"] = (\n        df[\"cum_qty\"]\n        .div(bar_size)\n        .apply(np.floor)\n        .astype(int)\n        .values\n    )\n    df_grouped_ticks = df.groupby(\"vol_group\")\n    volume_bars = get_bars(df_grouped_ticks, add_time=True)\n    volume_bars \n    ```", "```py\n    bar_size = 50000\n    df[\"cum_value\"] = df[\"quoteQty\"].cumsum()\n    df[\"value_group\"] = (\n        df[\"cum_value\"]\n        .div(bar_size)\n        .apply(np.floor)\n        .astype(int)\n        .values\n    )\n    df_grouped_ticks = df.groupby(\"value_group\")\n    dollar_bars = get_bars(df_grouped_ticks, add_time=True)\n    dollar_bars \n    ```"]