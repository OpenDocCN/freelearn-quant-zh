["```py\n    import pandas as pd\n    import yfinance as yf\n    import statsmodels.api as sm \n    ```", "```py\n    RISKY_ASSET = \"AMZN\"\n    MARKET_BENCHMARK = \"^GSPC\"\n    START_DATE = \"2016-01-01\"\n    END_DATE = \"2020-12-31\" \n    ```", "```py\n    df = yf.download([RISKY_ASSET, MARKET_BENCHMARK],\n                     start=START_DATE,\n                     end=END_DATE,\n                     adjusted=True,\n                     progress=False) \n    ```", "```py\n    X = (\n        df[\"Adj Close\"]\n        .rename(columns={RISKY_ASSET: \"asset\", \n                         MARKET_BENCHMARK: \"market\"})\n        .resample(\"M\")\n        .last()\n        .pct_change()\n        .dropna()\n    ) \n    ```", "```py\n    covariance = X.cov().iloc[0,1]\n    benchmark_variance = X.market.var()\n    beta = covariance / benchmark_variance \n    ```", "```py\n    # separate target\n    y = X.pop(\"asset\")\n    # add constant\n    X = sm.add_constant(X)\n    # define and fit the regression model\n    capm_model = sm.OLS(y, X).fit()\n    # print results\n    print(capm_model.summary()) \n    ```", "```py\n    N_DAYS = 90 \n    ```", "```py\n    df_rf = yf.download(\"^IRX\",\n                        start=START_DATE,\n                        end=END_DATE,\n                        progress=False) \n    ```", "```py\n    rf = df_rf.resample(\"M\").last().Close / 100 \n    ```", "```py\n    rf = ( 1 / (1 - rf * N_DAYS / 360) )**(1 / N_DAYS)  \n    rf = (rf ** 30) - 1 \n    ```", "```py\n    rf.plot(title=\"Risk-free rate (13-Week Treasury Bill)\") \n    ```", "```py\n    import pandas_datareader.data as web \n    ```", "```py\n    rf = web.DataReader(\n        \"TB3MS\", \"fred\", start=START_DATE, end=END_DATE\n    ) \n    ```", "```py\n    rf = (1 + (rf / 100)) ** (1 / 12) - 1 \n    ```", "```py\n    rf.plot(title=\"Risk-free rate (3-Month Treasury Bill)\") \n    ```", "```py\n    import pandas as pd\n    import yfinance as yf\n    import statsmodels.formula.api as smf\n    import pandas_datareader.data as web \n    ```", "```py\n    RISKY_ASSET = \"AAPL\"\n    START_DATE = \"2016-01-01\"\n    END_DATE = \"2020-12-31\" \n    ```", "```py\n    ff_dict = web.DataReader(\"F-F_Research_Data_Factors\",\n                             \"famafrench\",\n                             start=START_DATE,\n                             end=END_DATE) \n    ```", "```py\n    factor_3_df = ff_dict[0].rename(columns={\"Mkt-RF\": \"MKT\"}) \\\n                            .div(100)\n    factor_3_df.head() \n    ```", "```py\n    asset_df = yf.download(RISKY_ASSET,\n                           start=START_DATE,\n                           end=END_DATE,\n                           adjusted=True) \n    ```", "```py\n    y = asset_df[\"Adj Close\"].resample(\"M\") \\\n                             .last() \\\n                             .pct_change() \\\n                             .dropna()\n    y.index = y.index.to_period(\"m\")\n    y.name = \"rtn\" \n    ```", "```py\n    factor_3_df = factor_3_df.join(y)\n    factor_3_df[\"excess_rtn\"] = (\n        factor_3_df[\"rtn\"] - factor_3_df[\"RF\"]\n    ) \n    ```", "```py\n    ff_model = smf.ols(formula=\"excess_rtn ~ MKT + SMB + HML\",\n                       data=factor_3_df).fit()\n    print(ff_model.summary()) \n    ```", "```py\nfrom pandas_datareader.famafrench import get_available_datasets\nget_available_datasets()[:5] \n```", "```py\n['F-F_Research_Data_Factors',\n 'F-F_Research_Data_Factors_weekly',\n 'F-F_Research_Data_Factors_daily',\n 'F-F_Research_Data_5_Factors_2x3',\n 'F-F_Research_Data_5_Factors_2x3_daily'] \n```", "```py\n    import pandas as pd\n    import numpy as np\n    import yfinance as yf\n    import statsmodels.formula.api as smf\n    import pandas_datareader.data as web \n    ```", "```py\n    ASSETS = [\"AMZN\", \"GOOG\", \"AAPL\", \"MSFT\"]\n    WEIGHTS = [0.25, 0.25, 0.25, 0.25]\n    START_DATE = \"2010-01-01\"\n    END_DATE = \"2020-12-31\" \n    ```", "```py\n    factor_3_df = web.DataReader(\"F-F_Research_Data_Factors\",\n                                 \"famafrench\",\n                                 start=START_DATE,\n                                 end=END_DATE)[0]\n    factor_3_df = factor_3_df.div(100) \n    ```", "```py\n    asset_df = yf.download(ASSETS,\n                           start=START_DATE,\n                           end=END_DATE,\n                           adjusted=True,\n                           progress=False) \n    ```", "```py\n    asset_df = asset_df[\"Adj Close\"].resample(\"M\") \\\n                                    .last() \\\n                                    .pct_change() \\\n                                    .dropna()\n    asset_df.index = asset_df.index.to_period(\"m\") \n    ```", "```py\n    asset_df[\"portfolio_returns\"] = np.matmul(\n        asset_df[ASSETS].values, WEIGHTS\n    ) \n    ```", "```py\n    factor_3_df = asset_df.join(factor_3_df).drop(ASSETS, axis=1)\n    factor_3_df.columns = [\"portf_rtn\", \"mkt\", \"smb\", \"hml\", \"rf\"]\n    factor_3_df[\"portf_ex_rtn\"] = (\n        factor_3_df[\"portf_rtn\"] - factor_3_df[\"rf\"]\n    ) \n    ```", "```py\n    def  rolling_factor_model(input_data, formula, window_size):\n\n        coeffs = []\n        for start_ind in range(len(input_data) - window_size + 1):        \n            end_ind = start_ind + window_size\n\n            ff_model = smf.ols(\n                formula=formula, \n                data=input_data[start_ind:end_ind]\n            ).fit()\n\n            coeffs.append(ff_model.params)\n\n        coeffs_df = pd.DataFrame(\n            coeffs,\n            index=input_data.index[window_size - 1:]\n        )\n        return coeffs_df \n    ```", "```py\n    MODEL_FORMULA = \"portf_ex_rtn ~ mkt + smb + hml\"\n    results_df = rolling_factor_model(factor_3_df,\n                                      MODEL_FORMULA,\n                                      window_size=60)\n    (\n        results_df\n        .plot(title = \"Rolling Fama-French Three-Factor model\",\n              style=[\"-\", \"--\", \"-.\", \":\"])\n        .legend(loc=\"center left\",bbox_to_anchor=(1.0, 0.5))\n    ) \n    ```", "```py\n    import pandas as pd\n    import yfinance as yf\n    import statsmodels.formula.api as smf\n    import pandas_datareader.data as web \n    ```", "```py\n    RISKY_ASSET = \"AMZN\"\n    START_DATE = \"2016-01-01\"\n    END_DATE = \"2020-12-31\" \n    ```", "```py\n    # three factors\n    factor_3_df = web.DataReader(\"F-F_Research_Data_Factors\",\n                                 \"famafrench\",\n                                 start=START_DATE,\n                                 end=END_DATE)[0]\n    # momentum factor\n    momentum_df = web.DataReader(\"F-F_Momentum_Factor\",\n                                 \"famafrench\",\n                                 start=START_DATE,\n                                 end=END_DATE)[0]\n    # five factors\n    factor_5_df = web.DataReader(\"F-F_Research_Data_5_Factors_2x3\",\n                                 \"famafrench\",\n                                 start=START_DATE,\n                                 end=END_DATE)[0] \n    ```", "```py\n    asset_df = yf.download(RISKY_ASSET,\n                           start=START_DATE,\n                           end=END_DATE,\n                           adjusted=True,\n                           progress=False) \n    ```", "```py\n    y = asset_df[\"Adj Close\"].resample(\"M\") \\\n                             .last() \\\n                             .pct_change() \\\n                             .dropna()\n    y.index = y.index.to_period(\"m\")\n    y.name = \"rtn\" \n    ```", "```py\n    # join all datasets on the index\n    factor_4_df = factor_3_df.join(momentum_df).join(y)\n    # rename columns\n    factor_4_df.columns = [\"mkt\", \"smb\", \"hml\", \"rf\", \"mom\", \"rtn\"]\n    # divide everything (except returns) by 100\n    factor_4_df.loc[:, factor_4_df.columns != \"rtn\"] /= 100\n    # calculate excess returns\n    factor_4_df[\"excess_rtn\"] = (\n        factor_4_df[\"rtn\"] - factor_4_df[\"rf\"]\n    ) \n    ```", "```py\n    # join all datasets on the index\n    factor_5_df = factor_5_df.join(y)\n    # rename columns\n    factor_5_df.columns = [\n        \"mkt\", \"smb\", \"hml\", \"rmw\", \"cma\", \"rf\", \"rtn\"\n    ]\n    # divide everything (except returns) by 100\n    factor_5_df.loc[:, factor_5_df.columns != \"rtn\"] /= 100\n    # calculate excess returns\n    factor_5_df[\"excess_rtn\"] = (\n        factor_5_df[\"rtn\"] - factor_5_df[\"rf\"]\n    ) \n    ```", "```py\n    four_factor_model = smf.ols(\n        formula=\"excess_rtn ~ mkt + smb + hml + mom\",\n        data=factor_4_df\n    ).fit()\n    print(four_factor_model.summary()) \n    ```", "```py\n    five_factor_model = smf.ols(\n        formula=\"excess_rtn ~ mkt + smb + hml + rmw + cma\",\n        data=factor_5_df\n    ).fit()\n    print(five_factor_model.summary()) \n    ```", "```py\n    import pandas as pd\n    import pandas_datareader.data as web\n    from linearmodels.asset_pricing import LinearFactorModel \n    ```", "```py\n    START_DATE = \"2010\"\n    END_DATE = \"2020-12\" \n    ```", "```py\n    factor_5_df = (\n        web.DataReader(\"F-F_Research_Data_5_Factors_2x3\",\n                       \"famafrench\",\n                       start=START_DATE,\n                       end=END_DATE)[0]\n        .div(100)\n    ) \n    ```", "```py\n    portfolio_df = (\n        web.DataReader(\"12_Industry_Portfolios\",\n                       \"famafrench\",\n                       start=START_DATE,\n                       end=END_DATE)[0]\n        .div(100)\n        .sub(factor_5_df[\"RF\"], axis=0)\n    ) \n    ```", "```py\n    factor_5_df = factor_5_df.drop(\"RF\", axis=1) \n    ```", "```py\n    five_factor_model = LinearFactorModel(\n        portfolios=portfolio_df,\n        factors=factor_5_df\n    )\n    result = five_factor_model.fit()\n    print(result) \n    ```", "```py\nprint(result.full_summary) \n```", "```py\n    from statsmodels.api import OLS, add_constant \n    ```", "```py\n    factor_loadings = []\n    for portfolio in portfolio_df:\n        reg_1 = OLS(\n            endog=portfolio_df.loc[:, portfolio],\n            exog=add_constant(factor_5_df)\n        ).fit()\n        factor_loadings.append(reg_1.params.drop(\"const\")) \n    ```", "```py\n    factor_load_df = pd.DataFrame(\n        factor_loadings, \n        columns=factor_5_df.columns, \n        index=portfolio_df.columns\n    )\n    factor_load_df.head() \n    ```", "```py\n    risk_premia = []\n    for period in portfolio_df.index:\n        reg_2 = OLS(\n            endog=portfolio_df.loc[period, factor_load_df.index], \n            exog=factor_load_df\n        ).fit()\n        risk_premia.append(reg_2.params) \n    ```", "```py\n    risk_premia_df = pd.DataFrame(\n        risk_premia, \n        index=portfolio_df.index,\n        columns=factor_load_df.columns.tolist())\n    risk_premia_df.head() \n    ```", "```py\n    risk_premia_df.mean() \n    ```", "```py\n    Mkt-RF    0.012341\n    SMB      -0.006291\n    HML      -0.008927\n    RMW      -0.000908\n    CMA      -0.002484 \n    ```"]