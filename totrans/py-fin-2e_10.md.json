["```py\nimport scipy as ps\npv=100\nAPR=0.08\nrate=APR/2.0\nn=2\nnper=n*2\nfv=ps.fv(rate,nper,0,pv)\nprint(fv)\n```", "```py\n-116.985856\n```", "```py\nimport scipy as sp\nRc=2*log(1+0.04)\nprint(sp.exp(Rc/2)-1\n0.040000000000000036\n```", "```py\nimport scipy as sp\namount=5\nr_foreign=0.02\nT=3./12.\nexchangeRateToday=1.25\npoundToday=5*sp.exp(-r_foreign*T)\nprint(\"Pound needed today=\", poundToday)\nusToday=exchangeRateToday*poundToday\nprint(\"US dollar needed today\", usToday)\n('Pound needed today=', 4.9750623959634117)\n('US dollar needed today', 6.2188279949542649)\n```", "```py\nimport scipy as sp\ndef futuresExchangeRate(s0,rateDomestic,rateForeign,T):\n    futureEx=s0*sp.exp((rateDomestic-rateForeign)*T)\nreturn futureEx\n\n# input area\n\ns0=1.25\nrHome=0.01\nrForeigh=0.02\nT=3./12.\n#\nfutures=futuresExchangeRate(s0,rHome,rForeigh,T)\nprint(\"futures=\",futures)\n```", "```py\n('futures=', 1.246878902996825)\n```", "```py\nimport scipy as sp\nobligationForeign=1.0           # how much to pay in 3 months\nf=1.26                          # future price\ns0=1.25                         # today's exchange rate \nrHome=0.01\nrForeign=0.02\nT=3./12.\ntodayObligationForeign=obligationForeign*sp.exp(-rForeign*T)\nusBorrow=todayObligationForeign*s0  \ncostDollarBorrow=usBorrow*sp.exp(rHome*T)\nprofit=f*obligationForeign-costDollarBorrow\nprint(\"profit in USD =\", profit)\n```", "```py\n('profit in USD =', 0.013121097003174764)\n```", "```py\nimport scipy as ps\n# input area\ntodaySP500index=2297.42\nvaluePortfolio=50e6    \nbetaPortfolio=1.1\nbetaTarget=0\n#\npriceEachPoint=250  \ncontractFuturesSP500=todaySP500index*priceEachPoint\nn=(betaTarget-betaPortfolio)*valuePortfolio/contractFuturesSP500\nprint(\"number of contracts SP500 futures=\",n)\n```", "```py\n('number of contracts SP500 futures=', -95.75959119359979)\n```", "```py\n# input area\n\nimport scipy as sp\nsp500indexToday=2297.42\nvaluePortfolio=50e6    \nbetaPortfolio=1.1\nbetaTarget=0\nsp500indexNmonthsLater=2200.0\n#\npriceEachPoint=250  \ncontractFuturesSP500=sp500indexToday*priceEachPoint\nn=(betaTarget-betaPortfolio)*valuePortfolio/contractFuturesSP500\nmySign=sp.sign(n)\nn2=mySign*sp.ceil(abs(n))\nprint(\"number of contracts=\",n2)\n# hedging result\nv1=sp500indexToday\nv2=sp500indexNmonthsLater\nlossFromPortfolio=valuePortfolio*(v2-v1)/v1\ngainFromFutures=n2*(v2-v1)*priceEachPoint\nnet=gainFromFutures+lossFromPortfolio\nprint(\"loss from portfolio=\", lossFromPortfolio)\nprint(\"gain from futures contract=\", gainFromFutures)\nprint(\"net=\", net)\n```", "```py\n('number of contracts=', -96.0)\n('loss from portfolio=', -2120204.403200113)\n('gain from futures contract=', 2338080.0000000019)\n('net=', 217875.59679988865)\n```", "```py\n>>>def payoff_call(sT,x):\n        return (sT-x+abs(sT-x))/2\n```", "```py\n>>> payoff_call(25,30)\n0\n>>> payoff_call(40,30)\n10\n```", "```py\n>> import numpy as np\n>> x=20\n>> sT=np.arange(10,50,10)\n>>> sT\narray([10, 20, 30, 40])\n>>> payoff_call(s,x)\narray([  0.,   0.,  10.,  20.])\n>>>\n```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\ns = np.arange(10,80,5)\nx=30\npayoff=(abs(s-x)+s-x)/2\nplt.ylim(-10,50)\nplt.plot(s,payoff)\nplt.title(\"Payoff for a call (x=30)\")\nplt.xlabel(\"stock price\")\nplt.ylabel(\"Payoff of a call\")\nplt.show()\n```", "```py\nimport scipy as sp\nimport matplotlib.pyplot as plt\ns = sp.arange(30,70,5)\nx=45;c=2.5\ny=(abs(s-x)+s-x)/2 -c\ny2=sp.zeros(len(s))\nplt.ylim(-30,50)\nplt.plot(s,y)\nplt.plot(s,y2,'-.')\nplt.plot(s,-y)\nplt.title(\"Profit/Loss function\")\nplt.xlabel('Stock price')\nplt.ylabel('Profit (loss)')\nplt.annotate('Call option buyer', xy=(55,15), xytext=(35,20),\n             arrowprops=dict(facecolor='blue',shrink=0.01),)\nplt.annotate('Call option seller', xy=(55,-10), xytext=(40,-20),\n             arrowprops=dict(facecolor='red',shrink=0.01),)\nplt.show()\n```", "```py\nimport scipy as sp\nimport matplotlib.pyplot as plt\ns = sp.arange(30,70,5)\nx=45;p=2;c=2.5\ny=c-(abs(x-s)+x-s)/2 \ny2=sp.zeros(len(s)) \nx3=[x, x]\ny3=[-30,10]\nplt.ylim(-30,50)\nplt.plot(s,y) \nplt.plot(s,y2,'-.') \nplt.plot(s,-y) \nplt.plot(x3,y3)\nplt.title(\"Profit/Loss function for a put option\") \nplt.xlabel('Stock price')\nplt.ylabel('Profit (loss)')\nplt.annotate('Put option buyer', xy=(35,12), xytext=(35,45), arrowprops=dict(facecolor='red',shrink=0.01),)\nplt.annotate('Put option seller', xy=(35,-10), xytext=(35,-25), arrowprops=dict(facecolor='blue',shrink=0.01),)\nplt.annotate('Exercise price', xy=(45,-30), xytext=(50,-20), arrowprops=dict(facecolor='black',shrink=0.01),)\nplt.show()\n```", "```py\nfrom scipy import log,exp,sqrt,stats\ndef bs_call(S,X,T,r,sigma):\n    d1=(log(S/X)+(r+sigma*sigma/2.)*T)/(sigma*sqrt(T))\n    d2 = d1-sigma*sqrt(T)\nreturn S*stats.norm.cdf(d1)-X*exp(-r*T)*stats.norm.cdf(d2)\n```", "```py\n>>>c=bs_call(40.,42.,0.5,0.015,0.2) \n>>>round(c,2)\n1.56\n```", "```py\ndef bs_call(S,X,T,rf,sigma):\n    from scipy import log,exp,sqrt,stats\n    d1=(log(S/X)+(rf+sigma*sigma/2.)*T)/(sigma*sqrt(T))\n    d2 = d1-sigma*sqrt(T)\n    return S*stats.norm.cdf(d1)-X*exp(-rf*T)*stats.norm.cdf(d2)\n\ndef binomial_grid(n):\n    import networkx as nx \n    import matplotlib.pyplot as plt \n    G=nx.Graph() \n    for i in range(0,n+1):     \n        for j in range(1,i+2):         \n            if i<n:             \n                G.add_edge((i,j),(i+1,j))\n                G.add_edge((i,j),(i+1,j+1)) \n    posG={}    #dictionary with nodes position \n    for node in G.nodes():     \n        posG[node]=(node[0],n+2+node[0]-2*node[1]) \n    nx.draw(G,pos=posG)      \n\ndef delta_call(S,X,T,rf,sigma):\n    from scipy import log,exp,sqrt,stats\n    d1=(log(S/X)+(rf+sigma*sigma/2.)*T)/(sigma*sqrt(T))\n    return(stats.norm.cdf(d1))\n\ndef delta_put(S,X,T,rf,sigma):\n    from scipy import log,exp,sqrt,stats\n    d1=(log(S/X)+(rf+sigma*sigma/2.)*T)/(sigma*sqrt(T))\n    return(stats.norm.cdf(d1)-1)\n```", "```py\n>>>import p4f\n>>>c=p4f.bs_call(40,42,0.5,0.015,0.2) \n>>>round(c,2)\n1.56\n```", "```py\n>>>import os\n>>>print os.getcwd()\n```", "```py\n>>>import p4f\n>>>s0=40\n>>>d1=1.5\n>>>r=0.015\n>>>T=6/12\n>>>s=s0-exp(-r*T*d1)\n>>>x=42\n>>>sigma=0.2 \n>>>round(p4f.bs_call(s,x,T,r,sigma),2)\n1.18\n```", "```py\nimport matplotlib.pyplot as plt \nimport numpy as np\nsT = np.arange(0,40,5) \nk=15;s0=10;c=2\ny0=np.zeros(len(sT))\ny1=sT-s0                    # stock only\ny2=(abs(sT-k)+sT-k)/2-c     # long a call \ny3=y1-y2                    # covered-call \nplt.ylim(-10,30)\nplt.plot(sT,y1) \nplt.plot(sT,y2) \nplt.plot(sT,y3,'red')\nplt.plot(sT,y0,'b-.') \nplt.plot([k,k],[-10,10],'black')\nplt.title('Covered call (long one share and short one call)') \nplt.xlabel('Stock price')\nplt.ylabel('Profit (loss)')\nplt.annotate('Stock only (long one share)', xy=(24,15),xytext=(15,20),arrowprops=dict(facecolor='blue',shrink=0.01),)\nplt.annotate('Long one share, short a call', xy=(10,4), xytext=(9,25), arrowprops=dict(facecolor='red',shrink=0.01),)\nplt.annotate('Exercise price= '+str(k), xy=(k+0.2,-10+0.5))\nplt.show()\n```", "```py\nimport matplotlib.pyplot as plt \nimport numpy as np\nsT = np.arange(30,80,5)\nx=50;    c=2; p=1\nstraddle=(abs(sT-x)+sT-x)/2-c + (abs(x-sT)+x-sT)/2-p \ny0=np.zeros(len(sT))\nplt.ylim(-6,20) \nplt.xlim(40,70) \nplt.plot(sT,y0) \nplt.plot(sT,straddle,'r')\nplt.plot([x,x],[-6,4],'g-.')\nplt.title(\"Profit-loss for a Straddle\") \nplt.xlabel('Stock price') \nplt.ylabel('Profit (loss)')\nplt.annotate('Point 1='+str(x-c-p), xy=(x-p-c,0), xytext=(x-p-c,10),\narrowprops=dict(facecolor='red',shrink=0.01),) \nplt.annotate('Point 2='+str(x+c+p), xy=(x+p+c,0), xytext=(x+p+c,13),\narrowprops=dict(facecolor='blue',shrink=0.01),) \nplt.annotate('exercise price', xy=(x+1,-5))\nplt.annotate('Buy a call and buy a put with the same exercise price',xy=(45,16))\nplt.show()\n```", "```py\nimport matplotlib.pyplot as plt \nimport numpy as np\nsT = np.arange(30,80,5) \nx1=50;    c1=10\nx2=55;    c2=7\nx3=60;    c3=5\ny1=(abs(sT-x1)+sT-x1)/2-c1 \ny2=(abs(sT-x2)+sT-x2)/2-c2 \ny3=(abs(sT-x3)+sT-x3)/2-c3 \nbutter_fly=y1+y3-2*y2 \ny0=np.zeros(len(sT))\nplt.ylim(-20,20) \nplt.xlim(40,70) \nplt.plot(sT,y0) \nplt.plot(sT,y1) \nplt.plot(sT,-y2,'-.') \nplt.plot(sT,y3)\nplt.plot(sT,butter_fly,'r') \nplt.title(\"Profit-loss for a Butterfly\") \nplt.xlabel('Stock price')\nplt.ylabel('Profit (loss)')\nplt.annotate('Butterfly', xy=(53,3), xytext=(42,4), arrowprops=dict(facecolor='red',shrink=0.01),)\nplt.annotate('Buy 2 calls with x1, x3 and sell 2 calls with x2', xy=(45,16))\nplt.annotate('    x2=(x1+x3)/2', xy=(45,14)) \nplt.annotate('    x1=50, x2=55, x3=60',xy=(45,12)) \nplt.annotate('    c1=10,c2=7, c3=5', xy=(45,10)) \nplt.show()\n```", "```py\nimport numpy as np\nimport p4f as pf\nimport matplotlib.pyplot as plt\ns0=30\nT0=0.5\nsigma0=0.2\nr0=0.05\nx0=30\nsigma=np.arange(0.05,0.8,0.05)\nT=np.arange(0.5,2.0,0.5)\ncall_0=pf.bs_call(s0,x0,T0,r0,sigma0)\ncall_sigma=pf.bs_call(s0,x0,T0,r0,sigma)\ncall_T=pf.bs_call(s0,x0,T,r0,sigma0)\nplt.title(\"Relationship between sigma and call, T and call\")\nplt.plot(sigma,call_sigma,'b')\nplt.plot(T,call_T,'r')\nplt.annotate('x=Sigma, y=call price', xy=(0.6,5), xytext=(1,6), arrowprops=dict(facecolor='blue',shrink=0.01),)\nplt.annotate('x=T(maturity), y=call price', xy=(1,3), xytext=(0.8,1), arrowprops=dict(facecolor='red',shrink=0.01),)\nplt.ylabel(\"Call premium\")\nplt.xlabel(\"Sigma (volatility) or T(maturity) \")\nplt.show()\n```", "```py\n>>>>from p4f import *\n>>> round(delta_call(40,40,1,0.1,0.2),4)\n0.7257\n```", "```py\n>>>>from p4f import *\n>>> round(delta_put(40,40,1,0.1,0.2),4)\n-0.2743\n```", "```py\nfrom scipy import log,exp,sqrt,stats\ntiny=1e-9\nS=40\nX=40\nT=0.5\nr=0.01\nsigma=0.2\n\ndef bsCall(S,X,T,r,sigma):\n    d1=(log(S/X)+(r+sigma*sigma/2.)*T)/(sigma*sqrt(T))\n    d2 = d1-sigma*sqrt(T)\n    return S*stats.norm.cdf(d1)-X*exp(-r*T)*stats.norm.cdf(d2)\n\ndef delta1(S,X,T,r,sigma):\n    d1=(log(S/X)+(r+sigma*sigma/2.)*T)/(sigma*sqrt(T))\n    return stats.norm.cdf(d1)\n\ndef delta2(S,X,T,r,sigma):\n    s1=S\n    s2=S+tiny\n    c1=bsCall(s1,X,T,r,sigma)\n    c2=bsCall(s2,X,T,r,sigma)\n    delta=(c2-c1)/(s2-s1)\n    return delta\n\nprint(\"delta (close form)=\", delta1(S,X,T,r,sigma))\nprint(\"delta (tiny number)=\", delta2(S,X,T,r,sigma))\n('delta (close form)=', 0.54223501331161406)\n('delta (tiny number)=', 0.54223835949323917)\n```", "```py\n>>>x=20*exp(-0.05*3/12)   \n>>>round(x,2)\n19.75\n>>>\n```", "```py\nimport pylab as pl \nimport numpy as np \nx=10\nsT=np.arange(0,30,5) \npayoff_call=(abs(sT-x)+sT-x)/2 \npayoff_put=(abs(x-sT)+x-sT)/2 \ncash=np.zeros(len(sT))+x\n\ndef graph(text,text2=''): \n    pl.xticks(())\n    pl.yticks(())\n    pl.xlim(0,30)\n    pl.ylim(0,20) \n    pl.plot([x,x],[0,3])\n    pl.text(x,-2,\"X\");\n    pl.text(0,x,\"X\")\n    pl.text(x,x*1.7, text, ha='center', va='center',size=10, alpha=.5) \n    pl.text(-5,10,text2,size=25)\n\npl.figure(figsize=(6, 4))\npl.subplot(2, 3, 1); graph('Payoff of call');       pl.plot(sT,payoff_call) \npl.subplot(2, 3, 2); graph('cash','+');             pl.plot(sT,cash)\npl.subplot(2, 3, 3); graph('Porfolio A ','=');   pl.plot(sT,cash+payoff_call)\npl.subplot(2, 3, 4); graph('Payoff of put ');       pl.plot(sT,payoff_put) \npl.subplot(2, 3, 5); graph('Stock','+');       pl.plot(sT,sT)\npl.subplot(2, 3, 6); graph('Portfolio B','=');   pl.plot(sT,sT+payoff_put) \npl.show()\n```", "```py\nimport pandas as pd\nimport scipy as sp\nfrom matplotlib.pyplot import *\ninfile='c:/temp/totalpc.csv'\ndata=pd.read_csv(infile,skiprows=2,index_col=0,parse_dates=True)\ndata.columns=('Calls','Puts','Total','Ratio') \nx=data.index\ny=data.Ratio \ny2=sp.ones(len(y)) \ntitle('Put-call ratio') \nxlabel('Date') \nylabel('Put-call ratio') \nylim(0,1.5)\nplot(x, y, 'b-')\nplot(x, y2,'r') \nshow()\n```", "```py\nimport scipy as sp\nimport pandas as pd\nfrom matplotlib.pyplot import * \nimport matplotlib.pyplot as plt \nfrom datetime import datetime \nimport statsmodels.api as sm\n\ndata=pd.read_csv('c:/temp/totalpc.csv',skiprows=2,index_col=0,parse_dates=True)\ndata.columns=('Calls','Puts','Total','Ratio') \nbegdate=datetime(2013,6, 1) \nenddate=datetime(2013,12,31)\ndata2=data[(data.index>=begdate) & (data.index<=enddate)] \nx=data2.index\ny=data2.Ratio \nx2=range(len(x)) \nx3=sm.add_constant(x2) \nmodel=sm.OLS(y,x3) \nresults=model.fit()\n\n#print results.summary() \nalpha=round(results.params[0],3) \nslope=round(results.params[1],3) \ny3=alpha+sp.dot(slope,x2) \ny2=sp.ones(len(y))\ntitle('Put-call ratio with a trend') \nxlabel('Date') \nylabel('Put-call ratio') \nylim(0,1.5)\nplot(x, y, 'b-')\nplt.plot(x, y2,'r-.')\nplot(x,y3,'y+')\nplt.figtext(0.3,0.35,'Trend: intercept='+str(alpha)+',slope='+str(slope)) \nshow()\n```", "```py\nimport matplotlib.pyplot as plt \nplt.xlim(0,1) \nplt.figtext(0.18,0.5,'S')\nplt.figtext(0.6,0.5+0.25,'Su')\nplt.figtext(0.6,0.5-0.25,'Sd')\n\nplt.annotate('',xy=(0.6,0.5+0.25), xytext=(0.1,0.5), arrowprops=dict(facecolor='b',shrink=0.01))\nplt.annotate('',xy=(0.6,0.5-0.25), xytext=(0.1,0.5), arrowprops=dict(facecolor='b',shrink=0.01))\nplt.axis('off')\nplt.show()\n```", "```py\nimport networkx as nx\nimport matplotlib.pyplot as plt \nplt.figtext(0.08,0.6,\"Stock price=$20\") \nplt.figtext(0.75,0.91,\"Stock price=$22\") \nplt.figtext(0.75,0.87,\"Option price=$1\")\nplt.figtext(0.75,0.28,\"Stock price=$18\") \nplt.figtext(0.75,0.24,\"Option price=0\") \nn=1\ndef binomial_grid(n): \n    G=nx.Graph()\n    for i in range(0,n+1):\n        for j in range(1,i+2): \n            if i<n:\n                G.add_edge((i,j),(i+1,j))\n                G.add_edge((i,j),(i+1,j+1))\n    posG={}\n    for node in G.nodes(): \n        posG[node]=(node[0],n+2+node[0]-2*node[1])\n    nx.draw(G,pos=posG) \nbinomial_grid(n)\nplt.show()\n```", "```py\n>>>round(0.4*10-exp(-0.012*0.5)*3.6,2)\n0.42\n>>>\n```", "```py\nimport p4f\nplt.figtext(0.08,0.6,\"Stock price=$20\")\nplt.figtext(0.08,0.56,\"call =7.43\")\nplt.figtext(0.33,0.76,\"Stock price=$67.49\")\nplt.figtext(0.33,0.70,\"Option price=0.93\")\nplt.figtext(0.33,0.27,\"Stock price=$37.40\")\nplt.figtext(0.33,0.23,\"Option price=14.96\")\nplt.figtext(0.75,0.91,\"Stock price=$91.11\")\nplt.figtext(0.75,0.87,\"Option price=0\")\nplt.figtext(0.75,0.6,\"Stock price=$50\")\nplt.figtext(0.75,0.57,\"Option price=2\")\nplt.figtext(0.75,0.28,\"Stock price=$27.44\")\nplt.figtext(0.75,0.24,\"Option price=24.56\")\nn=2\np4f.binomial_grid(n)\n```", "```py\nimport p4f\nfrom math import sqrt,exp \nimport matplotlib.pyplot as plt\ns=10\nr=0.02\nsigma=0.2\nT=3./12\nx=10\nn=2\ndeltaT=T/n\nq=0 \nu=exp(sigma*sqrt(deltaT))\nd=1/u \na=exp((r-q)*deltaT)\np=(a-d)/(u-d) \nsu=round(s*u,2);\nsuu=round(s*u*u,2) \nsd=round(s*d,2)\nsdd=round(s*d*d,2) \nsud=s\n\nplt.figtext(0.08,0.6,'Stock '+str(s)) \nplt.figtext(0.33,0.76,\"Stock price=$\"+str(su)) \nplt.figtext(0.33,0.27,'Stock price='+str(sd)) \nplt.figtext(0.75,0.91,'Stock price=$'+str(suu)) \nplt.figtext(0.75,0.6,'Stock price=$'+str(sud)) \nplt.figtext(0.75,0.28,\"Stock price=\"+str(sdd)) \np4f.binomial_grid(n)\nplt.show()\n```", "```py\nimport p4f\nimport scipy as sp\nimport matplotlib.pyplot as plt\ns=10;x=10;r=0.05;sigma=0.2;T=3./12.;n=2;q=0    # q is dividend yield \ndeltaT=T/n    # step\nu=sp.exp(sigma*sp.sqrt(deltaT)) \nd=1/u\na=sp.exp((r-q)*deltaT) \np=(a-d)/(u-d)\ns_dollar='S=$'\nc_dollar='c=$' \np2=round(p,2)\nplt.figtext(0.15,0.91,'Note: x='+str(x)+', r='+str(r)+', deltaT='+str(deltaT)+',p='+str(p2))\nplt.figtext(0.35,0.61,'p')\nplt.figtext(0.65,0.76,'p')\nplt.figtext(0.65,0.43,'p')\nplt.figtext(0.35,0.36,'1-p')\nplt.figtext(0.65,0.53,'1-p')\nplt.figtext(0.65,0.21,'1-p')\n\n# at level 2 \nsu=round(s*u,2);\nsuu=round(s*u*u,2) \nsd=round(s*d,2);\nsdd=round(s*d*d,2) \nsud=s\nc_suu=round(max(suu-x,0),2) \nc_s=round(max(s-x,0),2) \nc_sdd=round(max(sdd-x,0),2) \nplt.figtext(0.8,0.94,'s*u*u') \nplt.figtext(0.8,0.91,s_dollar+str(suu)) \nplt.figtext(0.8,0.87,c_dollar+str(c_suu)) \nplt.figtext(0.8,0.6,s_dollar+str(sud)) \nplt.figtext(0.8,0.64,'s*u*d=s') \nplt.figtext(0.8,0.57,c_dollar+str(c_s)) \nplt.figtext(0.8,0.32,'s*d*d') \nplt.figtext(0.8,0.28,s_dollar+str(sdd)) \nplt.figtext(0.8,0.24,c_dollar+str(c_sdd))\n\n# at level 1\nc_01=round((p*c_suu+(1-p)*c_s)*sp.exp(-r*deltaT),2) \nc_02=round((p*c_s+(1-p)*c_sdd)*sp.exp(-r*deltaT),2)\n\nplt.figtext(0.43,0.78,'s*u') \nplt.figtext(0.43,0.74,s_dollar+str(su)) \nplt.figtext(0.43,0.71,c_dollar+str(c_01)) \nplt.figtext(0.43,0.32,'s*d') \nplt.figtext(0.43,0.27,s_dollar+str(sd)) \nplt.figtext(0.43,0.23,c_dollar+str(c_02))\n# at level 0 (today)\n\nc_00=round(p*sp.exp(-r*deltaT)*c_01+(1-p)*sp.exp(-r*deltaT)*c_02,2) \nplt.figtext(0.09,0.6,s_dollar+str(s)) \nplt.figtext(0.09,0.56,c_dollar+str(c_00)) \np4f.binomial_grid(n)\n```", "```py\n>>>p\n0.5266253390068362\n>>>deltaT\n0.125\n>>>v=(p*1.52+(1-p)*0)*exp(-r*deltaT)\n>>>round(v,2)\n0.80\n>>>\n```", "```py\ndef binomialCallEuropean(s,x,T,r,sigma,n=100):\n    from math import exp,sqrt \n    deltaT = T /n\n    u = exp(sigma * sqrt(deltaT)) \n    d = 1.0 / u\n    a = exp(r * deltaT)\n    p = (a - d) / (u - d)\n    v = [[0.0 for j in xrange(i + 1)]  for i in xrange(n + 1)] \n    for j in xrange(i+1):\n        v[n][j] = max(s * u**j * d**(n - j) - x, 0.0) \n    for i in xrange(n-1, -1, -1):\n        for j in xrange(i + 1):\n            v[i][j]=exp(-r*deltaT)*(p*v[i+1][j+1]+(1.0-p)*v[i+1][j]) \n    return v[0][0]\n```", "```py\n>>> binomialCallEuropean(40,42,0.5,0.1,0.2,1000) \n2.278194404573134\n>>> bs_call(40,42,0.5,0.1,0.2) \n2.2777803294555348\n>>>\n```", "```py\ndef binomialCallAmerican(s,x,T,r,sigma,n=100):\n    from math import exp,sqrt\n    import numpy as np\n    deltaT = T /n\n    u = exp(sigma * sqrt(deltaT)) \n    d = 1.0 / u\n    a = exp(r * deltaT)\n    p = (a - d) / (u - d)\n    v = [[0.0 for j in np.arange(i + 1)] for i in np.arange(n + 1)] \n    for j in np.arange(n+1):\n        v[n][j] = max(s * u**j * d**(n - j) - x, 0.0) \n    for i in np.arange(n-1, -1, -1):\n        for j in np.arange(i + 1):\n            v1=exp(-r*deltaT)*(p*v[i+1][j+1]+(1.0-p)*v[i+1][j]) \n            v2=max(v[i][j]-x,0)           # early exercise \n            v[i][j]=max(v1,v2)\n    return v[0][0]\n```", "```py\n>>> call=binomialCallAmerican(40,42,0.5,0.1,0.2,1000)\n>>> round(call,2)\n2.28\n>>>\n```", "```py\ndef bs_call(S,X,T,r,sigma):\n    from scipy import log,exp,sqrt,stats\nd1=(log(S/X)+(r+sigma*sigma/2.)*T)/(sigma*sqrt(T))\nd2 = d1-sigma*sqrt(T)\nreturn S*stats.norm.cdf(d1)-X*exp(-r*T)*stats.norm.cdf(d2)\n```", "```py\n>>>bs_call(40,40,0.5,0.05,0.25)\n3.3040017284767735\n```", "```py\ndef implied_vol_call(S,X,T,r,c):\n    from scipy import log,exp,sqrt,stats\n    for i in range(200):\n        sigma=0.005*(i+1)\n        d1=(log(S/X)+(r+sigma*sigma/2.)*T)/(sigma*sqrt(T))\n        d2 = d1-sigma*sqrt(T)\n        diff=c-(S*stats.norm.cdf(d1)-X*exp(-r*T)*stats.norm.cdf(d2))\n        if abs(diff)<=0.01:\n            return i,sigma, diff\n```", "```py\n>>>implied_vol_call(40,40,0.5,0.05,3.3)\n (49, 0.25, -0.0040060797372882817)\n```", "```py\ndef implied_vol_put_min(S,X,T,r,p):\n    from scipy import log,exp,sqrt,stats \n    implied_vol=1.0\n    min_value=100.0\n    for i in xrange(1,10000): \n        sigma=0.0001*(i+1)\n        d1=(log(S/X)+(r+sigma*sigma/2.)*T)/(sigma*sqrt(T)) \n        d2 = d1-sigma*sqrt(T)\n        put=X*exp(-r*T)*stats.norm.cdf(-d2)-S*stats.norm.cdf(-d1) \n        abs_diff=abs(put-p)\n        if abs_diff<min_value: \n            min_value=abs_diff \n            implied_vol=sigma \n            k=i\n        put_out=put\n    print ('k, implied_vol, put, abs_diff') \n    return k,implied_vol, put_out,min_value\n```", "```py\n>>>implied_vol_put_min(40,40,1.,0.1,1.501)\nk, implied_vol, put, abs_diff\n(1999, 0.2, 12.751879946129757, 0.00036735530273501737)\n```", "```py\ndef binary_search(x, target, my_min=1, my_max=None):\n    if my_max is None:\n       my_max = len(x) - 1\n    while my_min <= my_max:\n      mid = (my_min + my_max)//2\n      midval = x[mid]\n      if midval < target:\n          my_min = my_mid + 1\n      elif midval > target:\n          my_max = mid - 1\n      else:\n          return mid\n    raise ValueError\n```", "```py\nfrom scipy import log,exp,sqrt,stats\nS=42;X=40;T=0.5;r=0.01;c=3.0\ndef bsCall(S,X,T,r,sigma):\n    d1=(log(S/X)+(r+sigma*sigma/2.)*T)/(sigma*sqrt(T)) \n    d2 = d1-sigma*sqrt(T)\n    return S*stats.norm.cdf(d1)-X*exp(-r*T)*stats.norm.cdf(d2)\n#\ndef impliedVolBinary(S,X,T,r,c):\n    k=1\n    volLow=0.001\n    volHigh=1.0\n    cLow=bsCall(S,X,T,r,volLow)\n    cHigh=bsCall(S,X,T,r,volHigh)\n    if cLow>c or cHigh<c:\n        raise ValueError\n    while k ==1:\n        cLow=bsCall(S,X,T,r,volLow)\n        cHigh=bsCall(S,X,T,r,volHigh)\n        volMid=(volLow+volHigh)/2.0\n        cMid=bsCall(S,X,T,r,volMid)\n        if abs(cHigh-cLow)<0.01:\n            k=2\n        elif cMid>c:\n            volHigh=volMid\n        else:\n            volLow=volMid\n    return volMid, cLow, cHigh\n#\nprint(\"Vol,     cLow,      cHigh\")\nprint(impliedVolBinary(S,X,T,r,c))\nVol,     cLow,      cHigh\n(0.16172778320312498, 2.998464657758511, 3.0039730848624977)\n```", "```py\n    if cLow>c or cHigh<c:\n        raise ValueError\n```", "```py\nimport datetime\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.finance import quotes_historical_yahoo_ochl as getData\n\n# Step 1: input area\ninfile=\"c:/temp/callsFeb2014.pkl\"\nticker='IBM'\nr=0.0003                          # estimate\nbegdate=datetime.date(2010,1,1)   # this is arbitrary \nenddate=datetime.date(2014,2,1)   # February 2014\n\n# Step 2: define a function \ndef implied_vol_call_min(S,X,T,r,c): \n    from scipy import log,exp,sqrt,stats \n    implied_vol=1.0\n    min_value=1000\n    for i in range(10000): \n        sigma=0.0001*(i+1)\n        d1=(log(S/X)+(r+sigma*sigma/2.)*T)/(sigma*sqrt(T)) \n        d2 = d1-sigma*sqrt(T)\n        c2=S*stats.norm.cdf(d1)-X*exp(-r*T)*stats.norm.cdf(d2) \n        abs_diff=abs(c2-c)\n        if abs_diff<min_value: \n            min_value=abs_diff \n            implied_vol=sigma \n            k=i\n    return implied_vol\n\n# Step 3: get call option data \ncalls=pd.read_pickle(infile)\nexp_date0=int('20'+calls.Symbol[0][len(ticker):9])  # find expiring date\np = getData(ticker, begdate,enddate,asobject=True, adjusted=True)\ns=p.close[-1]                    # get current stock price \ny=int(exp_date0/10000)\nm=int(exp_date0/100)-y*100\nd=exp_date0-y*10000-m*100\nexp_date=datetime.date(y,m,d)    # get exact expiring date \nT=(exp_date-enddate).days/252.0  # T in years\n\n# Step 4: run a loop to estimate the implied volatility \nn=len(calls.Strike)   # number of strike\nstrike=[]             # initialization\nimplied_vol=[]        # initialization\ncall2=[]              # initialization\nx_old=0               # used when we choose the first strike \n\nfor i in range(n):\n    x=calls.Strike[i]\n    c=(calls.Bid[i]+calls.Ask[i])/2.0\n    if c >0:\n        print ('i=',i,'',    c='',c)\n        if x!=x_old:\n            vol=implied_vol_call_min(s,x,T,r,c)\n            strike.append(x)\n            implied_vol.append(vol)\n            call2.append(c)\n            print x,c,vol\n            x_old=x\n\n# Step 5: draw a smile \nplt.title('Skewness smile (skew)') \nplt.xlabel('Exercise Price') \nplt.ylabel('Implied Volatility')\nplt.plot(strike,implied_vol,'o')\nplt.show()\n```", "```py\n    import pandas as pd\n    x=pd.read_pickle(\"c:/temp/businessCycle.pkl\")\n    print(x.head())\n    print(x.tail())\n    date             \n    1926-10-01  1.000\n    1926-11-01  0.846\n    1926-12-01  0.692\n    1927-01-01  0.538\n    1927-02-01  0.385\n       cycle\n    date             \n    2009-02-01 -0.556\n    2009-03-01 -0.667\n    2009-04-01 -0.778\n    2009-05-01 -0.889\n    2009-06-01 -1.000\n    ```"]