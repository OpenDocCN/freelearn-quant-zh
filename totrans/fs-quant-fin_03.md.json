["```py\n> 0x402E000000000000LF;;\nval it: float = 15.0\n```", "```py\n> let smallestnteger = 10uy;;\nval smallestnteger : byte = 10uy\n\n> let smallerInteger = 10s;;\nval smallerInteger : int16 = 10s\n\n> let smallInteger = 10us;;\nval smallInteger : uint16 = 10us\n\n> let integer = 10L;;\nval integer : int64 = 10L\n```", "```py\n> 10 % 2;;\nval it : int = 0\n```", "```py\n> 10 % 3;;\nval it : int = 1\n```", "```py\n> 5.0 = 5.0;;\nval it : bool = true\n> 1 < 4;;\nval it : bool = true\n> 1.0 > 3.0;;\nval it : bool = false\n```", "```py\n> 5.0 >= 10;;\n  5.0 >= 10\n  -------^^\nstdin(10,8): error FS0001: This expression was expected to have type float but here has type int\n```", "```py\nlet random = new System.Random()\nlet rnd() = random.NextDouble()\nlet data = [for i in 1 .. 100 -> rnd()]\n```", "```py\nlet sum = data |> Seq.sum\n```", "```py\n> sum;;\nval it : float = 42.65793569\n```", "```py\nlet random = new System.Random()\nlet rnd() = random.NextDouble()\nlet data = [for i in 1 .. 500 -> rnd() * 10.0]\n```", "```py\nlet avg = data |> Seq.average\n```", "```py\n> avg;;\nval it : float = 4.983808457\n```", "```py\nlet random = new System.Random()\nlet rnd() = random.NextDouble()\nlet data = [for i in 1 .. 10000 -> rnd() * 10.0]\n\nlet avg = data |> Seq.average\n\n> avg;;\nval it : float = 5.006555917\n```", "```py\nlet random = new System.Random()\nlet rnd() = random.NextDouble()\nlet data = [for i in 1 .. 10 -> rnd() * 10.0]\n\nval data : float list =[5.0530272; 6.389536232; 6.126554094; 7.276151291; 0.9457452972; 7.774030933; 7.654594368; 8.517372011; 3.924642724; 6.572755164]\n\nlet min = data |> Seq.min\n\n> min;;\nval it : float = 0.9457452972\n```", "```py\nlet random = new System.Random()\nlet rnd() = random.NextDouble()\nlet data = [for i in 1 .. 5 -> rnd() * 100.0]\n\nval data : float list =[7.586052086; 22.3457242; 76.95953826; 59.31953153; 33.53864822]\n\nlet max = data |> Seq.max\n\n> max;;\nval it : float = 76.95953826\n```", "```py\nlet variance(values=\n  let average = Seq.average values values\n  |> Seq.map (fun x -> (1.0 / float (Seq.length values)) * (x - average) ** 2.0)\n  |> Seq.sum\n```", "```py\n> variance [1.0 .. 6.0];;\nval it : float = 2.916666667\n```", "```py\nlet stddev1(values:seq<float>) = sqrt(variance(values))\n```", "```py\nlet stddev2(values) =\n  let avg = Seq.average values\n  values    \n  |> Seq.fold (fun acc x -> acc + (1.0 / float (Seq.length values)) * (x -avg) ** 2.0) 0.0\n  |> sqrt\n\n```", "```py\n> stddev1 [2.0; 4.0; 4.0; 4.0; 5.0; 5.0; 7.0; 9.0];;\nval it : float = 2.0\n\n> stddev2 [2.0; 4.0; 4.0; 4.0; 5.0; 5.0; 7.0; 9.0];;\nval it : float = 2.0\n```", "```py\nlet random = new System.Random()\nlet rnd() = random.NextDouble()\nlet data = [for i in 1 .. 100 -> rnd() * 10.0]\n\nlet var = variance data\nlet std = stddev2 data\n```", "```py\n> std * std = var;;\nval it : bool = true\n```", "```py\n/// Helpers to generate random numbers\nlet random = new System.Random()\nlet rnd() = random.NextDouble()\nlet data = [for i in 1 .. 500 -> rnd() * 10.0]\n\n/// Calculates the variance of a sequence\nlet variance(values:seq<float>) = values\n  |> Seq.map (fun x -> (1.0 / float (Seq.length values)) * (x - (Seq.average values)) ** 2.0)\n  |> Seq.sum\n\n/// Calculates the standard deviation of a sequence\nlet stddev(values:seq<float>) = values    \n  |> Seq.fold (fun acc x -> acc + (1.0 / float (Seq.length values)) * (x - (Seq.average values)) ** 2.0) 0.0\n  |> sqrt\n\nlet avg = data |> Seq.average\nlet sum = data |> Seq.sum\nlet min = data |> Seq.min\nlet max = data |> Seq.max\nlet var = data |> variance\nlet std = data |> stddev\n```", "```py\nval avg : float = 5.150620541\nval sum : float = 2575.310271\nval min : float = 0.007285140458\nval max : float = 9.988292227\nval var : float = 8.6539651\nval std : float = 2.941762244\n```", "```py\n    Install-Package MathNet.Numerics\n\n    ```", "```py\nopen MathNet.Numerics.Random\n\nlet mersenneTwister = new MersenneTwister(42);\nlet a = mersenneTwister.NextDouble();\n```", "```py\n> mersenneTwister.NextDouble();;\nval it : float = 0.7965429842\n\n> mersenneTwister.NextDouble();;\nval it : float = 0.9507143116\n\n> mersenneTwister.NextDouble();;\nval it : float = 0.1834347877\n> mersenneTwister.NextDouble();;\nval it : float = 0.7319939383\n\n> mersenneTwister.NextDouble();;\nval it : float = 0.7796909974\n```", "```py\nopen MathNet.Numerics.Distributions\n\nlet normal = new Normal(0.0, 1.0)\nlet mean = normal.Mean\nlet variance = normal.Variance\nlet stddev = normal.StdDev\n```", "```py\n> normal.Mean;;\nval it : float = 0.0\n\n> normal.Variance;;\nval it : float = 1.0\n\n> normal.StdDev;;\nval it : float = 1.0\n```", "```py\n> normal.Sample();;\nval it : float = 0.4458429471\n\n> normal.Sample();;\nval it : float = 0.4411828389\n\n> normal.Sample();;\nval it : float = 0.9845689791\n\n> normal.Sample();;\nval it : float = -1.733795869\n```", "```py\nlet dist = new Normal(0.0, 1.0)\nlet samples = dist.Samples() |> Seq.take 1000 |> Seq.toList\n```", "```py\nlet statistics = new DescriptiveStatistics(samples)\n```", "```py\n// Order Statistics\nlet maximum = statistics.Maximum\nlet minimum = statistics.Minimum\n\n// Central Tendency\nlet mean = statistics.Mean\n\n// Dispersion\nlet variance = statistics.Variance\nlet stdDev = statistics.StandardDeviation\n```", "```py\n> statistics.Mean;;\nval it : float = -0.002646746232\n\n> statistics.Variance;;\nval it : float = 1.000011159\n\n> statistics.StandardDeviation;;\nval it : float = 1.00000558\n```", "```py\nopen System\nopen MathNet.Numerics\nopen MathNet.Numerics.LinearAlgebra\nopen MathNet.Numerics.LinearAlgebra.Double\nopen MathNet.Numerics.Distributions\n\n/// Linear regression using least squares\n\nlet X = DenseMatrix.ofColumnsList 5 2 [ List.init 5 (fun i -> 1.0); [ 10.0; 20.0; 30.0; 40.0; 50.0 ] ] X\nlet y = DenseVector [| 8.0; 21.0; 32.0; 40.0; 49.0 |]\nlet p = X.QR().Solve(y)\nprintfn \"X: %A\" X\nprintfn \"y: %s\" (y.ToString())\nprintfn \"p: %s\" (p.ToString())\n\nlet (a, b) = (p.[0], p.[1])\n```", "```py\nlet noise = (Normal.WithMeanVariance(0.0,0.5))\n/// Sample points for x^2-3x+5\nlet xdata = [-10.0 .. 0.2 .. 10.0]\nlet ydata = [for x in xdata do yield x ** 2.0 - 3.0*x + 5.0 + noise.Sample()]\n```", "```py\nlet N = xdata.Length\nlet order = 2\n\n/// Generating a Vandermonde row given input v\nlet vandermondeRow v = [for x in [0..order] do yield v ** (float x)]\n\n/// Creating Vandermonde rows for each element in the list\nlet vandermonde = xdata |> Seq.map vandermondeRow |> Seq.toList\n\n/// Create the A Matrix\nlet A = vandermonde |> DenseMatrix.ofRowsList N (order + 1)\nA.Transpose()\n\n/// Create the Y Matrix\nlet createYVector order l = [for x in [0..order] do yield l]\nlet Y = (createYVector order ydata |> DenseMatrix.ofRowsList (order + 1) N).Transpose()\n\n/// Calculate coefficients using least squares\nlet coeffs = (A.Transpose() * A).LU().Solve(A.Transpose() * Y).Column(0)\n\nlet calculate x = (vandermondeRow(x) |> DenseVector.ofList) * coeffs\n\nlet fitxs = [(Seq.min xdata).. 0.02 ..(Seq.max xdata)]\nlet fitys = fitxs |> List.map calculate\nlet fits = [for x in [(Seq.min xdata).. 0.2 ..(Seq.max xdata)] do yield (x, calculate x)]\n```", "```py\n> coeffs;;\nval it = seq [4.947741224; -2.979584718; 1.001216438]\n```", "```py\nopen FSharp.Charting\nopen System.Windows.Forms.DataVisualization.Charting\n\nfsi.AddPrinter(fun (ch:FSharp.Charting.ChartTypes.GenericChart) -> ch.ShowChart(); \"FSharpCharting\")\nlet chart = Chart.Combine [Chart.Point(List.zip xdata ydata ); Chart.Line(fits).WithTitle(\"Polynomial regression\")]\n```", "```py\nlet rec bisect n N (f:float -> float) (a:float) (b:float) (t:float) : float =\n  if n >= N then -1.0\n  else\n    let c = (a + b) / 2.0\n    if f(c) = 0.0 || (b - a) / 2.0 < t then\n      // Solution found\n      c\n    else\n      if sign(f(c)) = sign(f(a)) then\n        bisect (n + 1) N f c b t\n      else    \n        bisect (n + 1) N f a c t\n```", "```py\nlet f = (fun x -> (x**2.0 - x - 6.0))\n```", "```py\n> f(-2.0);;\nval it : float = 0.0\n\n> f(3.0);;\nval it : float = 0.0\n```", "```py\n// First root, on the positive side\nlet first = bisect 0 25 f 0.0 10.0 0.01\n\n// Second root, on the negative side\nlet second = bisect 0 25 f -10.0 0.0 0.01\n```", "```py\n> first;;\nval it : float = -2.001953125\n\n> second;;\nval it : float = 2.998046875\n```", "```py\n// Newton's Method\nlet rec newtonraphson n N (f:float -> float) (fprime:float -> float) (x0: float) (tol:float) : float =\n  if n >= N then -1.0\n  else        \n    let d = fprime(x0)\n    let newtonX = x0 - f(x0) / d    \n    if abs(d) < tol then\n      -1.0\n    else\n      if abs(newtonX - x0) < tol then\n        newtonX   // Solution found\n      else\n        newtonraphson (n +1) N f fprime newtonX tol\n```", "```py\nlet f = (fun x -> (x**2.0 - 2.0))\nlet fprime = (fun x -> (2.0*x))\nlet sqrtOfTwo = newtonraphson 0 25 f fprime 1.0 10e-10    \n```", "```py\n> newtonraphson 0 25 f fprime 1.0 10e-10;;\nval it : float = 1.414213562    \n```", "```py\n> newtonraphson 0 25 f fprime -1.0 10e-10;;\nval it : float = -1.414213562\n```", "```py\n// Secant method\nlet rec secant n N (f:float -> float) (x0:float) (x1:float) (x2:float) : float =\n  if n >= N then x0\n  else\n    let x = x1 - (f(x1))*((x1 - x0)/(f(x1) - f(x0)))\n    secant (n + 1) N f x x0\n```", "```py\nlet f = (fun x -> (x**2.0 - 612.0))\n\n> secant 0 10 f 0.0 10.0 30.0;;\nval it : float = 24.73863375\n```"]