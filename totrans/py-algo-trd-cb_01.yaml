- en: Handling and Manipulating Date, Time, and Time Series Data
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 处理和操纵日期、时间和时间序列数据
- en: Time series data is ubiquitous when it comes to algorithmic trading. So, handling,
    managing, and manipulating time series data is essential to performing algorithmic
    trading successfully. This chapter has various recipes that demonstrate how algorithmic
    trading can be done using the Python standard library and `pandas`, which is a
    Python data analysis library.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到算法交易时，时间序列数据是无处不在的。因此，处理、管理和操纵时间序列数据对于成功执行算法交易至关重要。本章包含了各种食谱，演示了如何使用Python标准库和`pandas`来进行算法交易，`pandas`是一个Python数据分析库。
- en: For our context, time series data is a series of data consisting of equally
    spaced timestamps and multiple data points describing trading data in that particular
    time frame.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的上下文，时间序列数据是一系列数据，由等间隔的时间戳和描述特定时间段内交易数据的多个数据点组成。
- en: When handling time series data, the first thing you should know is how to read,
    modify, and create Python objects that understand date and time. The Python standard
    library includes the `datetime` module, which provides the `datetime` and `timedelta`
    objects, which can handle everything about the date and time. The first seven
    recipes in this chapter talk about this module. The remainder of this chapter
    talks about handling time series data using the `pandas` library, which is a very
    efficient library for data analysis. The `pandas.DataFrame` class will be used
    in our recipes.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 处理时间序列数据时，您首先应该了解的是如何读取、修改和创建理解日期和时间的Python对象。Python标准库包括了`datetime`模块，它提供了`datetime`和`timedelta`对象，可以处理关于日期和时间的所有内容。本章的前七个食谱讨论了这个模块。本章的剩余部分讨论了如何使用`pandas`库处理时间序列数据，`pandas`是一个非常高效的数据分析库。我们的食谱将使用`pandas.DataFrame`类。
- en: 'The following is a list of the recipes in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章的食谱列表：
- en: Creating datetime objects
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建日期时间对象
- en: Creating timedelta objects
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建时间差对象
- en: Operations on datetime objects
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对日期时间对象进行操作
- en: Modifying datetime objects
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改日期时间对象
- en: Converting a datetime to a string
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将日期时间转换为字符串
- en: Creating a datetime object from a string
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从字符串创建日期时间对象
- en: The datetime object and time zones
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日期时间对象和时区
- en: Creating a pandas.DataFrame object
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个pandas.DataFrame对象
- en: DataFrame manipulation—renaming, rearranging, reversing, and slicing
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DataFrame操作——重命名、重新排列、反转和切片
- en: DataFrame manipulation—applying, sorting, iterating, and concatenating
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DataFrame操作——应用、排序、迭代和连接
- en: Converting a DataFrame into other formats
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将DataFrame转换为其他格式
- en: Creating a DataFrame from other formats
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从其他格式创建DataFrame
- en: Technical requirements
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'You will need the following to successfully execute the recipes in this chapter:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 您将需要以下内容才能成功执行本章的食谱：
- en: Python 3.7+
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3.7+
- en: 'Python package:'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python包：
- en: '`pandas` (`$ pip install pandas`)'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pandas` (`$ pip install pandas`)'
- en: For all the recipes in this chapter, you will need the Jupyter notebook for
    this chapter, found at [https://github.com/PacktPublishing/Python-Algorithmic-Trading-Cookbook/tree/master/Chapter01](https://github.com/PacktPublishing/Python-Algorithmic-Trading-Cookbook/tree/master/Chapter01).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章中的所有食谱，您将需要本章的Jupyter笔记本，位于[https://github.com/PacktPublishing/Python-Algorithmic-Trading-Cookbook/tree/master/Chapter01](https://github.com/PacktPublishing/Python-Algorithmic-Trading-Cookbook/tree/master/Chapter01)。
- en: You can also open a new Jupyter notebook and try the hands-on exercises directly
    as they are shown in the recipes. Note that the output for some of these recipes
    might differ for you as they depend on the date, time, and time zone information
    provided at the time.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以打开一个新的Jupyter笔记本，并直接尝试食谱中显示的实践练习。请注意，对于其中一些食谱，您的输出可能会有所不同，因为它们取决于提供的日期、时间和时区信息。
- en: Creating datetime objects
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建日期时间对象
- en: The `datetime` module provides a `datetime` class, which can be used to accurately
    capture information relating to timestamps, dates, times, and time zones. In this
    recipe, you will create `datetime` objects in multiple ways and introspect their
    attributes.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`datetime`模块提供了一个`datetime`类，它可以用于准确捕获与时间戳、日期、时间和时区相关的信息。在本食谱中，您将以多种方式创建`datetime`对象，并检查其属性。'
- en: How to do it…
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Follow these steps to execute this recipe:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤执行本食谱：
- en: 'Import the necessary module from the Python standard library:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Python标准库中导入必要的模块：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create a `datetime` object holding the current timestamp using the `now()`
    method and print it:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`now()`方法创建一个持有当前时间戳的`datetime`对象并打印它：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We get the following output. Your output will differ:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出。您的输出将有所不同：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Print the attributes of `dt1` related to date and time:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印与`dt1`相关的日期和时间属性：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We get the following output. Your output would differ:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出。您的输出可能会有所不同：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create a `datetime` object holding the timestamp for 1st January 2021::'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个持有2021年1月1日的时间戳的`datetime`对象：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You will get the following output:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您将得到以下输出：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Print the various attributes of `dt2` related to date and time:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印与`dt2`相关的各种日期和时间属性：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You will get the following output:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您将得到以下输出：
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works...
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In *step 1*, you import the `datetime` class from the `datetime` module. In
    *step 2*, you create and print a `datetime` object using the `now()` method and
    assign it to `dt1`. This object holds the current timestamp information.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤1*中，您从`datetime`模块中导入`datetime`类。在*步骤2*中，您使用`now()`方法创建并打印一个`datetime`对象，并将其分配给`dt1`。该对象保存当前的时间戳信息。
- en: 'A `datetime` object has the following attributes related to date, time, and
    time zone information:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`datetime`对象具有以下与日期、时间和时区信息相关的属性：
- en: '| 1 | `year` | An integer between 0 and 23, both inclusive |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 1 | `year` | 一个介于0和23之间的整数，包括0和23 |'
- en: '| 2 | `month` | An integer between 1 and 12, both inclusive |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 2 | `month` | 一个介于1和12之间的整数，包括1和12 |'
- en: '| 3 | `day` | An integer between 1 and 31, both inclusive |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 3 | `day` | 一个介于1和31之间的整数，包括1和31 |'
- en: '| 4 | `hour` | An integer between 0 and 23, both inclusive |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 4 | `hour` | 一个介于0和23之间的整数，包括0和23 |'
- en: '| 5 | `minute` | An integer between 0 and 59, both inclusive |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 5 | `minute` | 一个介于0和59之间的整数，包括0和59 |'
- en: '| 6 | `second` | An integer between 0 and 59, both inclusive |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 6 | `second` | 一个介于0和59之间的整数，包括0和59 |'
- en: '| 7 | `microsecond` | An integer between 0 and 999999, both inclusive |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 7 | `microsecond` | 一个介于0和999999之间的整数，包括0和999999 |'
- en: '| 8 | `tzinfo` | An object of class `timezone`. (More information on time zones
    in *The datetime object and time zones* recipe). |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 8 | `tzinfo` | 一个`timezone`类的对象。（有关时区的更多信息，请参阅*日期时间对象和时区*示例。）|'
- en: In *step 3*, these attributes are printed for `dt1`. You can see that they hold
    the current timestamp information.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤3*中，这些属性被打印为`dt1`。您可以看到它们保存了当前时间戳信息。
- en: In *step 4*, you create and print another `datetime` object. This time you create
    a specific timestamp, which is 1st Jan 2021, midnight. You call the constructor
    itself with the parameters—`year` as `2021`, `month` as `1`, and `day` as `1`.
    The other time related attributes default to `0` and time zone defaults to `None`.
    In *step 5*, you print the attributes of `dt2`. You can see that they hold exactly
    the same values as you had passed to the constructor in *step 4*.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤4*中，您创建并打印另一个`datetime`对象。这次您创建了一个特定的时间戳，即2021年1月1日，午夜。您将构造函数本身与参数一起调用——`year`为`2021`，`month`为`1`，`day`为`1`。其他与时间相关的属性默认为`0`，时区默认为`None`。在*步骤5*中，您打印了`dt2`的属性。您可以看到它们与您在*步骤4*中传递给构造函数的值完全相同。
- en: There's more
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多
- en: 'You can use the `date()` and `time()` methods of the `datetime` objects to
    extract the date and time information, as instances of `datetime.date` and `datetime.time`
    classes respectively:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`datetime`对象的`date()`和`time()`方法提取日期和时间信息，分别作为`datetime.date`和`datetime.time`类的实例：
- en: Use `date()` method to extract date from `dt1`. Note the type of the return
    value.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`date()`方法从`dt1`中提取日期。注意返回值的类型。
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You will get the following output. Your output may differ::'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 您将得到以下输出。您的输出可能会有所不同：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Use `time()` method to extract date from `dt1`. Note the type of the return
    value.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`time()`方法从`dt1`中提取日期。注意返回值的类型。
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We get the following output. Your output may differ:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出。您的输出可能会有所不同：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Use `date()` method to extract date from `dt2`. Note the type of the return
    value.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`date()`方法从`dt2`中提取日期。注意返回值的类型。
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We get the following output:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Use `time()` method to extract date from `dt2`. Note the type of the return
    value.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`time()`方法从`dt2`中提取日期。注意返回值的类型。
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We get the following output:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE16]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Creating timedelta objects
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建timedelta对象
- en: The `datetime` module provides a `timedelta` class, which can be used to represent
    information related to date and time differences. In this recipe, you will create
    `timedelta` objects and perform operations on them.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`datetime`模块提供了一个`timedelta`类，可用于表示与日期和时间差异相关的信息。在本示例中，您将创建`timedelta`对象并对其执行操作。'
- en: How to do it…
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Follow along with these steps to execute this recipe:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤执行此示例：
- en: 'Import the necessary module from the Python standard library:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Python标准库中导入必要的模块：
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Create a `timedelta` object with a duration of 5 days. Assign it to `td1` and
    print it:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个持续时间为5天的`timedelta`对象。将其分配给`td1`并打印它：
- en: '[PRE18]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We get the following output:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE19]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Create a `timedelta` object with a duration of 4 days. Assign it to `td2` and
    print it:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个持续4天的`timedelta`对象。将其赋值给`td2`并打印出来：
- en: '[PRE20]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We get the following output:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE21]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Add `td1` and `td2` and print the output:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`td1`和`td2`相加并打印输出：
- en: '[PRE22]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We get the following output:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE23]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Subtract `td2` from `td1` and print the output:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`td2`从`td1`中减去并打印输出：
- en: '[PRE24]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We will get the following output:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将得到以下输出：
- en: '[PRE25]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Multiply `td1` with a number (a `float`) :'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`td1`乘以一个数字（一个`浮点数`）：
- en: '[PRE26]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We get the following output:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE27]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: How it works...
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In *step 1*, you import the `timedelta` class from the `datetime` module. In
    *step 2* you create a `timedelta` object that holds a time difference value of
    `5 days` and assign it to `td1`. You call the constructor to create the object
    with a single attribute, `days`. You pass the value as `5` here. Similarly, in
    *step 3*, you create another `timedelta` object, which holds a time difference
    value of `4 days` and assign it to `td2`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤1*中，您从`datetime`模块中导入`timedelta`类。在*步骤2*中，您创建一个持有`5天`时间差值的`timedelta`对象，并将其赋值给`td1`。您调用构造函数来创建具有单个属性`days`的对象。您在此处传递值为`5`。类似地，在*步骤3*中，您创建另一个`timedelta`对象，其中包含`4天`的时间差值，并将其赋值给`td2`。
- en: In the next steps, you perform operations on the `timedelta` objects. In *step
    4*, you add `td1` and `td2`. This returns another `timedelta` object which holds
    a time difference value of `9 days`, which is the sum of the time difference values
    held by `td1` and `td2`. In *step 5*, you subtract `td2` from `td1`. This returns
    another `timedelta` object that holds a time difference value of `1 day`, which
    is the difference of time difference values held by `td1` and `td2`. In *step
    6*, you multiply `td1` with `2.5`, a `float`. This again returns a `timedelta`
    object that holds a time difference value of twelve and a half days.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的步骤中，您对`timedelta`对象执行操作。在*步骤4*中，您将`td1`和`td2`相加。这将返回另一个`timedelta`对象，其中包含`9天`的时间差值，这是由`td1`和`td2`持有的时间差值的总和。在*步骤5*中，您将`td2`从`td1`中减去。这将返回另一个`timedelta`对象，其中包含`1天`的时间差值，这是由`td1`和`td2`持有的时间差值之间的差异。在*步骤6*中，您将`td1`乘以`2.5`，一个`浮点数`。这再次返回一个`timedelta`对象，其中包含十二天半的时间差值。
- en: There's more
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容
- en: 'A `timedelta` object can be created using one or more optional arguments:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用一个或多个可选参数创建`timedelta`对象：
- en: '| 1 | `weeks` | An integer. Default value is 0. |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| 1 | `weeks` | 一个整数，默认值为0。 |'
- en: '| 2 | `days` | An integer. Default value is 0. |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| 2 | `days` | 一个整数，默认值为0。 |'
- en: '| 3 | `hours` | An integer. Default value is 0. |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| 3 | `hours` | 一个整数，默认值为0。 |'
- en: '| 4 | `minutes` | An integer. Default value is 0. |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| 4 | `minutes` | 一个整数，默认值为0。 |'
- en: '| 5 | `seconds` | An integer. Default value is 0. |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| 5 | `seconds` | 一个整数，默认值为0。 |'
- en: '| 6 | `milliseconds` | An integer. Default value is 0. |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| 6 | `milliseconds` | 一个整数，默认值为0。 |'
- en: '| 7 | `microseconds` | An integer. Default value is 0. |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| 7 | `microseconds` | 一个整数，默认值为0。 |'
- en: 'In *step 2* and *step 3*, we have used just the `days` argument. You can use
    other arguments as well. Also, these attributes are normalized upon creation.
    This normalization of `timedelta` objects is done to ensure that there is always
    a unique representation for every time difference value which can be held. The
    following code demonstrates this:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤2*和*步骤3*中，我们仅使用了`days`参数。您也可以使用其他参数。此外，这些属性在创建时被标准化。对`timedelta`对象的这种标准化是为了确保每个时间差值都有一个唯一的表示形式。以下代码演示了这一点：
- en: 'Create a `timedelta` object with hours as `23`, minutes as `59`, and seconds
    as `60`. Assign it to `td3` and print it. It will be normalized to a `timedelta`
    object with `days` as `1` (and other date and time-related attributes as `0`):'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个小时为`23`，分钟为`59`，秒数为`60`的`timedelta`对象。将其赋值给`td3`并打印出来。它将被标准化为一个`timedelta`对象，其中`days`为`1`（其他日期和时间相关属性为`0`）：
- en: '[PRE28]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We get the following output:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE29]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The `timedelta` objects have a convenience method, `total_seconds()`. This method
    returns a `float` which represents the total seconds contained in the duration
    held by the `timedelta` object.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`timedelta`对象有一个方便的方法，`total_seconds()`。该方法返回一个`浮点数`，表示`timedelta`对象持续的总秒数。'
- en: 'Call the `total_seconds()` method on `td3`. You get `86400.0` as the output:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`td3`上调用`total_seconds()`方法。您将得到`86400.0`作为输出：
- en: '[PRE30]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We get the following output:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE31]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Operations on datetime objects
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间对象上的操作
- en: The `datetime` and `timedelta` classes support various mathematical operations
    to get dates in the future or the past. Using these operations returns another
    `datetime` object. . In this recipe, you would create `datetime`, `date`, `time`,
    and `timedelta` objects and perform mathematical operations on them.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`datetime`和`timedelta`类支持各种数学操作，以获取未来或过去的日期。使用这些操作返回另一个`datetime`对象。在这个示例中，您将创建`datetime`、`date`、`time`和`timedelta`对象，并对它们执行数学运算。'
- en: How to do it…
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Follow along with these steps to execute this recipe:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 按照这些步骤执行此操作：
- en: 'Import the necessary modules from the Python standard library:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Python标准库中导入必要的模块：
- en: '[PRE32]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Fetch today''s date. Assign it to `date_today` and print it:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取今天的日期。将其赋值给`date_today`并打印出来：
- en: '[PRE33]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We get the following output. Your output may differ:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出。您的输出可能有所不同：
- en: '[PRE34]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Add 5 days to today''s date using a `timedelta` object. Assign it to `date_5days_later`
    and print it:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`timedelta`对象将5天添加到今天的日期。将其赋值给`date_5days_later`并打印出来：
- en: '[PRE35]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'We get the following output. Your output may differ:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出。您的输出可能有所不同：
- en: '[PRE36]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Subtract 5 days from today''s date using a `timedelta` object. Assign it to
    `date_5days_ago` and print it:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`timedelta`对象从今天的日期减去5天。将其赋值给`date_5days_ago`并打印出来：
- en: '[PRE37]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'We get the following output. Your output may differ:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出。您的输出可能有所不同：
- en: '[PRE38]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Compare `date_5days_later` with `date_5days_ago` using the `>` operator:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`>`操作符将`date_5days_later`与`date_5days_ago`进行比较：
- en: '[PRE39]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'We get the following output:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE40]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Compare `date_5days_later` with `date_5days_ago` using the `<` operator:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`<`操作符将`date_5days_later`与`date_5days_ago`进行比较：
- en: '[PRE41]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'We get the following output:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE42]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Compare `date_5days_later`, `date_today` and `date_5days_ago` together using
    the `>` operator:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`>`操作符将`date_5days_later`、`date_today`和`date_5days_ago`一起进行比较：
- en: '[PRE43]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'We get the following output:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE44]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Fetch the current timestamp. Assign it to `current_timestamp`:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取当前时间戳。将其赋值给`current_timestamp`：
- en: '[PRE45]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Fetch the current time. Assign it to `time_now` and print it:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取当前时间。将其赋值给`time_now`并打印出来：
- en: '[PRE46]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'We get the following output. Your output may differ:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出。您的输出可能有所不同：
- en: '[PRE47]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Add 5 minutes to the current time using a `timedelta` object. Assign it to
    `time_5minutes_later` and print it:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`timedelta`对象将5分钟添加到当前时间。将其赋值给`time_5minutes_later`并打印出来：
- en: '[PRE48]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'We get the following output. Your output may differ:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出。您的输出可能有所不同：
- en: '[PRE49]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Subtract 5 minutes from the current time using a `timedelta` object. Assign
    it to `time_5minutes_ago` and print it:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`timedelta`对象从当前时间减去5分钟。将其赋值给`time_5minutes_ago`并打印出来：
- en: '[PRE50]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'We get the following output. Your output may differ:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出。您的输出可能有所不同：
- en: '[PRE51]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Compare `time_5minutes_later` with `time_5minutes_ago` using the `<` operator:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`<`操作符将`time_5minutes_later`与`time_5minutes_ago`进行比较：
- en: '[PRE52]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'We get the following output. Your output may differ:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出。您的输出可能有所不同：
- en: '[PRE53]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Compare `time_5minutes_later` with `time_5minutes_ago` using the `>` operator:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`>`操作符将`time_5minutes_later`与`time_5minutes_ago`进行比较：
- en: '[PRE54]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'We get the following output. Your output may differ:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出。您的输出可能有所不同：
- en: '[PRE55]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Compare `time_5minutes_later`, `time_now` and `time_5minutes_ago` together
    using the `>` operator:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`>`操作符将`time_5minutes_later`、`time_now`和`time_5minutes_ago`一起进行比较：
- en: '[PRE56]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'We get the following output. Your output may differ:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出。您的输出可能有所不同：
- en: '[PRE57]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: How it works…
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In *step 1*, you import `date`, `datetime`, and `timedelta` classes from the
    `datetime` module. In *step 2*, you fetch today's date using the `today()` `classmethod`
    provided by the class `date` and assign it to a new attribute, `date_today`. (A
    `classmethod` allows you to call a method directly on a class without creating
    an instance.) The return object is of type `datetime.date`. In *step 3*, you create
    a date, 5 days ahead of today, by adding a `timedelta` object, holding a duration
    of 5 days, to `date_today`. You assign this to a new attribute, `date_5days_later`.
    Similarly, in *step 4*, you create a date, 5 days ago and assign it to a new attribute
    `date_5days_ago`.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤1*中，您从`datetime`模块导入`date`、`datetime`和`timedelta`类。在*步骤2*中，您使用类`date`提供的`today()`
    `classmethod`获取今天的日期，并将其赋值给一个新属性`date_today`。（`classmethod`允许您直接在类上调用方法而不创建实例。）返回的对象类型为`datetime.date`。在*步骤3*中，您通过将持续时间为5天的`timedelta`对象添加到`date_today`来创建一个比今天晚5天的日期。您将此赋值给一个新属性`date_5days_later`。同样，在*步骤4*中，您创建一个5天前的日期并将其赋值给一个新属性`date_5days_ago`。
- en: In *step 5* and *step 6*, you compare `date_5days_later` and `date_5days_ago`
    using the `>` and `<` operators, respectively. The `>` operator returns `True`
    if the first operand holds a date ahead of that held by operand 2\. Similarly,
    the `<` operator returns `True` if the second operand holds a date ahead of that
    held by operand 1\. In *step 7*, you compare together all three date objects created
    so far. Note the outputs.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 5* 和 *步骤 6* 中，你使用 `>` 和 `<` 操作符分别比较 `date_5days_later` 和 `date_5days_ago`。如果第一个操作数保存的日期在第二个操作数之后，则
    `>` 操作符返回 `True`。类似地，如果第二个操作数保存的日期在第一个操作数之后，则 `<` 操作符返回 `True`。在 *步骤 7* 中，你比较到目前为止创建的所有三个日期对象。注意输出。
- en: '*Step 8* to *step 14* perform the same operations as *step 2* to *step 7*,
    but this time on `datetime.time` objects—fetching current time, fetching a time
    5 minutes ahead of the current time, fetching a time 5 minutes before the current
    time and comparing all the `datetime.time` objects which are created. The `timedelta`
    objects cannot be added to `datetime.time` objects directly to get time in the
    past or the future. To overcome this, you can add `timedelta` objects to `datetime`
    objects and then extract time from them using the `time()` method. You do this
    in *step 10* and *step 11*.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤 8* 到 *步骤 14* 执行与 *步骤 2* 到 *步骤 7* 相同的操作，但这次是在`datetime.time`对象上——获取当前时间、获取当前时间之后的
    5 分钟、获取当前时间之前的 5 分钟，并比较所有创建的`datetime.time`对象。无法直接将`timedelta`对象添加到`datetime.time`对象中以获取过去或未来的时间。为了克服这一点，你可以将`timedelta`对象添加到`datetime`对象中，然后使用`time()`方法从中提取时间。你在
    *步骤 10* 和 *步骤 11* 中执行此操作。'
- en: There's more
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多
- en: 'The operations shown in this recipe on `date` and `time` objects can similarly
    be performed on `datetime` objects. Besides `+`, `-`, `<` and `>`, you can also
    use the following operators on `datetime`, `date`, and `time` objects:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例展示了对`date`和`time`对象的操作，这些操作可以类似地在`datetime`对象上执行。除了`+`、`-`、`<`和`>`之外，你还可以在`datetime`、`date`和`time`对象上使用以下操作符：
- en: '| `>=` | Return `True` only if the first operand holds a `datetime`/`date`/`time`
    ahead or equal to that of the first operand |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| `>=` | 仅在第一个操作数保持的`datetime`/`date`/`time`晚于或等于第二个操作数时返回`True` |'
- en: '| `<=` | Return `True` only if the first operand holds a `datetime`/`date`/`time`
    before or equal to that of the first operand |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| `<=` | 仅在第一个操作数保持的`datetime`/`date`/`time`早于或等于第二个操作数时返回`True` |'
- en: '| `==` | Return `True` only if the first operand holds a `datetime`/`date`/`time`
    equal to that of the first operand |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| `==` | 仅在第一个操作数保持的`datetime`/`date`/`time`等于第二个操作数时返回`True` |'
- en: 'This is not an exhaustive list of permissible operators. Refer to the official
    documentation on `datetime` module for more information: [https://docs.python.org/3.8/library/datetime.html](https://docs.python.org/3.8/library/datetime.html).'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是允许的操作符的详尽列表。有关更多信息，请参阅`datetime`模块的官方文档：[https://docs.python.org/3.8/library/datetime.html](https://docs.python.org/3.8/library/datetime.html)。
- en: Modifying datetime objects
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改 datetime 对象
- en: Often, you may want to modify existing `datetime` objects to represent a different
    date and time. This recipe includes code to demonstrate this.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你可能希望修改现有的`datetime`对象以表示不同的日期和时间。本示例包括演示此操作的代码。
- en: How to do it…
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Follow these steps to execute this recipe:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤执行此示例：
- en: 'Import the necessary modules from the Python standard library:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Python标准库中导入必要的模块：
- en: '[PRE58]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Fetch the current timestamp. Assign it to `dt1` and print it:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取当前时间戳。将其分配给`dt1`并打印：
- en: '[PRE59]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'We get the following output. Your output would differ:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出。你的输出会有所不同：
- en: '[PRE60]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Create a new `datetime` object by replacing the `year`, `month`, and `day`
    attributes of `dt1`. Assign it to `dt2` and print it :'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过替换`dt1`的`year`、`month`和`day`属性来创建一个新的`datetime`对象。将其分配给`dt2`并打印：
- en: '[PRE61]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'We get the following output. Your output would differ:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出。你的输出会有所不同：
- en: '[PRE62]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Create a new `datetime` object by specifying all the attributes directly. Assign
    it to `dt3` and print it:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过直接指定所有属性来创建一个新的`datetime`对象。将其分配给`dt3`并打印它：
- en: '[PRE63]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'We get the following output. Your output would differ:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出。你的输出会有所不同：
- en: '[PRE64]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Compare `dt2` and `dt3`:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 比较`dt2`和`dt3`：
- en: '[PRE65]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: We get the following output.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出。
- en: '[PRE66]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: How it works...
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In *step 1*, you import the `datetime` class from the `datetime` module. In
    *step 2*, you fetch the current timestamp using the `now()` method of `datetime`
    and assign it to a new attribute, `dt1`. To get a modified timestamp from an existing
    `datetime` object, you can use the `replace()` method. In *step 3*, you create
    a new `datetime` object `dt2`, from `dt1`, by calling the `replace()` method.
    You specify the attributes to be modified, which are `year`, `month`, and `day`.
    The remaining attributes remain as it is, which are an `hour`, `minute`, `second`,
    `microsecond`, and `timezone`. You can confirm this by comparing the outputs of
    *step 2* and *step 3*. In *step 4*, you create another `datetime` object, `dt3`.
    This time you call the `datetime` constructor directly. You pass all the attributes
    to the constructor such that the timestamp created is the same as `dt2`. In *step
    5*, you confirm that `dt2` and `dt3` hold exactly the same timestamp by using
    the `==` operator, which returns `True`.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤1*中，您从`datetime`模块中导入`datetime`类。在*步骤2*中，您使用`datetime`的`now()`方法获取当前时间戳并将其赋值给新属性`dt1`。要从现有的`datetime`对象获取修改后的时间戳，可以使用`replace()`方法。在*步骤3*中，您通过调用`replace()`方法从`dt1`创建一个新的`datetime`对象`dt2`。您指定要修改的属性，即`year`、`month`和`day`。其余属性保持不变，即`hour`、`minute`、`second`、`microsecond`和`timezone`。您可以通过比较*步骤2*和*步骤3*的输出来确认这一点。在*步骤4*中，您创建另一个`datetime`对象`dt3`。这次，您直接调用`datetime`构造函数。您将所有属性传递给构造函数，使创建的时间戳与`dt2`相同。在*步骤5*中，您使用`==`运算符确认`dt2`和`dt3`持有完全相同的时间戳，该运算符返回`True`。
- en: Converting a datetime object to a string
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将`datetime`对象转换为字符串
- en: This recipe demonstrates the conversion of the `datetime` objects into strings
    which finds application in printing and logging. Also, this is helpful while sending
    timestamps as JSON data over web APIs.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方演示了将`datetime`对象转换为字符串的过程，该过程在打印和日志记录中应用。此外，在通过web API发送时间戳时也很有帮助。
- en: How to do it…
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Execute the following steps for this recipe:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此配方的以下步骤：
- en: 'Import the necessary modules from the Python standard library:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Python标准库中导入必要的模块：
- en: '[PRE67]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Fetch the current timestamp along with time zone information. Assign it to
    `now` and print it:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取带有时区信息的当前时间戳。将其分配给`now`并打印出来：
- en: '[PRE68]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Cast `now` to a string and print it::'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`now`强制转换为字符串并打印出来：
- en: '[PRE69]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'We get the following output. Your output may differ:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出。您的输出可能会有所不同：
- en: '[PRE70]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Convert `now` to a string with a specific date-time format using `strftime()`
    and print it:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`strftime()`将`now`转换为具有特定日期时间格式的字符串并打印出来：
- en: '[PRE71]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'We get the following output. Your output may differ:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出。您的输出可能会有所不同：
- en: '[PRE72]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: How it works...
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何运作...
- en: 'In *step 1*, you import the `datetime` class from the `datetime` module. In
    *step 2*, you fetch the current timestamp with time zone and assign it to a new
    attribute, `now`. The `now()` method of `datetime` fetches the current timestamp,
    but without time zone information. Such objects are called time zone-native `datetime`
    objects. The `astimezone()` method adds time zone information from the system
    local time on this time zone-naive object, essentially converting it to a time
    zone-aware object. (More information in *The datetime object and time zones* recipe).
    In *step 3*, you cast `now` to a string object and print it. Observe that the
    output date format is fixed and may not be of your choice. The datetime module
    has a `strftime()` method which can convert the object to a string in a specific
    format as required. In *step 4*, you convert `now` to a string in the format `DD-MM-YYYY
    HH:MM:SS +Z`. The directives used in *step 4* are described as follows:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤1*中，您从`datetime`模块中导入`datetime`类。在*步骤2*中，您使用带有时区的当前时间戳并将其赋值给新属性`now`。`datetime`的`now()`方法获取当前时间戳，但没有时区信息。这样的对象称为时区本地的`datetime`对象。`astimezone()`方法从此时区无关对象上添加系统本地时区的时区信息，从而将其转换为时区感知对象。（有关更多信息，请参阅*datetime对象和时区*配方）。在*步骤3*中，您将`now`转换为字符串对象并将其打印出来。请注意，输出的日期格式是固定的，可能不是您的选择。`datetime`模块有一个`strftime()`方法，它可以按需要将对象转换为特定格式的字符串。在*步骤4*中，您将`now`转换为格式为`DD-MM-YYYY
    HH:MM:SS +Z`的字符串。*步骤4*中使用的指令描述如下：
- en: '| **Directive** | **Meaning** |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| **指令** | **意义** |'
- en: '| `%d` | The day of the month as a zero-padded decimal number |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '| `%d` | 以零填充的十进制数表示的月份中的一天 |'
- en: '| `%m` | The month as a zero-padded decimal number |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
  zh: '| `%m` | 以零填充的十进制月份 |'
- en: '| `%Y` | The year with the century as a decimal number |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
  zh: '| `%Y` | 十进制数世纪年份 |'
- en: '| `%H` | The hour (24-hour clock) as a zero-padded decimal number |'
  id: totrans-237
  prefs: []
  type: TYPE_TB
  zh: '| `%H` | 小时（24小时制）以零填充的十进制数 |'
- en: '| `%M` | The minute as a zero-padded decimal number |'
  id: totrans-238
  prefs: []
  type: TYPE_TB
  zh: '| `%M` | 分钟，以零填充的十进制数 |'
- en: '| `%S` | The second as a zero-padded decimal number |'
  id: totrans-239
  prefs: []
  type: TYPE_TB
  zh: '| `%S` | 秒，以零填充的十进制数 |'
- en: '| `%Z` | The time zone name (empty string if the object is naive) |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
  zh: '| `%Z` | 时区名称（如果对象是无时区的，则为空字符串） |'
- en: A complete list of the directives that can be given to `.strptime()` can be
    found at [https://docs.python.org/3.7/library/datetime.html#strftime-and-strptime-behavior](https://docs.python.org/3.7/library/datetime.html#strftime-and-strptime-behavior).
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在[https://docs.python.org/3.7/library/datetime.html#strftime-and-strptime-behavior](https://docs.python.org/3.7/library/datetime.html#strftime-and-strptime-behavior)找到可以提供给`.strptime()`的指令的完整列表。
- en: Creating a datetime object from a string
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从字符串创建datetime对象
- en: This recipe demonstrates the conversion of well-formatted strings into `datetime`
    objects. This finds application in reading timestamps from a file. Also, this
    is helpful while receiving timestamps as JSON data over web APIs.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方演示了将格式良好的字符串转换为`datetime`对象。这在从文件中读取时间戳时很有用。此外，在通过Web API接收时间戳作为JSON数据时也很有帮助。
- en: How to do it…
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Execute the following steps for this recipe:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此配方的以下步骤：
- en: 'Import the necessary modules from the Python standard library:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Python标准库中导入必要的模块：
- en: '[PRE73]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Create a string representation of timestamp with date, time, and time zone.
    Assign it to `now_str`:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含日期、时间和时区的时间戳的字符串表示形式。将其赋值给`now_str`：
- en: '[PRE74]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Convert `now_str` to `now`, a `datetime.datetime` object. Print it:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`now_str`转换为`now`，一个`datetime.datetime`对象。打印出来：
- en: '[PRE75]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'We get the following output:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE76]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Confirm that now is of the `datetime` type:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认now是`datetime`类型：
- en: '[PRE77]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'We get the following output:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE78]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: How it works...
  id: totrans-258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: In *step 1*, you import the `datetime` class from the `datetime` module. In
    *step 2*, you create a string holding a valid timestamp and assign it to a new
    attribute, `now_str`. The `datetime` module has a `strptime()` method which can
    convert a string holding a valid timestamp in a specific format to a `datetime`
    object. In *step 3*, you convert `now_str`, a string in the format `DD-MM-YYYY
    HH:MM:SS +Z`, to `now`. In *step 4*, you confirm that `now` is indeed an object
    of the `datetime` type. The directives used in *step 3* are the same as those
    described in the *Converting a datetime object to a string* recipe.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤1*中，你从`datetime`模块中导入`datetime`类。在*步骤2*中，你创建一个包含有效时间戳的字符串，并将其赋值给一个新属性`now_str`。`datetime`模块有一个`strptime()`方法，可以将一个特定格式的字符串转换为`datetime`对象。在*步骤3*中，你将`now_str`，一个格式为`DD-MM-YYYY
    HH:MM:SS +Z`的字符串，转换为`now`。在*步骤4*中，你确认`now`确实是`datetime`类型的对象。在*步骤3*中使用的指令与*将datetime对象转换为字符串*配方中描述的相同。
- en: There's more
  id: totrans-260
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多
- en: When reading a string into a `datetime` object, the entire string should be
    consumed with appropriate directives. Consuming a string partially will throw
    an exception, as shown in the following code snippet. The error message shows
    what data was not converted and can be used to fix the directives provided to
    the `strptime()` method.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 当将字符串读入`datetime`对象时，应使用适当的指令消耗整个字符串。部分消耗字符串将引发异常，如下面的代码片段所示。错误消息显示了未转换的数据，并可用于修复提供给`strptime()`方法的指令。
- en: 'Try to convert `now_str` to a `datetime` object using `strptime()` method.
    Pass a string with directives for only the date part of the string. Note the error:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试使用`strptime()`方法将`now_str`转换为`datetime`对象。只传递包含字符串日期部分指令的字符串。注意错误：
- en: '[PRE79]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'The output is as follows:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE80]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: The datetime object and time zones
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`datetime`对象和时区'
- en: 'There are two types of `datetime` objects—time zone-naive and time zone-aware.
    Time zone-naive objects do not hold time zone information and timezone-aware objects
    hold time zone information. This recipe demonstrates multiple time zone related
    operations on `datetime` objects: creating time zone-naive and time zone-aware
    objects, adding time zone information to time zone-aware objects, removing time
    zone information from time zone-naive objects, and comparing time zone-aware and
    time zone-naive objects.'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种类型的`datetime`对象——时区无关和时区感知。时区无关对象不包含时区信息，而时区感知对象包含时区信息。这个配方演示了在`datetime`对象上执行多个与时区相关的操作：创建时区无关和时区感知对象，向时区感知对象添加时区信息，从时区无关对象中删除时区信息，以及比较时区感知和时区无关对象。
- en: How to do it…
  id: totrans-268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Execute the following steps for this recipe:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此配方的以下步骤：
- en: 'Import the necessary modules from the Python standard library:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Python标准库中导入必要的模块：
- en: '[PRE81]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Create a time zone-naive `datetime` object. Assign it to `now_tz_naive` and
    print it:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'We get the following output. Your output may differ:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Print the time zone information of `now_tz_naive`. Note the output:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'We get the following output:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Create a time zone-aware `datetime` object. Assign it to `now_tz_aware` and
    print it:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'We get the following output. Your output may differ:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Print the time zone information of `now_tz_aware`. Note the output:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'We get the following output. Your output may differ:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Create a new timestamp by adding time zone information to `now_tz_naive` from
    `now_tz_aware`. Assign it to `new_tz_aware` and print it:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'The output is as follows. Your output may differ:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'Print the timezone information of `new_tz_aware` using the `tzinfo` attribute.
    Note the output:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'The output is as follows. Your output may differ:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'Create a new timestamp by removing timezone information from `new_tz_aware`.
    Assign it to `new_tz_naive` and print it:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'The output is as follows. Your output may differ:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'Print the timezone information of `new_tz_naive` using the `tzinfo` attribute.
    Note the output:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'The output is as follows:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: How it works...
  id: totrans-304
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *step 1*, you import the `datetime` class from the `datetime` module. In
    *step 2*, you create a time zone-naive `datetime` object using the `now()` method
    and assign it to a new attribute `now_tz_naive`. In *step 3*, you print the time
    zone information held by `now_tz_naive` using the `tzinfo` attribute. Observe
    that the output is `None` as this is a time zone-naive object.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: In *step 4*, you create a time zone-aware `datetime` object using the `now()`
    and `astimezone()` methods and assign it to a new attribute `now_tz_aware`. In
    *step 5*, you print the time zone information held by `now_tz_aware` using the
    `tzinfo` attribute. Observe that the output is `IST` and not `None`; as this is
    a time zone-aware object.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: In `step 6`, you create a new `datetime` object by adding time zone information
    to `now_tz_naive`. The time zone information is taken from `now_tz_aware`. You
    do this using the `replace()` method (Refer to *Modifying datetime objects* recipe for
    more information). You assign this to a new variable, `new_tz_aware`. In *step
    7*, you print the time zone information held by `new_tz_aware`. Observe it is
    the same output as in *step 5* as you have taken time zone information from `now_tz_aware`.
    Similarly, in *step 8* and *step 9*, you create a new `datetime` object, `new_tz_naive`,
    but this time you remove the time zone information.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: There's more
  id: totrans-308
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can use comparison operators only between time zone-naive or time zone-aware
    `datetime` objects. You cannot compare a time zone-naive `datetime` object with
    a time zone-aware `datetime` object. Doing so will throw an exception. This is
    demonstrated in the following steps:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: 'Compare 2 timezone-naive objects, `new_tz_naive` and `now_tz_naive`. Note the
    output:'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'Compare 2-time zone-aware objects, `new_tz_aware`, and `now_tz_aware`. Note
    the output:'
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'We get the following output:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'Compare a time zone-aware object and a time zone-naive object, `new_tz_aware`,
    and `now_tz_naive`. Note the error:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 比较一个时区感知对象和一个时区不感知对象，`new_tz_aware`和`now_tz_naive`。注意错误：
- en: '[PRE101]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'We get the following output:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE102]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Creating a pandas.DataFrame object
  id: totrans-320
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个pandas.DataFrame对象
- en: Now that we are done with handling date and time, let's move on to handling
    time series data. The `pandas` library has a `pandas.DataFrame` class, which is
    useful for handling and manipulating such data. This recipe starts by creating
    these objects.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了日期和时间的处理，让我们转向处理时间序列数据。`pandas`库有一个`pandas.DataFrame`类，对于处理和操作这样的数据很有用。这个示例从创建这些对象开始。
- en: How to do it...
  id: totrans-322
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Execute the following steps for this recipe:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，执行以下步骤：
- en: 'Import the necessary modules from the Python standard library:'
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Python标准库中导入必要的模块：
- en: '[PRE103]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'Create a sample time-series data as a list of dictionary objects. Assign it
    to `time_series` data:'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个时间序列数据的示例，作为一个字典对象列表。将其分配给`time_series`数据：
- en: '[PRE104]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'Create a new `DataFrame` from `time_series_data`. Assign it to `df` and print
    it:'
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`time_series_data`创建一个新的`DataFrame`。将其分配给`df`并打印它：
- en: '[PRE105]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'We get the following output:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE106]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'Get the list of columns in `df`:'
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取`df`中的列列表：
- en: '[PRE107]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'We get the following output:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE108]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'Create a `DataFrame` object again using the `time_series_data`. This time,
    specify the columns in the order you want:'
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次使用`time_series_data`创建一个`DataFrame`对象。这次，按照你想要的顺序指定列：
- en: '[PRE109]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'We get the following output:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE110]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: How it works...
  id: totrans-340
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In *step 1*, you import the `datetime` class from the `datetime` module and
    the `pandas` package. In *step 2*, you create a time-series data, which is typically
    returned by 3rd party APIs for historical data. This data is a list of dictionaries,
    and each dictionary has the same set of keys—`date`, `open`, `high`, `low`, `close`,
    and `volume`. Observe that the value for the `date` key is a `datetime` object
    and for the other keys are `float` objects.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤1*中，从`datetime`模块导入`datetime`类和`pandas`包。在*步骤2*中，创建一个时间序列数据，这通常由第三方API返回历史数据。这个数据是一个字典列表，每个字典有相同的键集——`date`、`open`、`high`、`low`、`close`和`volume`。注意`date`键的值是一个`datetime`对象，其他键的值是`float`对象。
- en: In *step 3*, you create a pandas `DataFrame` object by directly calling the
    constructor with `time_series_data` as an argument and assign the return data
    to `df`. The keys of the dictionaries become the column names of `df` and values
    become the data. In *step 4*, you fetch the columns of `df` as a list using the
    `columns` attribute and the `tolist()` method. You can verify that the column
    names are the same as the keys of the dictionaries in `time_series_data`.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤3*中，通过直接调用构造函数并将`time_series_data`作为参数来创建一个pandas `DataFrame`对象，并将返回数据分配给`df`。字典的键成为`df`的列名，值成为数据。在*步骤4*中，使用`columns`属性和`tolist()`方法将`df`的列作为列表提取出来。您可以验证`time_series_data`中字典的键与列名相同。
- en: In *step 5*, you create a `DataFrame` with the columns in a specific order by
    passing a `columns` argument to the constructor with the required order as a list
    of strings.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤5*中，通过向构造函数传递`columns`参数以特定顺序的列来创建一个`DataFrame`，该参数是一个字符串列表。
- en: There's more
  id: totrans-344
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多
- en: 'When a `DataFrame` object is created, an index is assigned to it automatically,
    which is an address for all the rows. The leftmost column in the preceding example
    is the index column. By default, the index starts from `0`. A custom index can
    be set by passing an `index` argument to the `DataFrame` constructor with the
    required indices as an iterator. This is shown as follows:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建一个`DataFrame`对象时，会自动分配一个索引，这是所有行的地址。前面示例中最左边的列是索引列。默认情况下，索引从`0`开始。可以通过向`DataFrame`构造函数传递一个`index`参数以迭代器的形式设置自定义索引。如下所示：
- en: 'Create a new DataFrame object from `time_series_data`, with a custom index:'
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`time_series_data`创建一个新的DataFrame对象，带有自定义索引：
- en: '[PRE111]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'We get the following output:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE112]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: Note the index in the output starts from `10` and goes up to `19`. The default
    index values would have ranged from `0` to `9`.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 注意输出中的索引从`10`开始到`19`结束。默认索引值应该是从`0`到`9`。
- en: DataFrame manipulation—renaming, rearranging, reversing, and slicing
  id: totrans-351
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DataFrame操作—重命名、重新排列、反转和切片
- en: After creating a `DataFrame` object, you can perform various operations on it.
    This recipe covers the following operations on `DataFrame` objects. Renaming a
    column, rearranging columns, reversing the `DataFrame`, and slicing the `DataFrame`
    to extract a row, column, and a subset of data.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-353
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure the `df` object is available in your Python namespace. Refer to *Creating
    a pandas.DataFrame object* recipe of this chapter to set up this object.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-355
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Execute the following steps for this recipe:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: 'Rename the `date` column to `timestamp` for `df`. Print it:'
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE113]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'We get the following output:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'Create a new `DataFrame` object by rearranging the columns in `df`:'
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE115]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'We get the following output:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'Create a new `DataFrame` object by reversing the rows in `df`:'
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE117]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'We get the following output:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'Extract the `close` column from `df`:'
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE119]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'We get the following output:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'Extract the first row from `df`:'
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE121]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'We get the following output:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: 'Extract a *2 × 2* matrix with the first two rows and first two columns only:'
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE123]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: 'We get the following output:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: How it works...
  id: totrans-381
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Renaming**: In *step 1*, you rename the `date` column to `timestamp` using
    the `rename()` method of pandas `DataFrame`. You pass the `columns` argument as
    a dictionary with the existing names to be replaced as keys and their new names
    as the corresponding values. You also pass the `inplace` argument as `True` so
    that `df` is modified directly. If it is not passed, the default value is `False`,
    meaning a new `DataFrame` would be created instead of modifying `df`.'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
- en: '**Rearranging**: In *step 2*, you use the `reindex()` method to create a new
    `DataFrame` from `df` by rearranging its columns. You pass the `columns` argument
    with a list of column names as strings in the required order.'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
- en: '**Revering**: In *step 3*, you create a new `DataFrame` from `df` with its
    rows reversed by using the indexing operator in a special way `- [::-1]`. This
    is similar to the way we reverse regular Python lists.'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: '**Slicing**: In *step 4*, you extract the column `close` by using the indexing
    operator on `df`. You pass the column name, `close`, as the index here. The return
    data is a `pandas.Series` object. You can use the `iloc` property on DataFrame
    objects to extract a row, a column, or a subset DataFrame object. In *step 5*,
    you extract the first-row using `iloc` with `0` as the index. The return data
    is a `pandas.Series` object In *step 6*, you extract a 2x2 subset from df using
    `iloc` with `(:2, :2)` as the index. This implies all data in rows until index
    2 (which are 0 and 1) and columns until index 2 (which again are 0 and 1) would
    be extracted. The return data is a `pandas.DataFrame` object.'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
- en: For all the operations shown in this recipe where a new `DataFrame` object is
    returned, the original `DataFrame` object remains unchanged.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: There's more
  id: totrans-387
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `.iloc()` property can also be used to extract a column from a `DataFrame`.
    This is shown in the following code.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
- en: 'Extract the 4th column from `df`. Observe the output:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: 'We get the following output:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: Note that this output and the output of *step 4* are identical.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，此输出和 *步骤 4* 的输出相同。
- en: DataFrame manipulation—applying, sorting, iterating, and concatenating
  id: totrans-394
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DataFrame 操作 — 应用、排序、迭代和连接
- en: 'Adding to the previous recipe, this recipe demonstrates more operations that
    can be performed on `DataFrame` objects: applying a function to all elements in
    a column, sorting based on a column, iterating over the rows, and concatenating
    multiple `DataFrame` objects vertically and horizontally.'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个食谱的基础上，本食谱演示了可以对 `DataFrame` 对象执行的更多操作：对列中的所有元素应用函数、基于列进行排序、迭代行以及垂直和水平连接多个
    `DataFrame` 对象。
- en: Getting ready
  id: totrans-396
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure you have followed the previous recipe before trying out this recipe.
    Ensure you have `df` in your Python namespace from the previous recipe.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试此食谱之前，请确保您已经完成了上一个食谱。确保您的 Python 命名空间中有来自上一个食谱的 `df`。
- en: How to do it…
  id: totrans-398
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Execute the following steps for this recipe:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 为此食谱执行以下步骤：
- en: Import the necessary modules
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入必要的模块
- en: '[PRE127]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: 'Modify the values in the timestamp column of `df` with a different date and
    time format `DD-MM-YYYY HH:MM:SS`:'
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用不同的日期和时间格式 `DD-MM-YYYY HH:MM:SS` 修改 `df` 的时间戳列中的值：
- en: '[PRE128]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: 'We get the following output:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE129]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: 'Create a new `DataFrame` object by sorting the `close` column in ascending
    order:'
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个按照 `close` 列升序排列的新的 `DataFrame` 对象：
- en: '[PRE130]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: 'We get the following output:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE131]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: 'Create a new `DataFrame` object by sorting the `open` column in descending
    order:'
  id: totrans-410
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个按照 `open` 列降序排列的新的 `DataFrame` 对象：
- en: '[PRE132]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: 'We get the following output:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE133]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: 'Iterate over `df` to find the average of `open`, `close`, `high`, and `low` values
    for each row:'
  id: totrans-414
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 遍历 `df` 以找到每行的 `open`、`close`、`high` 和 `low` 的平均值：
- en: '[PRE134]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: 'We get the following output:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE135]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: 'Iterate column-wise over all the values of the first row of `df`:'
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 逐列迭代 `df` 的第一行的所有值：
- en: '[PRE136]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: 'We get the following output:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE137]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: 'Create a sample time-series data as a list of dictionary objects. Assign it
    to `df_new`:'
  id: totrans-422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个样本时间序列数据作为字典对象的列表。将其分配给 `df_new`：
- en: '[PRE138]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: 'We get the following output:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE139]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: 'Create a new DataFrame by concatenating `df` and `df_new` vertically:'
  id: totrans-426
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过垂直连接 `df` 和 `df_new` 创建一个新的 DataFrame：
- en: '[PRE140]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: 'We get the following output:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE141]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: How it works...
  id: totrans-430
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In *step 1*, you import the `pandas` package.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 1* 中，您导入 `pandas` 包。
- en: '**Applying**: In *step 2*, you modify all the values in the `timestamp` column
    of `df` by using the `apply` method. This method takes a function as an input
    to be applied. You pass a lambda function here which expects a `datetime` object
    as a single input, and converts it to a string in the required format using `strftime()`.
    (Refer to *Converting a datetime object to a string* recipe for more details on
    `strftime()`). The `apply` method is called on the `timestamp` column of `df`,
    which is a `pandas.Series` object. The lambda function is applied to each value
    in the column. This call returns a new `pandas.Series` object, which you assign
    back to the `timestamp` column of `df`. Note, after this, the `timestamp` column
    of `df` holds timestamps as string objects, and not `datetime` objects as earlier.'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: '**应用**：在 *步骤 2* 中，您通过使用 `apply` 方法修改 `df` 的 `timestamp` 列中的所有值。此方法接受要应用的函数作为输入。您在此处传递一个期望一个
    `datetime` 对象作为单个输入的 lambda 函数，并使用 `strftime()` 将其转换为所需格式的字符串。（有关 `strftime()`
    的更多详细信息，请参阅 *将 datetime 对象转换为字符串* 食谱）。`apply` 方法调用在 `df` 的 `timestamp` 列上，这是一个
    `pandas.Series` 对象。lambda 函数应用于列中的每个值。此调用返回一个新的 `pandas.Series` 对象，您将其重新分配给 `df`
    的 `timestamp` 列。注意，之后，`df` 的 `timestamp` 列保存的是字符串对象，而不是之前的 `datetime` 对象。'
- en: '**Sorting**: In *step 3*, you create a new `DataFrame` object by sorting the
    `close` column of `df` in ascending order. You use the `sort_values()` method
    to perform the sorting. Similarly, in *step 4*, you create a new `DataFrame` object
    by sorting the `open` column of `df` in descending order.'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: '**排序**：在 *步骤 3* 中，您通过按照 `df` 的 `close` 列升序排列来创建一个新的 `DataFrame` 对象。您使用 `sort_values()`
    方法来执行排序。类似地，在 *步骤 4* 中，您通过按照 `df` 的 `open` 列降序排列来创建一个新的 `DataFrame` 对象。'
- en: '**Iterating**: In *step 5*, you iterate over df using the `iterrows()` method
    to find and print the average of `open`, `close`, `high`, and `low` values for
    each row. The `iterrows()` method iterates over each row as an (`index, pandas.Series`)
    pair. In *step 6*, you iterate over all the values of the first row of `df` using
    `df.iloc[0]`. You get the `timestamp`, `open`, `high`, `low`, `close`, and `volume`
    column values for the first row as the output.'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: '**迭代**：在*步骤 5*中，您使用`iterrows()`方法迭代`df`以找到并打印出每行的`open`、`close`、`high`和`low`的平均值。`iterrows()`方法将每行作为一个（`index,
    pandas.Series`）对进行迭代。在*步骤 6*中，您使用`df.iloc[0]`迭代`df`的第一行的所有值。您将第一行的`timestamp`、`open`、`high`、`low`、`close`和`volume`列值作为输出。'
- en: '**Concatenation**: In *step 6*, you create a new `DataFrame` similar to the
    one created in *step 2* of *Creating a pandas.DataFrame object* recipe, and assign
    it to `df_new`. You use the `pandas.concat()` function to create a new `DataFrame`
    by vertically concatenating `dt` and `df_new`. This implies that a new `DataFrame`
    would be created with the rows of `df_new` appended below the rows of `df`. You
    pass a list containing `df` and `df_new` as an argument to the `pandas.concat()`
    function. Also, to create a fresh index starting from `0`, you use the `reset_index()`
    method with the argument drop passed as `True`. If you don''t use `reset_index()`,
    the indices of the concatenated `DataFrame` would look something like this—`0,
    1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4`. (Refer to *Creating a pandas.DataFrame
    object* recipe to know more about the `DataFrame` index.)'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: '**连接**：在*步骤 6*中，您创建了一个新的`DataFrame`，类似于*创建 pandas.DataFrame 对象*配方中创建的那个，并将其赋值给`df_new`。您使用`pandas.concat()`函数通过垂直连接`dt`和`df_new`来创建一个新的`DataFrame`。这意味着将创建一个新的`DataFrame`，其中`df_new`的行附加在`df`的行下面。您将包含`df`和`df_new`的列表作为参数传递给`pandas.concat()`函数。另外，为了创建一个从`0`开始的新索引，您使用了`reset_index()`方法，并将参数
    drop 传递为`True`。如果您不使用`reset_index()`，则连接的`DataFrame`的索引会看起来像这样—`0, 1, 2, 3, 4,
    5, 6, 7, 8, 9, 0, 1, 2, 3, 4`。（有关`DataFrame`索引的更多信息，请参阅*创建 pandas.DataFrame 对象*配方。）'
- en: There's more
  id: totrans-436
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多
- en: 'You can also use the `pandas.concat()` function to concatenate two `DataFrame`
    objects together horizontally, which is column-wise by, passing the `axis` argument a
    value of `1` to the `pandas.concat()` method. This is shown in the following steps:'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以使用`pandas.concat()`函数将两个`DataFrame`对象水平连接在一起，即列方向上，通过将`axis`参数传递给`pandas.concat()`方法一个值为`1`。这在以下步骤中显示：
- en: 'Import `random` module from the Python standard library:'
  id: totrans-438
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Python 标准库导入`random`模块：
- en: '[PRE142]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: 'Create a DataFrame object with a single column, `open`, and random values.
    Assign it to `df1` and print it:'
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用一个单列`open`和随机值创建一个`DataFrame`对象。将其赋值给`df1`并打印出来：
- en: '[PRE143]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: 'We get the following output. Your output may differ:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出。您的输出可能会有所不同：
- en: '[PRE144]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: 'Create another `DataFrame` object with a single column, `close`, and random
    values. Assign it to `df2` and print it:'
  id: totrans-444
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用一个单列`close`和随机值创建另一个`DataFrame`对象。将其赋值给`df2`并打印出来：
- en: '[PRE145]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: 'We get the following output:'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE146]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: Create a new `DataFrame` by concatenating `df1` and `df2` horizontally
  id: totrans-448
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过水平连接`df1`和`df2`创建一个新的`DataFrame`
- en: '[PRE147]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: 'We get the following output. Your output may differ:'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出。您的输出可能会有所不同：
- en: '[PRE148]'
  id: totrans-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: Converting a DataFrame into other formats
  id: totrans-452
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 DataFrame 转换为其他格式
- en: This recipe demonstrates the conversion of `DataFrame` objects into other formats,
    such as `.csv` files, `json` objects, and `pickle` objects. Conversion into a `.csv`
    file makes it easier to further work on the data using a spreadsheet application.
    The `json` format is useful for transmitting `DataFrame` objects over web APIs.
    The `pickle` format is useful for transmitting `DataFrame` objects created in
    one Python session to another Python session over sockets without having to recreate
    them.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方演示了将`DataFrame`对象转换为其他格式，如`.csv`文件、`json`对象和`pickle`对象。将其转换为`.csv`文件可以使进一步使用电子表格应用程序处理数据变得更加容易。`json`格式对于通过网络
    API 传输`DataFrame`对象非常有用。`pickle`格式对于通过套接字将一个 Python 会话中创建的`DataFrame`对象传输到另一个
    Python 会话中而无需重新创建它们非常有用。
- en: Getting ready
  id: totrans-454
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure the object `df` is available in your Python namespace. Refer to *Creating
    a pandas.DataFrame object* recipe of this chapter to set up this object.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在您的 Python 命名空间中可用对象`df`。请参阅本章的*创建 pandas.DataFrame 对象*配方来设置此对象。
- en: How to do it…
  id: totrans-456
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Execute the following steps for this recipe:'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此配方的以下步骤：
- en: 'Convert and save `df` as a CSV file:'
  id: totrans-458
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`df`转换并保存为 CSV 文件：
- en: '[PRE149]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: 'Convert `df` to a JSON string:'
  id: totrans-460
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`df`转换为 JSON 字符串：
- en: '[PRE150]'
  id: totrans-461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: 'We get the following output:'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE151]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: 'Pickle `df` to a file:'
  id: totrans-464
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`df`保存为一个文件：
- en: '[PRE152]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: How it works...
  id: totrans-466
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In *step 1*, you use the `to_csv()` method to save `df` as a `.csv` file. You
    pass `dataframe.csv`, a file path where the `.csv` file should be generated, as
    the first argument and index as `False` as the second argument. Passing index
    as `False` prevents the index from being dumped to the `.csv` file. If you want
    to save the `DataFrame` along with its index, you can pass the index as `True`
    to the `to_csv()` method.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 1* 中，你使用 `to_csv()` 方法将 `df` 保存为 `.csv` 文件。你将 `dataframe.csv`，一个生成 `.csv`
    文件的文件路径，作为第一个参数传递，将索引设置为 `False` 作为第二个参数。将索引设置为 `False` 可以防止索引被转储到 `.csv` 文件中。如果你想将
    `DataFrame` 与其索引一起保存，可以将索引设置为 `True` 传递给 `to_csv()` 方法。
- en: In *step 2*, you use the `to_json()` method to convert `df` into a JSON string.
    You do not pass any additional arguments to the `to_json()` method.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 2* 中，你使用 `to_json()` 方法将 `df` 转换为 JSON 字符串。你没有向 `to_json()` 方法传递任何额外的参数。
- en: In *step 3*, you use the `to_pickle()` method to pickle (serialize) the object.
    Again you do not pass any additional arguments to the `to_pickle()` method.
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 3* 中，你使用 `to_pickle()` 方法对对象进行 pickle（序列化）。同样，你没有向 `to_pickle()` 方法传递任何额外的参数。
- en: 'The methods `to_csv()`, `to_json()`, and `to_pickle()` can take more optional
    arguments than the ones shown in this recipe. Refer to the official docs for complete
    information on these methods:'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 方法 `to_csv()`、`to_json()` 和 `to_pickle()` 可以接受比本示例中显示的更多可选参数。有关这些方法的完整信息，请参阅官方文档：
- en: '`to_csv()`: [https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_csv.html](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_csv.html)'
  id: totrans-471
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`to_csv()`: [https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_csv.html](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_csv.html)'
- en: '`to_json()`: [https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_json.html](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_json.html)'
  id: totrans-472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`to_json()`: [https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_json.html](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_json.html)'
- en: '`to_pickle()`: [https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_pickle.html](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_pickle.html)'
  id: totrans-473
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`to_pickle()`: [https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_pickle.html](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_pickle.html)'
- en: Creating a DataFrame from other formats
  id: totrans-474
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从其他格式创建 DataFrame
- en: In this recipe, you will create `DataFrame` objects from other formats, such
    as `.csv` files, `.json` strings, and `pickle` files. A `.csv` file created using
    a spreadsheet application, valid JSON data received over web APIs, or valid pickle
    objects received over sockets can all be processed further using Python by converting
    them to `DataFrame` objects.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，你将从其他格式（如 `.csv` 文件、`.json` 字符串和 `pickle` 文件）创建 `DataFrame` 对象。使用电子表格应用程序创建的
    `.csv` 文件、通过 web API 接收的有效 JSON 数据或通过套接字接收的有效 pickle 对象都可以通过将它们转换为 `DataFrame`
    对象来进一步处理。
- en: 'Loading pickled data received from untrusted sources can be unsafe. Please
    use `read_pickle()` with caution. You can find more details here: [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html).
    If you are using this function on the pickle file created in the previous recipe,
    it is perfectly safe to use `read_pickle()`.'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 从不受信任的来源加载 pickled 数据可能是不安全的。请谨慎使用 `read_pickle()`。你可以在这里找到更多详细信息：[https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)。如果你在之前的示例中使用此函数的
    pickle 文件，那么使用 `read_pickle()` 是完全安全的。
- en: Getting ready
  id: totrans-477
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure you have followed the previous recipe before starting this recipe.
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始此示例之前，请确保你已经按照上一个示例的步骤进行了操作。
- en: How to do it…
  id: totrans-479
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Execute the following steps for this recipe:'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤来完成这个示例：
- en: 'Create a DataFrame object by reading a CSV file:'
  id: totrans-481
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过读取 CSV 文件创建一个 DataFrame 对象：
- en: '[PRE153]'
  id: totrans-482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: 'We get the following output:'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE154]'
  id: totrans-484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: 'Create a DataFrame object by reading a JSON string:'
  id: totrans-485
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过读取 JSON 字符串创建一个 DataFrame 对象：
- en: '[PRE155]'
  id: totrans-486
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: 'We get the following output:'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE156]'
  id: totrans-488
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: 'Create a `DataFrame` object by unpickling the `df.pickle` file:'
  id: totrans-489
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过取消反序列化 `df.pickle` 文件来创建一个 `DataFrame` 对象：
- en: '[PRE157]'
  id: totrans-490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: 'We get the following output:'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE158]'
  id: totrans-492
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: How it works...
  id: totrans-493
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理如下...
- en: In *step 1*, you use the `pandas.read_csv()` function to create a DataFrame
    object from a `.csv` file. You pass `dataframe.csv`, the file path from where
    the `.csv` file should be read, as an argument. Recall, you have created `dataframe.csv`
    in *step 1* of the previous recipe.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 1* 中，你使用 `pandas.read_csv()` 函数从 `.csv` 文件创建一个 DataFrame 对象。你将 `dataframe.csv`，即
    `.csv` 文件应该读取的文件路径，作为参数传递。回想一下，在前一个示例的 *步骤 1* 中创建了 `dataframe.csv`。
- en: In *step 2*, you use the `pandas.read_json()` function to create a `DataFrame`
    object from a valid JSON string. You pass the JSON string from the output of *step
    2* in the previous recipe as an argument to this function.
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第2步*中，你使用`pandas.read_json()`函数从有效的 JSON 字符串创建一个`DataFrame`对象。你将前一个示例中*第2步*的输出的
    JSON 字符串作为此函数的参数传递。
- en: In *step 3*, you use the `pandas.read_pickle()` method to create a `DataFrame`
    object from a `pickle` file. You pass `df.pickle`, the file path from where the
    pickle file should be read, as an argument to this function. Recall, what you
    created `df.pickle` in *step 3* of the previous recipe.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第3步*中，你使用`pandas.read_pickle()`方法从`pickle`文件创建一个`DataFrame`对象。你将`df.pickle`，即
    pickle 文件应该读取的文件路径，作为此函数的参数传递。回忆一下，你在前一个示例的*第3步*中创建了`df.pickle`。
- en: If you have followed the previous recipe, the outputs for all the three steps
    would all be the same `DataFrame` object. And this would be identical to `df`
    from the previous recipe.
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遵循了前一个示例，那么所有三个步骤的输出都将是相同的`DataFrame`对象。这与前一个示例中的`df`完全相同。
- en: The methods `read_csv()`, `read_json()`, and `read_pickle()` can take more optional
    arguments than the ones shown in this recipe. Refer to the official docs for complete
    information on these methods.
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 方法`read_csv()`、`read_json()`和`read_pickle()`可以接受比本示例中显示的更多的可选参数。请参考官方文档以获取有关这些方法的完整信息。
- en: '`read_csv()`: [https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html#pandas.read_csv](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html#pandas.read_csv)'
  id: totrans-499
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`read_csv()`: [https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html#pandas.read_csv](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html#pandas.read_csv)'
- en: '`read_json()`: [https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_json.html#pandas.read_json](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_json.html#pandas.read_json)'
  id: totrans-500
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`read_json()`: [https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_json.html#pandas.read_json](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_json.html#pandas.read_json)'
- en: '`read_pickle()`: [https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_pickle.html#pandas.read_pickle](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_pickle.html#pandas.read_pickle)'
  id: totrans-501
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`read_pickle()`: [https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_pickle.html#pandas.read_pickle](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_pickle.html#pandas.read_pickle)'
