- en: Chapter 1.  Introduction to R
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will be discussing basic R concepts. This will serve as
    the background for upcoming chapters. We are not going to discuss each and every
    concept in detail for R. This chapter is meant for people who do not have any
    knowledge of the R language or beginners who are looking to pursue a career in
    quantitative finance or want to use R for quantitative financial analysis. This
    chapter can give you a start in learning how to write programs in R, and for writing
    complex programs, you can explore other books.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The need for R
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to download/install R
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to install packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Import and export of different data types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to write code expressions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to execute R programs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loops (for, while, if, and if...else)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The need for R
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are so many statistical packages which can be used for solving problems
    in quantitative finance. But R is not a statistical package but it is a language.
    R is a flexible and powerful language for achieving high-quality analysis.
  prefs: []
  type: TYPE_NORMAL
- en: To use R, one does not need to be a programmer or computer-subject expert. The
    knowledge of basic programming definitely helps in learning R, but it is not a
    prerequisite for getting started with R.
  prefs: []
  type: TYPE_NORMAL
- en: One of the strengths of R is its package system. It is vast. If a statistical
    concept exists, chances are that there is already a package for it in R. There
    exist many functionalities that come built in for statistics / quantitative finance.
  prefs: []
  type: TYPE_NORMAL
- en: R is extendable and provides plenty of functionalities which encourage developers
    in quant finance to write their own tools or methods to solve their analytical
    problems.
  prefs: []
  type: TYPE_NORMAL
- en: The graphing and charting facilities present in R are unparalleled. R has a
    strong relationship with academia. As new research gets published, the likelihood
    is that a package for the new research gets added, due to its open source nature,
    which keeps R updated with the new concepts emerging in quant finance.
  prefs: []
  type: TYPE_NORMAL
- en: R was designed to deal with data, but when it came into existence, big data
    was nowhere in the picture. Additional challenges dealing with big data are the
    variety of data (text data, metric data, and so on), data security, memory, CPU
    I/O RSC requirements, multiple machines, and so on. Techniques such as map-reducing,
    in-memory processing, streaming data processing, down-sampling, chunking, and
    so on are being used to handle the challenges of big data in R.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, R is free software. The development community is fantastic and
    easy to approach, and they are always interested in developing new packages for
    new concepts. There is a lot of documentation available on the Internet for different
    packages of R.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, R is a cost-effective, easy-to-learn tool. It has very good data handling,
    graphical, and charting capabilities. It is a cutting-edge tool as, due to its
    open nature, new concepts in finance are generally accompanied by new R packages.
    It is demand of time for people pursuing a career in quantitative finance to learn
    R.
  prefs: []
  type: TYPE_NORMAL
- en: How to download/install R
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to discuss how to download and install R for
    various platforms: Windows, Linux, and Mac.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your web browser and go to the following link: [https://cran.rstudio.com/](https://cran.rstudio.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: From the given link, you can download the required version according to the
    available operating system.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the Windows version, click on **Download R for Windows,** and then select
    the base version and download **Download R 3.3.1 for Windows** for your Windows
    operating system, click on it, and select your favorite language option. Now click
    through the installer and it will take you through various options, such as the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: Setup Wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: License Agreement.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select folder location where you want to install.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the component. Select the option according to the configuration of your
    system; if you do not know the configuration of your system, then select all the
    options.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you want to customize your setup, select the option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the R launch options and desktop shortcut options according to your requirements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: R download and installation is complete for Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, you click on your installer for Linux and Mac and it will take you
    through various options of installation.
  prefs: []
  type: TYPE_NORMAL
- en: How to install packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: R packages are a combination of R functions, compiled code, and sample data,
    and their storage directory is known as a library. By default, when R is installed,
    a set of packages gets installed and the rest of the packages you have to add
    when required.
  prefs: []
  type: TYPE_NORMAL
- en: 'A list of commands is given here to check which packages are present in your
    system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command is used for getting or setting the library trees that
    R knows about. It gives the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'After this, execute the following command and it will list all the available
    packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: There are two ways to install new packages.
  prefs: []
  type: TYPE_NORMAL
- en: Installing directly from CRAN
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: CRAN stands for **Comprehensive R Archive Network**. It is a network of FTP
    web servers throughout the globe for storing identical, up-to-date versions of
    code and documentation for R.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following command is used to install the package directly from the CRAN
    web page. You need to choose the appropriate mirror:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, if you need to install the `ggplot2` or `forecast` package for
    R, the commands are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Installing packages manually
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Download the required R package manually and save the ZIP version at your designated
    location (let's say `/DATA/RPACKAGES/`) on the system.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if we want to install `ggplot2`, then run the following command
    to install it and load it to the current R environment. Similarly, other packages
    can also be installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Data types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In any programming language, one needs to store various pieces of information
    using various variables. Variables are reserved memory locations for storing values.
    So by creating a variable, one is reserving some space in the memory. You may
    like to store various types of data types, such as character, floating point,
    Boolean, and so on. On the basis of data type, the operating system allocates
    memory and decides what can be stored in reserved memory.
  prefs: []
  type: TYPE_NORMAL
- en: All the things you encounter in R are called objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'R has five types of basic objects, also known as atomic objects, and the rest
    of the objects are built on these atomic objects. Now we will give an example
    of all the basic objects and will verify their class:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Character:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We assign a character value to a variable and verify its class:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The result produced is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Numeric:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We assign a numeric value to a variable and verify its class:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The result produced is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Integer:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We assign an integer value to a variable and verify its class:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The result produced is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Complex:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We assign an integer value to a variable and verify its class:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The result produced is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Logical (`True`/`false`):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We assign an integer value to a variable and verify its class:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then the result produced is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The basic types of objects in R are known as **vectors** and they consist of
    similar types of objects. They cannot consist of two different types of objects
    at the same time, such as a vector consisting of both character and numeric.
  prefs: []
  type: TYPE_NORMAL
- en: But list is an exception, and it can consist of multiple classes of objects
    at the same time. So a list can simultaneously contain a character, a numeric,
    and a list.
  prefs: []
  type: TYPE_NORMAL
- en: Now we will discuss the common data types present in R and give at least one
    example for each data type discussed here.
  prefs: []
  type: TYPE_NORMAL
- en: Vectors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Vectors have already been defined. If we want to construct a vector with more
    than one element, we can use the `c()` function which combines the elements into
    a vector, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This produces the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This produces the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Lists
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A list is an R object that consists of multiple types of objects inside it,
    such as vectors and even lists. For example, let''s construct a list and print
    it using code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'When we execute the previous command, it produces the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: We can extract the individual elements of the list according to our requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, in the preceding case, if we want to extract the second element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Upon executing the preceding code, R creates the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'One can merge the two lists using the function `c()`; for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Upon executing the preceding command, we get the combined list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Matrices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A matrix is a two-dimensional rectangular dataset, and it is created by vector
    input to the `matrix()` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, create a matrix with two rows and three columns, and print it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'When we execute the preceding code, it produces the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Matrices are confined to only two dimensions, but arrays can be of any dimension.
    The `array()` function takes a `dim` attribute, which creates the needed dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, create an array and print it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'When we execute the previous code, it produces the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Factors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Factors are R objects that are created using a vector. It stores the vector
    along with the distinct elements present in the vector as labels. Labels are always
    in character form, irrespective of whether it is numeric, character, or Boolean.
  prefs: []
  type: TYPE_NORMAL
- en: 'Factors are created using the `factor()` function, and the count of levels
    is given by *n* levels; for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'When the preceding code gets executed, it generates the following results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: DataFrames
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: DataFramesare tabular-form data objects where each column can be of different
    form, that is, numeric, character, or logical. Each column consists of a list
    of vectors having the same length.
  prefs: []
  type: TYPE_NORMAL
- en: 'DataFrames are generated using the function `data.frame()`; for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'When the preceding code gets executed, it generates the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Importing and exporting different data types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In R, we can read the files stored from outside the R environment. We can also
    write the data into files which can be stored and accessed by the operating system.
    In R, we can read and write different formats of files, such as CSV, Excel, TXT,
    and so on. In this section, we are going to discuss how to read and write different
    formats of files.
  prefs: []
  type: TYPE_NORMAL
- en: The required files should be present in the current directory to read them.
    Otherwise, the directory should be changed to the required destination.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step for reading/writing files is to know the working directory.
    You can find the path of the working directory by running the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'This will give the paths for the current working directory. If it is not your
    desired directory, then please set your own desired directory by using the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'For instance, the following code makes the folder `C:/Users` the working directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: How to read and write a CSV format file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A CSV format file is a text file in which values are comma separated. Let us
    consider a CSV file with the following content from stock-market data:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Date` | `Open` | `High` | `Low` | `Close` | `Volume` | `Adj Close` |'
  prefs: []
  type: TYPE_TB
- en: '| 14-10-2016 | 2139.68 | 2149.19 | 2132.98 | 2132.98 | 3.23E+09 | 2132.98 |'
  prefs: []
  type: TYPE_TB
- en: '| 13-10-2016 | 2130.26 | 2138.19 | 2114.72 | 2132.55 | 3.58E+09 | 2132.55 |'
  prefs: []
  type: TYPE_TB
- en: '| 12-10-2016 | 2137.67 | 2145.36 | 2132.77 | 2139.18 | 2.98E+09 | 2139.18 |'
  prefs: []
  type: TYPE_TB
- en: '| 11-10-2016 | 2161.35 | 2161.56 | 2128.84 | 2136.73 | 3.44E+09 | 2136.73 |'
  prefs: []
  type: TYPE_TB
- en: '| 10-10-2016 | 2160.39 | 2169.6 | 2160.39 | 2163.66 | 2.92E+09 | 2163.66 |'
  prefs: []
  type: TYPE_TB
- en: 'To read the preceding file in R, first save this file in the working directory,
    and then read it (the name of the file is `Sample.csv`) using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'When the preceding code gets executed, it will give the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '`Read.csv` by default produces the file in DataFrame format; this can be checked
    by running the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, whatever analysis you want to do, you can perform it by applying various
    functions on the DataFrame in R, and once you have done the analysis, you can
    write your desired output file using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: When the preceding code gets executed, it writes the output file in the working
    directory folder in CSV format.
  prefs: []
  type: TYPE_NORMAL
- en: XLSX
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Excel is the most common format of file for storing data, and it ends with extension
    `.xls` or `.xlsx`.
  prefs: []
  type: TYPE_NORMAL
- en: The `xlsx` package will be used to read or write `.xlsx` files in the R environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Installing the `xlsx` package has dependency on Java, so Java needs to be installed
    on the system. The `xlsx` package can be installed using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'When the previous command gets executed, it will ask for the nearest CRAN mirror,
    which the user has to select to install the package. We can verify that the package
    has been installed or not by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'If it has been installed successfully, it will show the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'We can load the `xlsx` library by running the following script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let us save the previous sample file in `.xlsx` format and read it in the
    R environment, which can be done by executing the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'This gives a DataFrame output with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, you can write R files in `.xlsx` format by executing the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Web data or online sources of data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Web is one main source of data these days, and we want to directly bring
    the data from web form to the R environment. R supports this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'When the preceding code is executed, it directly brings the data for the `S&P500`
    index into R in DataFrame format. A portion of the data has been displayed by
    using the `head()` function here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, if we execute the following code, it brings the DJI index data into
    the R environment: its sample is displayed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'This gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Please note that we will be mostly using the `snp` and `dji` indexes for example
    illustrations in the rest of the book and these will be referred to as `snp` and
    `dji`.
  prefs: []
  type: TYPE_NORMAL
- en: Databases
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A relational database stores data in normalized format, and to perform statistical
    analysis, we need to write complex and advance queries. But R can connect to various
    relational databases such as MySQL Oracle, and SQL Server, easily and convert
    the data tables into DataFrames. Once the data is in DataFrame format, doing statistical
    analysis is easy to perform using all the available functions and packages.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will take the example of MySQL as reference.
  prefs: []
  type: TYPE_NORMAL
- en: 'R has a built-in package, `RMySQL` , which provides connectivity with the database;
    it can be installed using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the package is installed, we can create a connection object to create
    a connection with the database. It takes username, password, database name, and
    localhost name as input. We can give our inputs and use the following command
    to connect with the required database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'When the database is connected, we can list the table that is present in the
    database by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'We can query the database using the function `dbSendQuery()`, and the result
    is returned to R by using function `fetch()`. Then the output is stored in DataFrame
    format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: When the previous code gets executed, it returns the required output.
  prefs: []
  type: TYPE_NORMAL
- en: We can query with a filter clause, update rows in database tables, insert data
    into a database table, create tables, drop tables, and so on by sending queries
    through `dbSendQuery()`.
  prefs: []
  type: TYPE_NORMAL
- en: How to write code expressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will discuss how to write various basic expressions which
    are the core elements of writing a program. Later, we will discuss how to create
    user-defined functions.
  prefs: []
  type: TYPE_NORMAL
- en: Expressions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: R code consists of one or more expressions. An expression is an instruction
    to perform a particular task.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the addition of two numbers is given by the following expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'It gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: If there is more than one expression in a program, they get executed one by
    one, in the sequence they appear.
  prefs: []
  type: TYPE_NORMAL
- en: Now we will discuss basic types of expressions.
  prefs: []
  type: TYPE_NORMAL
- en: Constant expression
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The simplest form of expression are constant values, which may be character
    or numeric values.
  prefs: []
  type: TYPE_NORMAL
- en: For example, 100 is a numeric value expression of a constant value.
  prefs: []
  type: TYPE_NORMAL
- en: '`Hello World` is a character form expression of a constant expression.'
  prefs: []
  type: TYPE_NORMAL
- en: Arithmetic expression
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The R language has standard arithmetic operators and using these, arithmetic
    expressions can be written.
  prefs: []
  type: TYPE_NORMAL
- en: 'R has the following arithmetic operators:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Operands** | **Operators** |'
  prefs: []
  type: TYPE_TB
- en: '| `+` | Addition |'
  prefs: []
  type: TYPE_TB
- en: '| `-` | Subtraction |'
  prefs: []
  type: TYPE_TB
- en: '| `*` | Multiplication |'
  prefs: []
  type: TYPE_TB
- en: '| `/` | Division |'
  prefs: []
  type: TYPE_TB
- en: '| `^` | Exponentiation |'
  prefs: []
  type: TYPE_TB
- en: 'Using these arithmetic operations, one can generate arithmetic expressions;
    for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: R follows the BODMAS rule. One can use parentheses to avoid ambiguity in creating
    any arithmetic expression.
  prefs: []
  type: TYPE_NORMAL
- en: Conditional expression
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A conditional expression compares two values and returns a logical value in
    the form of `True` or `False`.
  prefs: []
  type: TYPE_NORMAL
- en: 'R has standard operators for comparing values and operators for combining conditions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Operands** | **Operators** |'
  prefs: []
  type: TYPE_TB
- en: '| `==` | Equality |'
  prefs: []
  type: TYPE_TB
- en: '| `>(>=)` | Greater than (greater than equal to) |'
  prefs: []
  type: TYPE_TB
- en: '| `<(<=)` | Less than (less than equal to) |'
  prefs: []
  type: TYPE_TB
- en: '| `!=` | Inequality |'
  prefs: []
  type: TYPE_TB
- en: '| `&&` | Logical AND |'
  prefs: []
  type: TYPE_TB
- en: '| `&#124;&#124;` | Logical OR |'
  prefs: []
  type: TYPE_TB
- en: '| `!` | Logical NOT |'
  prefs: []
  type: TYPE_TB
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`10>5`, when executed, returns `True`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`5>10`, when executed, returns `False`.'
  prefs: []
  type: TYPE_NORMAL
- en: Functional call expression
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The most common and useful type of R expression is calling functions. There
    are a lot of built-in functions in R, and users can built their own functions.
    In this section, we will see the basic structure of calling a function.
  prefs: []
  type: TYPE_NORMAL
- en: A function call consists of a function name followed by parentheses. Within
    the parentheses, arguments are present, separated by commas. Arguments are expressions
    that provide the necessary information to the functions to perform the required
    tasks. An example will be provided when we discuss how to construct user-defined
    functions.
  prefs: []
  type: TYPE_NORMAL
- en: Symbols and assignments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: R code consists of keywords and symbols.
  prefs: []
  type: TYPE_NORMAL
- en: A symbol is the label for an object stored in RAM, and it gets the stored value
    from the memory when the program gets executed.
  prefs: []
  type: TYPE_NORMAL
- en: R also stores many predefined values for predefined symbols, which is used in
    the program as required and gets automatically downloaded.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the `date()` function produces today's date when executed.
  prefs: []
  type: TYPE_NORMAL
- en: The result of an expression can be assigned to a symbol, and it is assigned
    by using the assignment operator `<-`.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the expression `value <-4+6` assigns the symbol value with value
    `10` and is stored in memory.
  prefs: []
  type: TYPE_NORMAL
- en: Keywords
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Some symbols are used to represent special values and cannot be reassigned:'
  prefs: []
  type: TYPE_NORMAL
- en: '`NA`: This is used to define missing or unknown values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Inf`: This is used to represent infinity. For example, 1/0 produces the result
    infinity'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NaN`: This is used to define the result of arithmetic expression which is
    undefined. For example, 0/0 produces NaN'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NULL`: This is used to represent empty result'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TRUE` and `FALSE`: These are logical values and are generally generated when
    values are compared'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Naming variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When writing R code, we need to store various pieces of information under many
    symbols. So we need to name these symbols meaningfully as that will make the code
    easy to understand. Symbols should be self-explanatory. Writing short symbol name
    will make the code tougher to understand.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if we represent date of birth information by `DateOfBirth` or `DOB`,
    then the first option is better as it is self-explanatory.
  prefs: []
  type: TYPE_NORMAL
- en: Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will provide some examples of built-in functions that already
    exist in R and also construct a user-defined function for a specific task.
  prefs: []
  type: TYPE_NORMAL
- en: A function is a collection of statements put together to do a specific task.
  prefs: []
  type: TYPE_NORMAL
- en: R has a lot of built-in functions and users can define their own functions.
  prefs: []
  type: TYPE_NORMAL
- en: According to their requirement, in R, the interpreter passes control to the
    function object along with the arguments required for the accomplishment of the
    task designated for the function. After completing the task, the function returns
    the control to the interpreter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for defining a function is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Function name**: This is the name of the defined function and is stored as
    an object with this name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Arguments**: Arguments are the required information needed for the function
    to accomplish its task. Arguments are optional.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Function body**: This is a collection of statements that does the designated
    task for the function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Return value**: The return value is the last expression of a function which
    is returned as an output value of the task performed by the function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Please find here an example of some of the inbuilt functions along with their
    results when executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Now we will look at how to build the user-defined functions. Here we are trying
    to find the square of a given sequence.
  prefs: []
  type: TYPE_NORMAL
- en: 'The name of the function is `findingSqrFunc` and takes the argument value,
    which must be an integer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the preceding code gets executed, we call the function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Calling a function without an argument
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Construct a function without an argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'On executing the preceding function without arguments, the following output
    gets printed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Calling a function with an argument
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The arguments to a function can be supplied in the same sequence as the way
    it has been defined. Otherwise the arguments have to be given in any order but
    assigned to their name. Given here are the steps for creating and calling the
    functions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First create a function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the function by providing the arguments in the same sequence. It gives
    the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the function by names of arguments in any sequence:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: How to execute R programs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will discuss different ways of executing R programs.
  prefs: []
  type: TYPE_NORMAL
- en: How to run a saved file through R Window
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For running a program in the R workspace, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open R (double-click on the desktop icon or open the program from **Start**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **File** and open the script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the program you want to run; it will appear in an R Editor window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click and **Select All** (or type *Ctrl* + *A*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click and **Run Line** or **Selection** (or type *Ctrl* + *R*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The output will appear in the R console window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to source R script
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Please perform the following steps for sourcing the R code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First check your working directory. It can be checked by the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On running the preceding code, if it gives the path of the designated folder,
    it is fine. Otherwise, change the working directory by using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the destination directory according to your need and then run the required
    code using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For example, let''s say the program `firstprogram.r` has the following code
    in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Upon sourcing, it will generate the output `5` at the console.
  prefs: []
  type: TYPE_NORMAL
- en: When you want to tell R to execute a number of lines of code without waiting
    for instructions, you can use the `source` function to run the saved script. This
    is known as sourcing a script.
  prefs: []
  type: TYPE_NORMAL
- en: It's better to write the entire code in Studio Editor and then save it and source
    the entire script. If you want to print an output in source script then please
    use the `print` function to get the desired output. However, in the interactive
    editor, you do not need to write print. It will give it by default.
  prefs: []
  type: TYPE_NORMAL
- en: In other operating systems, the command for running the program remains the
    same.
  prefs: []
  type: TYPE_NORMAL
- en: Comments are parts of a program that are ignored by the interpreter while executing
    the actual program.
  prefs: []
  type: TYPE_NORMAL
- en: 'Comments are written using `#`; for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Loops (for, while, if, and if...else)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Loops are instructions for automating a multistep process by organizing sequences
    of actions by grouping the parts which need to be repeated. All the programming
    languages come up with built-in constructs, which allow the repetition of instructions
    or blocks of instructions. In programming languages, there are two types of loops.
  prefs: []
  type: TYPE_NORMAL
- en: Decision-making is one of the significant components of programming languages.
    This can be achieved in R programming by using the conditional statement `if...else`.
    The syntax, along with an example, is given here.
  prefs: []
  type: TYPE_NORMAL
- en: Let us first discuss `if` and `else` conditional statements and then we will
    discuss loops.
  prefs: []
  type: TYPE_NORMAL
- en: if statement
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let us first see how `if` and `else` work in R. The general syntax for an `if`
    clause is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'If an expression is correct then the statement gets executed else nothing happens.
    An expression can be a logical or numeric vector. In the case of numeric vectors,
    `0` is taken as `False` and the rest are taken as `True`, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: When the preceding code gets executed then it prints `I am Positive`.
  prefs: []
  type: TYPE_NORMAL
- en: if...else statement
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now let us see how the if and else conditions work in R. Here is the syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'The `else` part is evaluated in case if the `if` part is `False`, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: When the preceding code gets executed, it prints `I am Negative`.
  prefs: []
  type: TYPE_NORMAL
- en: for loop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'These loops are executed for a defined number of times and are controlled by
    a counter or index and incremented at each cycle. Please find here the syntax
    of the `for` loop construct:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: When the preceding code gets executed, it counts the number of odd numbers present
    in vector `c`, that is, `3`.
  prefs: []
  type: TYPE_NORMAL
- en: while loop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`while` loops are the loops which are set at onset for verifying the logical
    condition. The logical condition is tested at the start of the loop construct.
    Here is the syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, the expression is evaluated first and, if it is true, the body of the
    `for` loop gets executed. Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: Here, first the expression gets evaluated and, if it is true, the body of the
    loop gets executed and it keeps executing till the expression returns `False`.
  prefs: []
  type: TYPE_NORMAL
- en: apply()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`apply()` is a function in R used for quick operations on a matrix, vector,
    or array and can be executed on rows, columns, and on both together. Now let us
    try to find the sum of rows of a matrix using the `apply` function. Let us execute
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: It generates the sum row-wise.
  prefs: []
  type: TYPE_NORMAL
- en: sapply()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`sapply()` operates over a set of data such as a list or vector, and calls
    the specified function for each item. Let us execute the following code to check
    the example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: It computes cubes for `1` to `5`.
  prefs: []
  type: TYPE_NORMAL
- en: Loop control statements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are control statements that can change the normal sequence of execution.
    `break` and `next` are loop control statements, and we will briefly discuss these
    control statements here.
  prefs: []
  type: TYPE_NORMAL
- en: break
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`break` terminates the loop and gives control to the next following statement
    of the loop; for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: As a result of the `break` statement, when the preceding statement gets executed,
    it prints `Hello` four times and then leaves the loop. `repeat` is another loop
    construct that keeps executing unless a stop condition is specified.
  prefs: []
  type: TYPE_NORMAL
- en: next
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`next` does not terminate the loop, but skips the current iteration of the
    flow and goes to the next iteration. See the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, when the iteration goes to the third element of vector
    `Vec`, then the control skips the current iteration and goes back to the next
    iteration. So, when the preceding statement gets executed, it prints vector elements
    `2`, `3`, `5`, and `6`, and skips `4`.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are the various atomic objects of R?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is a vector in R?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between a vector and a list?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between arrays and matrices?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is a DataFrame and what is its significance in R?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you read and write CSV and XLSX files in R?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you read and write stock-market data in R?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explain the process of connecting R with any relational database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is a function and what is its significance in R?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is an assignment operator in R?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you call a function in R?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you source a script in R?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between `for` and `while` loops in R?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let us recap what we have learned so far in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: How it is very important for analysts pursuing their career in financial analytics
    to learn R
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installation of R and its packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The basic objects in R are character, numeric, integer, complex, and logical
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Commonly used data types in R are lists, matrices, arrays, factors, and DataFrames
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading files from external data files such as CSV and XLSX, and particularly
    from online sources and databases in R
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing files to CSV and XLSX from R
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing different types of expression, such as constant, arithmetic, logical,
    symbols, assignments, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write user-defined functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ways of calling of user defined functions and inbuilt functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running R programs from the console window and by sourcing saved files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The use of conditional decision-making by using if and else statements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The use of loops such as `for` and `while`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
