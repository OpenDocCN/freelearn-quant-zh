- en: Chapter 1.  Introduction to R
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 章：R 介绍
- en: In this chapter, we will be discussing basic R concepts. This will serve as
    the background for upcoming chapters. We are not going to discuss each and every
    concept in detail for R. This chapter is meant for people who do not have any
    knowledge of the R language or beginners who are looking to pursue a career in
    quantitative finance or want to use R for quantitative financial analysis. This
    chapter can give you a start in learning how to write programs in R, and for writing
    complex programs, you can explore other books.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将讨论 R 的基本概念。这将为后续章节提供背景知识。我们不会对 R 中的每个概念进行详细讨论。本章面向那些没有 R 语言基础知识的人，或者是希望从事量化金融职业或希望使用
    R 进行量化金融分析的初学者。本章将帮助你入门学习如何编写 R 程序，对于编写复杂程序，你可以参考其他书籍。
- en: 'This chapter covers the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖以下主题：
- en: The need for R
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: R 的需求
- en: How to download/install R
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何下载/安装 R
- en: How to install packages
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何安装包
- en: Data types
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据类型
- en: Import and export of different data types
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同数据类型的导入与导出
- en: How to write code expressions
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何编写代码表达式
- en: Functions
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数
- en: How to execute R programs
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何执行 R 程序
- en: Loops (for, while, if, and if...else)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 循环（for, while, if, 和 if...else）
- en: The need for R
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: R 的需求
- en: There are so many statistical packages which can be used for solving problems
    in quantitative finance. But R is not a statistical package but it is a language.
    R is a flexible and powerful language for achieving high-quality analysis.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多统计包可以用于解决量化金融中的问题。但 R 并不是一个统计包，而是一种语言。R 是一种灵活且强大的语言，用于实现高质量的分析。
- en: To use R, one does not need to be a programmer or computer-subject expert. The
    knowledge of basic programming definitely helps in learning R, but it is not a
    prerequisite for getting started with R.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 R 并不需要成为程序员或计算机领域的专家。虽然掌握基本的编程知识确实有助于学习 R，但这并不是开始使用 R 的前提条件。
- en: One of the strengths of R is its package system. It is vast. If a statistical
    concept exists, chances are that there is already a package for it in R. There
    exist many functionalities that come built in for statistics / quantitative finance.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: R 的一大优势是其包系统。它非常庞大。如果某个统计概念存在，那么很有可能 R 中已经有了相应的包。R 内置了许多用于统计学和量化金融的功能。
- en: R is extendable and provides plenty of functionalities which encourage developers
    in quant finance to write their own tools or methods to solve their analytical
    problems.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: R 是可扩展的，并提供丰富的功能，鼓励量化金融开发者编写自己的工具或方法来解决分析问题。
- en: The graphing and charting facilities present in R are unparalleled. R has a
    strong relationship with academia. As new research gets published, the likelihood
    is that a package for the new research gets added, due to its open source nature,
    which keeps R updated with the new concepts emerging in quant finance.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: R 中的图形和绘图功能无与伦比。R 与学术界有着紧密的关系。随着新研究的发布，由于其开源特性，通常会有与新研究相关的包被添加，这使得 R 能够随时跟进量化金融领域中新兴的概念。
- en: R was designed to deal with data, but when it came into existence, big data
    was nowhere in the picture. Additional challenges dealing with big data are the
    variety of data (text data, metric data, and so on), data security, memory, CPU
    I/O RSC requirements, multiple machines, and so on. Techniques such as map-reducing,
    in-memory processing, streaming data processing, down-sampling, chunking, and
    so on are being used to handle the challenges of big data in R.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: R 是为处理数据而设计的，但在 R 出现时，大数据并未成为焦点。处理大数据时面临的额外挑战包括数据的多样性（如文本数据、度量数据等）、数据安全性、内存、CPU
    I/O 和 RSC 要求、多台机器等。为应对大数据挑战，R 采用了诸如映射-归约、内存处理、流数据处理、下采样、分块等技术。
- en: Furthermore, R is free software. The development community is fantastic and
    easy to approach, and they are always interested in developing new packages for
    new concepts. There is a lot of documentation available on the Internet for different
    packages of R.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，R 是免费的软件。其开发社区非常出色且易于接触，他们始终对开发新包以支持新概念感兴趣。互联网上有大量关于 R 各种包的文档可供参考。
- en: Thus, R is a cost-effective, easy-to-learn tool. It has very good data handling,
    graphical, and charting capabilities. It is a cutting-edge tool as, due to its
    open nature, new concepts in finance are generally accompanied by new R packages.
    It is demand of time for people pursuing a career in quantitative finance to learn
    R.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，R 是一种成本效益高、易于学习的工具。它具有非常好的数据处理、图形和绘图能力。它是一款前沿工具，因为由于其开放性，金融领域的新概念通常伴随着新的
    R 包出现。对于追求定量金融职业的人来说，学习 R 是时代的需求。
- en: How to download/install R
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何下载/安装 R
- en: 'In this section, we are going to discuss how to download and install R for
    various platforms: Windows, Linux, and Mac.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将讨论如何为各种平台（Windows、Linux 和 Mac）下载和安装 R。
- en: 'Open your web browser and go to the following link: [https://cran.rstudio.com/](https://cran.rstudio.com/).'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的浏览器并访问以下链接：[https://cran.rstudio.com/](https://cran.rstudio.com/)。
- en: From the given link, you can download the required version according to the
    available operating system.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 从给定的链接中，你可以根据可用的操作系统下载所需的版本。
- en: 'For the Windows version, click on **Download R for Windows,** and then select
    the base version and download **Download R 3.3.1 for Windows** for your Windows
    operating system, click on it, and select your favorite language option. Now click
    through the installer and it will take you through various options, such as the
    following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Windows 版本，点击**下载 R for Windows**，然后选择基础版本并下载**Download R 3.3.1 for Windows**，点击后选择你喜欢的语言选项。接下来，点击安装程序并按步骤完成，它会带你选择一些选项，例如以下内容：
- en: Setup Wizard.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置向导。
- en: License Agreement.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 许可协议。
- en: Select folder location where you want to install.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择你希望安装的文件夹位置。
- en: Select the component. Select the option according to the configuration of your
    system; if you do not know the configuration of your system, then select all the
    options.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择组件。根据系统配置选择选项；如果你不知道系统配置，则选择所有选项。
- en: If you want to customize your setup, select the option.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想自定义安装，选择该选项。
- en: Select the R launch options and desktop shortcut options according to your requirements.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据你的需求选择 R 启动选项和桌面快捷方式选项。
- en: R download and installation is complete for Windows.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 上的 R 下载和安装完成。
- en: Similarly, you click on your installer for Linux and Mac and it will take you
    through various options of installation.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，你点击 Linux 和 Mac 的安装程序，它将带你完成各种安装选项。
- en: How to install packages
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何安装包
- en: R packages are a combination of R functions, compiled code, and sample data,
    and their storage directory is known as a library. By default, when R is installed,
    a set of packages gets installed and the rest of the packages you have to add
    when required.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: R 包是 R 函数、编译代码和示例数据的组合，其存储目录被称为库。默认情况下，安装 R 时会安装一组包，其他的包则需要在需要时添加。
- en: 'A list of commands is given here to check which packages are present in your
    system:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这里给出了一个命令列表，可以检查系统中有哪些包：
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding command is used for getting or setting the library trees that
    R knows about. It gives the following result:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令用于获取或设置 R 知道的库树。它会给出如下结果：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After this, execute the following command and it will list all the available
    packages:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，执行以下命令，它将列出所有可用的包：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: There are two ways to install new packages.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方式来安装新包。
- en: Installing directly from CRAN
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从 CRAN 直接安装
- en: CRAN stands for **Comprehensive R Archive Network**. It is a network of FTP
    web servers throughout the globe for storing identical, up-to-date versions of
    code and documentation for R.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: CRAN 代表**综合 R 存档网络**。它是一个全球范围的 FTP 服务器网络，用于存储 R 的相同、最新版本的代码和文档。
- en: 'The following command is used to install the package directly from the CRAN
    web page. You need to choose the appropriate mirror:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令用于直接从 CRAN 网页安装包。你需要选择合适的镜像：
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'For example, if you need to install the `ggplot2` or `forecast` package for
    R, the commands are as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你需要为 R 安装`ggplot2`或`forecast`包，命令如下：
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Installing packages manually
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 手动安装包
- en: Download the required R package manually and save the ZIP version at your designated
    location (let's say `/DATA/RPACKAGES/`) on the system.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 手动下载所需的 R 包并将 ZIP 版本保存在你指定的位置（例如 `/DATA/RPACKAGES/`）。
- en: 'For example, if we want to install `ggplot2`, then run the following command
    to install it and load it to the current R environment. Similarly, other packages
    can also be installed:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们想安装 `ggplot2`，可以运行以下命令来安装并加载到当前的 R 环境中。类似地，其他包也可以被安装：
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Data types
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据类型
- en: In any programming language, one needs to store various pieces of information
    using various variables. Variables are reserved memory locations for storing values.
    So by creating a variable, one is reserving some space in the memory. You may
    like to store various types of data types, such as character, floating point,
    Boolean, and so on. On the basis of data type, the operating system allocates
    memory and decides what can be stored in reserved memory.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何编程语言中，都需要使用各种变量存储不同的信息。变量是用于存储值的保留内存位置。因此，通过创建一个变量，你实际上是在保留内存中的一部分空间。你可能想要存储各种数据类型，例如字符、浮动点数、布尔值等。根据数据类型，操作系统会分配内存并决定可以在保留的内存中存储什么内容。
- en: All the things you encounter in R are called objects.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在 R 中，你遇到的所有事物都被称为对象。
- en: 'R has five types of basic objects, also known as atomic objects, and the rest
    of the objects are built on these atomic objects. Now we will give an example
    of all the basic objects and will verify their class:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: R 有五种基本对象类型，也称为原子对象，其他所有对象都是基于这些原子对象构建的。现在，我们将为所有基本对象提供示例并验证它们的类型：
- en: 'Character:'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符：
- en: 'We assign a character value to a variable and verify its class:'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们为一个变量分配一个字符值并验证它的类型：
- en: '[PRE6]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The result produced is as follows:'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 产生的结果如下：
- en: '[PRE7]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Numeric:'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数值：
- en: 'We assign a numeric value to a variable and verify its class:'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们为一个变量分配一个数值并验证它的类型：
- en: '[PRE8]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The result produced is as follows:'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 产生的结果如下：
- en: '[PRE9]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Integer:'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整数：
- en: 'We assign an integer value to a variable and verify its class:'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们为一个变量分配一个整数值并验证它的类型：
- en: '[PRE10]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The result produced is as follows:'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 产生的结果如下：
- en: '[PRE11]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Complex:'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复数：
- en: 'We assign an integer value to a variable and verify its class:'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们为一个变量分配一个整数值并验证它的类型：
- en: '[PRE12]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The result produced is as follows:'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 产生的结果如下：
- en: '[PRE13]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Logical (`True`/`false`):'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逻辑值（`True`/`false`）：
- en: 'We assign an integer value to a variable and verify its class:'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们为一个变量分配一个整数值并验证它的类型：
- en: '[PRE14]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then the result produced is as follows:'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后，产生的结果如下：
- en: '[PRE15]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The basic types of objects in R are known as **vectors** and they consist of
    similar types of objects. They cannot consist of two different types of objects
    at the same time, such as a vector consisting of both character and numeric.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: R 中的基本对象类型被称为**向量**，它们由相同类型的对象组成。它们不能同时包含两种不同类型的对象，例如既包含字符类型又包含数值类型的向量。
- en: But list is an exception, and it can consist of multiple classes of objects
    at the same time. So a list can simultaneously contain a character, a numeric,
    and a list.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 但列表是一个例外，它可以同时包含多种类型的对象。因此，一个列表可以同时包含字符、数值和另一个列表。
- en: Now we will discuss the common data types present in R and give at least one
    example for each data type discussed here.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将讨论 R 中常见的数据类型，并为每种数据类型提供至少一个示例。
- en: Vectors
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向量
- en: 'Vectors have already been defined. If we want to construct a vector with more
    than one element, we can use the `c()` function which combines the elements into
    a vector, for example:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 向量已经被定义。如果我们想构建一个包含多个元素的向量，可以使用 `c()` 函数将这些元素组合成一个向量，例如：
- en: '[PRE16]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This produces the following result:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下结果：
- en: '[PRE17]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Similarly:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地：
- en: '[PRE18]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This produces the following result:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下结果：
- en: '[PRE19]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Lists
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列表
- en: 'A list is an R object that consists of multiple types of objects inside it,
    such as vectors and even lists. For example, let''s construct a list and print
    it using code:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 列表是一个 R 对象，它包含多种类型的对象，例如向量甚至是列表。例如，让我们构建一个列表并使用代码打印出来：
- en: '[PRE20]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'When we execute the previous command, it produces the following result:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们执行之前的命令时，它会产生以下结果：
- en: '[PRE21]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: We can extract the individual elements of the list according to our requirements.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以根据需求提取列表中的单个元素。
- en: 'For example, in the preceding case, if we want to extract the second element:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在上述情况下，如果我们想提取第二个元素：
- en: '[PRE22]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Upon executing the preceding code, R creates the following output:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 执行上述代码后，R 会创建以下输出：
- en: '[PRE23]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'One can merge the two lists using the function `c()`; for example:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `c()` 函数合并两个列表；例如：
- en: '[PRE24]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Upon executing the preceding command, we get the combined list:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 执行上述命令后，我们会得到合并后的列表：
- en: '[PRE25]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Matrices
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 矩阵
- en: A matrix is a two-dimensional rectangular dataset, and it is created by vector
    input to the `matrix()` function.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 矩阵是一个二维的矩形数据集，它是通过向 `matrix()` 函数输入向量来创建的。
- en: 'For example, create a matrix with two rows and three columns, and print it:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，创建一个包含两行三列的矩阵，并打印出来：
- en: '[PRE26]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'When we execute the preceding code, it produces the following result:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们执行前面的代码时，它会生成以下结果：
- en: '[PRE27]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Arrays
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数组（Arrays）
- en: Matrices are confined to only two dimensions, but arrays can be of any dimension.
    The `array()` function takes a `dim` attribute, which creates the needed dimensions.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 矩阵仅限于二维，但数组可以是任意维度的。`array()` 函数接受 `dim` 属性，用于创建所需的维度。
- en: 'For example, create an array and print it:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，创建一个数组并打印出来：
- en: '[PRE28]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'When we execute the previous code, it produces the following result:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们执行前面的代码时，它会生成以下结果：
- en: '[PRE29]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Factors
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 因子（Factors）
- en: Factors are R objects that are created using a vector. It stores the vector
    along with the distinct elements present in the vector as labels. Labels are always
    in character form, irrespective of whether it is numeric, character, or Boolean.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 因子（Factors）是使用向量创建的 R 对象。它存储向量及向量中存在的不同元素作为标签。标签总是以字符形式存在，不论其原始形式是数字、字符还是布尔值。
- en: 'Factors are created using the `factor()` function, and the count of levels
    is given by *n* levels; for example:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 因子是通过 `factor()` 函数创建的，级别的数量由 *n* 个级别给出；例如：
- en: '[PRE30]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'When the preceding code gets executed, it generates the following results:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 当前面的代码执行时，它会生成以下结果：
- en: '[PRE31]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: DataFrames
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据框（DataFrames）
- en: DataFramesare tabular-form data objects where each column can be of different
    form, that is, numeric, character, or logical. Each column consists of a list
    of vectors having the same length.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 数据框（DataFrames）是表格形式的数据对象，每一列可以是不同的类型，即数值型、字符型或逻辑型。每一列由一组具有相同长度的向量构成。
- en: 'DataFrames are generated using the function `data.frame()`; for example:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 数据框（DataFrames）是通过 `data.frame()` 函数生成的；例如：
- en: '[PRE32]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'When the preceding code gets executed, it generates the following result:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 当前面的代码执行时，它会生成以下结果：
- en: '[PRE33]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Importing and exporting different data types
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入和导出不同的数据类型
- en: In R, we can read the files stored from outside the R environment. We can also
    write the data into files which can be stored and accessed by the operating system.
    In R, we can read and write different formats of files, such as CSV, Excel, TXT,
    and so on. In this section, we are going to discuss how to read and write different
    formats of files.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在 R 中，我们可以读取存储在 R 环境外的文件。我们也可以将数据写入文件，这些文件可以由操作系统存储和访问。在 R 中，我们可以读取和写入不同格式的文件，如
    CSV、Excel、TXT 等。本节将讨论如何读取和写入不同格式的文件。
- en: The required files should be present in the current directory to read them.
    Otherwise, the directory should be changed to the required destination.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 读取文件所需的文件应存在于当前目录中。否则，应该将目录更改为所需的目标目录。
- en: 'The first step for reading/writing files is to know the working directory.
    You can find the path of the working directory by running the following code:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 读取/写入文件的第一步是了解工作目录。你可以通过运行以下代码找到工作目录的路径：
- en: '[PRE34]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'This will give the paths for the current working directory. If it is not your
    desired directory, then please set your own desired directory by using the following
    code:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这将提供当前工作目录的路径。如果这不是你想要的目录，请使用以下代码设置你自己的目标目录：
- en: '[PRE35]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'For instance, the following code makes the folder `C:/Users` the working directory:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下代码将文件夹 `C:/Users` 设置为工作目录：
- en: '[PRE36]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: How to read and write a CSV format file
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何读取和写入 CSV 格式文件
- en: 'A CSV format file is a text file in which values are comma separated. Let us
    consider a CSV file with the following content from stock-market data:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: CSV 格式文件是一个文本文件，值由逗号分隔。让我们考虑一个包含股票市场数据的 CSV 文件，其内容如下：
- en: '| `Date` | `Open` | `High` | `Low` | `Close` | `Volume` | `Adj Close` |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| `日期` | `开盘` | `最高` | `最低` | `收盘` | `成交量` | `调整后收盘` |'
- en: '| 14-10-2016 | 2139.68 | 2149.19 | 2132.98 | 2132.98 | 3.23E+09 | 2132.98 |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| 14-10-2016 | 2139.68 | 2149.19 | 2132.98 | 2132.98 | 3.23E+09 | 2132.98 |'
- en: '| 13-10-2016 | 2130.26 | 2138.19 | 2114.72 | 2132.55 | 3.58E+09 | 2132.55 |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| 13-10-2016 | 2130.26 | 2138.19 | 2114.72 | 2132.55 | 3.58E+09 | 2132.55 |'
- en: '| 12-10-2016 | 2137.67 | 2145.36 | 2132.77 | 2139.18 | 2.98E+09 | 2139.18 |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| 12-10-2016 | 2137.67 | 2145.36 | 2132.77 | 2139.18 | 2.98E+09 | 2139.18 |'
- en: '| 11-10-2016 | 2161.35 | 2161.56 | 2128.84 | 2136.73 | 3.44E+09 | 2136.73 |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| 11-10-2016 | 2161.35 | 2161.56 | 2128.84 | 2136.73 | 3.44E+09 | 2136.73 |'
- en: '| 10-10-2016 | 2160.39 | 2169.6 | 2160.39 | 2163.66 | 2.92E+09 | 2163.66 |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| 10-10-2016 | 2160.39 | 2169.6 | 2160.39 | 2163.66 | 2.92E+09 | 2163.66 |'
- en: 'To read the preceding file in R, first save this file in the working directory,
    and then read it (the name of the file is `Sample.csv`) using the following code:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 R 中读取前面的文件，首先将该文件保存在工作目录中，然后使用以下代码读取它（文件名为 `Sample.csv`）：
- en: '[PRE37]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'When the preceding code gets executed, it will give the following output:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 当当前代码执行时，它将给出以下输出：
- en: '[PRE38]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '`Read.csv` by default produces the file in DataFrame format; this can be checked
    by running the following code:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`Read.csv` 默认生成 DataFrame 格式的文件；可以通过运行以下代码来检查：'
- en: '[PRE39]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Now, whatever analysis you want to do, you can perform it by applying various
    functions on the DataFrame in R, and once you have done the analysis, you can
    write your desired output file using the following code:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，无论您想进行什么分析，都可以通过对 DataFrame 应用各种函数来执行分析，分析完成后，您可以使用以下代码写出所需的输出文件：
- en: '[PRE40]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: When the preceding code gets executed, it writes the output file in the working
    directory folder in CSV format.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 当前面的代码执行时，它会将输出文件以 CSV 格式写入工作目录文件夹。
- en: XLSX
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: XLSX
- en: Excel is the most common format of file for storing data, and it ends with extension
    `.xls` or `.xlsx`.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: Excel 是最常见的数据存储文件格式，文件扩展名为 `.xls` 或 `.xlsx`。
- en: The `xlsx` package will be used to read or write `.xlsx` files in the R environment.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`xlsx` 软件包将用于在 R 环境中读取或写入 `.xlsx` 文件。'
- en: 'Installing the `xlsx` package has dependency on Java, so Java needs to be installed
    on the system. The `xlsx` package can be installed using the following command:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 安装`xlsx`软件包需要依赖 Java，因此需要在系统上安装 Java。可以使用以下命令安装`xlsx`软件包：
- en: '[PRE41]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'When the previous command gets executed, it will ask for the nearest CRAN mirror,
    which the user has to select to install the package. We can verify that the package
    has been installed or not by executing the following command:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 当前一个命令执行时，它会要求选择最近的 CRAN 镜像，用户必须选择该镜像来安装软件包。我们可以通过执行以下命令来验证软件包是否已安装：
- en: '[PRE42]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'If it has been installed successfully, it will show the following output:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如果已成功安装，它将显示以下输出：
- en: '[PRE43]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'We can load the `xlsx` library by running the following script:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过运行以下脚本加载 `xlsx` 库：
- en: '[PRE44]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Now let us save the previous sample file in `.xlsx` format and read it in the
    R environment, which can be done by executing the following code:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将前面的示例文件保存为 `.xlsx` 格式，并在 R 环境中读取它，可以通过执行以下代码实现：
- en: '[PRE45]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'This gives a DataFrame output with the following content:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给出一个 DataFrame 输出，内容如下：
- en: '[PRE46]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Similarly, you can write R files in `.xlsx` format by executing the following
    code:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，您可以通过执行以下代码，将 R 文件写入 `.xlsx` 格式：
- en: '[PRE47]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Web data or online sources of data
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络数据或在线数据源
- en: 'The Web is one main source of data these days, and we want to directly bring
    the data from web form to the R environment. R supports this:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 网络是当前数据的主要来源之一，我们希望直接将数据从 Web 表单带入 R 环境。R 支持这一功能：
- en: '[PRE48]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'When the preceding code is executed, it directly brings the data for the `S&P500`
    index into R in DataFrame format. A portion of the data has been displayed by
    using the `head()` function here:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 当前面的代码执行时，它将直接将 `S&P500` 指数的数据以 DataFrame 格式带入 R。这里通过使用 `head()` 函数展示了一部分数据：
- en: '[PRE49]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Similarly, if we execute the following code, it brings the DJI index data into
    the R environment: its sample is displayed here:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，如果我们执行以下代码，它将把 DJI 指数数据带入 R 环境：其样本在这里显示：
- en: '[PRE50]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'This gives the following output:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给出以下输出：
- en: '[PRE51]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Please note that we will be mostly using the `snp` and `dji` indexes for example
    illustrations in the rest of the book and these will be referred to as `snp` and
    `dji`.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在本书的其余部分，我们将主要使用 `snp` 和 `dji` 指数作为示例，这些将被称为 `snp` 和 `dji`。
- en: Databases
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据库
- en: A relational database stores data in normalized format, and to perform statistical
    analysis, we need to write complex and advance queries. But R can connect to various
    relational databases such as MySQL Oracle, and SQL Server, easily and convert
    the data tables into DataFrames. Once the data is in DataFrame format, doing statistical
    analysis is easy to perform using all the available functions and packages.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 关系型数据库以规范化格式存储数据，要执行统计分析，我们需要编写复杂的高级查询。但 R 可以轻松连接到各种关系型数据库，如 MySQL、Oracle 和
    SQL Server，并将数据表转换为 DataFrame。一旦数据转换为 DataFrame 格式，就可以利用所有可用的函数和软件包轻松进行统计分析。
- en: In this section, we will take the example of MySQL as reference.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将以 MySQL 为例进行说明。
- en: 'R has a built-in package, `RMySQL` , which provides connectivity with the database;
    it can be installed using the following command:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: R 内置了一个软件包 `RMySQL`，它提供了与数据库的连接功能；可以使用以下命令安装：
- en: '[PRE52]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Once the package is installed, we can create a connection object to create
    a connection with the database. It takes username, password, database name, and
    localhost name as input. We can give our inputs and use the following command
    to connect with the required database:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完包后，我们可以创建一个连接对象，以便与数据库建立连接。它需要用户名、密码、数据库名和本地主机名作为输入。我们可以提供输入并使用以下命令连接到所需的数据库：
- en: '[PRE53]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'When the database is connected, we can list the table that is present in the
    database by executing the following command:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 当数据库连接时，我们可以通过执行以下命令列出数据库中存在的表：
- en: '[PRE54]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'We can query the database using the function `dbSendQuery()`, and the result
    is returned to R by using function `fetch()`. Then the output is stored in DataFrame
    format:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`dbSendQuery()`函数查询数据库，并通过`fetch()`函数将结果返回给R。然后，输出以DataFrame格式存储：
- en: '[PRE55]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: When the previous code gets executed, it returns the required output.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 当前面的代码执行时，它会返回所需的输出。
- en: We can query with a filter clause, update rows in database tables, insert data
    into a database table, create tables, drop tables, and so on by sending queries
    through `dbSendQuery()`.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过`dbSendQuery()`发送查询，使用过滤子句查询、更新数据库表中的行、向数据库表中插入数据、创建表、删除表等。
- en: How to write code expressions
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何编写代码表达式
- en: In this section, we will discuss how to write various basic expressions which
    are the core elements of writing a program. Later, we will discuss how to create
    user-defined functions.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论如何编写各种基本表达式，这些表达式是编写程序的核心元素。之后，我们将讨论如何创建用户定义的函数。
- en: Expressions
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表达式
- en: R code consists of one or more expressions. An expression is an instruction
    to perform a particular task.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: R代码由一个或多个表达式组成。表达式是执行特定任务的指令。
- en: 'For example, the addition of two numbers is given by the following expression:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，两个数字的加法可以通过以下表达式给出：
- en: '[PRE56]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'It gives the following output:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 它给出以下输出：
- en: '[PRE57]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: If there is more than one expression in a program, they get executed one by
    one, in the sequence they appear.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 如果程序中有多个表达式，它们会按出现的顺序逐一执行。
- en: Now we will discuss basic types of expressions.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将讨论基本的表达式类型。
- en: Constant expression
  id: totrans-208
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 常量表达式
- en: The simplest form of expression are constant values, which may be character
    or numeric values.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的表达式形式是常量值，可能是字符值或数值。
- en: For example, 100 is a numeric value expression of a constant value.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，100是一个常量值的数值表达式。
- en: '`Hello World` is a character form expression of a constant expression.'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '`Hello World`是常量表达式的字符形式表达式。'
- en: Arithmetic expression
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 算术表达式
- en: The R language has standard arithmetic operators and using these, arithmetic
    expressions can be written.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: R语言有标准的算术运算符，通过这些运算符可以编写算术表达式。
- en: 'R has the following arithmetic operators:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: R有以下算术运算符：
- en: '| **Operands** | **Operators** |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '| **操作数** | **运算符** |'
- en: '| `+` | Addition |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| `+` | 加法 |'
- en: '| `-` | Subtraction |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| `-` | 减法 |'
- en: '| `*` | Multiplication |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '| `*` | 乘法 |'
- en: '| `/` | Division |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| `/` | 除法 |'
- en: '| `^` | Exponentiation |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '| `^` | 乘方 |'
- en: 'Using these arithmetic operations, one can generate arithmetic expressions;
    for example:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些算术运算，可以生成算术表达式；例如：
- en: '[PRE58]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: R follows the BODMAS rule. One can use parentheses to avoid ambiguity in creating
    any arithmetic expression.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: R遵循BODMAS规则。在创建任何算术表达式时，可以使用括号来避免歧义。
- en: Conditional expression
  id: totrans-224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 条件表达式
- en: A conditional expression compares two values and returns a logical value in
    the form of `True` or `False`.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 条件表达式比较两个值并返回一个逻辑值，形式为`True`或`False`。
- en: 'R has standard operators for comparing values and operators for combining conditions:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: R有用于比较值的标准运算符，以及用于组合条件的运算符：
- en: '| **Operands** | **Operators** |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '| **操作数** | **运算符** |'
- en: '| `==` | Equality |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '| `==` | 相等 |'
- en: '| `>(>=)` | Greater than (greater than equal to) |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '| `>(>=)` | 大于（大于等于） |'
- en: '| `<(<=)` | Less than (less than equal to) |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| `<(<=)` | 小于（小于等于） |'
- en: '| `!=` | Inequality |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| `!=` | 不等式 |'
- en: '| `&&` | Logical AND |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| `&&` | 逻辑与 |'
- en: '| `&#124;&#124;` | Logical OR |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| `&#124;&#124;` | 逻辑或 |'
- en: '| `!` | Logical NOT |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '| `!` | 逻辑非 |'
- en: 'For example:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '`10>5`, when executed, returns `True`.'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '`10>5`，执行时返回`True`。'
- en: '`5>10`, when executed, returns `False`.'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '`5>10`，执行时返回`False`。'
- en: Functional call expression
  id: totrans-238
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 函数调用表达式
- en: The most common and useful type of R expression is calling functions. There
    are a lot of built-in functions in R, and users can built their own functions.
    In this section, we will see the basic structure of calling a function.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: R表达式中最常见和最有用的类型是调用函数。在R中有许多内置函数，用户也可以构建自己的函数。在本节中，我们将看到调用函数的基本结构。
- en: A function call consists of a function name followed by parentheses. Within
    the parentheses, arguments are present, separated by commas. Arguments are expressions
    that provide the necessary information to the functions to perform the required
    tasks. An example will be provided when we discuss how to construct user-defined
    functions.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 函数调用由函数名和紧随其后的括号组成。在括号内，参数以逗号分隔。参数是提供必要信息给函数以执行所需任务的表达式。当我们讨论如何构造用户定义函数时，将提供一个示例。
- en: Symbols and assignments
  id: totrans-241
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 符号和赋值
- en: R code consists of keywords and symbols.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: R代码由关键字和符号组成。
- en: A symbol is the label for an object stored in RAM, and it gets the stored value
    from the memory when the program gets executed.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 符号是存储在RAM中的对象的标签，在程序执行时，它从内存中获取存储的值。
- en: R also stores many predefined values for predefined symbols, which is used in
    the program as required and gets automatically downloaded.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: R还存储了许多预定义符号的预定义值，这些值会根据程序的需要自动下载使用。
- en: For example, the `date()` function produces today's date when executed.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`date()`函数在执行时会返回今天的日期。
- en: The result of an expression can be assigned to a symbol, and it is assigned
    by using the assignment operator `<-`.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式的结果可以赋值给一个符号，赋值通过使用赋值运算符`<-`来实现。
- en: For example, the expression `value <-4+6` assigns the symbol value with value
    `10` and is stored in memory.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，表达式`value <- 4 + 6`将符号value赋值为10，并存储在内存中。
- en: Keywords
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关键字
- en: 'Some symbols are used to represent special values and cannot be reassigned:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 一些符号用于表示特殊值，不能重新赋值：
- en: '`NA`: This is used to define missing or unknown values'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NA`：用于定义缺失或未知的值。'
- en: '`Inf`: This is used to represent infinity. For example, 1/0 produces the result
    infinity'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Inf`：用于表示无限大。例如，1/0会产生无限大的结果。'
- en: '`NaN`: This is used to define the result of arithmetic expression which is
    undefined. For example, 0/0 produces NaN'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NaN`：用于定义算术表达式的结果是未定义的。例如，0/0会产生NaN。'
- en: '`NULL`: This is used to represent empty result'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NULL`：用于表示空结果。'
- en: '`TRUE` and `FALSE`: These are logical values and are generally generated when
    values are compared'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TRUE`和`FALSE`：这是逻辑值，通常在值比较时生成。'
- en: Naming variables
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变量命名
- en: When writing R code, we need to store various pieces of information under many
    symbols. So we need to name these symbols meaningfully as that will make the code
    easy to understand. Symbols should be self-explanatory. Writing short symbol name
    will make the code tougher to understand.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写R代码时，我们需要将各种信息存储在许多符号下。因此，我们需要有意义地命名这些符号，这样可以使代码更容易理解。符号应该是自解释的。写短符号名会使代码更难理解。
- en: For example, if we represent date of birth information by `DateOfBirth` or `DOB`,
    then the first option is better as it is self-explanatory.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们用`DateOfBirth`或`DOB`来表示出生日期信息，那么第一个选项更好，因为它是自解释的。
- en: Functions
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数
- en: In this section, we will provide some examples of built-in functions that already
    exist in R and also construct a user-defined function for a specific task.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将提供一些R中已经存在的内置函数的示例，并构造一个用于特定任务的用户定义函数。
- en: A function is a collection of statements put together to do a specific task.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 函数是一组组合在一起执行特定任务的语句。
- en: R has a lot of built-in functions and users can define their own functions.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: R有许多内置函数，用户也可以定义自己的函数。
- en: According to their requirement, in R, the interpreter passes control to the
    function object along with the arguments required for the accomplishment of the
    task designated for the function. After completing the task, the function returns
    the control to the interpreter.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 根据需求，在R中，解释器将控制权传递给函数对象，并传递完成任务所需的参数。任务完成后，函数将控制权返回给解释器。
- en: 'The syntax for defining a function is as follows:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 定义函数的语法如下：
- en: '[PRE59]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Here:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 这里：
- en: '**Function name**: This is the name of the defined function and is stored as
    an object with this name.'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**函数名**：这是定义的函数的名称，并作为一个对象以该名称存储。'
- en: '**Arguments**: Arguments are the required information needed for the function
    to accomplish its task. Arguments are optional.'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**参数**：参数是函数完成任务所需的必要信息。参数是可选的。'
- en: '**Function body**: This is a collection of statements that does the designated
    task for the function.'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**函数体**：这是执行函数指定任务的一组语句。'
- en: '**Return value**: The return value is the last expression of a function which
    is returned as an output value of the task performed by the function.'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**返回值**：返回值是函数的最后一个表达式，它作为函数执行的任务的输出值返回。'
- en: 'Please find here an example of some of the inbuilt functions along with their
    results when executed:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 这里提供了几个内建函数的示例及其执行结果：
- en: '[PRE60]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Now we will look at how to build the user-defined functions. Here we are trying
    to find the square of a given sequence.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将看看如何构建用户定义的函数。在这里，我们尝试计算给定序列的平方。
- en: 'The name of the function is `findingSqrFunc` and takes the argument value,
    which must be an integer:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 函数的名称是 `findingSqrFunc`，并接受一个参数值，该值必须是整数：
- en: '[PRE61]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Once the preceding code gets executed, we call the function:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦前面的代码执行完毕，我们调用该函数：
- en: '[PRE62]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'We get the following output:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE63]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Calling a function without an argument
  id: totrans-279
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 无参数调用函数
- en: 'Construct a function without an argument:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个没有参数的函数：
- en: '[PRE64]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'On executing the preceding function without arguments, the following output
    gets printed:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 执行前面的无参数函数时，会打印以下输出：
- en: '[PRE65]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Calling a function with an argument
  id: totrans-284
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 带参数调用函数
- en: 'The arguments to a function can be supplied in the same sequence as the way
    it has been defined. Otherwise the arguments have to be given in any order but
    assigned to their name. Given here are the steps for creating and calling the
    functions:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 函数的参数可以按照定义时的顺序提供。否则，参数必须按任何顺序提供，并分配给其名称。以下是创建和调用函数的步骤：
- en: 'First create a function:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先创建一个函数：
- en: '[PRE66]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Call the function by providing the arguments in the same sequence. It gives
    the following output:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照相同的顺序提供参数名称来调用函数。它将得到以下输出：
- en: '[PRE67]'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Call the function by names of arguments in any sequence:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过任意顺序提供参数名称来调用函数：
- en: '[PRE68]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'This gives the following output:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 这会得到以下输出：
- en: '[PRE69]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: How to execute R programs
  id: totrans-294
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何执行 R 程序
- en: In this section, we will discuss different ways of executing R programs.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论执行 R 程序的不同方法。
- en: How to run a saved file through R Window
  id: totrans-296
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何通过 R 窗口运行已保存的文件
- en: 'For running a program in the R workspace, follow these steps:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 在 R 工作空间中运行程序，请按照以下步骤操作：
- en: Open R (double-click on the desktop icon or open the program from **Start**).
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 R（双击桌面图标或从 **开始** 菜单中打开程序）。
- en: Click on **File** and open the script.
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **文件** 并打开脚本。
- en: Select the program you want to run; it will appear in an R Editor window.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择你要运行的程序；它将出现在 R 编辑器窗口中。
- en: Right-click and **Select All** (or type *Ctrl* + *A*).
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击并选择 **全选**（或按 *Ctrl* + *A*）。
- en: Right-click and **Run Line** or **Selection** (or type *Ctrl* + *R*).
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击并选择 **运行行** 或 **选择项**（或者按 *Ctrl* + *R*）。
- en: The output will appear in the R console window.
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出将显示在 R 控制台窗口中。
- en: How to source R script
  id: totrans-304
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何源代码执行 R 脚本
- en: 'Please perform the following steps for sourcing the R code:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 请按照以下步骤执行源代码操作：
- en: 'First check your working directory. It can be checked by the following code:'
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先检查你的工作目录。可以通过以下代码检查：
- en: '[PRE70]'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'On running the preceding code, if it gives the path of the designated folder,
    it is fine. Otherwise, change the working directory by using the following code:'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行前面的代码时，如果给出了指定文件夹的路径，那是正常的。否则，可以使用以下代码更改工作目录：
- en: '[PRE71]'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Change the destination directory according to your need and then run the required
    code using the following code:'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据需要更改目标目录，然后使用以下代码运行所需的代码：
- en: '[PRE72]'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'For example, let''s say the program `firstprogram.r` has the following code
    in it:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设程序 `firstprogram.r` 包含以下代码：
- en: '[PRE73]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Upon sourcing, it will generate the output `5` at the console.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 执行源代码时，它将在控制台生成输出 `5`。
- en: When you want to tell R to execute a number of lines of code without waiting
    for instructions, you can use the `source` function to run the saved script. This
    is known as sourcing a script.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 当你希望告诉 R 执行多行代码而无需等待指令时，可以使用 `source` 函数来运行已保存的脚本。这被称为源代码执行。
- en: It's better to write the entire code in Studio Editor and then save it and source
    the entire script. If you want to print an output in source script then please
    use the `print` function to get the desired output. However, in the interactive
    editor, you do not need to write print. It will give it by default.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 最好将整个代码写在 Studio 编辑器中，然后保存并源代码执行整个脚本。如果你希望在源代码脚本中打印输出，请使用 `print` 函数以获取所需的输出。然而，在交互式编辑器中，你不需要写
    `print`。它会默认显示输出。
- en: In other operating systems, the command for running the program remains the
    same.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他操作系统中，运行程序的命令保持不变。
- en: Comments are parts of a program that are ignored by the interpreter while executing
    the actual program.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 注释是程序的一部分，在实际程序执行时，解释器会忽略这些注释。
- en: 'Comments are written using `#`; for example:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 注释使用`#`编写；例如：
- en: '[PRE74]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Loops (for, while, if, and if...else)
  id: totrans-321
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 循环（for、while、if和if...else）
- en: Loops are instructions for automating a multistep process by organizing sequences
    of actions by grouping the parts which need to be repeated. All the programming
    languages come up with built-in constructs, which allow the repetition of instructions
    or blocks of instructions. In programming languages, there are two types of loops.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 循环是用于自动化多步骤过程的指令，通过组织动作的顺序并将需要重复的部分分组来实现。所有编程语言都提供了内置结构，允许指令或指令块的重复。在编程语言中，循环有两种类型。
- en: Decision-making is one of the significant components of programming languages.
    This can be achieved in R programming by using the conditional statement `if...else`.
    The syntax, along with an example, is given here.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 决策是编程语言中的重要组成部分。在R语言中，可以通过使用条件语句`if...else`来实现决策。以下是语法及示例：
- en: Let us first discuss `if` and `else` conditional statements and then we will
    discuss loops.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先讨论`if`和`else`条件语句，然后再讨论循环。
- en: if statement
  id: totrans-325
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: if语句
- en: 'Let us first see how `if` and `else` work in R. The general syntax for an `if`
    clause is given here:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先看看`if`和`else`在R中的工作原理。`if`子句的一般语法如下：
- en: '[PRE75]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'If an expression is correct then the statement gets executed else nothing happens.
    An expression can be a logical or numeric vector. In the case of numeric vectors,
    `0` is taken as `False` and the rest are taken as `True`, for example:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 如果表达式正确，则执行语句，否则不执行任何操作。表达式可以是逻辑或数值向量。在数值向量的情况下，`0`被视为`False`，其他的都被视为`True`，例如：
- en: '[PRE76]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: When the preceding code gets executed then it prints `I am Positive`.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 当前面的代码执行时，它打印出`I am Positive`。
- en: if...else statement
  id: totrans-331
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: if...else语句
- en: 'Now let us see how the if and else conditions work in R. Here is the syntax:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看`if`和`else`条件在R中的工作方式。以下是语法：
- en: '[PRE77]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'The `else` part is evaluated in case if the `if` part is `False`, for example:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '`else`部分在`if`部分为`False`时评估，例如：'
- en: '[PRE78]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: When the preceding code gets executed, it prints `I am Negative`.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 当前面的代码执行时，它打印出`I am Negative`。
- en: for loop
  id: totrans-337
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: for循环
- en: 'These loops are executed for a defined number of times and are controlled by
    a counter or index and incremented at each cycle. Please find here the syntax
    of the `for` loop construct:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 这些循环在定义的次数内执行，由计数器或索引控制，并在每个循环周期中递增。请查看以下`for`循环构造的语法：
- en: '[PRE79]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Here is an example:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例：
- en: '[PRE80]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: When the preceding code gets executed, it counts the number of odd numbers present
    in vector `c`, that is, `3`.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 当前面的代码执行时，它计算向量`c`中奇数的数量，即`3`。
- en: while loop
  id: totrans-343
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: while循环
- en: '`while` loops are the loops which are set at onset for verifying the logical
    condition. The logical condition is tested at the start of the loop construct.
    Here is the syntax:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '`while`循环是设置用于验证逻辑条件的循环。逻辑条件在循环构造的开始进行测试。以下是语法：'
- en: '[PRE81]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Here, the expression is evaluated first and, if it is true, the body of the
    `for` loop gets executed. Here is an example:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，首先评估表达式，如果它为真，则`for`循环体会执行。以下是一个示例：
- en: '[PRE82]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Here, first the expression gets evaluated and, if it is true, the body of the
    loop gets executed and it keeps executing till the expression returns `False`.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，首先评估表达式，如果它为真，则循环体会执行，并且会一直执行直到表达式返回`False`。
- en: apply()
  id: totrans-349
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: apply()
- en: '`apply()` is a function in R used for quick operations on a matrix, vector,
    or array and can be executed on rows, columns, and on both together. Now let us
    try to find the sum of rows of a matrix using the `apply` function. Let us execute
    the following code:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '`apply()`是R语言中的一个函数，用于对矩阵、向量或数组进行快速操作，可以在行、列上或同时对行列执行操作。现在让我们尝试使用`apply`函数计算矩阵的行和之和。让我们执行以下代码：'
- en: '[PRE83]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: It generates the sum row-wise.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 它生成按行求和的结果。
- en: sapply()
  id: totrans-353
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: sapply()
- en: '`sapply()` operates over a set of data such as a list or vector, and calls
    the specified function for each item. Let us execute the following code to check
    the example:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '`sapply()`对数据集（如列表或向量）进行操作，并对每个项目调用指定的函数。让我们执行以下代码检查示例：'
- en: '[PRE84]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: It computes cubes for `1` to `5`.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 它计算从`1`到`5`的立方。
- en: Loop control statements
  id: totrans-357
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 循环控制语句
- en: There are control statements that can change the normal sequence of execution.
    `break` and `next` are loop control statements, and we will briefly discuss these
    control statements here.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些控制语句可以改变正常的执行顺序。`break`和`next`是循环控制语句，我们将在此简要讨论这些控制语句。
- en: break
  id: totrans-359
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: break
- en: '`break` terminates the loop and gives control to the next following statement
    of the loop; for example:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '`break` 终止循环并将控制权交给循环中的下一个语句；例如：'
- en: '[PRE85]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: As a result of the `break` statement, when the preceding statement gets executed,
    it prints `Hello` four times and then leaves the loop. `repeat` is another loop
    construct that keeps executing unless a stop condition is specified.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `break` 语句的作用，当前述语句执行时，它会打印出 `Hello` 四次，然后退出循环。`repeat` 是另一种循环结构，它会一直执行，除非指定停止条件。
- en: next
  id: totrans-363
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: next
- en: '`next` does not terminate the loop, but skips the current iteration of the
    flow and goes to the next iteration. See the following example:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '`next` 不会终止循环，而是跳过当前迭代并进入下一次迭代。请参见以下示例：'
- en: '[PRE86]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: In the preceding example, when the iteration goes to the third element of vector
    `Vec`, then the control skips the current iteration and goes back to the next
    iteration. So, when the preceding statement gets executed, it prints vector elements
    `2`, `3`, `5`, and `6`, and skips `4`.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，当迭代到向量 `Vec` 的第三个元素时，控制流跳过当前迭代并返回到下一个迭代。因此，当前述语句执行时，它打印出向量元素 `2`、`3`、`5`
    和 `6`，并跳过 `4`。
- en: Questions
  id: totrans-367
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What are the various atomic objects of R?
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: R 中有哪些不同的原子对象？
- en: What is a vector in R?
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: R 中的向量是什么？
- en: What is the difference between a vector and a list?
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向量和列表有什么区别？
- en: What is the difference between arrays and matrices?
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数组和矩阵有什么区别？
- en: What is a DataFrame and what is its significance in R?
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是数据框（DataFrame），它在 R 中的意义是什么？
- en: How do you read and write CSV and XLSX files in R?
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在 R 中读取和写入 CSV 和 XLSX 文件？
- en: How do you read and write stock-market data in R?
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在 R 中读取和写入股市数据？
- en: Explain the process of connecting R with any relational database.
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解释如何将 R 连接到任何关系型数据库。
- en: What is a function and what is its significance in R?
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是函数，它在 R 中的意义是什么？
- en: What is an assignment operator in R?
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: R 中的赋值运算符是什么？
- en: How do you call a function in R?
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在 R 中调用函数？
- en: How do you source a script in R?
  id: totrans-379
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在 R 中调用脚本？
- en: What is the difference between `for` and `while` loops in R?
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: R 中的 `for` 循环和 `while` 循环有什么区别？
- en: Summary
  id: totrans-381
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'Now let us recap what we have learned so far in this chapter:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们回顾一下本章到目前为止学到的内容：
- en: How it is very important for analysts pursuing their career in financial analytics
    to learn R
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于从事金融分析的分析师来说，学习 R 是非常重要的
- en: Installation of R and its packages
  id: totrans-384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 R 及其包
- en: The basic objects in R are character, numeric, integer, complex, and logical
  id: totrans-385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: R 中的基本对象有字符、数字、整数、复数和逻辑型
- en: Commonly used data types in R are lists, matrices, arrays, factors, and DataFrames
  id: totrans-386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: R 中常用的数据类型包括列表、矩阵、数组、因子和数据框
- en: Reading files from external data files such as CSV and XLSX, and particularly
    from online sources and databases in R
  id: totrans-387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从外部数据文件（如 CSV 和 XLSX）读取文件，特别是从 R 中的在线源和数据库读取
- en: Writing files to CSV and XLSX from R
  id: totrans-388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 R 写入 CSV 和 XLSX 文件
- en: Writing different types of expression, such as constant, arithmetic, logical,
    symbols, assignments, and so on
  id: totrans-389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写不同类型的表达式，例如常量、算术、逻辑、符号、赋值等
- en: Write user-defined functions
  id: totrans-390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写用户定义的函数
- en: Ways of calling of user defined functions and inbuilt functions
  id: totrans-391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用用户定义函数和内建函数的方法
- en: Running R programs from the console window and by sourcing saved files
  id: totrans-392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从控制台窗口运行 R 程序以及通过源文件运行保存的文件
- en: The use of conditional decision-making by using if and else statements
  id: totrans-393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 if 和 else 语句进行条件决策的用法
- en: The use of loops such as `for` and `while`
  id: totrans-394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `for` 和 `while` 等循环
