- en: Chapter 14. Exotic Options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 10](ch10.html "Chapter 10. Options and Futures"), *Options and Futures*,
    we have discussed the famous Black-Scholes-Merton option model and various trading
    strategies involving various types of options, futures, and underlying securities.
    The Black-Scholes-Merton closed-form solution is for European options that could
    be exercised only on maturity dates. American options could be exercised before
    or on a maturity date. Usually, those types of options are called vanilla options.
    On the other hand, there exist various types of exotic options that have all sorts
    of features making them more complex than commonly traded vanilla options.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if an option buyer could exercise their right several times before
    the maturity date, it is called a Bermudan option. In [Chapter 12](ch12.html "Chapter 12. Monte
    Carlo Simulation"), *Monte Carlo Simulation*, two types of exotic options are
    discussed. Many exotic options (derivatives) may have several triggers relating
    to their payoffs. An exotic option may also include non-standard underlying security
    or instrument, developed for a specific client or for a particular market. Exotic
    options are generally traded **over the counter** (**OTC**).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, the following topics will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: European, American, and Bermudan options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simple chooser options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shout, rainbow, and binary options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Average price option
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Barrier options – up-and-in options and up-and-out option
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Barrier options – down-and-in and down-and-out options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: European, American, and Bermuda options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In [Chapter 10](ch10.html "Chapter 10. Options and Futures"), *Options and
    Futures*, we have learnt that for a European option, the option buyer could exercise
    their right only on maturity dates, while for an American option buyer, they could
    exercise their right any time before and on maturity dates. Thus, an American
    option would be more valuable than its counterparty of European option. Bermudan
    options could be exercised once or several times on a few predetermined dates.
    Consequently, the price of a Bermudan option should be between a European and
    an American option with the same features, such as the same maturity dates and
    the same exercises prices, see the following two inequalities for call options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![European, American, and Bermuda options](img/B06175_14_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here is an example for a Bermudan option. Assume that a company issues a 10-year
    bond. After seven years, the company could call back, that is, retire, the bond
    at the end of each year for the next three years. This callable property is eventually
    an embedded Bermudan option with exercise dates in December of years 8, 9, and
    10.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s look at the Python program for an American call by using the
    binomial model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The price of this American call is $2.75\. The key for modifying the previous
    program to satisfy only a few exercise prices is the following two lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the Python program for a Bermudan call option. The key different is
    the variable called T2, which contains the dates when the Bermudan option could
    be exercised:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Chooser options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For a chooser option, it allows the option buyer to choose, at a predetermined
    point of time before the option matures whether it is a European call or a European
    put. For a simple chooser option, the underlying call and put options have the
    same maturities and exercise prices. Let's look at two extreme cases. The option
    buyer has to make a decision today, that is, when they make such a purchase. The
    price of this chooser option should be the maximum of call and put options since
    the option buyer does not have more information. The second extreme case is the
    investor could make a decision on the maturity date. Since the call and put have
    the same exercise prices, if the call is in the money, the put should be out of
    money. The opposite is true. Thus, the price of a chooser option should be the
    summation of the call and the put. This is equivalent to buy a call and a put
    with the same exercise prices and maturity dates. In [Chapter 10](ch10.html "Chapter 10. Options
    and Futures"), *Options and Futures* we know such a trading strategy is called
    Straddle. With such a trading strategy, we bet that the underlying security would
    move away from our current position. However, we are not sure about the direction.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s look at the pricing formula for a simple chooser option, both
    call and put have the same maturity dates and exercise prices. Assume that there
    is no dividend before maturity. A simple chooser option has the following pricing
    formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Chooser options](img/B06175_14_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, *Pchooer* is the price or premium for a chooser option, *call (T)* is
    a European call with a maturity T. *put(τ)* will be defined soon. For the first
    *call (T)* option, we have the following pricing formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Chooser options](img/B06175_14_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, *call (T)* is the call premium, *S* is today''s price, *K* is the exercise
    price, *T* is the maturity in years, σ is the volatility, and *N()* is the cumulative
    standard normal distribution. Actually, this is exactly the same as the Black-Scholes-Merton
    call option model. *put (τ)* has the following formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Chooser options](img/B06175_14_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Again, *put(τ)* is the put premium and *τ* is when the chooser option buyer
    could make a decision. To make *d1* and d2 distinguishable from those two values
    in the previous equation, ![Chooser options](img/B06175_14_26.jpg) and ![Chooser
    options](img/B06175_14_27.jpg)are used instead of *d1* and *d2*. Note that the
    preceding equation is different from the Black-Scholes-Merton put option model
    since we have both T and τ instead of just T. Now, let''s look at one extreme
    case: the option buyer could make their decision at maturity date, that is, *τ=T*.
    From the preceding equation, obviously the price of the chooser option will be
    the summation of those two options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Chooser options](img/B06175_14_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following Python program is for the choose options. To save space, we could
    combine both a call with a put, see the following Python codes. In order to do
    so, we have two time variable input called `T` and `tao`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The price of this chooser option is $2.26.
  prefs: []
  type: TYPE_NORMAL
- en: Shout options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A shout option is a standard European option except that the option buyer can
    *shout* to the option seller before maturity date to set the minimum payoff as
    *Sτ-X*, where *Sτ* is the stock price at time *τ* when the buyer shouts and *X*
    is the exercise price. The level of the strike could be set at a specific relation
    to the spot price, such as 3% or 5% above (or below). The Python codes are given
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Binary options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A binary option, or asset-or-nothing option, is a type of options in which
    the payoff is structured to be either a fixed amount of compensation if the option
    expires in the money, or nothing at all if the option expires out of the money.
    Because of this property, we could apply Monte Carlo Simulation to find a solution.
    The Python codes are given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note that since the preceding program does not fix the seed, for each run, users
    should get different results.
  prefs: []
  type: TYPE_NORMAL
- en: Rainbow options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Many financial problems could be summarized as or associated with the maximum
    or minimum of several assets. Let''s look at a simple one: options on the maximum
    or minimum of two assets. These type of options are called rainbow options. Since
    two assets are involved, we have to get familiar with a so-called bivariate normal
    distribution. The following codes show its graph. The original codes are at the
    website of [http://scipython.com/blog/visualizing-the-bivariate-gaussian-distribution/](http://scipython.com/blog/visualizing-the-bivariate-gaussian-distribution/):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The graph is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Rainbow options](img/B06175_14_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Assume that returns of those two assets follow a bivariate normal distribution
    with a correlation of ρ. To make our estimation a little bit easier, we assume
    that there is no dividend before maturity date. The payoff for a call on the minimum
    of two assets will be:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Rainbow options](img/B06175_14_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, ![Rainbow options](img/B06175_14_24.jpg) is the terminal stock price
    for stock 1 (2) and T is the maturity date in years. The pricing formula for a
    call based on the minimum of two assets is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Rainbow options](img/B06175_14_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, S1 (S2) is the current stock price for stock 1 (2), N2(a,b,ρ) is the
    cumulative bivariate normal distribution with the upper bounds of a and b, correlation
    of ρ between those two assets, and *K* is the exercise price. The parameters of
    *d11*, *d12*, *d21*, *d22*, *ρ1*, and *ρ2* are defined here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Rainbow options](img/B06175_14_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'First, we should study the bivariate cumulative normal distribution `N2_f(d1,d2,rho)`
    described here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s look at some special cases. From univariate standard normal distribution,
    we know that when input value is `0`, we expected the cumulative standard normal
    distribution is `0.5` since the underlying normal distribution is symmetric. When
    two time series are perfectly positively correlated, the cumulative standard normal
    distribution should be `0.5` as well, see the preceding result. On the other hand,
    if two time series are not correlated, their cumulative standard normal distribution
    when the inputs are both zero, then we expected the overlapping, that is, *0.5
    *0.5=0.25*. This is true by calling the preceding `N2_f()` function. For the exotic,
    option, the related Python program is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Another way to price various types of rainbow options is using Monte Carlo
    Simulation. As we mentioned in [Chapter 12](ch12.html "Chapter 12. Monte Carlo
    Simulation"), *Monte Carlo Simulation*, we can generate two correlated random
    number time series. There are two step involved: generate two random time series
    *x1* and *x2* with a zero-correlation; and then apply the following formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Rainbow options](img/B06175_14_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, ρ is the predetermined correlation between those two time series. Now,
    *y1* and *y2* are correlated with a predetermined correlation. The following Python
    program would implement the preceding approach:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we apply the same technique we know in [Chapter 12](ch12.html "Chapter 12. Monte
    Carlo Simulation"), *Monte Carlo Simulation* to price a rainbow option call on
    the minimum of two assets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'If we add more assets, it becomes more difficult to have a close-form solution.
    Here we show how to use Monte Carlo Simulation to price a rainbow call option
    based on the maximum terminal stock price. The basic logic is quite straight:
    generate three terminal stock prices, and then record the call payoff by applying
    the following formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Rainbow options](img/B06175_14_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The final price would be the average of the discounted payoffs. The key is
    how to generate a correlated three set of random numbers. Here, the famous Cholesky
    decomposition is applied. Assume that we have a correlation matrix called *C*.
    A Cholesky decomposition matrix *L* that makes ![Rainbow options](img/B06175_14_25.jpg).
    Assume further that the uncorrelated return matrix is called *U*. Now, the correlated
    return matrix *R = UL*. The Python code is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Pricing average options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 12](ch12.html "Chapter 12. Monte Carlo Simulation"), *Monte Carlo
    Simulation*, we discussed two exotic options. For convenience, we will include
    them in this chapter as well. Because of this, readers will find some duplicates.
    European and American options are path-independent options. This means that an
    option's payoff depends only on the terminal stock price and strike price. One
    related issue for path-dependent options is market manipulation at the maturity
    date. Another issue is that some investors or hedgers might care more about the
    average price instead of a terminal price.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, a refinery is worried about oil, its major raw material, and price
    movement in the next three months. They plan to hedge the potential price jumps
    in crude oil. The company could buy a call option. However, since the firm consumes
    a huge amount of crude oil every day, naturally it cares more about the average
    price instead of just the terminal price on which a vanilla call option depends.
    For such cases, average options will be more effective. Average options are a
    type of Asian option. For an average option, its payoff is determined by the average
    underlying prices over some predetermined period of time. There are two types
    of averages: arithmetic average and geometric average. The payoff function of
    an Asian call (average price) is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Pricing average options](img/B06175_14_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The payoff function of an Asian put (average price) is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Pricing average options](img/B06175_14_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Asian options are one of the basic forms of exotic options. Another advantage
    of Asian options is that their costs are cheaper compared to European and American
    vanilla options since the variation of an average will be much smaller than a
    terminal price. The following Python program is for an Asian option with an arithmetic
    average price:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Pricing barrier options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Unlike the Black-Scholes-Merton option model''s call and put options, which
    are path-independent, a barrier option is path-dependent. A barrier option is
    similar in many ways to an ordinary option, except a trigger exists. An *in* option
    starts its life worthless unless the underlying stock reaches a predetermined
    knock-in barrier. On the contrary, an *out* barrier option starts its life active
    and turns useless when a knock-out barrier price is breached. In addition, if
    a barrier option expires inactive, it may be worthless, or there may be a cash
    rebate paid out as a fraction of the premium. The four types of barrier options
    are given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Up-and-out**: In this barrier option, the price starts from below a barrier
    level. If it reaches the barrier, it is knocked out.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Down-and-out**: In this barrier option, the price starts from above a barrier.
    If it reaches the barrier, it is knocked out.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Up-and-in**: In this barrier option, the price starts down a barrier and
    has to reach the barrier to be activated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Down-and-in**: In this barrier option, the price starts over a barrier and
    has to reach the barrier to be activated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following Python program is for an up-and-out barrier option with a European
    call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The basic design is that we simulate the stock movement n times, such as 100
    times. For each simulation, we have 100 steps. Whenever the stock price reaches
    the barrier, the payoff will be zero. Otherwise, the payoff will be a vanilla
    European call. The final value will be the summation of all call prices that are
    not knocked out, divided by the number of simulations, as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The Python code for the down-and-in put option is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Barrier in-and-out parity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we buy an up-and-out European call and an up-and-in European call, then
    the following parity should hold good:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Barrier in-and-out parity](img/B06175_14_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The logic is very simple—if the stock price reaches the barrier, then the first
    call is worthless and the second call will be activated. If the stock price never
    touches the barrier, the first call will remain active, while the second one is
    never activated. Either way, one of them is active. The following Python program
    illustrates such scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We input a set of values to test whether the summation of an up-and-out call
    and an up-and-in call will be the same as a vanilla call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The related output is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Graph of up-and-out and up-and-in parity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is a good idea to use the Monte Carlo simulation to present such parity.
    The following code is designed to achieve this. To make our simulation clearer,
    we deliberately choose just five simulations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The corresponding graph is shown as follows. Note that in the preceding program,
    since the seed is used, different users should get the same graphs if the same
    seed is applied:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graph of up-and-out and up-and-in parity](img/B06175_14_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Pricing lookback options with floating strikes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The lookback options depend on the paths (history) travelled by the underlying
    security. Thus, they are also called path-dependent exotic options. One of them
    is named floating strikes. The payoff function of a call when the exercise price
    is the minimum price achieved during the life of the option is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Pricing lookback options with floating strikes](img/B06175_14_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The Python code for this lookback option is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Remember that the previous function needs two modules. Thus, we have to import
    those modules before we call the function, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The result for one run is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Appendix A – data case 7 – hedging crude oil
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Assume that a refinery is using crude oil every day. Thus, they have to face
    the risk of price uncertainty of their main raw materials: crude oil. There is
    a tradeoff between protecting their bottom line and running production smoothly;
    the company studies all possible outcomes, such as hedge the oil price or not
    hedge at all. Assume that the total annual crude oil consumption is 20 million
    gallons. Again, the company has to operate every day. Compare the following several
    strategies and point out their advantages and disadvantages:'
  prefs: []
  type: TYPE_NORMAL
- en: No hedging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use futures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use exotic option
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Several strategies exist, such as American options; see its specification in
    the following table. Some of the crude oil options contract specifications are
    shown in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Contract unit** | A Light Sweet Crude Oil Put (Call) Option traded on the
    Exchange represents an option to assume a short (long) position in the underlying
    Light Sweet Crude Oil Futures traded on the Exchange. |'
  prefs: []
  type: TYPE_TB
- en: '| **Minimum price fluctuation** | $0.01 per barrel. |'
  prefs: []
  type: TYPE_TB
- en: '| **Price quotation** | U.S. dollars and cents per barrel. |'
  prefs: []
  type: TYPE_TB
- en: '| **Product code** | CME Globex: LO, CME ClearPort: LO, Clearing: LO. |'
  prefs: []
  type: TYPE_TB
- en: '| **Listed contracts** | Monthly contracts listed for the current year and
    the next five calendar years, and June and December contracts for three additional
    years. Monthly contracts for the balance of a new calendar year will be added
    following the termination of trading in the December contract of the current year.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Termination of trading** | Trading terminates three business days before
    the termination of trading in the underlying futures contract. |'
  prefs: []
  type: TYPE_TB
- en: '| **Exercise style** | American. |'
  prefs: []
  type: TYPE_TB
- en: '| **Settlement method** | Deliverable. |'
  prefs: []
  type: TYPE_TB
- en: '| **Underlying** | Light Sweet Crude Oil Futures. |'
  prefs: []
  type: TYPE_TB
- en: 'Table 1: Some specification for crude oil options contract'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'If we use futures to hedge, we have the following formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Appendix A – data case 7 – hedging crude oil](img/B06175_14_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*N* is the number of futures contract, *VA* is the value of our portfolio (amount
    we want to hedge), β is the slope of a regression based on our material and the
    underlying instruments (note if our material is the same as the underlying hedging
    instrument, then beta is 1), and *VF* is the value of one futures contract:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Source: [http://www.cmegroup.com/trading/energy/crude-oil/light-sweet-crude_contractSpecs_options.html?gclid=CLjWq92Yx9ICFU1MDQodP5EDLg&gclsrc=aw.ds](http://www.cmegroup.com/trading/energy/crude-oil/light-sweet-crude_contractSpecs_options.html?gclid=CLjWq92Yx9ICFU1MDQodP5EDLg&gclsrc=aw.ds)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Source of data: *Crude Oil Prices: West Texas Intermediate (WTI) - Cushing,
    Oklahoma (DCOILWTICO)*, [https://fred.stlouisfed.org/series/DCOILWTICO/downloaddata](https://fred.stlouisfed.org/series/DCOILWTICO/downloaddata)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'One related dataset is called `crudeOilPriceDaily.pkl`. The first and last
    several observations are shown here. The dataset is downloadable at [http://canisius.edu/~yany/python/crudeOilPriceDaily.pkl](http://canisius.edu/~yany/python/crudeOilPriceDaily.pkl):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Clewlow, Les and Chris Strickland,1997*, *Exotic Options, the state of the
    art, Thomaston Business Press*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Kurtverstegen*, *Simulation: simulating uncorrelated and correlated random
    variables*, [https://kurtverstegen.wordpress.com/2013/12/07/simulation/](https://kurtverstegen.wordpress.com/2013/12/07/simulation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Zhang, Peter, 1998*, *Exotic Options, World Scientific, the 2nd edition*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the definition of exotic options?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why is it claimed that a callable bond is equivalent to a normal bond plus a
    Bermudan option (the issuing company is the buyer of this Bermudan option while
    the bond buyer is the seller)?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a Python program to price an Asian average price put based on the arithmetic
    mean.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a Python program to price an Asian average price put based on the geometric
    mean.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a Python program to price an up-and-in call (barrier option).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a Python program to price a down-and-out put (barrier option).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a Python program to show the down-and-out and down-and-in parity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a Python program to use `permutation()` from SciPy to select 12 monthly
    returns randomly from the past five-year data without placement. To test your
    program, you can use Citigroup and the time period January 1, 2009 to December
    31, 2014 from Yahoo Finance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a Python program to run bootstrapping with n given returns. For each time,
    we select m returns where m>n.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this chapter, we have learned that a simple chooser option has the following
    price formula:![Exercises](img/B06175_14_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here, T is the maturity date (in years) and τ is the time when the option makes
    its decision whether it prefers a call or a put. Is it possible to have the following
    formula?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Exercises](img/B06175_14_19.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: When the stock pays a continuously compounded dividend, dividend yield δ, we
    have the following pricing formula for Chooser options:![Exercises](img/B06175_14_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Where *Pchooser* is the price or premium for a chooser option, *call (T)* is
    a European call with a maturity T. *put(τ)* will be defined soon. For the first
    *call (T)* option, we have the following pricing formula:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Exercises](img/B06175_14_21.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Where *call(T)* is the call price or premium, *S* is today''s price, *K* is
    the exercise price, T is the maturity in years, σ is the volatility, and *N()*
    is the cumulative standard normal distribution. Actually, this is exactly the
    Black-Scholes-Merton call option model. Put (τ) has the following formula:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Exercises](img/B06175_14_22.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Write a related Python program.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If two stocks prices are $40 and $55 today, the standard deviations of returns
    for those two stocks are 0.1 and 0.2, respectively. Their correlation is 0.45\.
    What is the price of the rainbow call options based on the maximum of the terminal
    stock price of those two stocks? The exercise price is $60 and maturity is six
    months and the risk-free rate is 4.5%.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Explain the differences and similarities between the univariate cumulative
    standard normal distribution and the bivariate cumulative standard normal distribution.
    For both univariate cumulative standard normal distribution, `N_f()` and the bivariate
    cumulative standard normal distribution, `N2_f()`, we have the following codes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Write a Python program to price a call option on the maximum of two terminal
    prices of two assets that are correlated:![Exercises](img/B06175_14_23.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The definitions of *S1*, *S2*, *d1*, *d2*, *d11*, *d12*, *d21*, *d22*, and the
    `N2()` function are defined in the chapter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Based on Monte Carlo simulation, write a Python program to price a put option
    on the minimum of two terminal prices of two assets that are correlated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this chapter, two programs related to American and Bermudan options, with
    the set of inputs of *s=40*, *x=40*, *T=6./12*, *r=0.05*, *sigma=0.2*, *n=1000*,
    *T2=(3./12.,4./1)*; a few dates for potential early exercise offer the same results.
    Why?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a Python program to price Bermudan put options.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a Python program to price a Rainbow call option based on the minimum terminal
    prices of five assets.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The options we've discussed in [Chapter 10](ch10.html "Chapter 10. Options and
    Futures"), *Options and Futures* are usually called vanilla options that have
    a close-form solution, that is, the Black-Scholes-Merton option model. In addition
    to those vanilla options, many exotic options exist. In this chapter, we have
    discussed several types of exotic options, such as Bermudan options, simple chooser
    options, shout and binary options, average price options, Up-and-in options, up-and-out
    options, and down-and-in and down-and-out options. For a European call, the option
    buyer could exercise their right at the maturity date, while for an American option
    buyer, they could exercise their right any time before or on the maturity date.
    A Bermudan option could be exercised a few times before maturity.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss various volatility measures, such as our
    conventional standard deviation, **Lower Partial Standard Deviation** (**LPSD**).
    Using the standard deviation of returns as a risk measure is based on a critical
    assumption that stock returns follow a normal distribution. Because of this, we
    introduce several normality tests. In addition, we graphically show volatility
    clustering—high volatility is usually followed by a high-volatility period, while
    low volatility is usually followed by a low-volatility period. To deal with this
    phenomenon, the **Autoregressive Conditional Heteroskedasticity** (**ARCH**) process
    was developed by Angel (1982), and the **Generalized AutoRegressive Conditional
    Heteroskedasticity** (**GARCH**) processes, which are extensions of ARCH, were
    developed by Bollerslev (1986). Their graphical presentations and related Python
    programs will also be covered in the next chapter.
  prefs: []
  type: TYPE_NORMAL
