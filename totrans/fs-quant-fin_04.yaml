- en: Chapter 4. Getting Started with Data Visualization
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 4 章：数据可视化入门
- en: In this chapter, you will learn how to get started with data visualization and
    build graphical user interfaces (GUIs) in F#. In quantitative finance, it is essential
    to be able to plot and visualize time series. F# is a great tool for this and
    we'll learn how to use F# as an advanced graphical calculator using F# Interactive.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何开始进行数据可视化，并在 F# 中构建图形用户界面（GUI）。在定量金融中，能够绘制和可视化时间序列是至关重要的。F# 是一款很好的工具，我们将学习如何使用
    F# 作为一个高级图形计算器，通过 F# Interactive 来实现。
- en: 'The content in this chapter will be used throughout the book whenever user
    interfaces are needed. In this chapter you will learn:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的内容将在整本书中使用，凡是需要用户界面的地方都会用到。在本章中，你将学习：
- en: Programming of basic GUI in F# and .NET
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 F# 和 .NET 中编程基本 GUI
- en: Plotting data using Microsoft Charts
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Microsoft Charts 绘制数据
- en: Plotting financial data
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘制金融数据
- en: Building an interactive GUI
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建交互式 GUI
- en: Making your first GUI in F#
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 F# 中创建你的第一个 GUI
- en: F# leverages the .NET platform and GUI programming is no exception. All classes
    from the .NET platform are available in this section. We will concentrate on the
    one from the `System.Windows.Forms` namespace.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: F# 利用 .NET 平台，GUI 编程也不例外。本节将使用来自 .NET 平台的所有类，我们将重点关注来自 `System.Windows.Forms`
    命名空间的类。
- en: It's possible to use the same code from F# Interactive and modify the GUI on
    the fly. We will look at this in more detail in the *Displaying data* section.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在 F# Interactive 中使用相同的代码并动态修改 GUI。我们将在 *显示数据* 部分更详细地探讨这一点。
- en: Let's look at an example where we make use of a .NET form and a button. The
    button will be connected to an event handler called for every click on the button.
    As you can see when you read the code, event handlers are higher-order functions
    that result in a clean and compact code.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个例子，使用 .NET 表单和按钮。按钮将连接到一个事件处理程序，每次点击按钮时都会触发该事件处理程序。正如你在阅读代码时看到的，事件处理程序是高阶函数，从而产生了简洁紧凑的代码。
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The screenshot for the output of the preceding code is as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出截图如下：
- en: '![Making your first GUI in F#](img/4623OS_04_01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![在 F# 中创建你的第一个 GUI](img/4623OS_04_01.jpg)'
- en: The first GUI application in F# consisting of a form and a button
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个由表单和按钮组成的 F# GUI 应用程序
- en: Composing interfaces
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组合界面
- en: 'Now, we have looked at the first code to generate a form and composed a very
    simple interface consisting of a button. As you may have noticed, F# has no visual
    designer as present in the other .NET languages. There are several ways of composing
    interfaces in F#:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经看过了生成表单的第一个代码，并组成了一个由按钮构成的非常简单的界面。正如你可能已经注意到的，F# 没有像其他 .NET 语言那样的可视化设计器。F#
    中有几种方式来组合界面：
- en: Writing interface code manually
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手动编写界面代码
- en: Using the C# visual designer and converting the code into F#
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 C# 可视化设计器并将代码转换为 F#
- en: Building a library using other .NET language and using it from F#
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用其他 .NET 语言构建库，并在 F# 中使用它
- en: Building your own visual designer to output F# code
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建你自己的可视化设计器以输出 F# 代码
- en: In this book, we will mainly use the first alternative—writing interface code
    manually. This may seem tedious, but the upside is total control over the layout.
    We'll now look at a larger example using an agent to keep track of the highest
    number and a user interface with a button. When a user clicks on that button,
    a random number is sent to the agent (see the following screenshot). The agent
    then outputs the highest number every second. Also, the example illustrates the
    use of namespaces and modules in a realistic fashion. This gives the reader an
    idea of when to use namespaces and modules, and how to structure the programs
    when they become larger.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将主要使用第一种方式——手动编写界面代码。这可能看起来有些繁琐，但优点是可以完全控制布局。我们现在将看一个更大的例子，使用代理来跟踪最高数字，并且包含一个带按钮的用户界面。当用户点击按钮时，一个随机数字会被发送到代理（见下图）。然后，代理每秒输出最高数字。此外，例子还展示了如何以现实的方式使用命名空间和模块。这能帮助读者了解何时使用命名空间和模块，以及在程序变得更大时如何结构化代码。
- en: '![Composing interfaces](img/4623OS_04_02.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![组合界面](img/4623OS_04_02.jpg)'
- en: The form of the agent application, with a button to send values to the agent.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 代理应用程序的形式，其中包含一个按钮来将值发送给代理。
- en: Tip
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'The order of the files in the project is as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 项目中文件的顺序如下：
- en: Agent
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代理
- en: GUI
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GUI
- en: Program
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 程序
- en: 'Otherwise, you will see some errors due to references. See the following figure
    showing **Solution Explorer** and notice the order:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，由于引用问题，你会看到一些错误。见下图，展示了 **解决方案资源管理器**，请注意文件顺序：
- en: '![Composing interfaces](img/4623OS_04_03.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![构建界面](img/4623OS_04_03.jpg)'
- en: More about agents
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多关于代理
- en: 'First we start with the agent. The agent is much the same as the agent in the
    section about agents in [Chapter 2](ch02.html "Chapter 2. Learning More About
    F#"), *Learning More About F#*, except for some modifications and the namespace
    `Agents`. The code is as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们从代理开始。这个代理与[第2章](ch02.html "第2章. 进一步学习 F#")中关于代理的部分中的代理非常相似，*进一步学习 F#*，只是做了一些修改并且使用了`Agents`命名空间。代码如下：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The screenshot for the preceding code is as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 上面代码的截图如下：
- en: '![More about agents](img/4623OS_04_04.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![更多关于代理](img/4623OS_04_04.jpg)'
- en: The console window with the output from the agent
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 包含代理输出的控制台窗口
- en: The user interface
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户界面
- en: 'The user interface is placed in the GUI namespace. `SampleForm` inherits from
    the `Form` .NET class. If you are familiar with other .NET languages, you will
    see some of the common steps involved. All the layout code is also a part of the
    code. There is no visual designer in F#, as mentioned earlier. To use `System.Windows.Forms`,
    you have to add a reference to the assembly with the same name. The code is as
    follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 用户界面被放置在GUI命名空间中。`SampleForm`继承自`Form` .NET类。如果你熟悉其他 .NET 语言，你会看到一些常见的步骤。所有布局代码也是代码的一部分。如前所述，F#中没有可视化设计器。要使用`System.Windows.Forms`，你必须将一个同名的程序集添加为引用。代码如下：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The main application
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主应用程序
- en: 'This is the main application entry point. It is annotated to tell the runtime
    environment (.NET platform) from where to start out. This is done by using the
    `[<STAThread>]` annotation. Here, we simply kick off the application and its GUI.
    The code for `SampleForm` is as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这是主应用程序的入口点。它被注释以告知运行时环境（.NET平台）从何处开始。这是通过使用`[<STAThread>]`注解来完成的。在这里，我们简单地启动应用程序及其GUI。`SampleForm`的代码如下：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Learning about event handling
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解事件处理
- en: Event driven programming and events from user are common ways of building GUIs.
    Event handlers are easy in F#, and lambda functions are easy to read and understand.
    Compact code is always preferable and makes things such as maintenance and understanding
    of the code easier for everyone involved.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 事件驱动编程和用户事件是构建GUI的常见方式。F#中的事件处理器非常简单，lambda函数易于阅读和理解。紧凑的代码总是更受欢迎，并且使得如维护和理解代码等任务对所有相关人员来说都更容易。
- en: 'If we look more closely at the code previously used for event handling, you
    can see that we first use a lambda function and inside the lambda we call a member
    function of the class:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们仔细观察之前用于事件处理的代码，你会看到我们首先使用一个lambda函数，并在lambda内部调用类的成员函数：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is just a way of making the code more readable and easier to understand.
    It's of course possible to include all the logic in the lambda function directly;
    but this approach is leaner, especially for larger projects.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一种使代码更具可读性和更容易理解的方式。当然，也可以将所有逻辑直接包含在lambda函数中；但这种方法更加简洁，尤其对于大型项目。
- en: Displaying data
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示数据
- en: Displaying and visualizing data is essential to get a better understanding of
    its characteristics. Also, data is at its core in quantitative finance. F# is
    a sharp tool for data analysis and visualization. A majority of the functionalities
    of visualization and user interfaces comes from the .NET platform. Together with
    the exploratory characteristics of F#, especially through F# Interactive, the
    combination becomes very efficient and powerful.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 显示和可视化数据对于更好地理解其特性至关重要。此外，数据在定量金融中处于核心地位。F#是一个用于数据分析和可视化的利器。大多数可视化和用户界面功能都来自.NET平台。结合F#的探索特性，特别是通过F#交互式，这种组合变得非常高效和强大。
- en: 'Let''s start out by using F# Interactive to create a form that will display
    data feed to it. This means we will have a form that can change the content at
    runtime, without the need for recompiling. The controls in the form are also interchangeable:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先使用F#交互式创建一个表单，该表单将显示传递给它的数据。这意味着我们将有一个可以在运行时更改内容的表单，而无需重新编译。表单中的控件也是可以互换的：
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If you run this code, you will see a form with the title **Displaying data
    in F#** as the one shown in the following screenshot:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行这段代码，你会看到一个标题为**在F#中显示数据**的表单，如以下截图所示：
- en: '![Displaying data](img/4623OS_04_05.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![显示数据](img/4623OS_04_05.jpg)'
- en: The window with a RichTextBox control to display data
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 包含RichTextBox控件用于显示数据的窗口
- en: 'We need a function to send data to the textbox in the window and display it.
    Here is the one to do the job for us:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个函数将数据发送到窗口中的文本框并显示它。以下是完成此任务的函数：
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, we can use the function and it will send the formatted data to our textbox
    (`textBox`). Here are some examples that show you how to use the function; it''s
    useful to utilize the pipe function as illustrated in the later snippets:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用这个函数，它会将格式化的数据发送到我们的文本框（`textBox`）。这里有一些示例，展示了如何使用这个函数；如后续代码片段所示，利用管道函数是很有用的：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If you want to clear the contents of the textbox, you can write:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想清除文本框的内容，可以写：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output is as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '![Displaying data](img/4623OS_04_06.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![显示数据](img/4623OS_04_06.jpg)'
- en: This is how the form looks with the content generated from the previous snippet
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这是表单的样子，内容来自前一个代码片段生成的内容
- en: Tip
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Try this out for yourself and see which work flow is best suited for you.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试自己动手做做看，看看哪种工作流最适合你。
- en: Extending the form to use a table
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展表单以使用表格
- en: 'Now that we have looked at how to use F# Interactive and feed data to a form
    on the fly, we can extend the concept and use a table as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看过如何使用F# Interactive并即时将数据传递到表单中，我们可以扩展这个概念，并使用表格，如下所示：
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The preceding code will add `DataGridView` to the form, with some styling added
    to it. The last lines of code will populate `DataGridView` with some sample data.
    It will finally look something like the following figure:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将把`DataGridView`添加到表单中，并为其添加一些样式。代码的最后几行将填充`DataGridView`，并加入一些示例数据。它最终将呈现出如下图所示的样子：
- en: '![Extending the form to use a table](img/4623OS_04_07.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![扩展表单以使用表格](img/4623OS_04_07.jpg)'
- en: DataGridView added to the form with sample data
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 将包含示例数据的DataGridView添加到表单中
- en: 'Let''s extend the example and use code to set the column headers together with
    code to use a collection:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们扩展这个例子，并使用代码一起设置列标题，并使用代码来操作集合：
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The result will look something like the window in the following screenshot:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将看起来像下图所示的窗口：
- en: '![Extending the form to use a table](img/4623OS_04_08.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![扩展表单以使用表格](img/4623OS_04_08.jpg)'
- en: A formatted DataGridView using a collection as data source
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 使用集合作为数据源的格式化DataGridView
- en: Displaying financial data from Yahoo! Finance
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从Yahoo! Finance显示财务数据
- en: 'Now we will look at a bigger example application, where we will use the concepts
    introduced this far and extend the functionality to cover visualization of financial
    data. Here, we will download data from Yahoo! Finance and display the closing
    prices together with a calculated moving average in the same chart window. The
    application will finally look something like the one in the following screenshot:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们来看一个更大的示例应用程序，我们将在其中使用到目前为止介绍的概念，并将功能扩展到财务数据的可视化。在这里，我们将从Yahoo! Finance下载数据，并在同一个图表窗口中显示收盘价及其计算出的移动平均线。最终，应用程序的界面大致如下所示：
- en: '![Displaying financial data from Yahoo! Finance](img/4623OS_04_09.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![从Yahoo! Finance显示财务数据](img/4623OS_04_09.jpg)'
- en: An example application to visualize data form Yahoo! Finance
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 一个示例应用程序，用于可视化来自Yahoo! Finance的数据
- en: Understanding the application code
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解应用程序代码
- en: 'The application will use some code introduced in previous sections, as well
    as in previous chapters. If you don''t recognize any of the content, please go
    back and refresh on that particular topic. The main building block here is `Systems.Windows.Forms`
    and `System.Windows.Forms.DataVisualization.Charting`. A lot more information
    is available online at MSDN: [http://msdn.microsoft.com/en-us/library/system.windows.forms.datavisualization.charting.aspx](http://msdn.microsoft.com/en-us/library/system.windows.forms.datavisualization.charting.aspx).'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序将使用前面章节中介绍的一些代码。如果你对某些内容不熟悉，请回去复习相关的主题。这里的主要构建模块是`Systems.Windows.Forms`和`System.Windows.Forms.DataVisualization.Charting`。更多信息可以在MSDN在线获取：[http://msdn.microsoft.com/en-us/library/system.windows.forms.datavisualization.charting.aspx](http://msdn.microsoft.com/en-us/library/system.windows.forms.datavisualization.charting.aspx)。
- en: 'Let''s look at the code needed to provide the preceding functionality:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下提供上述功能所需的代码：
- en: '[PRE11]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We''ll first create a chart and initialize it by setting `style` and `ChartAreas`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先创建一个图表，并通过设置`style`和`ChartAreas`来初始化它：
- en: '[PRE12]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then the form is created and displayed. After that, the title of the program
    is set and the chart control is added to the form:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 然后创建并显示表单。之后，设置程序的标题，并将图表控件添加到表单中：
- en: '[PRE13]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then, there is some code to create the two charting series needed and some
    style is set to the two charting series to distinguish them from each other. The
    stock price series will be red, and the moving average will be blue:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，有一些代码来创建所需的两个图表系列，并为这两个系列设置样式，以便将它们区分开来。股票价格系列将是红色，移动平均线将是蓝色：
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now, the code for the fetching of data is the same as we used in the previous
    chapter, [Chapter 3](ch03.html "Chapter 3. Financial Mathematics and Numerical
    Analysis"), *Financial Mathematics and Numerical Analysis*.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，获取数据的代码与上一章使用的相同，[第三章](ch03.html "第3章：金融数学与数值分析")，*金融数学与数值分析*。
- en: '[PRE15]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The interesting part here is how data is added to the chart. This is done by
    iterating the time series and using the `series.Points.Add` method. It's an elegant
    and concise way of doing it. The `ignore` operator is used to simply skip the
    resulting value from the `Points.Add` method, ignoring it.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有趣的部分是如何将数据添加到图表中。这是通过遍历时间序列并使用 `series.Points.Add` 方法完成的。这是一种优雅简洁的方式。`ignore`
    操作符被用来简单地跳过 `Points.Add` 方法的结果，忽略它。
- en: '[PRE16]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Extending the application to use Bollinger bands
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展应用程序以使用布林带
- en: 'We''ll now extend the application we used in the previous section to use Bollinger
    bands. Bollinger bands is an extension of moving average, where two bands are
    added—one upper band and one lower band. The bands are typically K (where K=2.0)
    times a moving standard deviation above and below the moving average. We need
    to add a function to calculate the moving standard deviation. We can use the standard
    deviation from the previous chapter and use it with the `Seq.windowed` function,
    as shown in the following code. In this example, we also add legends to specify
    which data series corresponds to which color. The screenshot is as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将扩展上一节中使用的应用程序，以使用布林带。布林带是移动平均的扩展，加入了两个带——一个上轨带和一个下轨带。带的值通常是 K 倍（其中 K=2.0）的移动标准差，高于和低于移动平均线。我们需要添加一个函数来计算移动标准差。我们可以使用上一章中的标准差，并将其与
    `Seq.windowed` 函数一起使用，代码如下所示。在此示例中，我们还添加了图例，以指定哪个数据系列对应于哪个颜色。截图如下：
- en: '![Extending the application to use Bollinger bands](img/4623OS_04_10.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![扩展应用程序以使用布林带](img/4623OS_04_10.jpg)'
- en: Example application extended to use Bollinger Bands
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展了布林带功能的示例应用程序
- en: 'The code looks pretty much like the code used in the preceding example; except
    for the calculation of the upper and lower band, and the moving standard deviation:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 代码看起来与前面示例中的代码几乎相同，除了上轨和下轨的计算，以及移动标准差的部分：
- en: '[PRE17]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Legends are easily added to a chart using `chart.Legends.Add`:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `chart.Legends.Add` 很容易地将图例添加到图表中：
- en: '[PRE18]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We''ll need two new data series for our upper and lower bands respectively:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将需要两个新的数据系列，分别用于上轨带和下轨带：
- en: '[PRE19]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The code to calculate the moving standard deviation is a modification of the
    code used in the previous chapter, to work with the `Seq.windowed` function:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 计算移动标准差的代码是对上一章中使用的代码的修改，以适应 `Seq.windowed` 函数：
- en: '[PRE20]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This section is pretty interesting. Here, we add and subtract the result from
    the moving standard deviation to the moving average, which is multiplied with
    the K-value to form the upper and lower band:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 本节内容相当有趣。在这里，我们将从移动标准差中加上或减去结果，并将其与移动平均相乘，从而形成上轨和下轨带：
- en: '[PRE21]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: You can extend this application and implement other technical indicators if
    you like. The nice thing about using F# Interactive is that the application itself
    doesn't have to be restarted to show new data. In other words, you can use `movingAvg.Points.Add`
    and the point will be added to the chart.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你愿意，可以扩展这个应用程序并实现其他技术指标。使用 F# Interactive 的好处在于，应用程序本身不需要重新启动即可显示新数据。换句话说，你可以使用`movingAvg.Points.Add`，并将数据点添加到图表中。
- en: Using FSharp.Charting
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 FSharp.Charting
- en: '**FsChart** is a commonly used F# chart library implemented as a functional
    wrapper over the Microsoft Chart Control. This control can save you some work
    because there is no need for boilerplate code as in the preceding examples for
    Microsoft Chart Control. FsChart is also designed to work with F# and integrate
    better with F# Interactive.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**FsChart** 是一个常用的 F# 图表库，作为 Microsoft Chart 控件的功能性包装器实现。这个控件可以帮你省去一些工作，因为不像前面使用
    Microsoft Chart 控件的示例那样需要编写样板代码。FsChart 也被设计为与 F# 一起使用，并能更好地与 F# Interactive 集成。'
- en: 'The library can be installed using the Package Manager Console by typing:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过在包管理器控制台输入以下命令来安装该库：
- en: '[PRE22]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Creating a candlestick chart from stock prices
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从股票价格创建蜡烛图
- en: 'Let''s look at the code for displaying a candlestick chart of the same stock
    as used before (Oracle) with data from Yahoo! Finance. This time there is less
    boilerplate code needed to set up the charting. The main part of the program consists
    of downloading, parsing, and converting the data:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下用于显示与之前相同的股票（Oracle）的K线图的代码，数据来自Yahoo! Finance。这次，设置图表所需的样板代码减少了。程序的主要部分包括下载、解析和转换数据：
- en: '[PRE23]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'To use `FSharpCharting`, first we need to set up the chart as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`FSharpCharting`，首先需要按如下方式设置图表：
- en: '[PRE24]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We need to reorder the data from open, high, low close to high, low, and open
    close. This is done when we parse the strings to floating point numbers. Also,
    we include the date as the first value. The date will be used by `FSharpCharts`
    to order the candles.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将数据从开盘、最高、最低、收盘的顺序重新排序为最高、最低、开盘、收盘的顺序。这在我们将字符串解析为浮点数时完成。此外，我们将日期作为第一个值包括进去。`FSharpCharts`将使用日期来排序蜡烛图。
- en: '[PRE25]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The data will be downloaded, parsed, and displayed in the chart and the final
    result will look something like the following screenshot:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 数据将被下载、解析，并显示在图表中，最终的结果将类似于以下截图：
- en: '![Creating a candlestick chart from stock prices](img/4623OS_04_11.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![从股票价格创建K线图](img/4623OS_04_11.jpg)'
- en: Using FSharpCharts to display a candlestick chart
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 使用FSharpCharts显示K线图
- en: Creating a bar chart
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建条形图
- en: In this example, we'll learn how to plot a histogram of a distribution generated
    by Math.NET. Histograms are useful to visualize statistical data and get a grip
    of their properties. We'll use a simple normal distribution with a zero mean and
    a standard deviation of one.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将学习如何绘制由Math.NET生成的分布的直方图。直方图用于可视化统计数据，并帮助我们了解其特性。我们将使用一个简单的正态分布，均值为零，标准差为一。
- en: '[PRE26]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Next we''ll create the normal distribution that will be used in the histogram:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建将在直方图中使用的正态分布：
- en: '[PRE27]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Unfortunately, Math.NET and FSharpCharting is not compatible out of the box.
    We need to convert the histogram from Math.NET to use it with the `Chart.Column`
    function:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，Math.NET和FSharpCharting并不直接兼容。我们需要将Math.NET的直方图转换为适用于`Chart.Column`函数：
- en: '[PRE28]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: As you can see in the following screenshot, the distribution looks a lot like
    the normal distribution. You can experiment with the number of buckets yourself
    to see how this behavior will change with the number of buckets. Also, you can
    increase the number of samples used.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如下截图所示，分布看起来非常像正态分布。你可以自己尝试更改桶的数量，看看随着桶数的变化这种行为如何变化。此外，你还可以增加使用的样本数量。
- en: '![Creating a bar chart](img/4623OS_04_12.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![创建条形图](img/4623OS_04_12.jpg)'
- en: Using FSharpCharts to display a histogram
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 使用FSharpCharts显示直方图
- en: Summary
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at data visualization in F# and learned to build
    user interfaces. We have looked at how to use F# to create user interfaces without
    a visual designer. There are pros and cons of using this approach of course. The
    main benefit is total control and there is no hidden magic. On the other side,
    it can be time consuming when we talk about larger GUI applications.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了F#中的数据可视化，并学习了如何构建用户界面。我们已经学习了如何使用F#在没有可视化设计器的情况下创建用户界面。当然，这种方法有利有弊。主要的好处是完全控制，并且没有隐藏的魔法。另一方面，当谈到大型GUI应用时，这可能会非常耗时。
- en: In the next chapter, we'll use the data visualization tools introduced in this
    chapter to study some interesting properties of options. We'll talk about the
    basics of the options and how they are priced using the Black Scholes formula.
    Also, the Black Scholes formula will be implemented in F# and discussed in detail.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用本章介绍的数据可视化工具来研究期权的一些有趣属性。我们将讨论期权的基础知识，以及如何使用Black-Scholes公式来定价期权。此外，Black-Scholes公式将在F#中实现，并将详细讨论。
