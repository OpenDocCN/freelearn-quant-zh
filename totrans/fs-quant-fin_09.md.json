["```py\n/// Payoff for European call option\n// s: stock price\n// k: strike price of option\nlet payoffCall k s = max (s-k) 0.0\n\n/// Payoff for European Put option\n// s: stock price\n// k: strike price of option\nlet payoffPut k s = max (k-s) 0.0\n```", "```py\n/// Calculate the payoffs given payoff function\nlet payoff payoffFunction = [ for s in 0.0 .. 10.0 .. 100.0 -> s, payoffFunction s ]\n```", "```py\nlet callPayoff = payoff (payoffCall 50.0)\nChart.Line(callPayoff).WithTitle(\"Payoff - Call Option\")\n```", "```py\nlet putPayoff = payoff (payoffPut 50.0)\nChart.Line(putPayoff).WithTitle(\"Payoff - Put Option\")\n```", "```py\n/// Combined chart of payoff for call and put option\nlet chart = Chart.Combine [Chart.Line(callPayoff); Chart.Line(putPayoff).WithTitle(\"Payoff diagram\")]\n```", "```py\n/// Payoff for long straddle\n// s: stock price\n// k: strike price of option\nlet longStraddle k s = \n    (payoffCall k s) +\n    (payoffPut k s)\n\nChart.Line(payoff (longStraddle 50.0)).WithTitle(\"Payoff - Long straddle\")\n```", "```py\n/// Payoff for Short straddle\n// s: stock price\n// k: strike price of option\nlet shortStraddle k s = \n    -(payoffCall k s) +\n    -(payoffPut k s)\n\nChart.Line(payoff (shortStraddle 50.0)).WithTitle(\"Payoff - Short \n    straddle\")\n```", "```py\n/// Payoff for long butterfly\n// s: stock price\n// h: high price\n// l: low price\nlet longButterfly l h s = \n    (payoffCall l s) +\n    (payoffCall h s) -\n    2.0 * (payoffCall ((l + h) / 2.0) s)\n\nChart.Line(payoff (longButterfly 20.0 80.0)).WithTitle(\"Payoff - Long butterfly\")\n```", "```py\n/// Payoff for short butterfly\n// s: stock price\n// h: high price\n// l: low price\nlet shortButterfly l h s = \n    -(payoffCall l s) +\n    -(payoffCall h s) -\n    2.0 * -(payoffCall ((l + h) / 2.0) s)\n\nChart.Line(payoff (shortButterfly 20.0 80.0)).WithTitle(\"Payoff - Short butterfly\")\n```", "```py\n/// Mark-to-market profit\n\n/// Normal distribution\nopen MathNet.Numerics.Distributions;\nlet normd = new Normal(0.0, 1.0)\n\n/// Black-Scholes Gamma\n// s: stock price\n// x: strike price of option\n// t: time to expiration in years\n// r: risk free interest rate\n// v: volatility\nlet black_scholes_gamma s x t r v =\nlet d1=(log(s / x) + (r+v*v*0.5)*t)/(v*sqrt(t))\nnormd.Density(d1) / (s*v*sqrt(t))\n\nlet mark_to_market_profit s,x,t,r,v,vh = 0.5*(v*v - vh*vh)*S*S*gamma(s,x,t,r,v)\n```", "```py\nopen MathNet.Numerics\nopen MathNet.Numerics.LinearAlgebra\nopen MathNet.Numerics.LinearAlgebra.Double\nopen MathNet.Numerics.Distributions\n\nlet filePath = @\"C:\\Users\\Gecemmo\\Desktop\\smile_data.csv\"\n\n/// Split row on commas\nlet splitCommas (l:string) =\n    l.Split(',')\n\n/// Read a file into a string array\nlet openFile (name : string) =\n    try\n        let content = File.ReadAllLines(name)\n        content |> Array.toList\n    with\n        | :? System.IO.FileNotFoundException as e -> printfn \"Exception! %s \" e.Message; [\"empty\"]\n```", "```py\n/// Read the data from a CSV file and returns\n/// a tuple of strike price and implied volatility%\n// Filter for just one expiration date\nlet readVolatilityData date =\n    openFile filePath\n    |> List.map splitCommas\n    |> List.filter (fun cols -> cols.[1] = date)\n    |> List.map (fun cols -> (cols.[2], cols.[3]))\n```", "```py\n/// 83.2\n/// Calculates moneyness and parses strings into numbers\nlet calcMoneyness spot list =\n    list\n    |> List.map (fun (strike, imp) -> (spot / (float strike), (float imp)))\n\n// Filter out one expiration date -- 2013-12-20\nlet list = readVolatilityData \"2013-12-20\"\nlet mlist = calcMoneyness 83.2 list\n\n/// Plot values using FSharpChart\nfsi.AddPrinter(fun (ch:FSharp.Charting.ChartTypes.GenericChart) -> ch.ShowChart(); \"FSharpChartingSmile\")    \nChart.Point(mlist)\n```", "```py\nlet xdata = mlist |> Seq.map (fun (x, _) -> x) |> Seq.toList\nlet ydata = mlist |> Seq.map (fun (_, y) -> y) |> Seq.toList\n\nlet N = xdata.Length\nlet order = 2\n\n/// Generating a Vandermonde row given input v\nlet vandermondeRow v = [for x in [0..order] do yield v ** (float x)]\n\n/// Creating Vandermonde rows for each element in the list\nlet vandermonde = xdata |> Seq.map vandermondeRow |> Seq.toList\n\n/// Create the A Matrix\nlet A = vandermonde |> DenseMatrix.ofRowsList N (order + 1)\nA.Transpose()\n\n/// Create the Y Matrix\nlet createYVector order l = [for x in [0..order] do yield l]\nlet Y = (createYVector order ydata |> DenseMatrix.ofRowsList (order + 1) N).Transpose()\n```", "```py\n/// Calculate coefficients using least squares\nlet coeffs = (A.Transpose() * A).LU().Solve(A.Transpose() * Y).Column(0)\n\nlet calculate x = (vandermondeRow(x) |> DenseVector.ofList) * coeffs\n\nlet fitxs = [(Seq.min xdata).. 0.01 ..(Seq.max xdata)]\nlet fitys = fitxs |> List.map calculate\nlet fits = [for x in [(Seq.min xdata).. 0.01 ..(Seq.max xdata)] do yield (x, calculate x)]\n\nlet chart = Chart.Combine [Chart.Point(mlist); Chart.Line(fits).WithTitle(\"Volatility Smile - 2nd degree polynomial\")]\n```", "```py\nlet order = 2\n```", "```py\n// Filter on moneyness, 0.5 to 1.5\nlet mlist = calcMoneyness 83.2 list |> List.filter (fun (x, y) -> x > 0.5 && x < 1.5)\n```"]