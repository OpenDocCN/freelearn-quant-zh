["```py\n>library(PerformanceAnalytics) \n>data(edhec)  \n> data<-edhec[\"1999\", 3:5] \n> colnames(data) = c(\"DS\",\"EM\",\"EMN\") \n> data \n\n```", "```py\n> wts <- xts(matrix(c(.3,.3,.4),nrow=1,ncol=3), as.Date(\"1998-12-31\")) \n> colnames(wts)<-colnames(data) \n> wts \n\n```", "```py\n> Return.portfolio(data,weights =wts, rebalance_on=\"months\",verbose=TRUE) \n\n```", "```py\n>library(randomForest) \n>library(mlbench) \n>library(caret) \n>data(Shuttle) \n>Analysis_Data<-head(Shuttle,10000) \n>X <- Analysis_Data[,1:9] \n>Y<- Analysis_Data[,10] \n>control <- trainControl(method=\"repeatedcv\", number=5, repeats=3) \n>seed <- 4 \n>metric <- \"Accuracy\" \n>set.seed(seed) \n>Count_var <- sqrt(ncol(X)) \n>tunegrid <- expand.grid(.mtry=Count_var) \n>rf_baseline <- train(Class~., data=Analysis_Data, method=\"rf\", metric=metric, tuneGrid=tunegrid, trControl=control) \n>print(rf_baseline) \n\n```", "```py\n> control <- trainControl(method=\"repeatedcv\", number=5, repeats=3, search=\"grid\") \n> set.seed(seed) \n> tunegrid <- expand.grid(.mtry=c(1:8)) \n> rf_gridsearch_method <- train(Class~., data=Analysis_Data, method=\"rf\", metric=metric, tuneGrid=tunegrid, trControl=control) \n> print(rf_gridsearch_method) \n\n```", "```py\n> plot(rf_gridsearch_method) \n\n```", "```py\n>install.packages(\"genalg\") \n>library(genalg) \n>library(ggplot2) \n>InputDataset <- data.frame(Stocks = c(\"Stock1\", \"Stock2\", \"Stock3\", \"Stock4\", \"Stock5\", \"Stock6\"), returns = c(10, 11, 15, 20, 12, 13), weight = c(.1, .2, .1, .2, .2, .3)) \n>WTlimit <- 1 \n>InputDataset \n\n```", "```py\n>evaluationFunc <- function(x) { \n    current_solution_returns <- x %*% InputDataset$returns \n    current_solution_weight <- x %*% InputDataset$weight \n\n    if (current_solution_weight > WTlimit)  \n        return(0) else return(-current_solution_returns) \n} \n\n```", "```py\n> GAmodel <- rbga.bin(size = 6, popSize = 100, iters = 50, mutationChance = 0.01,  \n+     elitism = T, evalFunc = evaluationFunc) \n> cat(summary(GAmodel)) \n\n```", "```py\n>library(GA) \n> data(economics) \n> Data_Analysis<-data.frame(economics[,2:4]) \n>head(Data_Analysis) \n\n```", "```py\n>OLS_GA <- function(Data_Analysis, a0, a1, a2){ \n  attach(Data_Analysis, warn.conflicts=F) \n  Y_hat <- a0  + a1*pop + a2*psavert   \n  SSE = t(pce-Y_hat) %*% (pce-Y_hat)  \n  detach(Data_Analysis) \n  return(SSE) \n} \n\n```", "```py\n>ga.OLS_GA <- ga(type='real-valued', min=c(-100,-100,-100),  \n             max=c(100, 100, 100), popSize=500, maxiter=500, names=c('intercept', 'pop', 'psavert'), \n             keepBest=T, fitness = function(a) -OLS(Data_Analysis, a[1],a[2], a[3])) \n        > summary(ga.OLS_GA) \n\n```"]