- en: Algorithmic Trading - Real Trading
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 算法交易 - 实际交易
- en: Now that we've built various algorithmic trading strategies and successfully
    backtested them with satisfactory results and paper traded them in live markets,
    it is finally time for real trading.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经建立了各种算法交易策略，并成功地进行了令人满意的回测，并在实时市场中进行了纸上交易，现在终于到了进行实际交易的时候了。
- en: Real trading is where we execute a trading strategy in the live market hours
    with real money. If your strategy has performed well in backtesting and paper
    trading, you can expect similar results with real money. Please note that your
    strategy may not perform as expected in the real market, despite giving good backtesting
    and paper trading results. Profitable backtesting and paper trading results are
    prerequisites for a profitable real trading experience but are not sufficient
    to guarantee a profit for every session.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 实际交易是指我们在真实市场小时内用真钱执行交易策略。如果您的策略在回测和纸上交易中表现良好，您可以期待在真实市场中获得类似的结果。请注意，尽管您的策略在回测和纸上交易中表现良好，但在真实市场中可能表现不如预期。盈利的回测和纸上交易结果是盈利的实际交易经验的前提，但不足以保证每个交易会盈利。
- en: 'For real trading, a strategy configuration is required. It consists of multiple
    parameters, some of which are as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 对于实际交易，需要策略配置。它包含多个参数，其中一些如下：
- en: '**Start and end times**: The time duration within the current day for which
    paper trading should be run.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开始和结束时间**：在当前一天内进行纸上交易的时间段。'
- en: '**Financial instrument(s)**: One or more financial instruments for which paper
    trading should be performed.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**金融工具**：进行纸上交易的一个或多个金融工具。'
- en: '**Candle interval**: One of various possible candle intervals; for example,
    `1 minute`, `15 minutes`, `hour`, or `day`.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**蜡烛间隔**：各种可能的蜡烛间隔之一；例如，`1分钟`，`15分钟`，`小时`或`天`。'
- en: '**Strategy specific parameters**: Values for custom parameters defined in the
    strategy.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**策略特定参数**：在策略中定义的自定义参数的值。'
- en: '**Strategy mode**: One of intraday or delivery. Intraday strategies punch intraday
    orders, which are squared-off at the end of the day. Delivery strategies punch
    delivery orders, which don''t square-off at the end of the day and get carried
    forward to the next trading day.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**策略模式**：其中之一是日内或交割。日内策略 punch 日内订单，这些订单在当天结束时平仓。交割策略 punch 交割订单，这些订单不会在当天结束时平仓，而会被延续到下一个交易日。'
- en: A real trading engine is required to perform real trading on a given strategy.
    In this chapter, you will use the real trading engine provided by AlgoBulls ([https://algobulls.com](https://algobulls.com)),
    an algorithmic trading platform that makes its services available via its developer
    options. It provides a Python package called `pyalgotrading` ([https://github.com/algobulls/pyalgotrading](https://github.com/algobulls/pyalgotrading))
    to make these services available.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 实际交易引擎需要根据给定的策略执行实际交易。在本章中，您将使用由 AlgoBulls 提供的实际交易引擎（[https://algobulls.com](https://algobulls.com)），这是一个通过其开发者选项提供其服务的算法交易平台。它提供了一个名为
    `pyalgotrading` 的 Python 包（[https://github.com/algobulls/pyalgotrading](https://github.com/algobulls/pyalgotrading)）来提供这些服务。
- en: 'You coded two algorithmic trading strategies in [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml),
    *Algorithmic Trading Strategies – Coding Step by Step*. Recall that the strategy
    descriptions are as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您在 [第8章](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml) 中编写了两个算法交易策略，*逐步编码算法交易策略*。请回忆一下策略描述如下：
- en: '**EMA-Regular-Order strategy**: A strategy based on the technical indicator
    EMA and regular orders. (The first six recipes of [Chapter 7](d5760c5d-fa09-4008-ab45-5d7d69c4bde9.xhtml),
    *Placing Bracket and Cover Orders on the Exchange*)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**EMA-Regular-Order 策略**：基于技术指标 EMA 和常规订单的策略。（[第7章](d5760c5d-fa09-4008-ab45-5d7d69c4bde9.xhtml)的前六个配方，*在交易所上放置挂单和止损单*）'
- en: '**MACD-Bracket-Order strategy**: A strategy based on the technical indicator
    MACD and bracket orders. (The remaining six recipes of [Chapter 7](d5760c5d-fa09-4008-ab45-5d7d69c4bde9.xhtml),
    *Placing Bracket and Cover Orders on the Exchange*)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MACD-Bracket-Order 策略**：基于技术指标 MACD 和挂单的策略。（[第7章](d5760c5d-fa09-4008-ab45-5d7d69c4bde9.xhtml)的其余六个配方，*在交易所上放置挂单和止损单*）'
- en: These strategies are also available as part of a Python package, `pyalgostrategypool`.
    You can install it using pip with the `$ pip install pyalgostrategypool` command.
    You can also check them out on GitHub ([https://github.com/algobulls/pyalgostrategypool](https://github.com/algobulls/pyalgostrategypool)).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这些策略也作为 Python 包的一部分提供，即 `pyalgostrategypool`。你可以使用 `$ pip install pyalgostrategypool`
    命令安装它。你也可以在 GitHub 上查看它们 ([https://github.com/algobulls/pyalgostrategypool](https://github.com/algobulls/pyalgostrategypool))。
- en: When following [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml), *Algorithmic
    Trading Strategies – Coding Step by Step*, you uploaded these two strategies to
    your AlgoBulls account. In this chapter, you will fetch these strategies from
    your AlgoBulls account and perform real trading on them. Real trading is fully
    automated and requires no involvement from your end while the trading session
    is going on. Upon real trading, you would gather strategy execution logs and various
    reports – namely, the profit and loss report and the statistics report. By using
    `pyalgotrading`, you ensure that you're focusing on developing and executing real
    trading strategies without worrying about the ecosystem needed for the strategy's
    execution.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在 [第 8 章](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml) 中跟随 *算法交易策略 – 逐步编码*，你将这两个策略上传到你的
    AlgoBulls 账户。在本章中，你将从你的 AlgoBulls 账户获取这些策略，并对它们进行真实交易。真实交易完全自动化，不需要你的任何干预，而交易会话正在进行时。进行真实交易后，你将收集策略执行日志和各种报告
    – 即盈亏报告和统计报告。通过使用 `pyalgotrading`，你确保专注于开发和执行真实交易策略，而不必担心策略执行所需的生态系统。
- en: This chapter includes step-by-step recipes for the previously mentioned strategies,
    from setting up a connection to the AlgoBulls platform, fetching the strategy,
    and running real trading jobs to fetching the execution logs and fetching various
    types of reports.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包括了先前提及的策略的逐步示例，从建立到 AlgoBulls 平台的连接，获取策略，运行真实交易作业到获取执行日志和各种类型报告。
- en: 'In this chapter, you will cover the following recipes:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习以下内容：
- en: EMA-Regular-Order strategy – fetching the strategy
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EMA-Regular-Order 策略 – 获取该策略
- en: EMA-Regular-Order strategy – real trading the strategy
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EMA-Regular-Order 策略 – 实际交易该策略
- en: EMA-Regular-Order strategy – fetching real trading logs in real time
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EMA-Regular-Order 策略 – 实时获取实际交易日志
- en: EMA-Regular-Order strategy – fetching a real trading report – P&L table
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EMA-Regular-Order 策略 – 获取实际交易报告 – P&L 表
- en: EMA-Regular-Order strategy – fetching a real trading report – statistics table
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EMA-Regular-Order 策略 – 获取实际交易报告 – 统计表
- en: MACD-Bracket-Order strategy – fetching the strategy
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MACD-Bracket-Order 策略 – 获取该策略
- en: MACD-Bracket-Order strategy – real trading the strategy
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MACD-Bracket-Order 策略 – 实际交易该策略
- en: MACD-Bracket-Order strategy – fetching real trading logs in real time
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MACD-Bracket-Order 策略 – 实时获取实际交易日志
- en: MACD-Bracket-Order strategy – fetching a real trading report – P&L table
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MACD-Bracket-Order 策略 – 获取实际交易报告 – P&L 表
- en: MACD-Bracket-Order strategy – fetching a real trading report – statistics table
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MACD-Bracket-Order 策略 – 获取实际交易报告 – 统计表
- en: Real trading is only meaningful if run during the live market hours, unlike
    backtesting, which can be run at any time. Please make sure you try out the recipes
    of this chapter in live market hours.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在实时市场小时运行的真实交易才有意义，而不像回测可以在任何时间运行。请确保你在实时市场小时尝试本章的示例。
- en: Technical requirements
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'You will need the following to successfully execute the recipes in this chapter:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了成功执行本章的示例，你将需要以下内容：
- en: Python 3.7+
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3.7+
- en: 'Python package:'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 包：
- en: '`pyalgotrading` ( `$ pip install pyalgotrading` )'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pyalgotrading`（`$ pip install pyalgotrading`）'
- en: Ensure you have added and bound your broking details on [https://algobulls.com](https://algobulls.com).
    Refer to *Appendix II* for more details. You can use any broker supported by the
    AlgoBulls platform for this chapter.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已在 [https://algobulls.com](https://algobulls.com) 上添加并绑定了你的经纪详情。有关更多细节，请参考
    *附录 II*。你可以在此章节中使用任何 AlgoBulls 平台支持的经纪商。
- en: The latest Jupyter notebook for this chapter can be found on GitHub at [https://github.com/PacktPublishing/Python-Algorithmic-Trading-Cookbook/tree/master/Chapter11](https://github.com/PacktPublishing/Python-Algorithmic-Trading-Cookbook/tree/master/Chapter11).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的最新 Jupyter 笔记本可以在 GitHub 上找到 [https://github.com/PacktPublishing/Python-Algorithmic-Trading-Cookbook/tree/master/Chapter11](https://github.com/PacktPublishing/Python-Algorithmic-Trading-Cookbook/tree/master/Chapter11)。
- en: EMA–Regular–Order strategy – fetching the strategy
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: EMA-Regular-Order 策略 – 获取该策略
- en: In this recipe, you will fetch the `StrategyEMARegularOrder` strategy class
    from your account on the AlgoBulls platform. This recipe starts with setting up
    a connection to the AlgoBulls platform, querying all available strategies in your
    account, and fetching details of the required strategy class; that is, `StrategyEMARegularOrder`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，你将从 AlgoBulls 平台上的你的账户中获取 `StrategyEMARegularOrder` 策略类。这个配方从建立到 AlgoBulls
    平台的连接开始，查询你的账户中的所有可用策略，并获取所需策略类 `StrategyEMARegularOrder` 的详细信息。
- en: Make sure you have gone through the first six recipes of [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml), *Algorithmic
    Trading Strategies – Coding Step by Step*, to get a complete picture of the strategy
    class we will be using; that is, `StrategyEMARegularOrder`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经学习了[第 8 章](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml)中的前六个配方，*算法交易策略-逐步编码*，以完全了解我们将使用的策略类；即
    `StrategyEMARegularOrder`。
- en: How to do it…
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'We execute the following steps for this recipe:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对此配方执行以下步骤：
- en: 'Import the necessary modules:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入所需模块：
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create a new AlgoBulls connection object:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 AlgoBulls 连接对象：
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Fetch the authorization URL:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取授权 URL：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We get the following output:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了以下输出：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Log into the preceding link with your AlgoBulls credentials, fetch your token,
    and set it here (refer to *Appendix II* for more details):'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你的 AlgoBulls 凭证登录上述链接，获取你的令牌，并在此处设置它（有关更多详细信息，请参阅 *附录 II*）：
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Fetch and display all the strategies you have created and uploaded so far:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取并显示到目前为止创建和上传的所有策略：
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We get the following output. Your output may differ (make sure you have followed
    the recipes in [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml), *Algorithmic
    Trading Strategies – Coding Step by Step*, to get a similar output):'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了以下输出。你的输出可能会有所不同（确保你已经按照[第 8 章](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml)中的配方操作，以获得类似的输出）：
- en: '![](img/4197d895-3742-4db6-aa0d-b5caac9f4a4e.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4197d895-3742-4db6-aa0d-b5caac9f4a4e.png)'
- en: 'Fetch and display the strategy code of the first strategy:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取并显示第一个策略的策略代码：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We get the following output (your output may differ):'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了以下输出（你的输出可能会有所不同）：
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Before real trading your strategy, you can inspect your strategy to ensure
    you have the right strategy:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在实际交易策略之前，你可以检查你的策略，以确保你有正确的策略：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We got the following output:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了以下输出：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The complete output is not shown here. Please visit the following link to read
    the complete output, at [https://github.com/algobulls/pyalgostrategypool/blob/master/pyalgostrategypool/strategy_ema_regular_order.py](https://github.com/algobulls/pyalgostrategypool/blob/master/pyalgostrategypool/strategy_ema_regular_order.py).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这里未显示完整的输出。请访问以下链接以阅读完整的输出，网址为[https://github.com/algobulls/pyalgostrategypool/blob/master/pyalgostrategypool/strategy_ema_regular_order.py](https://github.com/algobulls/pyalgostrategypool/blob/master/pyalgostrategypool/strategy_ema_regular_order.py)。
- en: How it works…
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: You import the necessary modules in *step 1*. In *step 2*, an instance of the
    `AlgoBullsConnection` class is created, named `algobulls_connection`. In *step
    3*, you get the authorization URL using the `get_authorization_url()` method of
    the `algobulls_connection` object. This prints the authorization URL. You should
    visit this URL from your web browser to sign into the AlgoBulls platform and fetch
    your developer access token. (You can find more details, along with screenshots,
    in *Appendix II* on fetching developer access tokens from the AlgoBulls platform.)
    You copy the access token and set it in *step 4* using the `set_access_token()`
    method of `algobulls_connection`. If the token is accepted, a successful connection
    is set up with the AlgoBulls platform.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你在 *第 1 步* 中导入了所需的模块。在 *第 2 步* 中，创建了一个名为 `algobulls_connection` 的 `AlgoBullsConnection`
    类的实例。在 *第 3 步* 中，使用 `algobulls_connection` 对象的 `get_authorization_url()` 方法获取授权
    URL。这将打印授权 URL。你应该从 web 浏览器访问此 URL，以登录 AlgoBulls 平台并获取你的开发者访问令牌。（你可以在 *附录 II*
    中找到有关从 AlgoBulls 平台获取开发者访问令牌的更多详细信息和截图。）在 *第 4 步* 中，使用 `algobulls_connection`
    的 `set_access_token()` 方法设置访问令牌。如果令牌被接受，则与 AlgoBulls 平台建立成功的连接。
- en: In *step 5*, you fetch all the strategies you have created and uploaded on the
    AlgoBulls platform so far. You use the `get_all_strategies()` method for this
    step and assign it to a new variable, `all_strategies`. This variable is a `pandas.DataFrame`
    object with `strategyCode` and `strategyName` columns. This table holds information
    on the strategy code and strategy names you have uploaded previously. If you followed
    the *EMA-Regular-Order strategy – uploading the strategy on the AlgoBulls trading
    platform* recipe from [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml),
    *Algorithmic Trading Strategies – Coding Step by Step*, you will find a strategy
    called **EMA regular order strategy**. In *step 6*, you assign the strategy code
    of the strategy, **EMA regular order strategy**, to a new variable called `strategy_code1`.
    The strategy code is shown in the output of this step. This strategy code is unique
    for every strategy on the AlgoBulls platform.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第 5 步*中，您获取到目前在 AlgoBulls 平台上创建并上传的所有策略。您使用 `get_all_strategies()` 方法进行此步骤，并将其赋值给一个新变量
    `all_strategies`。这个变量是一个 `pandas.DataFrame` 对象，具有 `strategyCode` 和 `strategyName`
    列。此表包含您先前上传的策略代码和策略名称的信息。如果您遵循了 [第 8 章](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml)
    的 *EMA-Regular-Order strategy – uploading the strategy on the AlgoBulls trading
    platform* 配方，*Algorithmic Trading Strategies – Coding Step by Step*，您将会找到一种名为
    **EMA regular order strategy** 的策略。在*第 6 步*中，您将 **EMA regular order strategy**
    策略的策略代码分配给一个新变量 `strategy_code1`。此步骤的输出中显示策略代码。这个策略代码对于 AlgoBulls 平台上的每个策略都是唯一的。
- en: Finally, in *step 7*, you ensure that the strategy being referred to by `strategy_code1`
    is indeed the one you uploaded earlier (in the *EMA-Regular-Order strategy – uploading
    the strategy on the AlgoBulls trading platform* recipe in [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml), *Algorithmic
    Trading Strategies – Coding Step by Step*). You use the `get_strategy_details()`
    method of the `algobulls_connection` object to inspect the strategy. This method
    takes strategy code as an argument. You pass `strategy_code1` here. This method
    returns the entire class code as a string. You assign it to a new variable, `strategy_details1`,
    and display it.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在*第 7 步*中，您确保被 `strategy_code1` 引用的策略确实是您之前上传的那个（在 *EMA-Regular-Order strategy
    – uploading the strategy on the AlgoBulls trading platform* 配方中，在 [第 8 章](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml)，*Algorithmic
    Trading Strategies – Coding Step by Step*)。您使用 `algobulls_connection` 对象的 `get_strategy_details()`
    方法来检查策略。此方法将策略代码作为参数。您在这里传递 `strategy_code1`。此方法将整个类代码作为字符串返回。您将其分配给一个新变量 `strategy_details1`
    并显示它。
- en: If, you would like to change the class code being referred to by `strategy_code1`,
    as shown in *step 7*, please refer to *There's more…* section of the *EMA-Regular-Order
    strategy – uploading the strategy on the AlgoBulls trading platform* recipe in
    [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml), *Algorithmic Trading
    Strategies – Coding Step by Step*.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想更改由 `strategy_code1` 引用的类代码，如*第 7 步*所示，请参考 [第 8 章](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml)
    的 *EMA-Regular-Order strategy – uploading the strategy on the AlgoBulls trading
    platform* 配方中的 *There's more…* 部分，*Algorithmic Trading Strategies – Coding Step
    by Step*。
- en: EMA–Regular–Order strategy – real trading the strategy
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: EMA–Regular–Order strategy – real trading the strategy
- en: In this recipe, you will perform real trading on the **EMA-Regular-Order strategy**.
    You must have fetched this strategy from your account on the AlgoBulls platform
    in the preceding recipe of this chapter. You will leverage the real trading functionality
    facilitated by `pyalgotrading` for this recipe, which, in turn, submits a real
    trading job on the AlgoBulls platform.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，您将在**EMA-Regular-Order strategy**上执行真实交易。您必须在本章的前一步骤中从 AlgoBulls 平台上的您的账户中提取此策略。您将在此配方中利用
    `pyalgotrading` 提供的实际交易功能，这将在 AlgoBulls 平台上提交一个真实交易任务。
- en: 'Once submitted, real trading will be run by the AlgoBulls real trading engine.
    You can query its status any time to find out about the state of the real trading
    job. The job goes through the following states, in the given order:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦提交，AlgoBulls 实际交易引擎将运行真实交易。您可以随时查询其状态以了解真实交易工作的状态。该任务按给定的顺序经历以下状态：
- en: '`STARTING` (intermediate state)'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`STARTING`（中间状态）'
- en: '`STARTED` (stable state)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`STARTED`（稳定状态）'
- en: '`STOPPING` (intermediate state)'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`STOPPING`（中间状态）'
- en: '`STOPPED` (stable state)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`STOPPED`（稳定状态）'
- en: On submitting a job, it starts with an intermediate state, `STARTING`. In this
    state, the AlgoBulls real trading engine fetches the strategy and gets the execution
    environment ready, which may take a couple of minutes. Once done, the job moves
    to the `STARTED` state. The real trading strategy is implemented in this stage.
    Here, it stays as long as it takes for real trading to complete. Once done, the
    job moves to an intermediate state, `STOPPING`. In this state, the AlgoBulls real
    trading engine cleans up the resources that have been allocated for this job,
    which usually takes less than a minute. Finally, the job moves to the `STOPPED` state.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 提交作业后，它会以中间状态 `STARTING` 开始。在此状态下，AlgoBulls 真实交易引擎获取策略并准备执行环境，这可能需要几分钟。一旦完成，作业就会转移到
    `STARTED` 状态。真实交易策略是在此阶段实施的。在此阶段，它会停留，直到真实交易完成。完成后，作业会转移到中间状态 `STOPPING`。在此状态下，AlgoBulls
    真实交易引擎会清理为此作业分配的资源，这通常需要不到一分钟。最后，作业转移到 `STOPPED` 状态。
- en: If you have already submitted a strategy real trading job, you cannot submit
    another job for the same strategy until the first job completes. This means you
    have to wait for the first job to move to the `STOPPED` state. If the first job
    is long-running and you would like to stop it immediately, you can submit a stop
    job request via `pyalgotrading`. You need to ensure the job is in the `STARTED` state
    before submitting the request.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经提交了策略真实交易作业，就不能再为同一策略提交另一个作业，直到第一个作业完成。这意味着您必须等待第一个作业转移到 `STOPPED` 状态。如果第一个作业运行时间很长，而您希望立即停止它，可以通过
    `pyalgotrading` 提交停止作业请求。在提交请求之前，您需要确保作业处于 `STARTED` 状态。
- en: 'The following state machine diagram demonstrates the various states and transitions
    of a real trading job during its lifetime on the AlgoBulls platform:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的状态机图演示了 AlgoBulls 平台上一项真实交易工作在其生命周期内的各种状态和转换：
- en: '![](img/4c0360d4-c14b-4cb0-a789-666710dcd2a4.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4c0360d4-c14b-4cb0-a789-666710dcd2a4.png)'
- en: After submitting a real trading job, you can fetch logs and reports for the
    strategy's execution in real time. The logs and reports help validate the strategy's
    performance and debug any potential issues.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 提交真实交易工作后，您可以实时获取策略执行的日志和报告。这些日志和报告有助于验证策略的性能并调试任何潜在问题。
- en: Make sure you have gone through the first six recipes of [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml), *Algorithmic
    Trading Strategies – Coding Step by Step*, to get a complete picture of the strategy
    class we will be using; that is, `StrategyEMARegularORder`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您已经完成了第八章的前六个食谱，即 [第 8 章](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml) *算法交易策略
    - 逐步编码*，以全面了解我们将使用的策略类 `StrategyEMARegularORder`。
- en: Getting ready
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure the `algobulls_connection` and `strategy_code1` objects are available
    in your Python namespace. Refer to the preceding recipe to set up the `algobulls_connection`
    and `strategy_code1` objects.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 确保 `algobulls_connection` 和 `strategy_code1` 对象在您的 Python 命名空间中可用。请参阅前面的食谱设置
    `algobulls_connection` 和 `strategy_code1` 对象。
- en: How to do it…
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We execute the following steps for this recipe:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对此食谱执行以下步骤：
- en: 'Import the necessary modules:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入必要的模块：
- en: '[PRE10]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Search for an instrument by using its trading symbol as a keyword. Assign the
    returned object to `instruments`:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用其交易符号作为关键字搜索工具。将返回的对象分配给 `instruments`：
- en: '[PRE11]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We got the following output (your output may differ):'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了以下输出（您的输出可能会有所不同）：
- en: '[PRE12]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Get `value` for the instrument of choice from `instruments`:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `instruments` 获取所选工具的 `value`：
- en: '[PRE13]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We got the following output:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了以下输出：
- en: '[PRE14]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Submit a real trading job for `strategy_code1`:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交 `strategy_code1` 的真实交易工作：
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We got the following output:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了以下输出：
- en: '[PRE16]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Check the status of the submitted real trading job:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查已提交真实交易工作的状态：
- en: '[PRE17]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We got the following output:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了以下输出：
- en: '[PRE18]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Check the status of the submitted job again after some time:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一段时间后再次检查已提交作业的状态：
- en: '[PRE19]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We got the following output:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了以下输出：
- en: '[PRE20]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: How it works…
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In *step 1*, you import the `time` class from the `datetime` module and all
    the constants from the `pyalgotrading.constants` module. In *step 2*, you fetch
    the instrument that you would like to real trade the strategy for, **EMA-Regular-Order
    strategy**, using the `search_instrument()` method of the `algobulls_connection`
    object. The `search_instrument()` method accepts a search string as an argument,
    which should be the trading symbol, in part or complete, of the instrument you
    are interested in. You pass `'SBIN'` here. This function returns a list containing
    details of the instruments that match the search string. There could be multiple
    instruments that have the search string in their trading symbols. In *step 3*,
    you fetch the value of the first matched instrument and assign it to a new variable,
    `instrument`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第1步*中，你从`datetime`模块中导入`time`类，并从`pyalgotrading.constants`模块导入所有常量。在*第2步*中，你使用`algobulls_connection`对象的`search_instrument()`方法获取你想要实时交易策略的工具，**EMA-Regular-Order
    策略**。`search_instrument()`方法接受一个搜索字符串作为参数，该字符串应为您感兴趣的工具的交易符号的一部分或全部。你在这里传递了`'SBIN'`。该函数返回一个包含与搜索字符串匹配的工具详情的列表。可能有多个工具的交易符号中包含搜索字符串。在*第3步*中，你获取第一个匹配工具的值，并将其赋值给一个新变量`instrument`。
- en: 'In *step 4*, you submit a real trading job using the `realtrade()` method of
    the `algobulls_connection()` object. It takes the following arguments:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第4步*中，你使用`algobulls_connection()`对象的`realtrade()`方法提交一个实时交易作业。它接受以下参数：
- en: '`strategy_code`: Strategy code of the strategy for which real trading has to
    be performed. This should be a string. You pass `strategy_code1` here.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`strategy_code`: 要执行实时交易的策略的策略代码。这应该是一个字符串。你在这里传递了`strategy_code1`。'
- en: '`start_time`: Today''s time when real trading should be started. This should
    be a `datetime.time` object. Here, you pass an object holding the value for 9:15
    hours – `time(hour=9, minute=15)`. Refer to the first recipe of this book for
    details on creating a `time` object.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`start_time`: 实时交易应该开始的今天时间。这应该是一个`datetime.time`对象。在这里，你传递了一个持有9:15小时值的对象
    - `time(hour=9, minute=15)`。有关创建`time`对象的详细信息，请参阅本书的第一篇配方。'
- en: '`end_time`: Today''s time when real trading should be performed. This object
    should hold a time value ahead of the value held by `start_time`. This should
    be a `datetime.time` instance. Here, you pass an object holding the value 15:30
    hours – `time(hour=15, minute=30)`.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`end_time`: 实时交易应该执行的今天时间。这个对象应该包含一个比`start_time`持有的值提前的时间值。这应该是一个`datetime.time`实例。在这里，你传递了一个持有15:30小时值的对象
    - `time(hour=15, minute=30)`。'
- en: '`instrument`: A financial instrument for which real trading should be run.
    Historical data will be fetched for this instrument. This should be a string.
    You pass `instrument` here.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instrument`: 应该进行实时交易的金融工具。将为此工具获取历史数据。这应该是一个字符串。你在这里传递了`instrument`。'
- en: '`lots`: Number of lots for which real trading should be performed. This should
    be an integer. The quantity is calculated by the strategy as *number of lots*
    × *lot size of the financial instrument*. You pass `1` here.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lots`: 应该进行实时交易的手数。这应该是一个整数。数量由策略计算为*手数*×*金融工具的手数*。你在这里传递了`1`。'
- en: '`strategy_parameters`: Parameter names and values expected by the strategy.
    This should be a dictionary, with `parameter-name` and `parameter-value` as key-value
    pairs. You pass the following parameters here:'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`strategy_parameters`: 策略期望的参数名称和值。这应该是一个字典，带有`parameter-name`和`parameter-value`作为键值对。你在这里传递了以下参数：'
- en: '`timeperiod1: 5`'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timeperiod1: 5`'
- en: '`timeperiod2: 12 `'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timeperiod2: 12 `'
- en: (Recall that the parameters for the EMA-Regular-Order strategy have been defined
    in its `__init__()` method, as shown in the first recipe of [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml), *Algorithmic
    Trading Strategies – Coding Step by Step*).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: （回想一下，EMA-Regular-Order 策略的参数已经在其`__init__()`方法中定义，如[第8章](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml)的第一篇配方所示，*逐步编码的算法交易策略*）。
- en: '`candle_interval`: The candle interval for the historical data being fetched
    for real trading. This should be an enum of the `CandleInterval` type. You pass
    `CandleInterval.MINUTES_15` here. (The `CandleInterval` enum provides various
    enums for candle intervals, some of which are `MINUTE_1`, `MINUTES_3` , `MINUTES_5`,
    `MINUTES_10`, `MINUTES_15`, `MINUTES_30`, `HOUR`, and `DAY`.)'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`candle_interval`: 用于实时交易获取历史数据的蜡烛间隔。这应该是`CandleInterval`类型的枚举。你在这里传递了`CandleInterval.MINUTES_15`。（`CandleInterval`枚举提供各种蜡烛间隔的枚举，其中一些是`MINUTE_1`、`MINUTES_3`、`MINUTES_5`、`MINUTES_10`、`MINUTES_15`、`MINUTES_30`、`HOUR`和`DAY`。）'
- en: If the job submission is successful, you will see `Success` messages printed
    by the `realtrade()` function.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果作业提交成功，您将看到由`realtrade()`函数打印的`Success`消息。
- en: Once a job has been submitted, it takes a while to start. After starting, it
    may take some time to finish, depending on the duration of real trading, as specified
    using the `start_time` and `end_time` arguments. Usually, real trading is run
    for the entire trading day, which means the job would be running for 6-8 hours.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦作业被提交，启动需要一段时间。启动后，完成可能需要一些时间，这取决于实际交易的持续时间，该持续时间使用`start_time`和`end_time`参数指定。通常，实际交易运行整个交易日，这意味着作业将运行
    6-8 小时。
- en: In *step 5*, you fetch the job's status using the `get_realtrading_job_status()`
    method of the `algobulls_connection` object. You pass `strategy_code1` as the
    argument here. This method returns a dictionary with a single key-value pair –
    the *data* and the *job* status. If you query the status immediately after placing
    the job, you get `'STARTING'` as the status. In *step 6*, you query the status
    again after some time, and if the job starts, you get a status of `'STARTED'`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 5*中，您使用`algobulls_connection`对象的`get_realtrading_job_status()`方法获取作业的状态。在这里将`strategy_code1`作为参数传递。此方法返回一个具有单个键值对
    - *data* 和 *job* 状态的字典。如果在放置作业后立即查询状态，则会得到`'STARTING'`作为状态。在*步骤 6*中，您再次查询状态，如果作业启动，您将获得`'STARTED'`的状态。
- en: A successful submission implies that the minimum inputs needed to real trade
    a strategy have been passed in the required format. However, this does not ensure
    that the strategy will run without errors. The strategy's execution may still
    run into errors during real trading. To debug execution issues, you would need
    to fetch the output logs, which will be explained in the next recipe. Possible
    reasons for errors could be either bugs in the strategy class' Python code or
    that an incomplete `strategy_parameters` dictionary has been passed to the `realtrade()`
    function.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 成功提交意味着已经以所需格式传递了实际交易策略所需的最小输入。但是，这并不保证策略在实际交易中不会出现错误。策略的执行仍可能在实际交易过程中遇到错误。要调试执行问题，您需要获取输出日志，这将在下一个示例中进行说明。错误可能的原因可能是策略类
    Python 代码中的错误或未完整传递到 `realtrade()` 函数的 `strategy_parameters` 字典。
- en: There's more…
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容…
- en: 'If a job is running for a long time and you would like to stop it before its
    completion, you can use the `stop_realtrading_job()` method of the `algobulls_connection`
    object. This method accepts strategy code as an argument. You pass `strategy_code1`
    here. This method submits a stop request to the AlgoBulls real trading engine.
    If the request is accepted, you will see a `Success` message here:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果作业运行时间很长，您想在其完成之前停止它，您可以使用`algobulls_connection`对象的`stop_realtrading_job()`方法。此方法接受策略代码作为参数。在这里传递`strategy_code1`。此方法向
    AlgoBulls 实时交易引擎提交停止请求。如果请求被接受，您将在此处看到一个`Success`消息：
- en: '[PRE21]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'If you query the status after submitting the stop request, you''ll get `''STOPPING''` as
    the status:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在提交停止请求后查询状态，您将得到`'STOPPING'`作为状态：
- en: '[PRE22]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'If you query the status again after some time, and if the job has stopped,
    you''ll get `''STOPPED''` as the status:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一段时间后再次查询状态，并且作业已停止，您将得到`'STOPPED'`作为状态：
- en: '[PRE23]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: EMA–Regular–Order strategy – fetching real trading logs in real time
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: EMA–Regular–Order 策略 – 实时获取真实交易日志
- en: After submitting a real trading job on the AlgoBulls platform, the AlgoBulls
    real trading engine starts executing the strategy. During its execution, every
    event that occurs and the decisions that are made by the AlgoBulls real trading
    engine are recorded with exact timestamps in the form of textual logs.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在 AlgoBulls 平台上提交实际交易任务后，AlgoBulls 实时交易引擎开始执行策略。在执行过程中，AlgoBulls 实时交易引擎发生的每个事件和所做的决定都以精确的时间戳形式记录在文本日志中。
- en: Examples of recorded activities include the given strategy config, every new
    candle generated at regular intervals, trades punched by your strategy, the entry
    and exit of positions created by these trades, waits for new candles, and so on.
    These logs are quintessential when validating the strategy and debugging behavior
    or performance issues that are frequently encountered while developing a strategy.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 记录活动的示例包括给定的策略配置，定期生成的每个新蜡烛，您的策略执行的交易，由这些交易创建的仓位的进入和退出，等待新蜡烛等等。在验证策略并调试在开发策略时经常遇到的行为或性能问题时，这些日志是必不可少的。
- en: In this recipe, you will fetch real trading logs for your strategy. The logs
    start coming up as soon as your submitted real trading job reaches the `'STARTED'`
    state (refer to the preceding recipe for more information on the states of a real
    trading job). The AlgoBulls platform allows you to fetch logs in real time, even
    while the real trading job is still going on. You can get insights into the strategy's
    execution without having to wait for the real trading job to complete. This is
    helpful as real trading jobs are usually long-running. The `pyalgotrading` package
    provides a simple method we can use to fetch the execution logs for a given strategy.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，您将为您的策略获取真实的交易日志。日志会在您提交的真实交易作业达到 `'STARTED'` 状态后立即开始出现（有关真实交易作业状态的更多信息，请参阅上一篇配方）。AlgoBulls
    平台允许您实时获取日志，即使真实交易作业仍在进行中。您可以在无需等待真实交易作业完成的情况下深入了解策略的执行情况。这对于真实交易作业通常是长时间运行的情况非常有帮助。`pyalgotrading`
    包提供了一个简单的方法，我们可以用来获取给定策略的执行日志。
- en: Make sure you have gone through the first six recipes of [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml),
    *Algorithmic Trading Strategies – Coding Step by Step*, to get a complete picture
    of the strategy class we will be using; that is, `StrategyEMARegularOrder`.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您已经熟悉了 [第 8 章](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml) 的前六个配方，*算法交易策略
    - 逐步编码*，以全面了解我们将使用的策略类；即，`StrategyEMARegularOrder`。
- en: Getting ready
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Make sure the `algobulls_connection` and `strategy_code1` objects are available
    in your Python namespace. Refer to the first recipe of this chapter to set up
    the `algobulls_connection` and `strategy_code1` objects.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您的 Python 命名空间中有 `algobulls_connection` 和 `strategy_code1` 对象。参考本章的第一个配方设置
    `algobulls_connection` 和 `strategy_code1` 对象。
- en: How to do it…
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Execute the following steps to complete this recipe:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤完成此配方：
- en: 'Fetch the real trading execution logs for `strategy_code1`:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取 `strategy_code1` 的真实交易执行日志：
- en: '[PRE24]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We got the following output (your output may differ):'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了以下输出（您的输出可能有所不同）：
- en: '[PRE25]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Fetch the real trading execution logs for `strategy_code1` again after some
    time:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一段时间后再次获取 `strategy_code1` 的真实交易执行日志：
- en: '[PRE26]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We got the following output (your output may differ):'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了以下输出（您的输出可能有所不同）：
- en: '[PRE27]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The complete output is not shown here. Please visit the following link to read
    the complete output: [https://github.com/algobulls/pyalgostrategypool/blob/master/pyalgostrategypool/sample/realtrading/strategy_ema_regular_order/logs.txt](https://github.com/algobulls/pyalgostrategypool/blob/master/pyalgostrategypool/sample/realtrading/strategy_ema_regular_order/logs.txt).'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这里未显示完整输出。请访问以下链接以阅读完整输出：[https://github.com/algobulls/pyalgostrategypool/blob/master/pyalgostrategypool/sample/realtrading/strategy_ema_regular_order/logs.txt](https://github.com/algobulls/pyalgostrategypool/blob/master/pyalgostrategypool/sample/realtrading/strategy_ema_regular_order/logs.txt)。
- en: How it works…
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: In *step 1*, you use the `get_realtrading_logs()` method of the `algobulls_connection`
    object to fetch the strategy real trading logs in real time. This method accepts
    strategy code as an argument. You pass `strategy_code1` here. The return data
    is a string. If you try this step immediately after submitting the job, you get
    a string, which says the logs are not ready yet (`[2020-07-09 09:12:25] Logs not
    available yet. Please retry in sometime.`). This happens if the real trading job
    is in the `'STARTING'` state.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *第一步* 中，您使用 `algobulls_connection` 对象的 `get_realtrading_logs()` 方法实时获取策略的真实交易日志。此方法接受策略代码作为参数。在这里传递了
    `strategy_code1`。返回的数据是一个字符串。如果您在提交作业后立即尝试此步骤，您会得到一个字符串，其中说日志尚未准备好（`[2020-07-09
    09:12:25] Logs not available yet. Please retry in sometime.`）。如果真实交易作业处于 `'STARTING'`
    状态，就会发生这种情况。
- en: In *step 2*, you fetch the logs again after some time. If the job is out of
    the `'STARTING'` state, you start getting your strategy execution logs. You get
    all the real trading logs every time you call the `get_realtrading_logs()` function.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *第二步* 中，您再次在一段时间后获取日志。如果作业不在 `'STARTING'` 状态，则开始获取您的策略执行日志。每次调用 `get_realtrading_logs()`
    函数时，您都会获得所有真实交易日志。
- en: There's more...
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: Once the real trading job moves to the `'STOPPED'` state, no new logs are generated.
    You can fetch the complete logs any time before you submit the next real trading
    job for the same strategy. If a new real trading job is submitted (for the same
    strategy), these logs will no longer be accessible via the `get_realtrading_logs()`
    method. You can save the fetched logs to a file if you'd like to refer to them
    at a later date.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦真实交易任务转移到 `'STOPPED'` 状态，就不会生成新的日志。在提交下一个相同策略的真实交易任务之前，你可以随时获取完整的日志。如果提交了新的真实交易任务（相同的策略），则无法通过
    `get_realtrading_logs()` 方法再次访问这些日志。如果需要，你可以将获取的日志保存到文件中，以便日后参考。
- en: EMA–Regular–Order strategy – fetching a real trading report – profit and loss
    table
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: EMA–Regular–Order 策略 – 获取真实交易报告 – 损益表
- en: After submitting a real trading job on the AlgoBulls Platform, the AlgoBulls
    real trading engine starts executing the strategy. During its execution, along
    with the logs, the AlgoBulls real trading engine also generates a P&L table in
    real time. This table holds information on every trade punched in by the strategy.
    It also contains details on the mappings between entry and exit orders, the trade
    P&L, and the cumulative P&L, sorted chronologically, with the latest order first.
    This table gives us insight into the strategy's overall performance with the help
    of individual and cumulative P&L numbers. The entry-exit order mapping also helps
    validate the strategy's behavior.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在 AlgoBulls 平台上提交真实交易任务后，AlgoBulls 实时交易引擎开始执行策略。在执行过程中，除了日志外，AlgoBulls 实时交易引擎还实时生成了一张损益表。该表包含了策略输入的每一笔交易的信息。它还包含了入场和出场订单之间的映射细节、交易损益以及累积损益，按时间顺序排序，最新的订单排在前面。通过这张表，我们可以通过单个和累积损益数字了解策略的整体表现。入场-出场订单映射也有助于验证策略的行为。
- en: In this recipe, you will fetch the P&L table report for your strategy. This
    report is available as soon as the first trade is punched in by your strategy
    after you submit a real trading job. The AlgoBulls platform allows you to fetch
    the P&L table in real time, even while the real trading job is still going on.
    You can get insights into the strategy's performance without having to wait for
    the real trading job to complete. This is helpful as real trading jobs are usually
    long-running. The `pyalgotrading` package provides a simple method we can use
    to fetch the P&L table for a given strategy.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，你将获取策略的损益表报告。在提交真实交易任务后，只要你的策略打入了第一笔交易，这份报告就可以获得。AlgoBulls 平台允许你实时获取损益表，即使真实交易任务仍在进行中。你可以在不必等待真实交易任务完成的情况下，了解策略的表现。这对于长时间运行的真实交易任务非常有帮助。`pyalgotrading`
    包提供了一个简单的方法，我们可以用它来获取给定策略的损益表。
- en: Make sure you have gone through the first six recipes of [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml),
    *Algorithmic Trading Strategies – Coding Step by Step*, to get a complete picture
    of the strategy class we will be using; that is, `StrategyEMARegularOrder`.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经完成了 [第8章](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml) 的前六个示例，*算法交易策略 –
    逐步编码*，以完整了解我们将使用的策略类；即 `StrategyEMARegularOrder`。
- en: Getting ready
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure the `algobulls_connection` and `strategy_code1` objects are available
    in your Python namespace. Refer to the first recipe of this chapter to set up
    the `algobulls_connection` and `strategy_code1` objects.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 确保 `algobulls_connection` 和 `strategy_code1` 对象在你的 Python 命名空间中可用。请参阅本章第一个示例来设置
    `algobulls_connection` 和 `strategy_code1` 对象。
- en: How to do it…
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤…
- en: 'Fetch the real trading P&L report for `strategy_code1`:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 获取 `strategy_code1` 的真实交易损益报告：
- en: '[PRE28]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We get the following output. Your output may differ (note that the following
    output has been split into multiple tables for representation purposes. You will
    see a single wide table in your Jupyter Notebook):'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出。你的输出可能有所不同（注意以下输出已分成多个表格以供表示目的。在 Jupyter Notebook 中，你会看到一个宽表）：
- en: '![](img/c036f082-09ea-4980-98cc-78befbfd7668.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c036f082-09ea-4980-98cc-78befbfd7668.png)'
- en: How it works…
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'In this recipe, you use the `get_realtrading_report_pnl_table()` method of
    the `algobulls_connection` object to fetch the real trading P&L table in real
    time. This method accepts strategy code as an argument. You pass `strategy_code1`
    here. The return data is a `pandas.DataFrame` object with multiple columns, described
    as follows:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，你可以使用 `algobulls_connection` 对象的 `get_realtrading_report_pnl_table()`
    方法实时获取真实交易损益表。该方法接受策略代码作为参数。你在这里传递了 `strategy_code1`。返回的数据是一个 `pandas.DataFrame`
    对象，具有多个列，描述如下：
- en: '`instrument`: Financial instrument for which the trade was entered.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instrument`: 进行交易的金融工具。'
- en: '`entry_timestamp`: The timestamp at which the entry order was placed. (Note
    that it may remain in the `''OPEN''` state for a while before it goes to the `''COMPLETE''`
    state.)'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`entry_timestamp`: 下单进入的时间戳。（注意，在进入 `''COMPLETE''` 状态之前，可能会保持 `''OPEN''` 状态一段时间。）'
- en: '`entry_transaction_type`: Entry order transaction type (either `BUY` or `SELL`).'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`entry_transaction_type`: 进入订单的交易类型（可以是 `BUY` 或 `SELL`）。'
- en: '`entry_quantity`: Entry order quantity.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`entry_quantity`: 进入订单数量。'
- en: '`entry_price`: Price at which the entry order gets executed and goes to the `''COMPLETE''`
    state.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`entry_price`: 进入订单执行并进入 `''COMPLETE''` 状态的价格。'
- en: '`exit_timestamp`: The timestamp at which the exit order was placed. (Note that
    it may remain in the `''OPEN''` state for a while before it goes to the `''COMPLETE''`
    state.)'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exit_timestamp`: 下单退出的时间戳。（注意，在进入 `''COMPLETE''` 状态之前，可能会保持 `''OPEN''` 状态一段时间。）'
- en: '`exit_transaction_type`: Exit order transaction type (either `BUY` or `SELL`).'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exit_transaction_type`: 退出订单的交易类型（可以是 `BUY` 或 `SELL`）。'
- en: '`exit_quantity`: Exit order quantity.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exit_quantity`: 退出订单数量。'
- en: '`exit_price`: Price at which the exit order gets executed and goes to the `''COMPLETE''`
    state.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exit_price`: 退出订单执行并进入 `''COMPLETE''` 状态的价格。'
- en: '`pnl_absolute`: Difference between the exit order execution price and the entry
    order execution price. Mathematically, this is (*exit_price* - *entry_price*)**exit_quantity* for
    a long trade and (*entry_price* - *exit_price*)**exit_quantity* for a short trade.
    A positive value would imply that the trade is a profit-making trade. A negative
    value would imply that the trade is a loss-making trade.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pnl_absolute`: 退出订单执行价格与进入订单执行价格之间的差异。在数学上，对于多头交易，这是 (*exit_price* - *entry_price*)**exit_quantity*，而对于空头交易，这是
    (*entry_price* - *exit_price*)**exit_quantity*。正值意味着交易是盈利的，负值意味着交易是亏损的。'
- en: '`pnl_percentage`: Percentage of profit or loss with respect to the entry price.
    Mathematically, this is *pnl_absolute* / *entry_price* / *exit_quantity* x *100*.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pnl_percentage`: 相对于进入价格的利润或损失百分比。在数学上，这是 *pnl_absolute* / *entry_price* /
    *exit_quantity* × *100*。'
- en: '`pnl_cumulative_absolute`: Cumulative profit or loss. Mathematically, this
    is the sum of all the `pnl_absolute` values of the previous trades. This number
    gives us direct insight into the strategy''s performance against the simulation
    time.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pnl_cumulative_absolute`: 累积利润或损失。在数学上，这是之前交易的所有 `pnl_absolute` 值的总和。此数字直接反映了策略相对于模拟时间的表现。'
- en: '`pnl_cumulative_percentage`: Percentage of cumulative profit or loss with respect
    to the entry price. Mathematically, this is *pnl_cumulative* / *entry_price /
    exit_quantity* × *100*.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pnl_cumulative_percentage`: 相对于进入价格的累积利润或损失的百分比。在数学上，这是 *pnl_cumulative* /
    *entry_price / exit_quantity* × *100*。'
- en: There's more...
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Once the real trading job moves to the `'STOPPED'` state, the P&L table report
    will not update anymore. You can fetch the complete P&L report any time before
    you submit the next real trading job for the same strategy. If a new real trading
    job is submitted (for the same strategy), this report will no longer be accessible
    via the `get_realtrading_report_pnl_table()` method. You can save the fetched
    report to a `.csv` file if you'd like to refer to it at a later date.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦真实交易作业进入 `'STOPPED'` 状态，损益表报告将不再更新。您可以在提交同一策略的下一个真实交易作业之前随时获取完整的损益报告。如果提交了新的真实交易作业（对于相同的策略），则无法通过
    `get_realtrading_report_pnl_table()` 方法再访问此报告。如果您希望以后参考，可以将获取的报告保存为 `.csv` 文件。
- en: EMA–Regular–Order strategy – fetching a real trading report – statistics table
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: EMA–Regular–Order 策略 – 获取真实交易报告 – 统计表
- en: After submitting a real trading job on the AlgoBulls platform, the AlgoBulls
    real trading engine starts executing the strategy. During its execution, along
    with the logs and P&L table, the AlgoBulls real trading engine also generates
    a summary from the P&L table in real time. This summary is a table of statistics
    containing various statistical numbers, such as `Net P&L` (absolute and percentage),
    `Max Drawdown` (absolute and percentage), count of total trades, winning trades,
    losing trades, long trades and short trades, the maximum gain and minimum gain
    (or maximum loss), and the average profit per winning and losing trade. This table
    gives an instant overview of the strategy's overall performance.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在 AlgoBulls 平台上提交了一个实际交易任务后，AlgoBulls 实际交易引擎开始执行该策略。在执行过程中，除了日志和 P&L 表之外，AlgoBulls
    实际交易引擎还实时从 P&L 表中生成一个摘要。此摘要是一个包含各种统计数字的统计表，例如 `净盈亏`（绝对值和百分比）、`最大回撤`（绝对值和百分比）、总交易次数、盈利交易次数、亏损交易次数、多头交易和空头交易次数、最大利润和最小利润（或最大损失），以及每次盈利和亏损交易的平均利润。该表提供了策略整体表现的即时概述。
- en: In this recipe, you will fetch the statistics table report for your strategy.
    This report is available as soon as the first trade is punched in by your strategy
    after you submit a real trading job. The AlgoBulls platform allows you to fetch
    the statistics table in real time, even while the real trading job is still going
    on. You can get insights into the strategy's performance without having to wait
    for the real trading job to complete. This is helpful as real trading jobs are
    usually long-running. The `pyalgotrading` package provides a simple method we
    can use to fetch the statistics table for a given strategy.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，你将获取你的策略的统计表报告。这份报告在你提交实际交易任务后，你的策略第一笔交易被打入后即可获得。AlgoBulls 平台允许你实时获取统计表，即使实际交易任务仍在进行中。你可以在不必等待实际交易任务完成的情况下，了解策略的表现。这对于实际交易任务通常是长时间运行的情况很有帮助。`pyalgotrading`
    包提供了一个简单的方法，我们可以用来获取给定策略的统计表。
- en: Make sure you have gone through the first six recipes of [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml), *Algorithmic
    Trading Strategies – Coding Step by Step*, to get a complete picture of the strategy
    class we will be using; that is, `StrategyEMARegularOrder`.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经阅读了《第8章》的前六个配方，即《算法交易策略 - 逐步编码》，以全面了解我们将要使用的策略类别，即 `StrategyEMARegularOrder`。
- en: Getting ready
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure the `algobulls_connection` and `strategy_code1` objects are available
    in your Python namespace. Refer to the first recipe of this chapter to set up
    the `algobulls_connection` and `strategy_code1` objects.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 确保 `algobulls_connection` 和 `strategy_code1` 对象在你的 Python 命名空间中可用。参考本章的第一个配方来设置
    `algobulls_connection` 和 `strategy_code1` 对象。
- en: How to do it…
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现…
- en: 'Fetch the real trading statistics report for `strategy_code1`:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 获取 `strategy_code1` 的实际交易统计报告：
- en: '[PRE29]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We got the following output (your output may differ):'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了以下输出（你的输出可能不同）：
- en: '![](img/d55b9486-05e7-49f2-b21c-25ce31ebd828.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d55b9486-05e7-49f2-b21c-25ce31ebd828.png)'
- en: How it works…
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'In this recipe, you use the `get_realtrading_report_statistics()` method of
    the `algobulls_connection` object to fetch the real trading statistics table in
    real time. This method accepts strategy code as an argument. You pass `strategy_code1`
    here. The return data is a `pandas.DataFrame` object with two columns – `highlight_type`
    and `highlight_value` – and multiple rows. The rows are described as follows:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，你可以使用 `algobulls_connection` 对象的 `get_realtrading_report_statistics()`
    方法实时获取实际交易统计表。此方法接受策略代码作为参数。在这里你传递了 `strategy_code1`。返回的数据是一个 `pandas.DataFrame`
    对象，包含两列 - `highlight_type` 和 `highlight_value` - 以及多行。行描述如下：
- en: '`Net PnL`: The cumulative real trading P&L. This is also the `pnl_cumulative_absolute`
    value of the first entry in the P&L table.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Net PnL`: 累积实际交易盈亏。这也是 P&L 表中第一条目的 `pnl_cumulative_absolute` 值。'
- en: '`Net PnL %`: The cumulative real trading P&L percentage. This is also the `pnl_cumulative_percentage`
    value of the first entry in the P&L table.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Net PnL %`: 累积实际交易盈亏百分比。这也是 P&L 表中第一条目的 `pnl_cumulative_percentage` 值。'
- en: '`Max Drawdown`: The lowest value in the `pnl_cumulative` column of the P&L
    table. This indicates the maximum loss your strategy has encountered during the
    execution.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`最大回撤`: P&L 表中 `pnl_cumulative` 列中的最低值。这表示你的策略在执行过程中遭遇的最大损失。'
- en: '`Max Drawdown %`: Mathematically, this is *(Max Drawdown)* / *(corresponding
    entry_price) / exit_quantity* × *100*.'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`最大回撤 %`: 数学上来说，这是 *(最大回撤)* / *(相应的进入价格) / 退出数量* × *100*。'
- en: '`Number of Trades`: Total trades (entry and exit counted as one) during the
    session.'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`交易数量`：会话期间的总交易次数（入场和出场计为一次）。'
- en: '`Number of Wins`: Count of trades where the trade P&L was non-negative.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`盈利交易次数`：交易收益为非负数的交易次数。'
- en: '`Number of Losses`: Count of trades where the trade P&L was negative.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`亏损交易次数`：交易收益为负数的交易次数。'
- en: '`Number of Long Trades`: Count of trades where the entry transaction type was
    `''BUY''`.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`多头交易数量`：入场交易类型为`''BUY''`的交易数量。'
- en: '`Number of Short Trades`: Count of trades where the entry transaction type
    was `''SELL''`.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`空头交易数量`：入场交易类型为`''SELL''`的交易数量。'
- en: '`Max Gain`: P&L of the trade with the maximum P&L value among all trades.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`最大收益`：所有交易中收益最大的交易的收益和损失。'
- en: '`Min Gain`: P&L of the trade with the minimum P&L value among all trades.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`最小收益`：所有交易中收益最小的交易的收益和损失。'
- en: '`Avg. Profit per winning trade`: Mathematically, this is *(Total P&L of winning
    trades)* / *(Count of winning trades)*.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`平均每次盈利交易的利润`：从数学上讲，这是*(盈利交易的总收益)* / *(盈利交易的数量)*。'
- en: '`Avg. Profit per losing trade`: Mathematically, this is *(Total P&L of losing
    trades)* / *(Count of losing trades)*.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`平均每次亏损交易的利润`：从数学上讲，这是*(亏损交易的总收益)* / *(亏损交易的数量)*。'
- en: There's more...
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: If the statistics table is fetched while the real trading job is still running,
    the aforementioned numbers will be intermediate numbers, based on the trades completed
    until that time. The numbers may change as more trades are punched in, until the
    real trading job completes.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在真实交易作业仍在运行时获取统计表，则上述数字将是中间数字，基于截至那时完成的交易。随着更多交易被输入，数字可能会发生变化，直到真实交易作业完成。
- en: Once the real trading job moves to the `'STOPPED'` state, the statistics table
    will not change anymore. You can fetch the complete statistics table any time
    before you submit the next real trading job for the same strategy. If a new real
    trading job is submitted (for the same strategy), this table will no longer be
    accessible via the `get_realtrading_report_statistics()` method. You can save
    the fetched report table to a `.csv` file if you'd like to refer to it at a later
    date.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦真实交易作业转移到`'STOPPED'`状态，统计表将不再更改。您可以在提交下一个相同策略的真实交易作业之前随时获取完整的统计表。如果提交了新的真实交易作业（相同策略），则无法通过`get_realtrading_report_statistics()`方法访问此表。如果您希望日后参考，可以将获取的报表保存为`.csv`文件。
- en: MACD–Bracket–Order strategy – fetching the strategy
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MACD-Bracket-Order策略 - 提取策略
- en: In this recipe, you will fetch the `StrategyMACDBracketOrder` strategy class
    from your account on the AlgoBulls platform, which you must have uploaded while
    going through the last recipe in [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml), *Algorithmic
    Trading Strategies – Coding Step by Step*. This recipe starts with setting up
    a connection to the AlgoBulls platform, querying all available strategies in your
    account, and fetching details about the required strategy class; that is, `StrategyMACDBracketOrder`.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，您将从AlgoBulls平台上的帐户中提取`StrategyMACDBracketOrder`策略类，您必须在上一篇[第8章](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml)的最后一篇配方中上传。该配方开始于建立与AlgoBulls平台的连接，查询您帐户中所有可用的策略，并获取所需策略类（即`StrategyMACDBracketOrder`）的详细信息。
- en: Make sure you have gone through the last six recipes of [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml), *Algorithmic
    Trading Strategies – Coding Step by Step*, to get a complete picture of the strategy
    class we will be using; that is, `StrategyMACDBracketOrder`.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您已经阅读了[第8章](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml)中的最后六个配方，逐步了解我们将使用的策略类的完整情况，即`StrategyMACDBracketOrder`。
- en: How to do it…
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤如下：
- en: 'Execute the following steps to complete this recipe:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤完成此配方：
- en: 'Import the necessary modules:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入必要的模块：
- en: '[PRE30]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Create a new AlgoBulls connection object:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的AlgoBulls连接对象：
- en: '[PRE31]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Fetch the authorization URL:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取授权URL：
- en: '[PRE32]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We got the following output:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 我们获得了以下输出：
- en: '[PRE33]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Log into the preceding link with your AlgoBulls credentials, fetch your token,
    and set it here (refer to *Appendix II* for more details):'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的AlgoBulls凭据登录上述链接，获取您的令牌，并将其设置在此处（有关更多详细信息，请参阅*附录II*）：
- en: '[PRE34]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Fetch and display all the strategies you have created and uploaded so far:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提取并显示您迄今为止创建和上传的所有策略。
- en: '[PRE35]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'We got the following output. Your output may differ (make sure you''ve followed
    the recipes in [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml), *Algorithmic
    Trading Strategies – Coding Step by Step*, to get a similar output):'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了以下输出。你的输出可能不同（确保你已经按照[第 8 章](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml)中的配方，*逐步编码算法交易策略*，来获得类似的输出）：
- en: '![](img/b27e136e-3524-4f41-b887-664074f8d1da.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b27e136e-3524-4f41-b887-664074f8d1da.png)'
- en: 'Fetch and display the strategy code of the second strategy; that is, the MACD-Bracket-Order
    strategy:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取并显示第二个策略的策略代码；也就是 MACD-Bracket-Order 策略：
- en: '[PRE36]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'We got the following output (your output may differ):'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了以下输出（你的输出可能不同）：
- en: '[PRE37]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Before real trading your strategy, you can inspect your strategy to ensure
    you have the right strategy:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在实际交易你的策略之前，你可以检查你的策略以确保你拥有正确的策略：
- en: '[PRE38]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'We got the following output:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了以下输出：
- en: '[PRE39]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The complete output is not shown here. Please visit the following link to read
    the complete output: [https://github.com/algobulls/pyalgostrategypool/blob/master/pyalgostrategypool/strategy_macd_bracket_order.py](https://github.com/algobulls/pyalgostrategypool/blob/master/pyalgostrategypool/strategy_macd_bracket_order.py).
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的输出在此处未显示。请访问以下链接以阅读完整的输出：[https://github.com/algobulls/pyalgostrategypool/blob/master/pyalgostrategypool/strategy_macd_bracket_order.py](https://github.com/algobulls/pyalgostrategypool/blob/master/pyalgostrategypool/strategy_macd_bracket_order.py)。
- en: How it works…
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理是…
- en: You import the necessary modules in *step 1*. In *step 2*, you create an instance
    of the `AlgoBullsConnection` class, named `algobulls_connection`. In *step 3*,
    you get the authorization URL using the `get_authorization_url()` method of the
    `algobulls_connection` object. This prints the authorization URL. You should visit
    this URL from your web browser to sign into the AlgoBulls platform and fetch your
    developer access token. (You can find more details, along with screenshots, in
    *Appendix II* on fetching a developer access token from the AlgoBulls platform.)
    You copy the access token and set it in *step 4* using the `set_access_token()`
    method of `algobulls_connection`. If the token is accepted, a successful connection
    is set up with the AlgoBulls platform.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *第 1 步* 中，你导入了必要的模块。在 *第 2 步* 中，你创建了`AlgoBullsConnection`类的一个实例，命名为`algobulls_connection`。在
    *第 3 步* 中，你使用`algobulls_connection`对象的`get_authorization_url()`方法获取了授权 URL。这会打印授权
    URL。你应该从你的网络浏览器中访问这个 URL，以登录 AlgoBulls 平台并获取你的开发者访问令牌。（你可以在 *附录 II* 中找到更多详细信息和屏幕截图，关于如何从
    AlgoBulls 平台获取开发者访问令牌。）你复制访问令牌并在 *第 4 步* 中使用`algobulls_connection`的`set_access_token()`方法设置它。如果令牌被接受，就会建立与
    AlgoBulls 平台的成功连接。
- en: In *step 5*, you fetch all the strategies you have created and uploaded on the
    AlgoBulls platform so far. You use the `get_all_strategies()` method for this
    step and assign it to a new variable, `all_strategies`. This variable is a `pandas.DataFrame`
    object with `strategyCode` and `strategyName` columns. This table holds information
    on the strategy codes and the strategy names you have uploaded previously.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *第 5 步* 中，你获取了到目前为止在 AlgoBulls 平台上创建并上传的所有策略。你使用`get_all_strategies()`方法来执行此步骤，并将其分配给一个新变量，`all_strategies`。这个变量是一个`pandas.DataFrame`对象，带有`strategyCode`和`strategyName`列。这张表保存了你之前上传的策略代码和策略名称的信息。
- en: If you followed the *MACD-Bracket-Order Strategy – uploading the strategy on
    the AlgoBulls trading platform* recipe from [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml),
    *Algorithmic Trading Strategies – Coding Step by Step*, you will find a strategy
    called **MACD-Regular-Order strategy**. In *step 6*, you assign the strategy code
    of the MACD-Regular-Order strategy to a new variable called `strategy_code2`.
    The strategy code is shown in the output of this step. This strategy code is unique
    for every strategy on the AlgoBulls platform.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遵循了[第 8 章](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml)中的 *MACD-Bracket-Order
    Strategy – 将策略上传到 AlgoBulls 交易平台* 配方，*逐步编码算法交易策略*，你将找到一个名为 **MACD-Regular-Order
    strategy** 的策略。在 *第 6 步* 中，你将 MACD-Regular-Order 策略的策略代码分配给一个名为 `strategy_code2`
    的新变量。这个策略代码显示在这一步的输出中。这个策略代码对于 AlgoBulls 平台上的每个策略都是唯一的。
- en: Finally, in *step 7*, you ensure that the strategy being referred to by `strategy_code2`
    is indeed the one you uploaded earlier (in the last recipe of [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml), *Algorithmic
    Trading Strategies – Coding Step by Step*). You use the `get_strategy_details()`
    method of the `algobulls_connection` object to inspect the strategy. This method
    takes strategy code as an argument. You pass `strategy_code2` here. This method
    returns the entire class code as a string. You assign it to a new variable, `strategy_details2`,
    and display it.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在 *步骤 7* 中，您确保被 `strategy_code2` 引用的策略确实是您之前上传的那个（在[第 8 章](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml)的最后一个配方中，《算法交易策略-逐步编码》）。您使用
    `algobulls_connection` 对象的 `get_strategy_details()` 方法来检查策略。该方法以策略代码作为参数。在这里传递
    `strategy_code2`。该方法返回整个类代码作为字符串。您将其分配给一个新变量 `strategy_details2` 并显示它。
- en: If, you'd like to change the class code being referred to by `strategy_code2`,
    as shown in *step 7*, please refer to the *There's more…* section of the last
    recipe in [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml), *Algorithmic
    Trading Strategies – Coding Step by Step*.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要更改被 `strategy_code2` 引用的类代码，如 *步骤 7* 所示，请参考 [第 8 章](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml)
    的最后一个配方中的*还有更多……*部分，《算法交易策略-逐步编码》。
- en: MACD–Bracket–Order strategy – real trading the strategy
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MACD–Bracket–Order 策略-实际交易该策略
- en: In this recipe, you will perform real trading on the MACD-Bracket-Order strategy.
    You must have fetched this strategy from your account on the AlgoBulls platform
    in the preceding recipe of this chapter. You will leverage the real trading functionality
    facilitated by `pyalgotrading` for this recipe, which, in turn, submits a real
    trading job on the AlgoBulls platform.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，您将在 MACD-Bracket-Order 策略上执行实际交易。您必须在本章的前一个配方中从 AlgoBulls 平台上的您的帐户中获取此策略。您将利用由
    `pyalgotrading` 提供的实际交易功能来执行此配方，该功能又会在 AlgoBulls 平台上提交一个实际交易作业。
- en: 'Once submitted, real trading will be run by the AlgoBulls real trading engine.
    You can query the status anytime to find out the state of the real trading job.
    The job goes through the following states, in the given order:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 提交后，实际交易将由 AlgoBulls 实时交易引擎运行。您可以随时查询状态以了解实际交易作业的状态。作业按给定顺序经历以下状态：
- en: '`STARTING` (intermediate state)'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`STARTING`（中间状态）'
- en: '`STARTED` (stable state)'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`STARTED`（稳定状态）'
- en: '`STOPPING` (intermediate state)'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`STOPPING`（中间状态）'
- en: '`STOPPED` (stable state)'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`STOPPED`（稳定状态）'
- en: On submitting a job, it starts with an intermediate state, `'STARTING'`. In
    this state, the AlgoBulls real trading engine fetches the strategy and get the
    execution environment ready, which may take a couple of minutes. Once done, the
    job moves to the `'STARTED'` state. Strategy real trading happens in this stage.
    Here, it stays as long as it takes for real trading to complete. Once done, the
    job moves to an intermediate state, `'STOPPING'`. In this state, the AlgoBulls
    real trading engine cleans up the resources allocated for this job, which usually
    takes less than a minute. Finally, the job moves to the `'STOPPED'` state.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在提交作业时，它以一个中间状态 `'STARTING'` 开始。在这种状态下，AlgoBulls 实时交易引擎获取策略并准备执行环境，这可能需要几分钟时间。完成后，作业将移至
    `'STARTED'` 状态。策略实时交易发生在此阶段。在此阶段，它会停留直到实际交易完成。完成后，作业将移至一个中间状态 `'STOPPING'`。在此状态下，AlgoBulls
    实时交易引擎清理为此作业分配的资源，通常需要不到一分钟的时间。最后，作业移至 `'STOPPED'` 状态。
- en: If you have already submitted a real trading job for a strategy, you cannot
    submit another job for the same strategy until the first job completes. This means
    you have to wait for the first job to move to the `'STOPPED'` state. If the first
    job is long-running and you would like to stop it immediately, you can submit
    a stop job request via `pyalgotrading`. You need to ensure the job is in the `'STARTED'`
    state before submitting the request.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经为某个策略提交了实际交易作业，则在第一个作业完成之前，不能为相同的策略提交另一个作业。这意味着您必须等待第一个作业移至 `'STOPPED'`
    状态。如果第一个作业运行时间很长，并且您想立即停止它，您可以通过 `pyalgotrading` 提交一个停止作业请求。在提交请求之前，您需要确保作业处于
    `'STARTED'` 状态。
- en: After submitting a real trading job, you can fetch logs and reports for the
    strategy execution in real time. These logs and reports help validate the strategy's
    performance and debug any potential issues.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在提交实际交易作业后，您可以实时获取策略执行的日志和报告。这些日志和报告有助于验证策略的性能并调试任何潜在问题。
- en: You can refer to the second recipe of this chapter for the state machine diagram
    of a real trading job. It demonstrates the various states and transitions of a
    real trading job during its lifetime on the AlgoBulls platform.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以参考本章的第二个示例，了解AlgoBulls平台上实际交易工作的状态机图。它展示了实际交易工作在其整个生命周期中的各种状态和转换。
- en: Make sure you have gone through the last six recipes of [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml), *Algorithmic
    Trading Strategies – Coding Step by Step*, to get a complete picture of the strategy
    class we will be using; that is, `StrategyMACDBracketOrder`.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您已经阅读了本书的[第8章](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml)的最后六个示例，逐步了解我们将使用的策略类的完整情况;也就是`StrategyMACDBracketOrder`。
- en: Getting ready
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Make sure the `algobulls_connection` and `strategy_code2` objects are available
    in your Python namespace. Refer to the preceding recipe of this chapter to set
    up the `algobulls_connection` and `strategy_code2` objects.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 确保`algobulls_connection`和`strategy_code2`对象在您的Python命名空间中可用。参考本章的前一节设置`algobulls_connection`和`strategy_code2`对象。
- en: How to do it…
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Execute the following steps to complete this recipe:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以完成此示例：
- en: 'Import the necessary modules:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入必要的模块：
- en: '[PRE40]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Search for an instrument and use its trading symbol as a keyword. Assign the
    returned object to `instruments`:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索一个工具并使用其交易符号作为关键字。将返回的对象分配给`instruments`：
- en: '[PRE41]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'We got the following output (your output may differ):'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了以下输出（您的输出可能有所不同）：
- en: '[PRE42]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Get `value` for the instrument of choice from `instruments`:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`instruments`中获取选择的工具的`value`：
- en: '[PRE43]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'We got the following output:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了以下输出：
- en: '[PRE44]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Submit a real trading job for `strategy_code2`:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交一个用于`strategy_code2`的实际交易工作：
- en: '[PRE45]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'We got the following output:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了以下输出：
- en: '[PRE46]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Check the status of the submitted real trading job:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查已提交的实际交易工作的状态：
- en: '[PRE47]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Check the status of the submitted real trading job again after some time:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 过一段时间后再次检查已提交的实际交易工作的状态：
- en: '[PRE48]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: How it works…
  id: totrans-279
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In *step 1*, you import the `time` class from the `datetime` module and all
    the constants from the `pyalgotrading.constants` module. In *step 2*, you fetch
    the instrument that you would like to real trade the strategy for, the **MACD-Bracket-Order
    strategy**, using the `search_instrument()` method of the `algobulls_connection`
    object. The `search_instrument()` method accepts a search string as an argument,
    which should be the trading symbol, in part or complete, of the instrument you
    are interested in. You pass `'TATASTEEL'` here. This function returns a list with
    details of instruments that match the search string. There could be multiple instruments
    that could have the search string in their trading symbols. In *step 3*, you fetch
    the value of the first matched instrument and assign it to a new variable, `instrument`.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤1*中，您从`datetime`模块中导入了`time`类和`pyalgotrading.constants`模块中的所有常量。在*步骤2*中，您使用`algobulls_connection`对象的`search_instrument()`方法获取您想要为其进行实际交易的工具，**MACD-Bracket-Order策略**。`search_instrument()`方法接受一个搜索字符串作为参数，该参数应该是您感兴趣的工具的交易符号的一部分或完整内容。您在这里传递了`'TATASTEEL'`。此函数返回一个包含与搜索字符串匹配的工具详情的列表。可能有多个工具的交易符号中包含搜索字符串。在*步骤3*中，您获取第一个匹配工具的值，并将其分配给一个新变量，`instrument`。
- en: 'In *step 4*, you submit a real trading job using the `realtrade()` method of
    the `algobulls_connection()` object. It takes the following arguments:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤4*中，您使用`algobulls_connection()`对象的`realtrade()`方法提交了一个实际交易工作。它接受以下参数：
- en: '`strategy_code`: Strategy code of the strategy for which real trading has to
    be performed. This should be a string. You pass `strategy_code2` here.'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`strategy_code`：要执行实际交易的策略的策略代码。这应该是一个字符串。您在这里传递`strategy_code2`。'
- en: '`start_time`: Today''s time when real trading should be started. This should
    be a `datetime.time` object. Here, you pass an object holding the value 9:15 hours –
    `time(hour=9, minute=15)`. Refer to the first recipe of this book for details
    on creating a `datetime` object.'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`start_time`：应该开始实际交易的今天的时间。这应该是一个`datetime.time`对象。在这里，您传递了一个保存了9:15小时值的对象
    - `time(hour=9, minute=15)`。有关创建`datetime`对象的详细信息，请参阅本书的第一节。'
- en: '`end_time`: Today''s time when real trading should be performed. This object
    should hold a time value ahead of the value held by `start_time`. This should
    be a `datetime.time` instance. Here, you pass an object holding the value 15:30
    hours – `time(hour=15, minute=30)`.'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`end_time`：应该在今天进行实际交易的时间。此对象应该保存一个在`start_time`保存的值之前的时间值。这应该是一个`datetime.time`实例。在这里，您传递了一个保存了15:30小时的值的对象
    - `time(hour=15, minute=30)`。'
- en: '`instrument`: Financial instrument for which real trading should be run. Historical
    data will be fetched for this instrument. This should be a string. You pass `instrument`
    here.'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instrument`: 应该运行实际交易的金融工具。将为此工具获取历史数据。这应该是一个字符串。在这里传递`instrument`。'
- en: '`lots`: Number of lots for which real trading should be performed. This should
    be an integer. The quantity is calculated by the strategy as *number of lots*
    × *lot size of the financial instrument*. You pass `1` here.'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lots`: 应该进行实际交易的手数。这应该是一个整数。数量由策略计算为*手数*×*金融工具的手数*。在这里传递`1`。'
- en: '`strategy_parameters`: Parameter names and values expected by the strategy.
    This should be a dictionary, with `parameter-name` and `parameter-value` as key-value
    pairs. You pass the following parameters here:'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`strategy_parameters`: 策略期望的参数名称和值。这应该是一个字典，其中`parameter-name`和`parameter-value`是键值对。在这里传递以下参数：'
- en: '`fastma_period: 26`'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fastma_period: 26`'
- en: '`slowma_period: 6 `'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`slowma_period: 6 `'
- en: '`signal_period: 9`'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`signal_period: 9`'
- en: '`target_trigger: 0.01`'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target_trigger: 0.01`'
- en: '`stoploss_trigger: 0.01`'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stoploss_trigger: 0.01`'
- en: '`trailing_stoploss_trigger: 1`'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`trailing_stoploss_trigger: 1`'
- en: (Recall that the parameters for the MACD-Bracket-Order strategy have been defined
    in its `__init__()` method, as shown in the first recipe of [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml), *Algorithmic
    Trading Strategies – Coding Step by Step*).
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: （回想一下，MACD-Bracket-Order策略的参数已经在其`__init__()`方法中定义，如[第8章](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml)的第一个示例中所示，*算法交易策略
    - 逐步编码*）。
- en: '`candle_interval`: The candle interval for the historical data fetched for
    real trading. This should be an enum of the `CandleInterval` type. You pass `CandleInterval.MINUTES_15`
    here. (The `CandleInterval` enum provides various enums for candle intervals,
    some of which are `MINUTE_1`, `MINUTES_3` , `MINUTES_5`, `MINUTES_10`, `MINUTES_15`,
    `MINUTES_30`, `HOUR`, and `DAY`.)'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`candle_interval`: 用于实际交易获取的历史数据的蜡烛间隔。这应该是`CandleInterval`类型的枚举。在这里传递`CandleInterval.MINUTES_15`。（`CandleInterval`枚举提供各种蜡烛间隔的枚举，其中一些是`MINUTE_1`、`MINUTES_3`、`MINUTES_5`、`MINUTES_10`、`MINUTES_15`、`MINUTES_30`、`HOUR`和`DAY`。）'
- en: If the job submission is successful, you will see `Success` messages being printed
    by the `realtrade()` function.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 如果作业提交成功，您将看到由`realtrade()`函数打印的`Success`消息。
- en: Once a job has been submitted, it takes a while to start. After starting, it
    may take some time to finish, depending on the duration of real trading specified
    using the `start_time` and `end_time` arguments. Usually, real trading is run
    for the entire trading day, which means the job would be running for 6-8 hours.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦任务提交，启动需要一段时间。启动后，根据使用`start_time`和`end_time`参数指定的实际交易持续时间，可能需要一段时间才能完成。通常，实际交易会持续整个交易日，这意味着任务将运行6-8小时。
- en: In *step 5*, you fetch the job's status using the `get_realtrading_job_status()`
    method of the `algobulls_connection` object. You pass `strategy_code2` as the
    argument here. This method returns a dictionary with a single key-value pair – the
    *data* and the *job* status. If you query the status immediately after placing
    the job, you get `'STARTING'` as the status. In *step 6*, you query the status
    again after some time, and if the job has started, you get a status of `'STARTED'`.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤5*中，使用`algobulls_connection`对象的`get_realtrading_job_status()`方法获取作业的状态。在这里传递`strategy_code2`作为参数。此方法返回一个具有单个键值对
    - *数据*和*作业*状态的字典。如果在放置作业后立即查询状态，则会将`'STARTING'`作为状态返回。在*步骤6*中，经过一段时间后再次查询状态，如果作业已启动，则会返回状态`'STARTED'`。
- en: A successful submission implies that the minimum inputs needed to real trade
    a strategy have been passed in the required format. However, this does not ensure
    that the strategy will run without errors. The strategy's execution may still
    run into errors during real trading. To debug execution issues, you will need
    to fetch the output logs, which will be explained in the next recipe. Possible
    reasons for errors could be either bugs in the strategy class' Python code or
    that an incomplete `strategy_parameters` dictionary has been passed to the `realtrade()`
    function.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 成功提交意味着已按所需格式传递了实际交易策略的最小输入。但是，这并不保证策略在实际交易中运行时不会出现错误。在实际交易期间，策略的执行仍可能遇到错误。要调试执行问题，您需要获取输出日志，下一个示例将对此进行说明。出错的可能原因可能是策略类Python代码中的错误或已将不完整的`strategy_parameters`字典传递给`realtrade()`函数。
- en: There's more…
  id: totrans-300
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'If a job is running for a long time and you would like to stop it before its
    completion, you can use the `stop_realtrading_job()` method of the `algobulls_connection`
    object. This method accepts strategy code as an argument. You pass `strategy_code2`
    here. This method submits a stop request to the AlgoBulls real trading engine.
    If the request is accepted, you will see a `Success` message here:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个任务运行了很长时间，并且你想在完成之前停止它，你可以使用 `algobulls_connection` 对象的 `stop_realtrading_job()`
    方法。这个方法接受策略代码作为参数。在这里你传递 `strategy_code2`。这个方法提交一个停止请求给 AlgoBulls 真实交易引擎。如果请求被接受，你将会看到一个
    `Success` 消息：
- en: '[PRE49]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'If you query the status after submitting the stop request, you''ll get `''STOPPING''` as
    the status:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在提交停止请求后查询状态，你会得到 `'STOPPING'` 作为状态：
- en: '[PRE50]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'If you query the status again after some time, and if the job has stopped,
    you''ll get `''STOPPED''` as the status:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你一段时间后再次查询状态，且任务已经停止，你将会得到 `'STOPPED'` 作为状态：
- en: '[PRE51]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: MACD–Bracket–Order strategy – fetching real trading logs in real time
  id: totrans-307
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MACD–Bracket–Order 策略 – 实时获取真实交易日志
- en: After submitting a real trading job on the AlgoBulls platform, the AlgoBulls
    real trading engine starts executing the strategy. During its execution, every
    event that occurs and every decision that's been made by the AlgoBulls real trading
    engine is recorded with exact timestamps in the form of textual logs.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 在 AlgoBulls 平台提交真实交易任务后，AlgoBulls 真实交易引擎开始执行策略。在执行过程中，AlgoBulls 真实交易引擎记录下每个事件和每个决策，并以文本日志的形式精确记录时间戳。
- en: Examples of recorded activities include the given strategy config, every new
    candle generated at regular intervals, trades punched in by your strategy, the
    entry and exit of positions created by these trades, waits for new candles, and
    so on. These logs are quintessential for validating the strategy and debugging
    behavior or performance issues that are frequently encountered while developing
    a strategy.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 记录的活动示例包括给定策略配置、定期生成的每个新蜡烛、策略输入的交易、这些交易创建的头寸的进入和退出、等待新蜡烛等。这些日志对于验证策略和调试经常在开发策略时遇到的行为或性能问题至关重要。
- en: In this recipe, you will fetch real trading logs for your strategy. The logs
    start coming up as soon as your submitted real trading job reaches the `'STARTED'`
    state (refer to the preceding recipe for more information on the states of a real
    trading job). The AlgoBulls platform allows you to fetch logs in real time, even
    while the real trading job is still going on. You can get insights into the strategy's
    execution without having to wait for the real trading job to complete. This is
    helpful as real trading jobs are usually long-running. The `pyalgotrading` package
    provides a simple method we can use to fetch the execution logs for a given strategy.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，你将获取你的策略的真实交易日志。一旦你提交的真实交易任务达到 `'STARTED'` 状态，日志就会开始出现（有关真实交易任务状态的更多信息，请参考上一个配方）。AlgoBulls
    平台允许你实时获取日志，即使真实交易任务仍在进行中。你可以在不等待真实交易任务完成的情况下了解策略的执行情况。这对于真实交易任务通常是长时间运行的情况很有帮助。`pyalgotrading`
    包提供了一个简单的方法来获取给定策略的执行日志。
- en: Make sure you have gone through the last six recipes of [Chapter 8](https://cdp.packtpub.com/python_algorithmic_trading_cookbook/wp-admin/post.php?post=33&action=edit#post_30), *Algorithmic
    Trading Strategies – Coding Step by Step*, to get a complete picture of the strategy
    class we will be using; that is, `StrategyMACDBracketOrder`.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经学习了[第 8 章](https://cdp.packtpub.com/python_algorithmic_trading_cookbook/wp-admin/post.php?post=33&action=edit#post_30)的最后六个配方，*算法交易策略
    – 逐步编码*，以获得我们将使用的策略类 `StrategyMACDBracketOrder` 的完整图片。
- en: Getting ready
  id: totrans-312
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Make sure the `algobulls_connection` and `strategy_code2` objects are available
    in your Python namespace. Refer to the *MACD-Bracket-Order strategy – fetching
    the strategy* recipe of this chapter to set up the `algobulls_connection` and
    `strategy_code2` objects.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 确保 `algobulls_connection` 和 `strategy_code2` 对象在你的 Python 命名空间中可用。参考本章的*MACD-Bracket-Order
    策略 – 获取策略*配方来设置 `algobulls_connection` 和 `strategy_code2` 对象。
- en: How to do it…
  id: totrans-314
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现…
- en: 'Execute the following steps to complete this recipe:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤来完成这个配方：
- en: 'Fetch the real trading execution logs for `strategy_code2`:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取 `strategy_code2` 的真实交易执行日志：
- en: '[PRE52]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'We got the following output (your output may differ):'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了以下输出（你的输出可能不同）：
- en: '[PRE53]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Fetch the real trading execution logs for `strategy_code2` again after some
    time:'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一段时间后，再次获取 `strategy_code2` 的真实交易执行日志：
- en: '[PRE54]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'We got the following output (your output may differ):'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了以下输出（你的输出可能不同）：
- en: '[PRE55]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The complete output is not shown here. Please visit the following link to read
    the complete output: [https://github.com/algobulls/pyalgostrategypool/blob/master/pyalgostrategypool/sample/realtrading/strategy_macd_bracket_order/logs.txt](https://github.com/algobulls/pyalgostrategypool/blob/master/pyalgostrategypool/sample/realtrading/strategy_macd_bracket_order/logs.txt).'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 此处未显示完整输出。请访问以下链接以阅读完整输出：[https://github.com/algobulls/pyalgostrategypool/blob/master/pyalgostrategypool/sample/realtrading/strategy_macd_bracket_order/logs.txt](https://github.com/algobulls/pyalgostrategypool/blob/master/pyalgostrategypool/sample/realtrading/strategy_macd_bracket_order/logs.txt)。
- en: How it works…
  id: totrans-325
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理如下…
- en: In *step 1*, you use the `get_realtrading_logs()` method of the `algobulls_connection`
    object to fetch the strategy real trading logs in real time. This method accepts
    strategy code as an argument. You pass `strategy_code2` here. The return data
    is a string. If you try this step immediately after submitting the job, you get
    a string, which says the logs are not ready yet (`[2020-07-09 09:13:45] Logs not
    available yet. Please retry in sometime.`.) This happens if the real trading job
    is in the `'STARTING'` state.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤1*中，您使用`algobulls_connection`对象的`get_realtrading_logs()`方法实时获取策略的真实交易日志。此方法接受策略代码作为参数。在此处传递`strategy_code2`。返回的数据是一个字符串。如果在提交任务后立即尝试此步骤，您会得到一个字符串，其中说日志尚未准备好（`[2020-07-09
    09:13:45] Logs not available yet. Please retry in sometime.`）。如果真实交易任务处于`'STARTING'`状态，则会出现此情况。
- en: In *step 2*, you fetch the logs again after some time. If the job is out of
    the `'STARTING'` state, you start getting your strategy execution logs. You get
    all the real trading logs every time you call the `get_realtrading_logs()` function.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤2*中，您会在一段时间后再次获取日志。如果任务不再处于`'STARTING'`状态，则开始获取您的策略执行日志。每次调用`get_realtrading_logs()`函数时，都会获取所有真实交易日志。
- en: There's more...
  id: totrans-328
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: Once the real trading job moves to the `'STOPPED'` state, no new logs are generated.
    You can fetch the complete logs any time before you submit the next real trading
    job for the same strategy. If a new real trading job is submitted (for the same
    strategy), these logs will no longer be accessible via the `get_realtrading_logs()`
    method. You can save the fetched logs to a file if you'd like to refer to them
    at a later date.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 当真实交易任务进入`'STOPPED'`状态后，将不再生成新的日志。您可以在提交下一个相同策略的真实交易任务之前的任何时间获取完整的日志。如果提交了新的真实交易任务（针对相同的策略），则无法再通过`get_realtrading_logs()`方法访问这些日志。如果您希望以后参考这些日志，可以将获取的日志保存到文件中。
- en: MACD–Bracket–Order strategy – fetching a real trading report – profit and loss
    table
  id: totrans-330
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MACD–Bracket–Order策略 – 获取真实交易报告 – 利润和损失表
- en: After submitting a real trading job on the AlgoBulls platform, the AlgoBulls
    real trading engine starts executing the strategy. During its execution, along
    with the logs, the AlgoBulls real trading engine also generates a P&L table in
    real time. This table holds information on every trade punched in by the strategy.
    It also contains details on the mappings between entry and exit orders, the trade
    P&L, and the cumulative P&L, sorted chronologically, with the latest order first.
    This table gives us insight into the strategy's overall performance with the help
    of individual and cumulative P&L numbers. The entry-exit order mapping also helps
    validate the strategy's behavior.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 在AlgoBulls平台上提交真实交易任务后，AlgoBulls真实交易引擎开始执行该策略。在执行过程中，除了日志外，AlgoBulls真实交易引擎还实时生成P&L表。此表包含策略打入的每笔交易的信息。它还包含有关入场和出场订单之间的映射、交易P&L和累积P&L的详细信息，按时间顺序排序，最新的订单排在最前面。这张表通过个人和累积P&L数字为我们提供了有关策略整体表现的见解。入场-出场订单映射还有助于验证策略的行为。
- en: In this recipe, you will fetch the P&L table report for your strategy. This
    report is available as soon as the first trade is punched in by your strategy
    after you submit a real trading job. The AlgoBulls platform allows you to fetch
    the P&L table in real time, even while the real trading job is still going on.
    You can get insights into the strategy's performance without having to wait for
    the real trading job to complete. This is helpful as real trading jobs are usually
    long-running. The `pyalgotrading` package provides a simple method we can use
    to fetch the P&L table for a given strategy.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，您将获取您策略的P&L表报告。在提交真实交易任务后，您的策略第一笔交易打入后，此报告即可获得。AlgoBulls平台允许您实时获取P&L表，即使真实交易任务仍在进行中。这样做有助于了解策略的表现，而无需等待真实交易任务完成。这对于长时间运行的真实交易任务非常有帮助。`pyalgotrading`包提供了一个简单的方法，我们可以用来获取给定策略的P&L表。
- en: Make sure you have gone through the last six recipes of [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml),
    *Algorithmic Trading Strategies – Coding Step by Step*, to get a complete picture
    of the strategy class we will be using; that is, `StrategyMACDBracketOrder`.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经熟悉了 [第8章](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml) 的最后六个示例，*逐步编码算法交易策略*，以完整了解我们将使用的策略类；即
    `StrategyMACDBracketOrder`。
- en: Getting ready
  id: totrans-334
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure the `algobulls_connection` and `strategy_code2` objects are available
    in your Python namespace. Refer to the *MACD-Bracket-Order strategy – fetching
    the strategy* recipe of this chapter to set up the `algobulls_connection` and
    `strategy_code2` objects.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 确保 `algobulls_connection` 和 `strategy_code2` 对象在你的 Python 命名空间中可用。参考本章的 *MACD-Bracket-Order
    策略 – 获取策略* 示例设置 `algobulls_connection` 和 `strategy_code2` 对象。
- en: How to do it…
  id: totrans-336
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Fetch the real trading P&L report for `strategy_code2`:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 获取 `strategy_code2` 的真实交易盈亏报告：
- en: '[PRE56]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'We got the following output. Your output may differ (note that the following
    output has been split into multiple tables for representation purposes. You will
    see a single wide table in your Jupyter Notebook):'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了以下输出。你的输出可能会有所不同（注意以下输出已分成多个表格以表示目的。在你的 Jupyter Notebook 中，你将看到一个宽表格）：
- en: '![](img/025cf486-ac12-4e3d-8f06-3a7dbc4cf80f.png)'
  id: totrans-340
  prefs: []
  type: TYPE_IMG
  zh: '![](img/025cf486-ac12-4e3d-8f06-3a7dbc4cf80f.png)'
- en: How it works…
  id: totrans-341
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'In this recipe, you use the `get_realtrading_report_pnl_table()` method of
    the `algobulls_connection` object to fetch the real trading P&L table in real
    time. This method accepts strategy code as an argument. You pass `strategy_code2`
    here. The return data is a `pandas.DataFrame` object with multiple columns, described
    as follows:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，你将使用 `algobulls_connection` 对象的 `get_realtrading_report_pnl_table()`
    方法实时获取真实交易的盈亏表。该方法接受策略代码作为参数。你在这里传递了 `strategy_code2`。返回的数据是一个 `pandas.DataFrame`
    对象，具有多列，描述如下：
- en: '`instrument`: Financial instrument for which trade was entered.'
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instrument`: 进行交易的金融工具。'
- en: '`entry_timestamp`: The timestamp at which the entry order was placed. (Note
    that it may remain in the `''OPEN''` state for a while before it goes to the `''COMPLETE''`
    state.)'
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`entry_timestamp`: 放置进入订单的时间戳。（注意，它可能在进入 `''OPEN''` 状态一段时间后才转入 `''COMPLETE''`
    状态。）'
- en: '`entry_transaction_type`: Entry order transaction type (either `BUY` or `SELL`).'
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`entry_transaction_type`: 进入订单交易类型（`BUY` 或 `SELL`）。'
- en: '`entry_quantity`: Entry order quantity.'
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`entry_quantity`: 进入订单数量。'
- en: '`entry_price`: Price at which the entry order gets executed and goes to the `''COMPLETE''`
    state.'
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`entry_price`: 进入订单执行并进入 `''COMPLETE''` 状态的价格。'
- en: '`exit_timestamp`: The timestamp at which the exit order was placed. (Note that
    it may remain in the `''OPEN''` state for a while before it goes to the `''COMPLETE''`
    state.)'
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exit_timestamp`: 放置退出订单的时间戳。（注意，它可能在进入 `''OPEN''` 状态一段时间后才转入 `''COMPLETE''`
    状态。）'
- en: '`exit_transaction_type`: Exit order transaction type (either `BUY` or `SELL`).'
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exit_transaction_type`: 退出订单交易类型（`BUY` 或 `SELL`）。'
- en: '`exit_quantity`: Exit order quantity.'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exit_quantity`: 退出订单数量。'
- en: '`exit_price`: Price at which the exit order gets executed and goes to the `''COMPLETE''`
    state.'
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exit_price`: 退出订单执行并进入 `''COMPLETE''` 状态的价格。'
- en: '`pnl_absolute`: Difference between the exit order execution price and the entry
    order execution price. Mathematically, this is (*exit_price* - *entry_price*)**exit_quantity* for
    a long trade and (*entry_price* - *exit_price*)**exit_quantity* for a short trade.
    A positive value would imply that the trade is a profit-making trade. A negative
    value would imply that the trade is a loss-making trade.'
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pnl_absolute`: 退出订单执行价格与进入订单执行价格的差额。从数学上讲，这是长期交易的 (*退出价格* - *进入价格*)**退出数量*，短期交易的
    (*进入价格* - *退出价格*)**退出数量*。正值意味着该交易是盈利交易。负值意味着该交易是亏损交易。'
- en: '`pnl_percentage`: Percentage of profit or loss with respect to the entry price.
    Mathematically, this is *pnl_absolute* / *entry_price* / *exit_quantity* x *100*.'
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pnl_percentage`: 相对于进入价格的利润或损失百分比。从数学上讲，这是 *pnl_absolute* / *entry_price*
    / *exit_quantity* x *100*。'
- en: '`pnl_cumulative_absolute`: Cumulative profit or loss. Mathematically, this
    is the sum of all the `pnl_absolute` values of the previous trades. This number
    gives us direct insight into the strategy''s performance against the simulation
    time.'
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pnl_cumulative_absolute`: 累积盈亏。从数学上讲，这是之前所有交易的 `pnl_absolute` 值的总和。这个数字直接反映了策略在模拟时间内的表现。'
- en: '`pnl_cumulative_percentage`: Percentage of cumulative profit or loss with respect
    to the entry price. Mathematically, this is *pnl_cumulative* / *entry_price* /
    *exit_quantity* x *100*.'
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pnl_cumulative_percentage`: 相对于入场价格的累计利润或损失的百分比。从数学上讲，这是 *pnl_cumulative*
    / *entry_price* / *exit_quantity* x *100*。'
- en: There's more...
  id: totrans-356
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: Once the real trading job moves to the `'STOPPED'` state, the P&L table report
    will not update anymore. You can fetch the complete P&L report any time before
    you submit the next real trading job for the same strategy. If a new real trading
    job is submitted (for the same strategy), this report will no longer be accessible
    via the `get_realtrading_report_pnl_table()` method. You can save the fetched
    report to a `.csv` file if you'd like to refer to it at a later date.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦真实交易任务转移到 `'STOPPED'` 状态，P&L 表报告将不再更新。您可以在提交下一个相同策略的真实交易任务之前的任何时候获取完整的 P&L
    报告。如果提交了新的真实交易任务（相同的策略），则无法再通过 `get_realtrading_report_pnl_table()` 方法访问此报告。如果您希望以后参考，可以将获取的报告保存为
    `.csv` 文件。
- en: MACD–Bracket–Order strategy – fetching a real trading report – statistics table
  id: totrans-358
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MACD-Bracket-Order 策略 - 获取真实交易报告 - 统计表
- en: After submitting a real trading job on the AlgoBulls platform, the AlgoBulls
    real trading engine starts executing the strategy. During its execution, along
    with the logs and P&L table, the AlgoBulls real trading engine also generates
    a summary from the P&L table in real time. This summary is a table of statistics
    containing various statistical numbers, such as `Net P&L` (absolute and percentage),
    `Max Drawdown` (absolute and percentage), count of total trades, winning trades,
    losing trades, long trades and short trades, the maximum gain and minimum gain
    (or maximum loss), and average profit per winning and losing trade. This table
    gives us an instant overview of the strategy's overall performance.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 在 AlgoBulls 平台上提交了一个真实交易任务后，AlgoBulls 真实交易引擎开始执行策略。在其执行过程中，除了日志和 P&L 表之外，AlgoBulls
    真实交易引擎还实时生成来自 P&L 表的摘要。此摘要是包含各种统计数字的统计表，如 `净利润`（绝对值和百分比）、`最大回撤`（绝对值和百分比）、总交易次数、盈利交易次数、亏损交易次数、多头交易和空头交易次数、最大盈利和最小盈利（或最大亏损），以及每个盈利和亏损交易的平均利润。此表提供了策略整体表现的即时概览。
- en: In this recipe, you will fetch the statistics table report for your strategy.
    This report is available as soon as the first trade is punched in by your strategy
    after you submit a real trading job. The AlgoBulls platform allows you to fetch
    the statistics table in real time, even while the real trading job is still going
    on. You can get insights into the strategy's performance without having to wait
    for the real trading job to complete. This is helpful as real trading jobs are
    usually long-running. The `pyalgotrading` package provides a simple method we
    can use to fetch the statistics table for a given strategy.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，您将获取您的策略的统计表报告。此报告在您提交了一个真实的交易任务后，只要您的策略首次进行了交易，就可以获得。AlgoBulls 平台允许您在真实交易任务仍在进行时实时获取统计表。您可以在等待真实交易任务完成之前了解策略的表现。这对于真实交易任务通常是长时间运行的情况很有帮助。`pyalgotrading`
    包提供了一个简单的方法，我们可以用来获取给定策略的统计表。
- en: Make sure you have gone through the last six recipes of [Chapter 8](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml),
    *Algorithmic Trading Strategies – Coding Step by Step*, to get a complete picture
    of the strategy class we will be using; that is, `StrategyMACDBracketOrder`.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您已经阅读了[第 8 章](b68a08c7-e8d9-469d-8beb-d0dce9465ec3.xhtml)的最后六个示例，*算法交易策略 -
    逐步编码*，以完整了解我们将要使用的策略类别; 即 `StrategyMACDBracketOrder`。
- en: Getting ready
  id: totrans-362
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure the `algobulls_connection` and `strategy_code2` objects are available
    in your Python namespace. Refer to the *MACD-Bracket-Order strategy – fetching
    the strategy* recipe of this chapter to set up the `algobulls_connection` and
    `strategy_code2` objects.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您的 Python 命名空间中有 `algobulls_connection` 和 `strategy_code2` 对象可用。参考本章的 *MACD-Bracket-Order
    策略 - 获取策略* 示例来设置 `algobulls_connection` 和 `strategy_code2` 对象。
- en: How to do it…
  id: totrans-364
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Fetch the real trading statistics report for `strategy_code2`:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 获取`strategy_code2`的真实交易统计报告：
- en: '[PRE57]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'We got the following output (your output may differ):'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '我们得到了以下输出（您的输出可能会有所不同）:'
- en: '![](img/ad70d4f2-8b7a-47fe-b213-16b345702865.png)'
  id: totrans-368
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ad70d4f2-8b7a-47fe-b213-16b345702865.png)'
- en: How it works…
  id: totrans-369
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'In this recipe, you use the `get_realtrading_report_statistics()` method of
    the `algobulls_connection` object to fetch the real trading statistics table in
    real time. This method accepts strategy code as an argument. You pass `strategy_code2`
    here. The return data is a `pandas.DataFrame` object with two columns – `highlight_type`
    and `highlight_value` – and multiple rows. The rows are described as follows:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，您使用`algobulls_connection`对象的`get_realtrading_report_statistics()`方法实时获取真实交易统计表。此方法接受策略代码作为参数。您在此处传递了`strategy_code2`。返回数据是一个`pandas.DataFrame`对象，具有两列
    - `highlight_type`和`highlight_value` - 和多行。行的描述如下：
- en: '`Net PnL`: The cumulative real trading P&L. This is also the `pnl_cumulative_absolute`
    value of the first entry in the P&L table.'
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Net PnL`: 累计真实交易盈亏。这也是盈亏表中第一项的`pnl_cumulative_absolute`值。'
- en: '`Net PnL %`: The cumulative real trading P&L percentage. This is also the `pnl_cumulative_percentage`
    value of the first entry in the P&L table.'
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Net PnL %`: 累计真实交易盈亏百分比。这也是盈亏表中第一项的`pnl_cumulative_percentage`值。'
- en: '`Max Drawdown`: The lowest value in the `pnl_cumulative` column of the P&L
    table. This indicates the maximum loss your strategy has encountered during its
    execution.'
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Max Drawdown`: 盈亏表中`pnl_cumulative`列的最低值。这表示您的策略在执行过程中遇到的最大损失。'
- en: '`Max Drawdown %`: Mathematically, this is *(Max Drawdown)* / *(corresponding
    entry_price)* / *exit_quantity* x 100.'
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Max Drawdown %`: 在数学上，这是 *(最大回撤)* / *(对应的入场价格)* / *退出数量* x 100。'
- en: '`Number of Trades`: Total trades (entry and exit are counted as one) during
    the session.'
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Number of Trades`: 会话期间的总交易数（入场和出场计为一次）。'
- en: '`Number of Wins`: Count of trades where the trade P&L was non-negative.'
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Number of Wins`: 交易盈亏为非负数的交易数量。'
- en: '`Number of Losses`: Count of trades where the trade P&L was negative.'
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Number of Losses`: 交易盈亏为负数的交易数量。'
- en: '`Number of Long Trades`: Count of trades where the entry transaction type was
    `''BUY''`.'
  id: totrans-378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Number of Long Trades`: 入场交易类型为`''BUY''`的交易数量。'
- en: '`Number of Short Trades`: Count of trades where the entry transaction type
    was `''SELL''`.'
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Number of Short Trades`: 入场交易类型为`''SELL''`的交易数量。'
- en: '`Max Gain`: P&L of the trade with the maximum P&L value among all trades.'
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Max Gain`: 所有交易中盈利最高的交易的盈亏。'
- en: '`Min Gain`: P&L of the trade with the minimum P&L value among all trades.'
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Min Gain`: 所有交易中盈利最低的交易的盈亏。'
- en: '`Avg. Profit per winning trade`: Mathematically, this is *(Total P&L of winning
    trades)* / *(Count of winning trades)*.'
  id: totrans-382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Avg. Profit per winning trade`: 在数学上，这是 *(盈利交易的总盈亏)* / *(盈利交易的数量)*。'
- en: '`Avg. Profit per losing trade`: Mathematically, this is *(Total P&L of losing
    trades)* / *(Count of losing trades)*.'
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Avg. Profit per losing trade`: 在数学上，这是 *(亏损交易的总盈亏)* / *(亏损交易的数量)*。'
- en: There's more...
  id: totrans-384
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: If the statistics table is fetched while the real trading job is still running,
    the aforementioned numbers will be intermediate numbers, based on the trades completed
    until that time. The numbers may change as more trades are punched in, until the
    real trading job completes.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在真实交易作业仍在运行时获取统计表，则上述数字将是中间数字，基于截至该时间的已完成交易。随着更多交易的录入，这些数字可能会发生变化，直到真实交易作业完成。
- en: Once the real trading job moves to the `'STOPPED'` state, the statistics table
    will not change anymore. You can fetch the complete statistics table any time
    before you submit the next real trading job for the same strategy. If a new real
    trading job is submitted (for the same strategy), this table will no longer be
    accessible via the `get_realtrading_report_statistics()` method. You can save
    the fetched report to a `.csv` file if you'd like to refer to it at a later date.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦真实交易作业转移到`'STOPPED'`状态，统计表将不再更改。您可以在提交下一个相同策略的真实交易作业之前随时获取完整的统计表。如果提交了新的真实交易作业（相同的策略），则无法再通过`get_realtrading_report_statistics()`方法访问此表。如果您希望以后参考，可以将获取的报告保存为`.csv`文件。
