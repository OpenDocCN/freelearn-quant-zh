- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Simulators and HPC’s Role in the NISQ Era
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 仿真器和高性能计算（HPC）在NISQ时代的作用
- en: Now that we know how to make quantum and classical computing resources available
    and have reviewed how to pose our problems in both domains, we should evaluate
    the available mechanisms and strategies for exploiting those resources efficiently.
    By that, we mean cost and time efficiency, given that those axes will also need
    to be considered when it comes to including these techniques in our company’s
    daily processes.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经知道如何使量子和经典计算资源可用，并回顾了如何在这两个领域中提出我们的项目问题，我们应该评估可用的机制和策略，以高效地利用这些资源。这里的意思是成本和时间的效率，因为在将这些技术纳入公司日常流程时，这些因素也需要考虑。
- en: Nowadays, the classical resources in most companies comprise a mixture of on-premises
    and cloud-enabled resources. This is the common case for most experimental projects
    aiming to improve operational processes using analytics. Ephemeral computing resources
    may have different needs, depending on the project or the nature of the technique
    we envision using. That is why the cloud-native pay-per-use model has become a
    good option for most companies.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 现如今，大多数公司中的传统资源包括本地和云端资源的混合。这是大多数实验项目的常见情况，目的是通过分析改善运营流程。短期计算资源的需求可能因项目或我们设想使用的技术性质而有所不同。这就是为什么云原生按需付费模式已经成为大多数公司良好选择的原因。
- en: Depending on the tasks, **graphical processing units** (**GPUs**) for machine
    learning activities or high-performance computing resources for optimization problems
    might be required. Purchasing those resources without knowing the initiative’s
    outcome might be too expensive. But it is also true that once those processes
    are operationalized, capitalizing costs on infrastructure and integrating those
    resources into more cost-efficient structures become crucial. Pay-per-use can
    become expensive if it’s not evaluated sensibly. In layman’s terms, there is a
    market for both renting and owning cars. It all gets reduced to usage.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 根据任务的不同，**图形处理单元**（**GPU**）用于机器学习活动，或高性能计算资源用于优化问题可能是必需的。在不了解项目结果的情况下购买这些资源可能成本过高。但同样也有一个事实是，一旦这些过程实现了运营，利用基础设施成本并将这些资源整合到更具成本效益的结构中变得至关重要。如果不经过合理评估，按需付费可能会变得昂贵。通俗来说，既有租车市场，也有购车市场。一切最终归结为使用。
- en: Finding the right combination of resources from the beginning, even in a project
    life cycle, is key for quantum computing and overall business sustainability and
    competitiveness. Quantum computing goes beyond the quantum hardware itself, and
    many options can be used when adopting it. From quantum-inspired to fully quantum
    algorithms, as we have covered in previous chapters, we must find the right resources
    for those solutions.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 从一开始就找到正确的资源组合，即使是在项目生命周期中，对于量子计算以及整体业务的可持续性和竞争力至关重要。量子计算不仅仅局限于量子硬件本身，采用量子计算时可以选择多种方案。从量子启发到完全的量子算法，正如我们在之前的章节中所讨论的，我们必须为这些解决方案找到合适的资源。
- en: Therefore, this chapter will explore the variety of potential options within
    the quantum domain and how these can be used for cost-effective technology adoption.
    We will also try to outline a sensible adoption approach so that it serves those
    less familiar with the life cycle of analytics projects.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，本章将探讨量子领域内各种潜在的选项，以及这些选项如何用于具有成本效益的技术采用。我们还将尝试概述一种合理的采用方法，以便服务那些不太熟悉分析项目生命周期的人。
- en: 'We will cover the following main topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主要内容：
- en: Local simulation of quantum hardware with noise
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带噪声的量子硬件本地仿真
- en: Distributed approaches to running local emulators
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地仿真器的分布式运行方法
- en: Local simulation of noise models
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本地噪声模型仿真
- en: First, we must distinguish between the three naming conventions we will use
    during this chapter and the following ones. Previously, we talked about how quantum
    algorithms can be run on a classical device before being sent to a real quantum
    device, but there are some different ways in which this classical execution can
    be done. Problems such as the ones we have posed have been around for a while,
    and classical computing has evolved in many different ways to bring solutions
    to the technology at hand during this time. As we will see, this may also bring
    some challenges related to the specifics of the different classical setups we
    will cover. Mimicking quantum mechanical evolution is a non-trivial task; that
    was how quantum computing was proposed as a potential solution.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须区分本章及后续章节中使用的三种命名约定。之前，我们谈到量子算法如何可以在经典设备上运行，然后再传送到真正的量子设备，但经典执行的方式有多种不同的方式。这类问题已经存在一段时间，经典计算在过去的一段时间里发展了许多不同的方式来解决当时的技术问题。正如我们将看到的，这也可能带来一些与我们将要覆盖的不同经典设置的细节相关的挑战。模拟量子力学演化是一项非平凡的任务；这就是为什么量子计算被提出作为潜在解决方案的原因。
- en: '*Simulators* are the classical means of processing information in the way an
    ideal quantum computer would do so. Recall that quantum information theory is
    not a new task brought about by the availability of quantum hardware. Lots of
    work was done even before the first quantum device was created (*Bennet and Shor,
    1998*). By defining the quantum information and determining the set of operations
    to be employed, the sequence that applies these operations to our quantum states
    is what we refer to as algorithms or circuits in the quantum domain. Simulators
    make the mathematical apparatus used in quantum computing computationally available.
    We have not discussed those terms much since [*Chapter 1*](B19146_01.xhtml#_idTextAnchor016),
    but remember that a quantum state is, in simple terms, a vector that encodes the
    wave function of a given system. As an example, we can represent the basic 0 state
    as a column vector, as shown in the following equation:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*模拟器* 是用经典方式处理信息，模拟理想量子计算机的方式。请记住，量子信息理论并不是由于量子硬件的出现才产生的一个新任务。在第一个量子设备诞生之前，很多工作就已经开始了（*Bennet
    和 Shor, 1998*）。通过定义量子信息并确定要使用的操作集，将这些操作应用到我们的量子态的顺序被称为量子领域中的算法或电路。模拟器使得量子计算中使用的数学工具在计算上可用。我们在[*第
    1 章*](B19146_01.xhtml#_idTextAnchor016)中没有深入讨论这些术语，但请记住，量子态简单来说就是编码给定系统波函数的向量。举例来说，我们可以将基本的
    0 态表示为列向量，如下方的方程所示：'
- en: '|0⟩ = ( 1   0 )'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '|0⟩ = ( 1   0 )'
- en: 'Hence, computationally, we could represent it as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，从计算的角度来看，我们可以将其表示如下：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'On the other hand, operations, such as the CNOT or Hadamard gates, which are
    used to create superposed states, are nothing other than the matrices that perform
    the evolution from one state into its product state. A Hadamard gate, for example,
    is represented by the following matrix:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，诸如 CNOT 或哈达玛门（Hadamard gate）等操作，用于创建叠加态，实际上不过是执行从一个状态到其乘积态演化的矩阵。例如，哈达玛门可以通过以下矩阵表示：
- en: H =  1 _ √ _ 2  (1 1 1 − 1)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: H =  1  _  √  _ 2  (1 1 1 − 1)
- en: 'The following code can express its coded version:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码可以表达其编码版本：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Since each operator (quantum gate) can be represented as a matrix, it is simple
    to perform those operations with classical resources, so long as we have sufficient
    resources. Memory, in particular, becomes relevant as the system’s size grows.
    The representation for a quantum computer is two to the power of *N* matrices,
    and vectors will need to be handled to perform such computations. We can benefit
    from the work we’ve done on vectorization and sparse matrix handling, but at this
    point, our classical devices will reach their limits with these techniques.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 由于每个运算符（量子门）都可以表示为一个矩阵，只要我们拥有足够的资源，就可以用经典资源执行这些操作。尤其是，随着系统规模的增大，内存变得尤为重要。量子计算机的表示是
    2 的 *N* 次方矩阵，执行这些计算时需要处理向量。我们可以利用我们在向量化和稀疏矩阵处理方面的工作，但此时，我们的经典设备将达到这些技术的极限。
- en: 'For example, applying a Hadamard gate to our basic 0 state qubit would yield
    a state in a superposition of the 0 and 1 states. This action can be simulated
    by creating the dot product of the previously defined objects:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，应用哈达玛门（Hadamard gate）到我们的基本 0 态量子比特（qubit）将得到一个在 0 和 1 态的叠加状态。这个操作可以通过创建之前定义的对象的点积来模拟：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This is the superposed quantum state:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这是叠加的量子态：
- en: '|ψ⟩ =  1 _ √ _ 2  (|0⟩ + |1⟩)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '|ψ⟩ =  1 _ √ _ 2  (|0⟩ + |1⟩)'
- en: With that, we have performed our first simulation. Starting from the initial
    state, most devices are initialized with a Hadamard gate operator (*H*), producing
    the output state. We could extend it so that all basic gates and states can be
    represented and thus work at higher levels of abstraction. This is mostly what
    quantum simulators do when we use them to run an algorithm. Frameworks such as
    Qiskit or Pennylane offer this set of operations as abstractions to this matrix
    product of operations so that it is easy for us to use those by simply using those
    definitions.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们已经进行了第一次模拟。从初始状态开始，大多数设备都是通过一个哈达玛门操作符（*H*）初始化的，从而产生输出状态。我们可以将其扩展，使得所有基本门和状态都可以被表示，从而在更高的抽象层次上进行工作。这正是量子模拟器在我们使用它们运行算法时所做的。当我们使用Qiskit或Pennylane等框架时，它们将这一系列操作作为操作的矩阵积的抽象，使我们可以通过简单地使用这些定义来轻松地使用这些操作。
- en: How many classical resources are needed to simulate a quantum system? Well,
    this is where things become interesting – you can expect many qubits to be simulated
    on a normal laptop and many bit operations to be performed. But the truth is that
    16-qubit algorithms may already consume more than the available memory on a common
    laptop. As an example, 16 qubits would encode the available options for 16 assets
    of the portfolio optimization task we reviewed in [*Chapter 5*](B19146_05.xhtml#_idTextAnchor100).
    This is a small problem that can be easily solved using classical computers but
    that would, on its quantum version, consume up to the 16 GB available on a regular
    laptop using any of those previously mentioned frameworks. So, how can classical
    computers handle that, and how can quantum simulators get out of hand at the same
    size?
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟一个量子系统需要多少经典资源？嗯，这正是事情变得有趣的地方——你可以预期许多量子比特能够在普通笔记本电脑上进行模拟，并且执行许多比特操作。但事实是，16量子比特的算法可能已经超出了普通笔记本电脑可用的内存。例如，16个量子比特会编码我们在[*第5章*](B19146_05.xhtml#_idTextAnchor100)中回顾的投资组合优化任务的16个资产的可选方案。这是一个可以轻松用经典计算机解决的小问题，但在其量子版本中，使用前面提到的任何框架都可能消耗掉普通笔记本电脑上可用的16GB内存。那么，经典计算机是如何处理这些问题的，而量子模拟器又是如何在相同规模下失控的呢？
- en: The amount of information you are processing when simulating quantum mechanical
    systems is much more than the simple sum of assets and derived information you
    could have encoded into those quantum objects. Quantum mechanical dynamics occur
    in more complex spaces, which require many more resources to reproduce whole system
    dynamics faithfully. But that also means fewer quantum resources are necessary
    to encode larger pieces of classical information (*Bowen, 2001*). Hopefully, thanks
    to this very same fact, we can compute things differently, and that is when the
    advantage arises. Making use of quantum domain characteristics such as superposition
    or entanglement, we can do things a little bit differently, such as evaluating
    all potential combinations via single-step operations (*Brassard et al. 2002*)
    or making solutions cancel out between them, amplifying the best candidates, as
    we did in the examples in *Chapters 4*, *5*, and *6*.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当你模拟量子力学系统时，你处理的信息量远远超出了你能够编码到这些量子物体中的资产和派生信息的简单总和。量子力学动态发生在更复杂的空间中，这需要更多的资源来忠实地重现整个系统的动态。但这也意味着，编码更多经典信息所需的量子资源较少（*Bowen,
    2001*）。希望得益于这一事实，我们可以以不同的方式进行计算，这时优势就显现出来了。利用量子领域的特性，如叠加态或纠缠态，我们可以做一些不同的事情，例如通过单步操作评估所有潜在组合（*Brassard
    et al. 2002*），或让解之间相互抵消，放大最好的候选解，就像我们在*第4章*、*第5章*和*第6章*中的例子那样。
- en: With that, we have covered the basics of how different quantum computing is
    from classical computing. Therefore, you must know that classical systems have
    limitations when it comes to mimicking those dynamics. That is why so much effort
    has been put into creating computers that work at a quantum mechanical level so
    that there is no loss due to the classical “emulation” of those effects.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们已经涵盖了量子计算与经典计算的基本区别。因此，你必须知道，在模拟这些动态时，经典系统存在局限性。这也是为什么如此多的努力投入到开发能够在量子力学层面工作的计算机中，以避免因经典的“模拟”这些效应而导致的损失。
- en: While mimicking real quantum devices, we can take things one step further and
    allow our classical simulations not only to work as an ideal quantum computer
    but also as a specific device. When simulating specific devices, we would like
    to mimic all their restrictions regarding connectivity or error statistics. In
    the current state of the NISQ era (*Preskill, 2021*), it is important that we
    faithfully characterize the specifics of our target device.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在模拟真实量子设备时，我们可以进一步发展，让经典模拟不仅能够像理想的量子计算机一样工作，还能够像特定设备一样工作。在模拟特定设备时，我们希望模拟所有与连接性或误差统计相关的限制条件。在当前的NISQ时代（*Preskill,
    2021*），准确表征目标设备的细节非常重要。
- en: '*Emulator* is the word used when simulators mimic quantum dynamics within a
    given set of restrictions associated with specific quantum hardware. In the case
    of IBM’s superconducting chips, for example, we can retrieve their model from
    Qiskit and use existing local simulators limited to the functioning of the real
    device. This means that not all possible two-qubit gate operations can be performed
    between any two qubits, plus operations will fail sometimes, with what we call
    errors, thus producing noise (inaccuracies):'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*模拟器* 是指当模拟器在给定的特定量子硬件的限制条件下模拟量子动力学时使用的术语。例如，在IBM的超导芯片中，我们可以从Qiskit中提取它们的模型，并使用现有的本地模拟器，这些模拟器的功能仅限于真实设备的运行。这意味着，并不是所有可能的两比特门操作都能在任意两个量子比特之间执行，并且操作有时会失败，产生我们所称的误差，从而导致噪声（不准确性）：'
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '*Figure 8**.1* is a representation of the error map for the fake Vigo.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8**.1* 是假Vigo的误差图的表示。'
- en: '![Figure 8.1 – IBM Vigo chip description highlighting qubit connectivity and
    error upon H, CNOT, or measurement operations](img/B19146_08_001.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.1 – IBM Vigo芯片描述，突出显示量子比特连接性及H、CNOT或测量操作中的误差](img/B19146_08_001.jpg)'
- en: Figure 8.1 – IBM Vigo chip description highlighting qubit connectivity and error
    upon H, CNOT, or measurement operations
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.1 – IBM Vigo芯片描述，突出显示量子比特连接性及H、CNOT或测量操作中的误差
- en: By running our circuits against this fake instance instead of a simulator, we
    will face the same issues as we would when using the real device and obtain results
    closer to the ones obtained with it without waiting in the actual device queue.
    That is why, when a quantum circuit needs to be sent to an actual device (or an
    emulator mimicking the real hardware), a transpilation step is needed. We need
    a step that translates our theoretical and device-agnostic algorithm into the
    available gates and provides connectivity to the hardware.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将我们的电路运行在这个假实例上，而不是模拟器上，我们将面临与使用真实设备时相同的问题，并获得与真实设备更接近的结果，而无需在实际设备队列中等待。这就是为什么当量子电路需要发送到实际设备（或模拟器模拟真实硬件）时，需要进行转译步骤。我们需要一个步骤，将我们的理论算法和设备无关的算法转化为可用的门，并为硬件提供连接性。
- en: 'If we take the example of the two-qubit bell state we presented in [*Chapter
    1*](B19146_01.xhtml#_idTextAnchor016), as shown in *Figure 8**.2*, we could add
    a transpilation step to that `fake_vigo` device and see what is drawn:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们以[ *第 1 章*](B19146_01.xhtml#_idTextAnchor016)中展示的两比特贝尔态为例，如*图 8**.2* 所示，我们可以对该`fake_vigo`设备添加转译步骤，看看绘制出来的内容：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The last line of code outputs the circuit shown in *Figure 8**.2*. It represents
    one of the Bell states.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一行代码输出的是*图 8**.2* 中显示的电路。它表示其中一个贝尔态。
- en: '![Figure 8.2 – Bell state circuit](img/B19146_08_002.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.2 – 贝尔态电路](img/B19146_08_002.jpg)'
- en: Figure 8.2 – Bell state circuit
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.2 – 贝尔态电路
- en: 'The circuit needs to be broken into gates implemented on the quantum computer.
    To do that, the circuit needs to be transpiled:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 电路需要被分解成量子计算机上实现的门。为此，电路需要进行转译：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![Figure 8.3 – Circuit transpiled based on the Bell state with the emulator
    configuration](img/B19146_08_003.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.3 – 基于贝尔态的电路转译，采用模拟器配置](img/B19146_08_003.jpg)'
- en: Figure 8.3 – Circuit transpiled based on the Bell state with the emulator configuration
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.3 – 基于贝尔态的电路转译，采用模拟器配置
- en: These discrepancies come from the fact that the Hadamard gate is not a native
    operation in the device, even though its error is shown in *Figure 8**.1*. We
    need to transform the circuit into native gate operations so that their combination
    produces the same effect as an H gate would. We also need to specify what will
    happen to the rest of the qubits that are part of the hardware specification but
    not of the circuit.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这些差异来自于Hadamard门不是设备中的本地操作，尽管其错误已显示在*图8.1*中。我们需要将电路转换为本地门操作，以便它们的组合产生与H门相同的效果。我们还需要指定会发生什么，特别是对于那些属于硬件规格但不在电路中的其余量子比特。
- en: This fact, of course, extends to all devices, not only IBM’s, as each manufacturer
    and the underlying technology are different. Moreover, each chip will show different
    error statistics at different moments in time, and this is because they are being
    worked on and improved upon. Therefore, device models may need to be updated every
    once in a while, so the last snapshot of the device is used.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这个事实当然适用于所有设备，不仅仅是IBM的设备，因为每个制造商和底层技术都是不同的。此外，每个芯片在不同时间点的错误统计数据会有所不同，因为它们正在被处理和改进。因此，设备模型可能需要不时更新，以使用设备的最新快照。
- en: Lastly, we have quantum *devices*, the actual services we showed in [*Chapter
    7*](B19146_07.xhtml#_idTextAnchor145), which can ultimately be used to run our
    algorithms.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有量子*设备*，即我们在[*第7章*](B19146_07.xhtml#_idTextAnchor145)中展示的实际服务，这些设备最终可以用来运行我们的算法。
- en: Like in any sensible project development, it is relevant to understand the difference
    between the three options and know when it makes sense to leverage each one.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在任何合理的项目开发中一样，理解这三种选择之间的区别，并知道何时利用每一种方法，都是非常重要的。
- en: Simulators help us conceptualize algorithms and particular implementations so
    that we can envision the expected outcome for a given use case. The classical
    resources will limit us, but, as we will see, there are plenty of options for
    squeezing these resources as much as possible before moving forward.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟器帮助我们概念化算法和特定实现，使我们能够为给定的用例设想预期的结果。经典资源将限制我们，但正如我们将看到的，在继续前进之前，仍有许多选项可以尽可能地挤压这些资源。
- en: The ultimate goal of a quantum algorithm is for it to be run on quantum hardware.
    As much as we could work on classical resources, we would find limitations as
    we moved forward at the scale of our problems. Quantum devices are scarce, and
    we may need to adapt a theoretical algorithm to the specific hardware. But given
    that these are scarce and are doing that work locally, emulating a device is a
    suitable option before moving forward.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 量子算法的终极目标是将其运行在量子硬件上。尽管我们可以在经典资源上进行工作，但随着问题规模的增加，我们会发现限制。量子设备稀缺，我们可能需要根据特定硬件调整理论算法。但鉴于这些设备稀缺，且在本地进行相关工作，在继续之前模拟设备是一个合适的选择。
- en: Device emulation makes us aware of the changes our theoretical algorithm will
    face, and the results will be much closer to the actual expected outcome when
    it’s run on the device. For variational approaches and QML, which not only require
    many iterations to fit parameters also but where the parameter fitting may substantially
    change due to device behavior, these are really valuable resources. Having a faithful
    representation or model of the device is also key. Even though some providers
    will charge for the emulator, most can be accessed freely or mimicked using some
    of the software we have explored so far. Some of the devices shown in [*Chapter
    7*](B19146_07.xhtml#_idTextAnchor145) are classically emulated quantum device
    representations. Providers such as Quantinuum offer access to their devices and
    emulators, often offering less waiting time so that researchers can balance their
    workload between the emulator and the actual device.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 设备仿真使我们意识到我们的理论算法将面临的变化，且当其在设备上运行时，结果将更接近实际预期的结果。对于变分方法和量子机器学习（QML），这不仅需要多次迭代来调整参数，而且由于设备行为，参数拟合可能会发生实质性变化，这些资源非常宝贵。拥有设备的忠实表示或模型同样至关重要。尽管一些供应商会对模拟器收费，但大多数可以免费访问，或者通过我们目前所探索的软件进行模拟。[*第7章*](B19146_07.xhtml#_idTextAnchor145)中展示的一些设备是经典模拟的量子设备表示。像Quantinuum这样的供应商提供其设备和模拟器的访问权限，通常提供较短的等待时间，以便研究人员在模拟器和实际设备之间平衡工作负载。
- en: Most libraries and frameworks offer resources to create noise models to be added
    to standard simulators ([https://qiskit.org/documentation/tutorials/simulators/3_building_noise_models.html](https://qiskit.org/documentation/tutorials/simulators/3_building_noise_models.html)).
    But what if our algorithm requires more classical resources than the ones we can
    provide on our laptops? Next, we will explore some interesting options we may
    need to consider from the range of available classical resources to get the most
    out of those devices.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数库和框架提供资源，用于创建噪声模型，并将其添加到标准仿真器中（[https://qiskit.org/documentation/tutorials/simulators/3_building_noise_models.html](https://qiskit.org/documentation/tutorials/simulators/3_building_noise_models.html)）。但如果我们的算法需要的经典资源超过我们笔记本电脑能提供的资源怎么办？接下来，我们将探讨一些我们可能需要考虑的有趣选项，这些选项来自可用的经典资源范围，以充分利用这些设备。
- en: Distributed computing approaches to quantum simulation
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 用于量子仿真的分布式计算方法
- en: One way we could get the most classical resources is by leveraging distributed
    frameworks for quantum computing.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们获得最经典资源的一种方式是通过利用量子计算的分布式框架。
- en: Nowadays, they are omnipresent in all large organizations. Some distributed
    computing frameworks, such as Apache Spark and Ray, have been extensively used
    for large dataset wrangling or deep learning model training (*Meng et al. 2016,
    Moritz et al. 2018*). Not far from it, quantum computing simulators can leverage
    the distributed ecosystem by splitting the mathematical operations that need to
    be performed. Splitting a system that should operate as a whole as a set of independent
    operations requires us to understand how splittable our problem at hand is.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，这些方法在所有大型组织中无处不在。一些分布式计算框架，例如Apache Spark和Ray，已广泛用于大数据集处理或深度学习模型训练（*Meng
    等，2016，Moritz 等，2018*）。与此相近，量子计算仿真器可以通过拆分需要执行的数学运算来利用分布式生态系统。将一个应该作为整体运作的系统拆分成一组独立的运算，需要我们理解当前问题能否被有效拆分。
- en: This is why most of the frameworks that deal with distributed quantum computing
    simulation come from research teams, even in large organizations such as Intel
    (*Guerreschi et al. 2020*) and Baidu (*Zhao et* *al. 2021*).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么大多数处理分布式量子计算仿真的框架都来自研究团队，即使在像英特尔（*Guerreschi 等，2020*）和百度（*Zhao 等，2021*）这样的跨国公司中也是如此。
- en: As quantum hardware matures, device-independent frameworks will likely proliferate,
    but there is still a lack of consensus that renders into isolated or hardware-specific
    frameworks for distributed computation. This is the reason why Microsoft researchers
    have created **Quantum Intermediate Representation** (**QIR**) and the QIR Alliance
    ([https://www.qir-alliance.org/](https://www.qir-alliance.org/)) is to help deliver
    an industry standard that can help boost that interoperability between hardware
    providers and quantum computing scientists.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 随着量子硬件的成熟，设备无关的框架可能会广泛传播，但仍然缺乏共识，这导致了分布式计算的孤立或硬件特定框架。这就是为什么微软的研究人员创建了**量子中间表示**（**QIR**）并成立了QIR联盟（[https://www.qir-alliance.org/](https://www.qir-alliance.org/)），旨在提供一个行业标准，以促进硬件提供商与量子计算科学家之间的互操作性。
- en: The creation of an industry-wide standard will also help boost work done on
    cloud-based quantum computation for quantum deep learning (*Kwak et al., 2022*)
    and emerging quantum versions for federated learning (*Li et al, 2021*), which
    is already present as a solution for fighting against organized crime and collaborative
    financial crime detection (*Suzumura et* *al., 2021*).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 行业标准的创建还将有助于推动基于云的量子计算在量子深度学习（*Kwak 等，2022*）和为联合学习设计的量子版本（*Li 等，2021*）的研究进展，这些已经作为打击有组织犯罪和协作金融犯罪检测的解决方案出现（*Suzumura
    等，2021*）。
- en: While these standards and distributed frameworks evolve at the maturity of their
    classical counterparts, there is still room for computational efficiency in simulating
    complex systems, which is what we will dig into in the next section.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这些标准和分布式框架的发展与其经典对应物的成熟程度相当，但在仿真复杂系统的计算效率上仍有提升空间，这也是我们将在下一节深入探讨的内容。
- en: Tensor networks for simulation
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用于仿真的张量网络
- en: Tensor networks are new to many people approaching quantum computation but were
    created a while back. Even though initial steps were made in the early 90s to
    help deal with large systems in the field of condensed matter physics, this rapidly
    extended to other fields, such as high-energy and many-body physics. This exploded
    during the early 2000s as a whole family of methods and algorithms suited to particular
    use cases of studying entanglement at many different levels (*Biamonte and Bergholm,
    2017;* *Órus, 2019*).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 张量网络对于许多接触量子计算的人来说是新兴的，但它们早已被创造出来。尽管最初在90年代初期就已采取步骤来应对凝聚态物理领域的大型系统，但这很快扩展到其他领域，如高能物理和多体物理。到了2000年代初期，作为一整套方法和算法，它们迅速发展，适用于研究不同层次的纠缠现象（*Biamonte
    和 Bergholm，2017；* *Órus，2019*）。
- en: Entanglement is one of the key properties that makes quantum computing highly
    intriguing, powerful, and challenging to comprehend and develop intuition about.
    Tensors, as mathematical objects, provide a consistent framework for handling
    relationships between sets of objects related to an *N*-dimensional vector space.
    Due to the dimensionality that some problems in certain areas of physics pose,
    the tensor network framework allows researchers to decompose these complex structures
    into tensor products, which can be contracted and expanded so that they can be
    handled more efficiently.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 纠缠是量子计算中一种关键特性，使得量子计算既充满吸引力，又强大，同时也具有理解和培养直觉的挑战性。张量，作为数学对象，为处理与*N*维向量空间相关的对象集合之间的关系提供了一种一致的框架。由于某些物理领域中的问题所带来的维度性，张量网络框架使研究人员能够将这些复杂结构分解为张量积，进而进行收缩和扩展，从而更高效地处理它们。
- en: Knowing the relevance of tensor networks in the field of quantum computing,
    some providers have already taken a step forward and developed their frameworks
    so that researchers can leverage them. This is the case of the Pennylane creators,
    Xanadu, and their Jet framework (*Vincent et* *al. 2022*).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 了解到张量网络在量子计算领域的重要性，一些提供商已经迈出了前进的一步，开发了他们的框架，以便研究人员可以利用它们。这就是Pennylane的创建者Xanadu及其Jet框架的情况（*Vincent
    等，2022*）。
- en: 'Here, we will simulate a two-qubit circuit producing a Bell state using the
    Jet framework as an exercise. The resemblance between the circuit and the tensorial
    representation, as can be seen in the following figure, should help you envision
    the similarity between both approaches. The efficiency of computing will become
    apparent when the scale of the circuit is increased:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将使用Jet框架模拟一个产生贝尔态的两量子比特电路作为练习。从下图可以看出，电路与张量表示之间的相似性，应该有助于你形象地理解这两种方法之间的相似之处。当电路规模增大时，计算效率将变得更加明显：
- en: '![Figure 8.4 – A quantum circuit producing a two-qubit entangled bell state
    (left); tensor network representation highlighting the indexes to be used in the
    following code example (right)](img/B19146_08_004.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.4 – 产生两量子比特纠缠贝尔态的量子电路（左）；张量网络表示突出显示以下代码示例中将使用的索引（右）](img/B19146_08_004.jpg)'
- en: Figure 8.4 – A quantum circuit producing a two-qubit entangled bell state (left);
    tensor network representation highlighting the indexes to be used in the following
    code example (right)
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.4 – 产生两量子比特纠缠贝尔态的量子电路（左）；张量网络表示突出显示以下代码示例中将使用的索引（右）
- en: 'As we did previously, we will need to create the two 0 states that will kickstart
    our circuit state (initialization). In this case, we will need to indicate the
    index and dimensionality of our states:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前所做的那样，我们需要创建两个0态来启动我们的电路状态（初始化）。在这种情况下，我们需要指明我们的状态的索引和维度：
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Similarly, the Hadamard gate is represented by the matrix operator, and the
    indexes indicate where it is placed for our initial states:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，哈达玛门由矩阵运算符表示，索引则表示它在我们的初始状态中放置的位置：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'It does not matter if the *k* index has not appeared before, as it will be
    the link to further actions. The last action will be the **Control NOT** (**CNOT**)
    operation, which acts on the second qubit only if the first one (also called the
    control qubit) is in state |1>. It is characterized by the following matrix:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果*k*索引之前没有出现也没关系，因为它将是进一步操作的链接。最后的操作将是**控制非门**（**CNOT**）操作，仅当第一个量子比特（也称为控制量子比特）处于|1>态时，才作用于第二个量子比特。它的矩阵表示如下：
- en: CNOT = ⎡ ⎢ ⎣1 0 0 1 0 0 0 0 0 0 0 0 0 1 1 0⎤ ⎥ ⎦
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: CNOT = ⎡ ⎢ ⎣1 0 0 1 0 0 0 0 0 0 0 0 0 1 1 0⎤ ⎥ ⎦
- en: 'So, we can compose it by selecting which elements of the matrix are the ones
    that should be replaced with a value of 1, given that the matrix is initialized
    with 0 values:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以通过选择矩阵中应替换为1的元素来组合它，因为矩阵初始化时值为0：
- en: '[PRE8]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'With these four elements, we can compose our tensor network, linking each element
    by the indexes that are common to the rest. We could, for example, simply impose
    the Hadamard action on the first qubit (similar to what we did in the first exercise)
    and ask for its contraction:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这四个元素，我们可以组合我们的张量网络，通过与其他元素共享的索引将每个元素连接起来。例如，我们可以简单地对第一个量子比特施加哈达玛操作（类似于我们在第一个练习中所做的），并要求它的收缩：
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This will yield an equal superposition of |0> and |1> states:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生|0>和|1>态的均等叠加：
- en: '[PRE10]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We can see how the obtained tensor is the one referenced by the *k* index.
    Just by concatenating further actions and asking for the final contraction, we
    can effectively simulate the full chain of actions until the circuit produces
    the final state:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到获得的张量是由*k*索引引用的那个。只需通过连接进一步的操作并要求最终收缩，我们就可以有效地模拟整个操作链，直到电路产生最终状态：
- en: '[PRE11]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the two-qubit case, we can see how the first (|00>) and last (|11>) are
    states with probability amplitudes above zero and of equal value. They should
    coincide with the Bell state encoded by the circuit in *Figure 8**.3*, which can
    be represented in Dirac notation, as shown here:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在两比特情况下，我们可以看到第一个（|00>）和最后一个（|11>）状态具有大于零且相等的概率幅度。它们应与*图 8.3*中由电路编码的贝尔态一致，可以用狄拉克符号表示，如下所示：
- en: '![Figure 8.5 – Quantum circuit producing an entangled bell state (source: Wikipedia)](img/B19146_08_005.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.5 – 量子电路产生纠缠的贝尔态（来源：维基百科）](img/B19146_08_005.jpg)'
- en: 'Figure 8.5 – Quantum circuit producing an entangled bell state (source: Wikipedia)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.5 – 量子电路产生纠缠的贝尔态（来源：维基百科）
- en: 'Due to its fundamental functioning, many providers already offer the fundamentals
    of it as a simulator so that users can work at higher abstraction levels. We can
    find it as an option with some cloud vendors, as in the case of AWS cloud devices,
    as shown in the following figure:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 由于其基本功能，许多提供商已经将其基础功能作为模拟器提供，以便用户可以在更高的抽象层次上工作。我们可以在一些云服务商那里找到它，例如AWS云设备中的选项，如下图所示：
- en: '![Figure 8.6 – AWS TN1 tensor network simulator description page](img/B19146_08_006.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.6 – AWS TN1 张量网络模拟器描述页面](img/B19146_08_006.jpg)'
- en: Figure 8.6 – AWS TN1 tensor network simulator description page
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.6 – AWS TN1 张量网络模拟器描述页面
- en: It costs up to 0.275 dollars per minute but can perform on up to 50 qubits and
    100 gate circuit instances. Both SV1 and DM1 devices, which can classically simulate
    circuits as well, are limited to up to 34 qubits and 17 qubit circuits, respectively
    (also being cheaper options).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 它的费用高达每分钟 0.275 美元，但可以处理最多 50 个量子比特和 100 个门电路实例。SV1 和 DM1 设备（也可以进行经典电路模拟）分别限制在最多
    34 个量子比特和 17 个量子比特电路（也是更便宜的选择）。
- en: Given that it all seems to boil down to tensor multiplications (vectors for
    states and matrices for operators in general), there is an evident step to squeeze
    our classical resources up to their limit, which is done by exploiting all available
    classical resources when performing those computations. Tensor networks are great
    for simplifying the required computation, but still, the hardware needs to be
    provided. This is when classical resources for vector and matrix computation join
    the quantum computing party.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于这一切似乎归结为张量乘法（一般来说，状态使用向量表示，算子使用矩阵表示），显然有一个步骤是将我们的经典资源最大化，这通过在执行这些计算时利用所有可用的经典资源来实现。张量网络非常适合简化所需的计算，但硬件仍然需要提供。这时，经典的向量和矩阵计算资源便加入了量子计算的行列。
- en: GPUs
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GPU
- en: As mentioned previously, GPUs also play a key role in short-term quantum computing.
    Initially, GPUs were designed for matrix operations, which are required when rendering
    images on a computer. Mid-90s manufacturers such as Nvidia ([https://en.wikipedia.org/wiki/NV1](https://en.wikipedia.org/wiki/NV1))
    released their first working cards and have been actively innovating since then.
    The gaming industry made sure GPU manufacturers had continuous improvements to
    be delivered both software and hardware-wise, making those devices more and more
    performant for their main tasks.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，GPU 在短期量子计算中也发挥着关键作用。最初，GPU 是为矩阵运算设计的，这些运算在计算机渲染图像时是必需的。90年代中期，像 Nvidia
    ([https://en.wikipedia.org/wiki/NV1](https://en.wikipedia.org/wiki/NV1)) 这样的制造商发布了他们的首款工作卡，并从那时起一直在积极创新。游戏产业确保了
    GPU 制造商不断改进，提供了软件和硬件的持续更新，使得这些设备在执行其主要任务时越来越高效。
- en: Looking at adjacent fields, GPU manufacturers realized that it was becoming
    more and more difficult to train models on a CPU for machine learning specialists,
    particularly in computer vision. And with the explosion of large-scale models
    and the deep learning era, it was obvious that there was a niche market to exploit
    for their product. Their ability to boost deep learning tasks comes from the fact
    that performing matrix operations efficiently is their main purpose. In general,
    computers process images as tensors, performing convolutions on them to identify
    cats or dogs (for example), detect objects in the image, or segment the objects
    on it.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 从相邻领域来看，GPU 制造商意识到，对于机器学习专家，特别是在计算机视觉领域，使用 CPU 训练模型变得越来越困难。随着大规模模型的爆炸性增长和深度学习时代的到来，显而易见，GPU
    产品有一个潜在的市场可以开拓。它们提升深度学习任务的能力源于其高效执行矩阵运算的主要目的。通常，计算机将图像处理为张量，通过对其执行卷积操作来识别猫或狗（例如），检测图像中的物体，或对图像中的物体进行分割。
- en: 'Given that matrix operations are at the core of the mathematical concept of
    quantum computing, a few providers such as Nvidia focused on how they could help
    boost this field, which later released an SDK specialized for quantum computing
    that leverages the usage of its card architectures ([https://docs.nvidia.com/cuda/cuquantum/](https://docs.nvidia.com/cuda/cuquantum/)).
    Not only that, but it also provided specialized frameworks for previously highlighted
    techniques and mathematical frameworks, making its GPU cards the cornerstone for
    current quantum computing research:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 由于矩阵运算是量子计算数学概念的核心，一些供应商，如 Nvidia，专注于如何帮助推动这一领域的发展，后来发布了一个专门用于量子计算的 SDK，利用其卡架构的优势
    ([https://docs.nvidia.com/cuda/cuquantum/](https://docs.nvidia.com/cuda/cuquantum/))。不仅如此，它还为之前提到的技术和数学框架提供了专门的框架，使得其
    GPU 卡成为当前量子计算研究的基石：
- en: '![Figure 8.7 – Architecture for the GPU-based simulation framework described
    by NVIDIA](img/B19146_08_007.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.7 – NVIDIA 描述的基于 GPU 的仿真框架架构](img/B19146_08_007.jpg)'
- en: Figure 8.7 – Architecture for the GPU-based simulation framework described by
    NVIDIA
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.7 – NVIDIA 描述的基于 GPU 的仿真框架架构
- en: Thanks to its abstractions, most hardware providers and cloud computing vendors
    can seamlessly integrate state-of-the-art quantum simulation and emulation technology
    on its stack, making it available to the general public.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 得益于其抽象层，大多数硬件供应商和云计算服务商可以无缝地将最先进的量子仿真和仿真技术集成到其技术栈中，使普通公众也能够使用这些技术。
- en: For those interested in diving a little bit deeper into the technology, frameworks
    such as Baidu’s PaddlePaddle and Xanadu’s Pennylane offer the option to run their
    simulations on top of Nvidia cards by allowing Python-intermediate libraries to
    interact with native CUDA libraries acting on the hardware. Even if it sounds
    complicated, it just takes a few lines of code to enable this boosting.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些有兴趣深入了解该技术的人，像百度的 PaddlePaddle 和 Xanadu 的 Pennylane 这样的框架提供了在 Nvidia 卡上运行仿真的选项，通过允许
    Python 中间库与在硬件上操作的原生 CUDA 库进行交互。即使听起来复杂，只需几行代码就能启用这种加速。
- en: 'For example, when using Qiskit as the main framework, you can install the Aer
    simulator’s version with GPU support:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在使用 Qiskit 作为主要框架时，你可以安装支持 GPU 的 Aer 仿真器版本：
- en: '[PRE12]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: It will overwrite the standard `qiskit-aer` library, and all simulations will
    utilize GPU-backed processing for state vector simulations.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 它将覆盖标准的`qiskit-aer`库，所有仿真都将利用 GPU 支持的状态矢量仿真处理。
- en: 'Xanadu and its QML framework, Pennylane, went in a different direction. It
    released a completely separate library called Lightning that, once installed with
    GPU support, allows users to invoke a GPU device so that all required calculations
    are sent to the GPU instead of the default CPU:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Xanadu及其QML框架Pennylane走上了一条不同的道路。它发布了一个完全独立的库，名为Lightning，一旦安装了GPU支持，用户可以调用GPU设备，使得所有需要的计算都发送到GPU，而不是默认的CPU：
- en: '[PRE13]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Google went on a different journey, defining its specific hardware as optimized
    for low-dimensional matrices and the broader definition of tensors. These devices
    are called *tensor processing units* ([https://cloud.google.com/tpu/docs/tpus](https://cloud.google.com/tpu/docs/tpus))
    and are the natural evolution of this abstraction; they are particularly suited
    for AI and will most likely boost some of the workloads of its cloud-provided
    quantum computing service ([https://quantumai.google/cirq/google/concepts](https://quantumai.google/cirq/google/concepts)).
    Thanks to the cloud’s abstraction, it would most likely be hard to tell where
    our circuits were running if it was not for their price.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌走上了另一条道路，定义其专用硬件为低维矩阵和张量的广义定义优化。这些设备被称为*张量处理单元*（[https://cloud.google.com/tpu/docs/tpus](https://cloud.google.com/tpu/docs/tpus)），是这种抽象的自然演变；它们特别适用于AI，并且很可能会提升其云提供的量子计算服务的某些工作负载（[https://quantumai.google/cirq/google/concepts](https://quantumai.google/cirq/google/concepts)）。由于云的抽象，若非其价格，可能很难辨别我们的电路在哪运行。
- en: Summary
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we saw that there are many ways to simulate a quantum computer
    before running it on an actual device. We saw that there are also some implications
    regarding the limited availability, errors, and specific characteristics of the
    real hardware to be considered and that classical computers are not yet done when
    it comes to quantum computing.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到在实际设备上运行量子计算机之前，有许多方法可以进行模拟。我们还看到，现实硬件的有限可用性、错误和特定特性带来了一些影响，需要考虑，而经典计算机在量子计算方面尚未“完成”。
- en: Establishing a strategy to validate our circuits, evaluate their potential,
    and decide where those algorithms will run requires understanding the set of options
    provided by almost all quantum companies.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 建立验证我们电路、评估其潜力并决定算法运行地点的策略，要求理解几乎所有量子公司提供的选项集合。
- en: Tensor networks provide a powerful mathematical framework to simulate complex
    systems efficiently. GPUs have also placed their bet. Even combining both has
    proven to be a valid approach for simulating large devices.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 张量网络提供了一个强大的数学框架，可以高效地模拟复杂系统。GPU也在此领域下注。即使是将两者结合起来，已证明也是一种有效的模拟大规模设备的方法。
- en: Distributed computation is anticipated to be the next hurdle to overcome, necessitating
    a certain level of technical expertise to harness its potential efficiently. Similar
    to the trajectory followed by tensor networks and GPUs, simplified approaches
    have emerged to exploit classical computing resources at various levels.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 分布式计算预计将成为下一道障碍，需要一定的技术专长来有效地利用其潜力。类似于张量网络和GPU的发展轨迹，简化的方法已出现，以在不同层次上利用经典计算资源。
- en: Vendors such as Nvidia already provide a distributed framework for data science
    called RAPIDS, which simplifies the end-to-end work, boosting the core activities
    related to data cleaning, transformation, and model training. It allows us to
    imagine a future where distributed GPU-enabled tensor network-rooted quantum computing
    simulators and emulators will be integrated within the actual ecosystem for end-to-end
    data-driven use case exploitation. Even when fault-tolerant quantum devices are
    available to the open public, this type of setting will provide a cost-efficient
    way to tackle some of the most complicated problems companies face nowadays.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 像Nvidia这样的供应商已经提供了一种名为RAPIDS的数据科学分布式框架，它简化了端到端的工作，促进了数据清洗、转化和模型训练的核心活动。它让我们能够想象一个未来，其中分布式GPU支持的张量网络根植的量子计算模拟器和仿真器将被集成到实际生态系统中，用于端到端的数据驱动应用场景的开发。即使当容错量子设备向公众开放时，这种设置也将提供一种高效、低成本的方式来应对当今公司面临的一些最复杂的问题。
- en: Hybrid quantum computation will make use of all the research that has been developed
    so that meaningful advances in science and business will be accelerated in the
    near future.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 混合量子计算将利用所有已开发的研究，从而加速科学和商业领域的有意义进展，这些进展将在不久的将来出现。
- en: Further reading
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入阅读
- en: For those interested in diving deeper into some of the techniques mentioned
    in this chapter, here are some recommendations that should help you understand
    the basics.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些有兴趣深入了解本章提到的一些技术的人，这里有一些推荐资料，应该能帮助你理解基本概念。
- en: One of the most interesting and challenging frameworks we have discussed is
    tensor networks. Many resources can be found in the literature. Still, two that
    we can recommend are the work by Biamonte and Bergholm from 2017, which provides
    a solid foundation to understand its potential better. For those more hands-on
    engineers, the Quimb (*Gray, 2018*) and Jet (*Vincent et al., 2022*) Python packages
    provide a fun way to learn and experiment.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论的最有趣且具有挑战性的框架之一是张量网络。许多资源可以在文献中找到。不过，我们可以推荐两篇：2017年比阿蒙特和伯赫霍尔姆的工作，它为更好地理解张量网络的潜力提供了坚实的基础。对于那些更倾向于动手的工程师，Quimb（*格雷，2018*）和Jet（*文森特等，2022*）的Python包提供了一种有趣的方式来学习和实验。
- en: Similarly, distributed computation has a path, and works by Zaharia et al. (2010)
    on Apache Spark and Moritz et al. (2018) on Ray are leading the path toward easy-to-implement
    distributed solutions.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，分布式计算有其发展路径，扎哈里亚等人（2010）关于Apache Spark的工作以及莫里茨等人（2018）关于Ray的研究，正在引领朝向易于实现的分布式解决方案的方向。
- en: 'Something particularly interesting is the contribution of the Baidu team to
    the existing PaddlePaddle framework (*Ma et al., 2020*). Not only have they provided
    an industrial-level framework for deep learning but they have also adapted part
    of it to include QML-related works, extending it to one of the most interesting
    hybrid QML platforms that’s openly available: [https://github.com/PaddlePaddle/Quantum](https://github.com/PaddlePaddle/Quantum).'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 一个特别有趣的贡献是百度团队对现有PaddlePaddle框架的贡献（*马等，2020*）。他们不仅为深度学习提供了一个工业级框架，还将其一部分改编以包含与QML相关的工作，扩展为一个最有趣的混合QML平台之一，且公开可用：[https://github.com/PaddlePaddle/Quantum](https://github.com/PaddlePaddle/Quantum)。
- en: It also specifies the possibility of performing said calculation on GPUs so
    that users get the most out of classical resources.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 它还指定了在GPU上执行此计算的可能性，从而让用户充分利用经典计算资源。
- en: References
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: '*Bennett, C. H., & Shor, P. W. (1998). Quantum information theory. IEEE transactions
    on information theory,* *44(6), 2,724-2,742.*'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '*贝内特，C. H.，& 绍尔，P. W.（1998）。量子信息理论。IEEE信息理论汇刊，* *44（6），2,724-2,742。*'
- en: '*Biamonte, J., & Bergholm, V. (2017). Tensor networks in a nutshell. arXiv*
    *preprint arXiv:1708.00006.*'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '*比阿蒙特，J.，& 伯赫霍尔姆，V.（2017）。张量网络简述。arXiv* *预印本arXiv:1708.00006。*'
- en: '*Brassard, G., Hoyer, P., Mosca, M., & Tapp, A. (2002). Quantum amplitude amplification
    and estimation. Contemporary Mathematics,* *305, 53-74.*'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '*布拉萨德，G.，霍耶，P.，莫斯卡，M.，& 塔普，A.（2002）。量子振幅放大与估计。《当代数学》，* *305，53-74。*'
- en: '*Bowen, G. (2001). Classical information capacity of superdense coding. Physical
    Review A,* *63(2), 022302.*'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '*鲍文，G.（2001）。超密编码的经典信息容量。物理评论 A，* *63（2），022302。*'
- en: '*Guerreschi, G. G., Hogaboam, J., Baruffa, F., & Sawaya, N. P. (2020). Intel
    Quantum Simulator: A cloud-ready high-performance simulator of quantum circuits.
    Quantum Science and Technology,* *5(3), 034007.*'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '*格雷雷斯基，G. G.，霍戈博姆，J.，巴鲁法，F.，& 萨瓦亚，N. P.（2020）。英特尔量子模拟器：一种云端高性能量子电路模拟器。《量子科学与技术》，*
    *5（3），034007。*'
- en: '*Gray, J. (2018). quimb: A Python package for quantum information and many-body
    calculations. Journal of Open Source Software,* *3(29), 819.*'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '*格雷，J.（2018）。quimb：一个用于量子信息和多体计算的Python包。《开源软件期刊》，* *3（29），819。*'
- en: '*Kwak, Y., Yun, W. J., Kim, J. P., Cho, H., Park, J., Choi, M., ... & Kim,
    J. (2022). Quantum distributed deep learning architectures: Models, discussions,
    and applications.* *ICT Express.*'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '*郭，Y.，尹，W. J.，金，J. P.，赵，H.，朴，J.，崔，M.，... & 金，J.（2022）。量子分布式深度学习架构：模型、讨论与应用。*
    *ICT Express。*'
- en: '*Li, W., Lu, S., & Deng, D. L. (2021). Quantum federated learning through blind
    quantum computing. Science China Physics, Mechanics & Astronomy,* *64(10), 1-8.*'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '*李，W.，卢，S.，& 邓，D. L.（2021）。通过盲量子计算进行量子联邦学习。《中国科学：物理学、力学与天文学》，* *64（10），1-8。*'
- en: '*Ma, Y., Yu, D., Wu, T., & Wang, H. (2019). PaddlePaddle: An open-source deep
    learning platform from industrial practice. Frontiers of Data and Computing,*
    *1(1), 105-115.*'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '*马，Y.，于，D.，吴，T.，& 王，H.（2019）。PaddlePaddle：来自工业实践的开源深度学习平台。《数据与计算前沿》，* *1（1），105-115。*'
- en: '*Meng, X., Bradley, J., Yavuz, B., Sparks, E., Venkataraman, S., Liu, D., ...
    & Talwalkar, A. (2016). Mllib: Machine learning in apache spark. The Journal of
    Machine Learning Research,* *17(1), 1,235-1,241.*'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '*孟，X.，布拉德利，J.，亚夫兹，B.，斯帕克斯，E.，文卡塔拉曼，S.，刘，D.，... & 塔尔沃卡尔，A.（2016）。Mllib：Apache
    Spark中的机器学习。《机器学习研究期刊》，* *17（1），1,235-1,241。*'
- en: '*Moritz, P., Nishihara, R., Wang, S., Tumanov, A., Liaw, R., Liang, E., ...
    & Stoica, I. (2018). Ray: A distributed framework for emerging {AI} applications.
    In the 13th USENIX Symposium on Operating Systems Design and Implementation (OSDI
    18) (**pp. 561-577).*'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '*Moritz, P., Nishihara, R., Wang, S., Tumanov, A., Liaw, R., Liang, E., ...
    & Stoica, I. (2018). Ray：一个用于新兴{AI}应用的分布式框架。在第13届USENIX操作系统设计与实现研讨会（OSDI 18）中（**第561-577页）。*'
- en: '*Orús, R. (2019). Tensor networks for complex quantum systems. Nature Reviews
    Physics,* *1(9), 538-550.*'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '*Orús, R. (2019). 复杂量子系统的张量网络。自然物理评论，* *1(9)，538-550。*'
- en: '*Preskill, J. (2021). Quantum computing 40 years later. arXiv* *preprint arXiv:2106.10522.*'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '*Preskill, J. (2021). 量子计算40年后。arXiv* *预印本 arXiv:2106.10522.*'
- en: '*Suzumura, T., Zhou, Y., Kawahara, R., Baracaldo, N., & Ludwig, H. (2022).
    Federated Learning for Collaborative Financial Crimes Detection. In Federated
    Learning (pp. 455-466).* *Springer, Cham.*'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '*Suzumura, T., Zhou, Y., Kawahara, R., Baracaldo, N., & Ludwig, H. (2022).
    用于协同金融犯罪检测的联邦学习。在联邦学习（第455-466页）中。* *Springer，Cham。*'
- en: '*Vincent, T., O’Riordan, L. J., Andrenkov, M., Brown, J., Killoran, N., Qi,
    H., & Dhand, I. (2022). Jet: Fast quantum circuit simulations with parallel task-based
    tensor-network contraction. Quantum,* *6, 709.*'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '*Vincent, T., O’Riordan, L. J., Andrenkov, M., Brown, J., Killoran, N., Qi,
    H., & Dhand, I. (2022). Jet：通过基于任务的并行张量网络收缩进行快速量子电路仿真。Quantum，* *6，709。*'
- en: '*Zaharia, M., Chowdhury, M., Franklin, M. J., Shenker, S., & Stoica, I. (2010).
    Spark: Cluster computing with working sets. In the 2nd USENIX Workshop on Hot
    Topics in Cloud Computing (**HotCloud 10).*'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '*Zaharia, M., Chowdhury, M., Franklin, M. J., Shenker, S., & Stoica, I. (2010).
    Spark：具有工作集的集群计算。在第2届USENIX云计算热点问题研讨会（**HotCloud 10）中。*'
- en: '*Zhao, X., Zhao, B., Wang, Z., Song, Z., & Wang, X. (2021). Practical distributed
    quantum information processing with LOCCNet. npj Quantum Information,* *7(1),
    1-7.*'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '*Zhao, X., Zhao, B., Wang, Z., Song, Z., & Wang, X. (2021). 使用LOCCNet的实用分布式量子信息处理。npj量子信息，*
    *7(1)，1-7。*'
