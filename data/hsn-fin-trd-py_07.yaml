- en: '*Chapter 5*: Data Visualization Using Matplotlib'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第五章*：使用 Matplotlib 进行数据可视化'
- en: Data visualization allows comprehending numerical data significantly more easily
    than reading pure tables of numbers. Getting instant insight into data and the
    identification of patterns, trends, and outliers are the primary uses of charting
    libraries.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 数据可视化比阅读纯数字表格更容易理解数值数据。即时获取数据洞察力和识别模式、趋势和异常值是绘图库的主要用途。
- en: When deciding which stock may be suitable for which algorithmic trading strategy,
    creating a chart of the stock price is the first step – some strategies are suitable
    only for trending stocks, some for mean-reversion stocks, and so on. While numerical
    statistics are critical, there is no substitute for a well-designed chart.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在决定哪些股票可能适合哪些算法交易策略时，创建股票价格图是第一步——某些策略仅适用于趋势股票，某些策略适用于均值回归股票等等。虽然数值统计数据至关重要，但设计良好的图表是无法替代的。
- en: This chapter introduces us to Matplotlib, a static, animated, and interactive
    Python visualization library extending the capabilities of NumPy. The `pandas`
    library allows direct charting of DataFrames using Matplotlib.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章向我们介绍了 Matplotlib，这是一个静态、动画和交互式的 Python 可视化库，扩展了 NumPy 的功能。`pandas` 库允许直接使用
    Matplotlib 绘制 DataFrame 图表。
- en: 'This chapter covers the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了以下主要主题：
- en: Creating figures and subplots
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建图和子图
- en: Enriching plots with colors, markers, and line styles
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用颜色、标记和线型丰富图表
- en: Enriching axes with ticks, labels, and legends
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过刻度、标签和图例丰富坐标轴
- en: Enriching data points with annotations
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用注释丰富数据点
- en: Saving plots to files
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将图保存到文件中
- en: Charting a `pandas` DataFrame with Matplotlib
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Matplotlib 绘制 `pandas` DataFrame
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The Python code used in this chapter is available in the `Chapter05/matplotlib.ipynb`
    notebook in the book's code repository.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的 Python 代码可在该书代码库中的 `Chapter05/matplotlib.ipynb` 笔记本中找到。
- en: Creating figures and subplots
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建图和子图
- en: Matplotlib supports plotting multiple charts (subplots) on a single figure,
    which is Matplotlib's term for the drawing canvas.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib 支持在单个图中绘制多个图表（子图），这是 Matplotlib 对绘图画布的术语。
- en: Defining figures' subplots
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义图的子图
- en: 'To create a `matplotlib.pyplot.figure` object, use the following method:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个 `matplotlib.pyplot.figure` 对象，请使用以下方法：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This yields an empty figure object (`0 Axes`):'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这会生成一个空的图形对象（`0 Axes`）：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Before we plot anything on this figure, we need to add subplots to create space
    for them. The `matplotlib.pyplot.figure.add_subplot(...)` method lets us do that
    by specifying the size of the subplot and the location.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们在这个图上绘制任何东西之前，我们需要添加子图以为它们创建空间。`matplotlib.pyplot.figure.add_subplot(...)`
    方法让我们通过指定子图的大小和位置来做到这一点。
- en: 'The following code block adds a subplot of size 1x2 grids on the left, then
    a subplot of 2x2 on the top right, and finally, a subplot of 2x2 on the bottom
    right:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码块在左侧添加了一个大小为 1x2 的子图，然后在右上方添加了一个 2x2 的子图，最后在右下方添加了一个 2x2 的子图：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The result is the following figure object containing the subplots we just added:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是以下图形对象，其中包含我们刚刚添加的子图：
- en: '![Figure 5.1 – Figure containing three empty subplots](img/Figure_5.1_B15029.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.1 – 包含三个空子图的图](img/Figure_5.1_B15029.jpg)'
- en: Figure 5.1 – Figure containing three empty subplots
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.1 – 包含三个空子图的图
- en: Now, once we have created the space for the charts (`"plots"`/`"subplots"`),
    we can populate them with visualizations. In all reports, physical space on the
    page is very expensive, so creating charts like the preceding is the best practice.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，一旦我们创建了图表的空间（“plots”/“subplots”），我们就可以用可视化数据填充它们。在所有报告中，页面上的物理空间都非常昂贵，因此创建像前面的图表是最佳实践。
- en: Plotting in subplots
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在子图中绘图
- en: Let's use `numpy.linspace(...)` to generate evenly spaced values on the *x*
    axis, and then the `numpy.square(...)`, `numpy.sin(...)`, and `numpy.cos(...)`
    methods to generate corresponding values on the *y* axis.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 `numpy.linspace(...)` 在 *x* 轴上生成均匀间隔的值，然后使用 `numpy.square(...)`、`numpy.sin(...)`
    和 `numpy.cos(...)` 方法在 *y* 轴上生成相应的值。
- en: 'We will use the `ax1`, `ax2`, and `ax3` axes variables we got from adding subplots
    to plot these functions:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用从添加子图中获得的 `ax1`、`ax2` 和 `ax3` 轴变量来绘制这些函数：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, the following figure contains the values we just plotted:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，以下图包含了我们刚刚绘制的值：
- en: '![Figure 5.2 – Figure containing three subplots plotting the square, sine,
    and cosine functions](img/Figure_5.2_B15029.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.2 – 包含绘制正方形、正弦和余弦函数的三个子图的图](img/Figure_5.2_B15029.jpg)'
- en: Figure 5.2 – Figure containing three subplots plotting the square, sine, and
    cosine functions
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.2 - 包含三个子图绘制平方、正弦和余弦函数的图
- en: The `sharex=` parameter can be passed when creating subplots to specify that
    all the subplots should share the same *x* axis.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 创建子图时，可以传递`sharex=`参数，以指定所有子图应共享相同的*x*轴。
- en: 'Let''s demonstrate this functionality and plot the square, and then use the
    `numpy.power(...)` method to raise `x` to the power of 10 and plot them with the
    same *x* axis:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们演示这个功能并绘制平方，然后使用`numpy.power(...)`方法将`x`提高到10次方，并使用相同的*x*轴绘制它们：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The result is the following figure with a shared *x* axis and different functions
    plotted on each graph:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是以下带有共享*x*轴和不同函数绘制在每个图表上的图：
- en: '![Figure 5.3 – Figure with subplots sharing an x axis, containing the square
    and raised to 10 functions](img/Figure_5.3_B15029.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图5.3 - 具有共享x轴的子图的图，包含平方和取10次方函数](img/Figure_5.3_B15029.jpg)'
- en: Figure 5.3 – Figure with subplots sharing an x axis, containing the square and
    raised to 10 functions
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.3 - 共享x轴的子图，包含平方和取10次方函数
- en: The charts we generated are not self-explanatory yet – it is unclear what the
    units on the *x* axis and the *y* axis are, and what each chart represents. To
    improve the charts, we need to enrich them with colors, markers, and line styles,
    to enrich the axes with ticks, legends, and labels and provide selected data points'
    annotations.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们生成的图表还不够自解释 - 尚不清楚*x*轴和*y*轴上的单位是什么，以及每个图表代表什么。为了改进图表，我们需要用颜色、标记和线型来丰富它们，用刻度、图例和标签来丰富轴，并提供选定数据点的注释。
- en: Enriching plots with colors, markers, and line styles
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用颜色、标记和线型丰富图表
- en: Colors, markers, and lines styles make charts easier to understand.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色、标记和线型使图表更易于理解。
- en: 'The code block that follows plots four different functions and uses the following
    parameters to modify the appearance:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的代码块绘制了四个不同的函数，并使用以下参数修改外观：
- en: The `color=` parameter is used to assign colors.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`color=`参数用于分配颜色。'
- en: The `linewidth=` parameter is used to change the width/thickness of the lines.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`linewidth=`参数用于更改线的宽度/粗细。'
- en: The `marker=` parameter assigns different shapes to mark the data points.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`marker=`参数分配不同形状来标记数据点。'
- en: The `markersize=` parameter changes the size of those markers.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`markersize=`参数改变了这些标记的大小。'
- en: The `alpha=` parameter is used to modify the transparency.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`alpha=`参数用于修改透明度。'
- en: The `drawstyle=` parameter changes the default line connectivity to step connectivity
    between data points for one plot.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`drawstyle=`参数将默认线连接方式更改为一种绘制之间的阶梯连接方式。'
- en: 'The code is as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 代码如下：
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The output displays four functions with different attributes assigned to them:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示了四个具有不同属性的函数：
- en: '![Figure 5.4 – Plot demonstrating different color, line style, marker style,
    transparency, and size options](img/Figure_5.4_B15029.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图5.4 - 演示不同颜色、线型、标记样式、透明度和大小选项的图](img/Figure_5.4_B15029.jpg)'
- en: Figure 5.4 – Plot demonstrating different color, line style, marker style, transparency,
    and size options
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.4 - 演示不同颜色、线型、标记样式、透明度和大小选项的图
- en: Using different colors, line styles, marker styles, transparency, and size options
    enables us to generate rich charts with easily identifiable multiple time series.
    Choose the colors wisely as they may not render well on some laptop screens or
    on paper if printed.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 使用不同的颜色、线型、标记样式、透明度和大小选项，可以生成具有易于识别的多个时间序列的丰富图表。选择颜色时要明智，因为它们在某些笔记本电脑屏幕上或在打印时可能不会很好地呈现。
- en: Enriching axes is the next step in making outstanding charts.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 丰富轴是制作出色图表的下一步。
- en: Enriching axes with ticks, labels, and legends
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用刻度、标签和图例丰富轴
- en: The charts can be further improved by customizing the axes via ticks, limits,
    and labels.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 通过自定义轴来进一步改进图表，通过刻度、限制和标签：
- en: The `matplotlib.pyplot.xlim(...)` method sets the range of values on the *x*
    axis.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`matplotlib.pyplot.xlim(...)`方法设置*x*轴上的值的范围。'
- en: 'The `matplotlib.pyplot.xticks(...)` method specifies where the ticks show up
    on the *x* axis:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`matplotlib.pyplot.xticks(...)`方法指定*x*轴上刻度显示的位置：'
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This modifies the *x* axis to be within the specified limits and the ticks
    at the explicitly specified values:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这将修改*x*轴以在指定的限制内，并在明确指定的值处显示刻度：
- en: '![Figure 5.5 – Plot with explicit limits and ticks on the x axis](img/Figure_5.5_B15029.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图5.5 - x轴上具有显式限制和刻度的图](img/Figure_5.5_B15029.jpg)'
- en: Figure 5.5 – Plot with explicit limits and ticks on the x axis
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.5 – 具有显式 x 轴限制和刻度的图表
- en: We can also change the scale of one of the axes to non-linear using the `matplotlib.Axes.set_yscale(...)`
    method.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用 `matplotlib.Axes.set_yscale(...)` 方法将其中一个轴的比例改变为非线性。
- en: 'The `matplotlib.Axes.set_xticklabels(...)` method changes the labels on the
    *x* axis:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`matplotlib.Axes.set_xticklabels(...)` 方法更改*x*轴上的标签：'
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output of that code block shows the difference in the scale of the *y*
    axis, which is now logarithmic, and the *x* axis ticks have the specific tick
    labels:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 那个代码块的输出显示了*y*轴比例尺的差异，现在是对数，以及*x*轴刻度具有特定的刻度标签：
- en: '![Figure 5.6 – Plot with a logarithmic y-axis scale and custom x-axis tick
    labels](img/Figure_5.6_B15029.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.6 – 具有对数 y 轴比例尺和自定义 x 轴刻度标签的图表](img/Figure_5.6_B15029.jpg)'
- en: Figure 5.6 – Plot with a logarithmic y-axis scale and custom x-axis tick labels
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.6 – 具有对数 y 轴比例尺和自定义 x 轴刻度标签的图表
- en: The logarithmic scales in charts are useful if the dataset covers a large range
    of values and/or if we want to communicate percentage change or multiplicative
    factors.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图表中的对数比例尺在数据集涵盖大范围的值和/或我们想要传达百分比变化或乘法因子时非常有用。
- en: The `matplotlib.Axes.set_title(...)` method adds a title to the plot and the
    `matplotlib.Axes.set_xlabel(...)` and `matplotlib.Axes.set_ylabel(...)` methods
    set labels for the *x* and *y* axes.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`matplotlib.Axes.set_title(...)` 方法用于向绘图添加标题，`matplotlib.Axes.set_xlabel(...)`
    和 `matplotlib.Axes.set_ylabel(...)` 方法用于设置*x*和*y*轴的标签。'
- en: 'The `matplotlib.Axes.legend(...)` method adds a legend, which makes the plots
    easier to interpret. The `loc=` parameter specifies the location of the legend
    on the plot with `loc=''best''`, meaning Matplotlib picks the best location automatically:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`matplotlib.Axes.legend(...)` 方法添加图例，使图表更易于解释。`loc=` 参数指定图例在图表上的位置，`loc=''best''`
    表示 Matplotlib 自动选择最佳位置：'
- en: '[PRE8]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following plot shows the title, the *x*- and *y*-axis labels, and the legend:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了标题、*x* 和 *y* 轴标签以及图例：
- en: '![Figure 5.7 – Plot demonstrating a title, x- and y-axis labels, and a legend](img/Figure_5.7_B15029.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.7 – 展示了标题、x 轴和 y 轴标签以及图例的图表](img/Figure_5.7_B15029.jpg)'
- en: Figure 5.7 – Plot demonstrating a title, x- and y-axis labels, and a legend
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.7 – 展示了标题、x 轴和 y 轴标签以及图例的图表
- en: Charts with a different rendering of each time series and with explained units
    and labels of the axes are sufficient for understanding charts. However, there
    are always some special data points that would benefit from being pointed out.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 每个时间序列的不同渲染图表以及解释单位和轴标签足以理解图表。然而，总会有一些特殊的数据点，值得指出。
- en: Enriching data points with annotations
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用注释丰富数据点
- en: 'The `matplotlib.Axes.text(...)` method adds a text box to our plots:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`matplotlib.Axes.text(...)` 方法向我们的图表添加文本框：'
- en: '[PRE9]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The output is as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 5.8 – Plot displaying Matplotlib text annotations](img/Figure_5.8_B15029.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.8 – 显示 Matplotlib 文本注释的图表](img/Figure_5.8_B15029.jpg)'
- en: Figure 5.8 – Plot displaying Matplotlib text annotations
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.8 – 显示 Matplotlib 文本注释的图表
- en: The `matplotlib.Axes.annotate(...)` method provides more control over the annotations.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`matplotlib.Axes.annotate(...)` 方法提供了对注释的更多控制。'
- en: 'The code block that follows uses the following parameters to control the annotation:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的代码块使用以下参数控制注释：
- en: The `xy=` parameter specifies the location of the data point.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xy=` 参数指定数据点的位置。'
- en: The `xytext=` parameter specifies the location of the text box.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xytext=` 参数指定文本框的位置。'
- en: The `arrowprops=` parameter accepts a dictionary specifying parameters to control
    the arrow from the text box to the data point.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`arrowprops=` 参数接受一个字典，用于指定控制从文本框到数据点的箭头的参数。'
- en: The `facecolor=` parameter specifies the color and the `shrink=` parameter specifies
    the size of the arrow.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`facecolor=` 参数指定颜色，`shrink=` 参数指定箭头的大小。'
- en: The `horizontalalignment=` and `verticalalignment=` parameters specify the orientation
    of the text box relative to the data point.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`horizontalalignment=` 和 `verticalalignment=` 参数指定文本框相对于数据点的方向。'
- en: 'The code is as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 代码如下：
- en: '[PRE10]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The result is as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Figure 5.9 – Plot with text and arrow annotations of data points](img/Figure_5.9_B15029.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.9 – 具有数据点文本和箭头注释的图表](img/Figure_5.9_B15029.jpg)'
- en: Figure 5.9 – Plot with text and arrow annotations of data points
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.9 – 具有数据点的文本和箭头注释的图表
- en: Drawing attention to the key data points helps the reader focus on the message
    of the chart.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 引导读者注意关键数据点有助于读者专注于图表的信息。
- en: The `matplotlib.Axes.add_patch(...)` method can be used to add different shape
    annotations.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `matplotlib.Axes.add_patch(...)` 方法添加不同形状的注释。
- en: 'The code block that follows adds a `matplotlib.pyplot.Circle` object, which
    accepts the following:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的代码块添加了一个 `matplotlib.pyplot.Circle` 对象，它接受以下内容：
- en: The `xy=` parameter to specify the location
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `xy=` 参数来指定位置
- en: The `radius=` parameter to specify the circle radius
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `radius=` 参数来指定圆的半径
- en: The `color=` parameter to specify the color of the circle
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `color=` 参数来指定圆的颜色
- en: 'The code is as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 代码如下：
- en: '[PRE11]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This generates the following plot with circles around the data points:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这生成了以下图表，其中数据点周围有圆圈：
- en: '![Figure 5.10 – Plot containing circle annotations around data points generated
    from adding a patch](img/Figure_5.10_B15029.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.10 – 包含围绕数据点添加补丁生成的圆形注释的图表](img/Figure_5.10_B15029.jpg)'
- en: Figure 5.10 – Plot containing circle annotations around data points generated
    from adding a patch
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.10 – 包含围绕数据点添加补丁生成的圆形注释的图表
- en: Now that we have generated beautiful, professional charts, we need to learn
    how to share the images.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经生成了漂亮、专业的图表，需要学习如何分享这些图片。
- en: Saving plots to files
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将图表保存到文件
- en: 'The `matplotlib.pyplot.figure` object enables us to save plots to disk in different
    file formats with many size and resolution specifiers, such as the `dpi=` parameter:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`matplotlib.pyplot.figure` 对象使我们能够以不同的文件格式保存图表到磁盘，具有许多尺寸和分辨率说明符，例如 `dpi=` 参数：'
- en: '[PRE12]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This writes the following plot to the `fig.png` file:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这将以下图表写入 `fig.png` 文件：
- en: '![Figure 5.11 – Matplotlib plot written to a file on disk and opened with an
    external viewer](img/Figure_5.11_B15029.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.11 – 写入磁盘上的 Matplotlib 图表并在外部查看器中打开](img/Figure_5.11_B15029.jpg)'
- en: Figure 5.11 – Matplotlib plot written to a file on disk and opened with an external
    viewer
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.11 – 写入磁盘上的 Matplotlib 图表并在外部查看器中打开
- en: Exported images of trading strategies' performance are frequently used for HTML
    or email reports. For printing, choose the DPI of your printer as the DPI of the
    charts.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 导出的交易策略表现图像经常用于 HTML 或电子邮件报告。对于打印，请选择打印机的 DPI 作为图表的 DPI。
- en: Charting a pandas DataFrame with Matplotlib
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Matplotlib 绘制 pandas DataFrame 图表
- en: The `pandas` library provides plotting capabilities for Series and DataFrame
    objects using Matplotlib.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas` 库提供了使用 Matplotlib 对 Series 和 DataFrame 对象进行绘图的功能。'
- en: 'Let''s create a `pandas` DataFrame with the `Cont` value containing continuous
    values that mimic prices and the `Delta1` and `Delta2` values to mimic price changes.
    The `Cat` value contains categorical data from five possibilities:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个包含连续值的 `Cont` 值的 `pandas` DataFrame，模拟价格，以及模拟价格变化的 `Delta1` 和 `Delta2`
    值。 `Cat` 值包含五种可能的分类数据：
- en: '[PRE13]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This generates the following DataFrame:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这生成了以下 DataFrame：
- en: '[PRE14]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Let's explore different ways of how this DataFrame can be visualized.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索不同的方式，展现这个 DataFrame。
- en: Creating line plots of a DataFrame column
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 DataFrame 列的线图
- en: 'We can plot `''Cont value''` in a line plot using the `pandas.DataFrame.plot(...)`
    method with the `kind=` parameter:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `pandas.DataFrame.plot(...)` 方法的 `kind=` 参数在线图中绘制 `'Cont value'`：
- en: '[PRE15]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This command produces the following chart:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令生成以下图表：
- en: '![Figure 5.12 – Line plot generated using the pandas.DataFrame.plot(…) method](img/Figure_5.12_B15029.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.12 – 使用 pandas.DataFrame.plot(…) 方法生成的线图](img/Figure_5.12_B15029.jpg)'
- en: Figure 5.12 – Line plot generated using the pandas.DataFrame.plot(…) method
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.12 – 使用 pandas.DataFrame.plot(…) 方法生成的线图
- en: Line charts are typically used for displaying time series.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 线图通常用于显示时间序列。
- en: Creating bar plots of a DataFrame column
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 DataFrame 列的条形图
- en: The `pandas.DataFrame.plot(...)` method can be used with the `kind='bar'` parameter
    to build a bar chart.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `kind='bar'` 参数与 `pandas.DataFrame.plot(...)` 方法构建条形图。
- en: 'Let''s first group the DataFrame by the `''Cat value''` value, and then plot
    the `Delta1 discrete` value counts in a bar chart:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先按 `'Cat value'` 值对 DataFrame 进行分组，然后绘制 `Delta1 discrete` 值的条形图：
- en: '[PRE16]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This generates the following plot showing the frequency of `(Cat value, Delta1
    discrete)` value pairs:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这生成了以下图表，显示了 `(Cat value，Delta1 discrete)` 值对的频率：
- en: '![Figure 5.13 – Vertical bar plot displaying the frequency of (Cat value, Delta1
    discrete) value pairs](img/Figure_5.13_B15029.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.13 – 显示（Cat value，Delta1 discrete）值对频率的垂直条形图](img/Figure_5.13_B15029.jpg)'
- en: Figure 5.13 – Vertical bar plot displaying the frequency of (Cat value, Delta1
    discrete) value pairs
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.13 – 显示（Cat value，Delta1 discrete）值对频率的垂直条形图
- en: 'The `kind=''barh''` parameter builds a horizontal bar plot instead of a vertical
    one:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`kind=''barh''` 参数创建了一个水平条形图而不是垂直条形图：'
- en: '[PRE17]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The output is as follows:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 5.14 – Horizontal bar plot displaying the frequency of (Delta2 discrete,
    Cat value) pairs](img/Figure_5.14_B15029.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![图5.14 – 水平条形图显示（Delta2 离散，Cat 值）对的频率](img/Figure_5.14_B15029.jpg)'
- en: Figure 5.14 – Horizontal bar plot displaying the frequency of (Delta2 discrete,
    Cat value) pairs
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.14 – 水平条形图显示（Delta2 离散，Cat 值）对的频率
- en: Bar plots are most suitable for comparing the magnitude of categorical values.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 条形图最适合比较分类值的大小。
- en: Creating histogram and density plots of a DataFrame column
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 DataFrame 列的直方图和密度图
- en: The `kind='hist'` parameter in the `pandas.DataFrame.plot(…)` method builds
    a histogram.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas.DataFrame.plot(…)` 方法中的 `kind=''hist''` 参数创建了一个直方图。'
- en: 'Let''s create a histogram of the `Delta1 discrete` values:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个 `Delta1 离散` 值的直方图：
- en: '[PRE18]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The histogram generated is shown:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的直方图如下所示：
- en: '![Figure 5.15 – Histogram of Delta1 discrete frequency](img/Figure_5.15_B15029.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![图5.15 – Delta1 离散频率的直方图](img/Figure_5.15_B15029.jpg)'
- en: Figure 5.15 – Histogram of Delta1 discrete frequency
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.15 – Delta1 离散频率的直方图
- en: 'We can build a `kind=''kde''` parameter, which generates a PDF using the `Delta2
    discrete` value:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `kind='kde'` 参数，根据 `Delta2 离散` 值生成一个概率密度函数（PDF）：
- en: '[PRE19]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The output is as follows:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 5.16 – KDE plot displaying the PDF of Delta2 discrete values](img/Figure_5.16_B15029.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![图5.16 – 显示 Delta2 离散值的概率密度函数（PDF）的 KDE 图](img/Figure_5.16_B15029.jpg)'
- en: Figure 5.16 – KDE plot displaying the PDF of Delta2 discrete values
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.16 – 显示 Delta2 离散值的概率密度函数（PDF）的 KDE 图
- en: Histograms and PDFs/KDEs are used to assess the probability distribution of
    some random variables.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 直方图和概率密度函数（PDF）/核密度估计（KDE）用于评估一些随机变量的概率分布。
- en: Creating scatter plots of two DataFrame columns
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建两个 DataFrame 列的散点图
- en: Scatter plots from the `pandas.DataFrame.plot(...)` method are generated using
    the `kind='scatter'` parameter.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas.DataFrame.plot(...)` 方法生成的散点图使用 `kind=''scatter''` 参数。'
- en: 'The following code block plots a scatter plot between the `Delta1` and `Delta2`
    values:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码块绘制了 `Delta1` 和 `Delta2` 值之间的散点图：
- en: '[PRE20]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The output is as follows:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 5.17 – Scatter plot of the Delta1 value and Delta2 value fields](img/Figure_5.17_B15029.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![图5.17 – Delta1 值和 Delta2 值字段的散点图](img/Figure_5.17_B15029.jpg)'
- en: Figure 5.17 – Scatter plot of the Delta1 value and Delta2 value fields
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.17 – Delta1 值和 Delta2 值字段的散点图
- en: 'The `pandas.plotting.scatter_matrix(...)` method builds a matrix of scatter
    plots on non-diagonal entries and histogram/KDE plots on the diagonal entries
    of the matrix between the `Delta1` and `Delta2` values:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas.plotting.scatter_matrix(...)` 方法在矩阵的非对角线条目上构建散点图矩阵，并在矩阵的对角线条目上构建直方图/核密度估计（KDE）图，这些图显示了
    `Delta1` 和 `Delta2` 值之间的关系：'
- en: '[PRE21]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The output is as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 5.18 – Scatter matrix plot of the Delta1 value and Delta2 value fields](img/Figure_5.18_B15029.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![图5.18 – Delta1 值和 Delta2 值字段的散点矩阵图](img/Figure_5.18_B15029.jpg)'
- en: Figure 5.18 – Scatter matrix plot of the Delta1 value and Delta2 value fields
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.18 – Delta1 值和 Delta2 值字段的散点矩阵图
- en: Scatter plots/scatter matrices are used to observe relationships between two
    variables.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 散点图/散点矩阵用于观察两个变量之间的关系。
- en: Plotting time series data
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绘制时间序列数据
- en: 'The following code block creates a `pandas` DataFrame containing prices for
    two hypothetical trading instruments, `A` and `B`. The DataFrame is indexed by
    the `DateTimeIndex` objects representing daily dates from `1992` to `2012`:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码块创建了一个包含两个虚构交易工具 `A` 和 `B` 的价格的 `pandas` DataFrame。 DataFrame 由表示从 `1992`
    年到 `2012` 年的每日日期的 `DateTimeIndex` 对象索引：
- en: '[PRE22]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The resulting DataFrame is as follows:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 结果 DataFrame 如下：
- en: '[PRE23]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Let's use this time series for representative types of plots.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用这个时间序列代表性类型的图。
- en: Plotting prices in a line plot
  id: totrans-175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 绘制线性图中的价格
- en: 'First, let''s plot the daily prices for `A` and `B` over 20 years with line
    plots:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们用线性图绘制 `A` 和 `B` 的每日价格 20 年：
- en: '[PRE24]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The output is as follows:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 5.19 – Plot displaying prices for hypothetical instruments A and B
    over a period of 20 years](img/Figure_5.19_B15029.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![图5.19 – 20 年期间虚构仪器 A 和 B 的价格显示图](img/Figure_5.19_B15029.jpg)'
- en: Figure 5.19 – Plot displaying prices for hypothetical instruments A and B over
    a period of 20 years
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.19 – 20 年期间虚构仪器 A 和 B 的价格显示图
- en: While most time series charts are line plots, the additional chart types provide
    additional insight.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数时间序列图表都是线性图，而其他图表类型提供了额外的见解。
- en: Plotting price change histograms
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 绘制价格变化直方图
- en: The usual next stop in financial time series analysis is to inspect changes
    in price over some duration.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 金融时间序列分析中通常的下一步是检查某段时间内的价格变化。
- en: 'The following code block generates six new fields representing changes in prices
    over 1 day, 5 days, and 20 days, using the `pandas.DataFrame.shift(...)` and `pandas.DataFrame.fillna(...)`
    methods. We also drop rows with missing data due to the shift and the final DataFrame
    is saved in the `time_series_delta` DataFrame:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码块使用`pandas.DataFrame.shift(...)`和`pandas.DataFrame.fillna(...)`方法生成表示 1
    天、5 天和 20 天内价格变化的六个新字段。由于移位而导致数据缺失，我们还删除了具有缺失数据的行，并将最终的 DataFrame 保存在 `time_series_delta`
    DataFrame 中：
- en: '[PRE25]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The DataFrame contains the following:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: DataFrame 包含以下内容：
- en: '[PRE26]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We can plot the price change histogram for `A` based on what we have learned
    in this chapter with the following block of code:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用下面的代码块根据本章所学绘制`A`的价格变化直方图：
- en: '[PRE27]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The output is as follows:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 5.20 – Histogram of A_1, A_5, and A_20 deltas](img/Figure_5.20_B15029.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.20 – A_1、A_5 和 A_20 三个值的直方图](img/Figure_5.20_B15029.jpg)'
- en: Figure 5.20 – Histogram of A_1, A_5, and A_20 deltas
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.20 – A_1、A_5 和 A_20 三个值的直方图
- en: Histograms are used for assessing the probability distribution of the underlying
    data. This particular histogram suggests that the `A_20` delta has the greatest
    variability, which makes sense since the underlying data exhibits a strong trend.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 直方图用于评估底层数据的概率分布。这个特定的直方图表明，`A_20` delta 具有最大的变异性，这是合理的，因为底层数据呈现出强烈的趋势。
- en: Creating price change density plots
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建价格变化密度图
- en: We can also plot the density of price changes using the KDE PDF.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用 KDE PDF 绘制价格变化的密度。
- en: 'The following code block plots the density function for price changes in `B`:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码块绘制了`B`的价格变化密度函数：
- en: '[PRE28]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The output is as follows:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 5.21 – KDE density plot for price changes in B over 1, 5, and 20 days](img/Figure_5.21_B15029.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.21 – B 在 1、5 和 20 天内价格变化的 KDE 密度图](img/Figure_5.21_B15029.jpg)'
- en: Figure 5.21 – KDE density plot for price changes in B over 1, 5, and 20 days
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.21 – B 在 1、5 和 20 天内价格变化的 KDE 密度图
- en: KDE density plots are very similar to histograms. In contrast to histograms
    consisting of discrete boxes, KDEs are continuous lines.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: KDE 密度图与直方图非常相似。与由离散箱子组成的直方图不同，KDE 是连续的线条。
- en: Creating box plots by interval
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建区间的箱线图
- en: We can group daily prices by different intervals, such as yearly, quarterly,
    monthly, or weekly, and display the distribution of those prices using box plots.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按年度、季度、月度或周度等不同间隔分组每日价格，并使用箱线图显示这些价格的分布。
- en: 'The following piece of code first uses the `pandas.Grouper` object with `freq=''A''`
    to specify annual periodicity, and then applies to the result the `pandas.DataFrame.groupby(…)`
    method to build a `pandas.DataFrameGroupBy` object. Finally, we call the `pandas.DataFrameGroupBy.boxplot(...)`
    method to generate the box plot. We specify the `rot=90` parameter to rotate the
    *x*-axis tick labels to make it more readable:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码首先使用`pandas.Grouper`对象指定年度周期性，然后将结果应用于`pandas.DataFrame.groupby(…)`方法以构建`pandas.DataFrameGroupBy`对象。最后，我们调用`pandas.DataFrameGroupBy.boxplot(...)`方法生成箱线图。我们指定`rot=90`参数以将
    *x* 轴刻度标签旋转，使其更易读：
- en: '[PRE29]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The output is as follows:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 5.22 – Figure containing the box plot distribution of A''s prices
    grouped by year](img/Figure_5.22_B15029.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.22 – 按年份分组的 A 的价格箱线图分布的图表](img/Figure_5.22_B15029.jpg)'
- en: Figure 5.22 – Figure containing the box plot distribution of A's prices grouped
    by year
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.22 – 按年份分组的 A 的价格箱线图分布的图表
- en: 'Box plots with whiskers are used for visualizing groups of numerical data through
    their corresponding quartiles:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 带有须的箱线图用于通过相应的四分位数可视化数值数据组：
- en: The box's lower bound corresponds to the lower quartile, while the box's upper
    bound represents the group's upper quartile.
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 箱子的下界对应于下四分位数，而箱子的上界表示组的上四分位数。
- en: The line within the box displays the value of the median of the interval.
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 箱子内的线显示间隔的中值。
- en: The line below the box ends with the value of the lowest observation.
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 箱子下方的线结束于最低观测值。
- en: The line above the box ends with the value of the highest observation.
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 箱子上方的线结束于最高观测值。
- en: Creating lag scatter plots
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建滞后散点图
- en: 'We can visualize the relationships between the different price change variables
    using the `pandas.plotting.scatter_matrix(…)` method:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`pandas.plotting.scatter_matrix(…)`方法可视化不同价格变化变量之间的关系：
- en: '[PRE30]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The result shows some linear relationships between the `(A_5_Delta and A_1_Delta)`,
    `(A_5_Delta and A_20_Delta)`, `(B_1_Delta and B_5_Delta)`, and `(B_5_Delta and
    B_20_Delta)` variable pairs:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 结果显示`(A_5_Delta 和 A_1_Delta)`、`(A_5_Delta 和 A_20_Delta)`、`(B_1_Delta 和 B_5_Delta)`以及`(B_5_Delta
    和 B_20_Delta)`变量对之间存在一些线性关系：
- en: '![Figure 5.23 – Scatter matrix plot for A and B price delta variables](img/Figure_5.23_B15029.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![图5.23 – A 和 B 价格变量的散点矩阵图](img/Figure_5.23_B15029.jpg)'
- en: Figure 5.23 – Scatter matrix plot for A and B price delta variables
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.23 – A 和 B 价格变量的散点矩阵图
- en: 'We can also use the `pandas.plotting.lag_plot(...)` method with different `lag=`
    values to specify different levels of lag to generate the scatter plots between
    prices and lagged prices for `A`:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`pandas.plotting.lag_plot(...)`方法，并使用不同的`lag=`值来指定不同水平的滞后，以生成`A`的价格与滞后价格之间的散点图：
- en: '[PRE31]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'This generates the following three plots for lags of 1, 7, and 20 days:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 这生成了滞后值为1、7和20天的三个图：
- en: '![Figure 5.24 – Lag plots for A''s prices with lag values of 1, 7, and 20 days,
    showing martingale properties](img/Figure_5.24_B15029.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![图5.24 – A 的价格滞后1、7和20天的滞后图，显示马丁盖尔性质](img/Figure_5.24_B15029.jpg)'
- en: Figure 5.24 – Lag plots for A's prices with lag values of 1, 7, and 20 days,
    showing martingale properties
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.24 – A 的价格滞后1、7和20天的滞后图，显示马丁盖尔性质
- en: Log plots check whether a time series is random without any trend. For a random
    time series, its lag plots show no structure. The preceding plots show a clear
    linear trend; that is, we may succeed in modeling it with an auto-regressive model.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 对数图检查时间序列是否是没有任何趋势的随机的。对于随机时间序列，其滞后图显示没有结构。前述图表显示了明显的线性趋势；也就是说，我们可能成功地用自回归模型进行建模。
- en: Creating autocorrelation plots
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建自相关图
- en: Autocorrelation plots visualize the relationships with prices at a certain point
    in time and the prices lagged by a certain number of periods.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 自相关图可视化了特定时间点的价格与滞后若干期价格之间的关系。
- en: 'We can use the `pandas.plotting.autocorrelation_plot(...)` method to plot lag
    values on the *x* axis and the correlation between price and price lagged by the
    specified value on the *y* axis:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`pandas.plotting.autocorrelation_plot(...)`方法将滞后值绘制在*x*轴上，将价格与指定值滞后的价格之间的相关性绘制在*y*轴上：
- en: '[PRE32]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We can see that as lag values increase, the autocorrelation slowly deteriorates:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到随着滞后值的增加，自相关逐渐恶化：
- en: '![Figure 5.25 – Plot displaying the relationship between lag values versus
    autocorrelation between prices and prices lagged by a specified value](img/Figure_5.25_B15029.jpg)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![图5.25 – 显示滞后值与价格之间的自相关关系的图表](img/Figure_5.25_B15029.jpg)'
- en: Figure 5.25 – Plot displaying the relationship between lag values versus autocorrelation
    between prices and prices lagged by a specified value
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.25 – 绘制滞后值与价格和指定值滞后的自相关之间关系的图表
- en: Autocorrelation plots summarize the randomness of a time series. For a random
    time series, all autocorrelations would be close to 0 for all lags. For a non-random
    time series, at least one of the autocorrelations would be significantly non-zero.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 自相关图总结了时间序列的随机性。对于随机时间序列，所有滞后相关性都会接近于0。对于非随机时间序列，至少一个滞后相关性会显著非零。
- en: Summary
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned how to create visually appealing charts of
    `pandas` DataFrames with Matplotlib. While we can calculate many numerical statistics,
    charts usually offer greater insight more rapidly. You should always plot as many
    different charts as possible since each provides a different view of the data.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用 Matplotlib 创建 pandas DataFrame 的视觉上吸引人的图表。虽然我们可以计算许多数值统计量，但图表通常更快地提供更深入的洞察力。您应该尽可能绘制尽可能多的不同图表，因为每个图表都提供了数据的不同视角。
- en: In the next chapter, we will learn how to perform statistical tests and estimate
    statistical models in Python.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何在 Python 中执行统计测试并估计统计模型。
