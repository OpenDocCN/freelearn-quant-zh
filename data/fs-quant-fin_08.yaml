- en: Chapter 8. Setting Up the Trading System Project
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章：设置交易系统项目
- en: In this chapter we'll set up the trading system, which we'll develop throughout
    the rest of this book. The trading system will summarize the things we've learned
    so far. It's also a good way of illustrating the power of F# in combination with
    existing tools and libraries. We'll start out by setting up the project in Visual
    Studio, then adding the references needed for testing and connecting to Microsoft
    SQL Server. Type providers and **Language-INtegrated-Query** **(LINQ**) will be
    briefly introduced here, and more details will be covered in the next chapter.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将设置交易系统，这个系统将在本书接下来的章节中开发。交易系统将总结到目前为止我们学到的内容。这也是一个很好的例子，展示了F#与现有工具和库结合时的强大功能。我们将首先在Visual
    Studio中设置项目，然后添加测试所需的引用以及连接Microsoft SQL Server所需的引用。类型提供程序和**语言集成查询**（**LINQ**）将在此简要介绍，更多细节将在下一章中讲解。
- en: 'In this chapter, we will learn:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习：
- en: More about automated trading
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更多关于自动化交易的信息
- en: Test-driven development
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试驱动开发
- en: Requirements for the trading system
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交易系统的需求
- en: Setting up the project
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置项目
- en: Connecting to a database
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接到数据库
- en: Type providers in F#
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: F#中的类型提供程序
- en: Explaining automated trading
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解释自动化交易
- en: Automated trading is becoming increasingly popular these days. Most trading
    strategies can be implemented to be traded by a computer. There are many benefits
    to automating a trading strategy. The trading strategy can be backtested using
    historical data. This means the strategy is run on historical data and the performance
    of the strategy can be studied. We'll not cover backtesting in this book, but
    the trading system developed here can be modified to support backtesting.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化交易近年来变得越来越流行。大多数交易策略可以通过计算机实现交易。自动化交易策略有很多好处，交易策略可以通过历史数据进行回测。这意味着策略会在历史数据上运行，并且可以研究策略的表现。虽然本书不涉及回测，但此处开发的交易系统可以修改以支持回测。
- en: Automated trading systems are, as the name suggests, automated systems for trading
    that are run on a computer. They often consist of several parts such as feed handlers,
    order management systems, and trading strategies. Typically, automated trading
    systems will represent a pipeline from market data to orders to be executed, and
    keep track of state and history. Rules are written to be executed in near real
    time for the market data entering the system. It's much like a regular control
    system, with an input and an output. In the following chapters we'll look at how
    to implement a rather simple, yet powerful, trading system in F#, wrapping up
    what we have learnt in this book.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化交易系统顾名思义，是在计算机上运行的自动化交易系统。它们通常由几个部分组成，如数据馈送处理器、订单管理系统和交易策略。通常，自动化交易系统会呈现出从市场数据到订单再到执行的管道，并跟踪状态和历史。规则会被编写成在市场数据进入系统时几乎实时地执行。这就像一个常规的控制系统，具有输入和输出。在接下来的章节中，我们将看看如何用F#实现一个相当简单，但又非常强大的交易系统，概括我们在本书中学到的内容。
- en: 'The following are the parts of an automated trading system:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是自动化交易系统的组成部分：
- en: Feed handlers and market data adapters
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据馈送处理器和市场数据适配器
- en: Trading strategies
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交易策略
- en: Order execution and order management
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 订单执行与订单管理
- en: Persistence layer (DBs)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持久化层（数据库）
- en: GUI for monitoring and human interaction
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于监控和人工交互的图形用户界面（GUI）
- en: 'Here is the block diagram showing the parts of an automated trading system:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是展示自动化交易系统各部分的框图：
- en: '![Explaining automated trading](img/4623OS_08_03.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![解释自动化交易](img/4623OS_08_03.jpg)'
- en: 'Figure 1: Typical block diagram of a trading system'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图1：交易系统的典型框图
- en: Understanding software testing and test-driven development
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解软件测试和测试驱动开发
- en: When writing software, it's crucial to be able to test the functionality of
    the system being written. In software development, there is a popular and effective
    way of writing code in a more agile fashion, namely test-driven development. This
    method is driven by tests, and the tests written before the main logic are implemented.
    In other words, when you are about to write a test case for a system, you will
    certainly have a couple of requirements already at hand, or an idea about the
    software. In test-driven development, the tests will reflect the requirements.
    This is a way of writing the requirements in code that will test the piece of
    software for a given set of functionality. The tests are implemented as test cases,
    and test cases are collected into test suites. The tests will preferably be automated
    with a tool. Having automated tests will enable the developers to rerun the tests
    every time a change is made to the code.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写软件时，能够测试系统的功能至关重要。在软件开发中，有一种流行且有效的编写代码的方式，即测试驱动开发。此方法由测试驱动，测试在主要逻辑实现之前编写。换句话说，当你准备为系统编写测试用例时，你肯定已经有一些要求或者对软件的想法。在测试驱动开发中，测试将反映需求。这是一种将需求写入代码的方式，用于测试给定功能集的软件。测试实现为测试用例，测试用例被收集到测试套件中。测试最好通过工具进行自动化。拥有自动化测试将使开发人员每次对代码进行更改时都能重新运行测试。
- en: We'll focus on unit testing in this chapter using **NUnit**.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将重点讲解如何使用**NUnit**进行单元测试。
- en: Understanding NUnit and FsUnit
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 NUnit 和 FsUnit
- en: 'NUnit is an open source unit testing framework for all .NET languages, same
    as JUnit is for Java. NUnit enables the programmer to write unit tests, and execute
    the test to be able to see which tests are successful and which failed. In our
    project we''ll use NUnit and its external tool for running tests. A typical line
    for testing in F# using FsUnit can look something like the following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: NUnit 是一个开源单元测试框架，适用于所有 .NET 语言，类似于 JUnit 对于 Java 的作用。NUnit 使程序员能够编写单元测试，并执行测试，以查看哪些测试成功，哪些失败。在我们的项目中，我们将使用
    NUnit 及其外部工具来运行测试。在 F# 中，使用 FsUnit 进行测试的典型代码行如下所示：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Requirements for the system
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 系统的要求
- en: In this section we'll discuss some of the main requirements for the trading
    system. We'll not specify all the details, because some of them are needed to
    be divided into parts. The trading system will make use of some libraries and
    tools, specified in the following section.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论交易系统的一些主要要求。我们不会指定所有细节，因为其中一些需要分成多个部分。交易系统将使用一些库和工具，这些库和工具将在下一节中指定。
- en: Table some of the most important requirements of the trading system we'll develop.
    It will be a simple system with trading options for volatility arbitrage opportunities
    using S&P 500 index options and the CBOE Volatility Index (VIX). The S&P 500 index
    consists of the largest 500 companies listed on NYSE or NASDAQ. It's considered
    to be a general indicator of the U.S. stock market. The VIX is an index of the
    implied volatility of S&P 500 index options.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 表格展示我们将开发的交易系统的一些最重要要求。它将是一个简单的系统，用于利用 S&P 500 指数期权和 CBOE 波动率指数（VIX）进行波动率套利交易。S&P
    500 指数由 NYSE 或 NASDAQ 上市的最大 500 家公司组成，被视为美国股市的总体指标。VIX 是 S&P 500 指数期权隐含波动率的指数。
- en: 'The system should be able to do the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 系统应该能够执行以下操作：
- en: Store log entries in a Microsoft SQL Server database
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将日志条目存储在 Microsoft SQL Server 数据库中
- en: Store trade history in a Microsoft SQL Server database
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将交易历史存储在 Microsoft SQL Server 数据库中
- en: Download quotes from Yahoo! Finance
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 Yahoo! Finance 下载报价
- en: Manage orders
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理订单
- en: Send an order using FIX 4.2
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 FIX 4.2 发送订单
- en: Connect using FIX 4.2 to a FIX simulator
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 FIX 4.2 连接到 FIX 模拟器
- en: Execute a trading strategy written in F#
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行用 F# 编写的交易策略
- en: Be controlled from a basic GUI with start/stop buttons
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过一个基本的 GUI 控制，包含启动/停止按钮
- en: Display the current position(s)
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示当前的仓位
- en: Display the current profit and loss
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示当前的盈亏
- en: Display the latest quote(s)
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示最新的报价
- en: Use the MVC pattern
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 MVC 模式
- en: 'The following are the libraries and tools used:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用的库和工具：
- en: 'QuickFIX/N: The FIX protocol for .NET'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: QuickFIX/N：.NET 的 FIX 协议
- en: 'QuantLib: This is a library for quantitative finance'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: QuantLib：这是一个用于量化金融的库
- en: LINQ
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LINQ
- en: Microsoft SQL Server
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft SQL Server
- en: Windows Forms
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows Forms
- en: 'FSharpChart: This is an F# friendly wrapper of Microsoft Chart Controls'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FSharpChart：这是 Microsoft Chart Controls 的 F# 友好封装
- en: Setting up the project
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置项目
- en: In this section we'll set up the solution in Visual Studio. It will consist
    of two projects; one project for the trading system and one project for the tests.
    Separating the two has some advantages and will produce two binaries. The tests
    will be run from the NUnit program, which is a standalone program for running
    unit tests.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将在Visual Studio中设置解决方案。它将包含两个项目；一个是交易系统项目，另一个是测试项目。将两者分开有一些优势，并且会生成两个二进制文件。测试将通过NUnit程序运行，NUnit是一个用于运行单元测试的独立程序。
- en: 'The following steps will create two projects in the same solution:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的步骤将在同一解决方案中创建两个项目：
- en: Create a new F# application, name it **TradingSystem** as shown in the following
    screenshot:![Setting up the project](img/4623OS_08_02.jpg)
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的F#应用程序，命名为**TradingSystem**，如下图所示：![设置项目](img/4623OS_08_02.jpg)
- en: 'Figure 2: Adding a new project to a solution'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2：向解决方案中添加新项目
- en: Add a new project to the existing **TradingSystem** solution. Right-click on
    the solution as shown in *Figure 2*, and navigate to **Add** | **New Project...**.
    Create another F# application and name it **TradingSystem.Tests**.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向现有的**TradingSystem**解决方案中添加一个新项目。右键单击解决方案，如*图2*所示，然后选择**添加** | **新建项目...**。创建另一个F#应用程序，并将其命名为**TradingSystem.Tests**。
- en: Next, we have to add the testing frameworks to the **TradingSystem.Tests** project
    as shown in the following screenshot:![Setting up the project](img/4623OS_08_03.jpg)
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们必须将测试框架添加到**TradingSystem.Tests**项目中，如下图所示：![设置项目](img/4623OS_08_03.jpg)
- en: 'Figure 3: The solution with the two projects'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3：包含两个项目的解决方案
- en: Now we have the solution set up with two projects. You can see the references
    in each of the projects in *Figure 3*. We'll add some more references to both
    projects in this chapter. Next we'll install the testing frameworks, first NUnit,
    then FsCheck.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经设置了包含两个项目的解决方案。您可以在*图3*中看到每个项目中的引用。在本章中，我们将向两个项目添加更多引用。接下来，我们将安装测试框架，首先是NUnit，然后是FsCheck。
- en: Installing the NUnit and FsUnit frameworks
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装NUnit和FsUnit框架
- en: In this section we'll look at how to install NUnit and FsUnit and how to use
    it with F# Interactive to verify that everything works as expected.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论如何安装NUnit和FsUnit，并如何使用F# Interactive来验证一切是否按预期工作。
- en: 'To install NUnit and FsUnit, follow these steps in Visual Studio 2012:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在Visual Studio 2012中安装NUnit和FsUnit，按照以下步骤操作：
- en: Go to the Package Manager console by navigating to **VIEW** | **Other Windows**
    | **Package Manager Console**.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到**视图** | **其他窗口** | **包管理器控制台**，打开包管理器控制台。
- en: Select **TradingSystem.Tests** as the default project in the drop-down menu.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下拉菜单中选择**TradingSystem.Tests**作为默认项目。
- en: Type in `Install-Package NUnit`.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`Install-Package NUnit`。
- en: Type in `Install-Package FsUnit`.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`Install-Package FsUnit`。
- en: Type in `Add-BindingRedirect TradingSystem.Tests`. The following screenshot
    shows the result from the preceding steps:![Installing the NUnit and FsUnit frameworks](img/4623OS_08_04.jpg)
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`Add-BindingRedirect TradingSystem.Tests`。下图显示了前述步骤的结果：![安装NUnit和FsUnit框架](img/4623OS_08_04.jpg)
- en: The last command is to ensure that `Fsharp.Core` is up-to-date, and it will
    also update `App.config` if necessary.
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后一条命令确保`Fsharp.Core`是最新的，如果需要，它还会更新`App.config`。
- en: 'Let''s play around with the NUnit framework in F# Interactive to get a feeling
    of what it is and to see if everything is set up correctly. Add the following
    code to an F# script file:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在F# Interactive中尝试使用NUnit框架，了解它是什么，并检查一切是否已正确设置。将以下代码添加到F#脚本文件中：
- en: '[PRE1]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note that you have to find the path of the two DLLs, because it will differ
    from machine to machine. Simply go to **References** in your project (**TradingSystem.Tests**),
    click on the particular framework in **Solution Explorer**, and **Full Path**
    will be updated in the **Properties** window. Use this **Full Path** in the preceding
    code, do it for both the DLLs.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，您需要找到这两个DLL的路径，因为它在不同的计算机上会有所不同。只需进入项目中的**引用**（**TradingSystem.Tests**），在**解决方案资源管理器**中单击特定的框架，然后**完整路径**将在**属性**窗口中更新。使用此**完整路径**替换前面代码中的路径，两个DLL都要这样操作。
- en: 'Finally you can test the preceding code:'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后，您可以测试前面的代码：
- en: '[PRE2]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This means our first testing framework is set up successfully. Next we'll look
    at adding some tests in the code and run them from NUnit.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们的第一个测试框架已成功设置。接下来，我们将查看如何在代码中添加一些测试并通过NUnit运行它们。
- en: Connecting to Microsoft SQL Server
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 正在连接到Microsoft SQL Server
- en: 'This chapter will assume you have a running instance of Microsoft SQL Server
    either on your local machine, as part of Visual Studio 2012, or on a remote machine
    with access permissions as shown in the following screenshot:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 本章假设你已经在本地机器上运行了 Microsoft SQL Server 实例，或者它作为 Visual Studio 2012 的一部分安装，或者你在远程机器上有访问权限，如下图所示：
- en: '![Connecting to Microsoft SQL Server](img/4623OS_08_05.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![连接到 Microsoft SQL Server](img/4623OS_08_05.jpg)'
- en: 'The steps for connecting to Microsoft SQL Server are as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到 Microsoft SQL Server 的步骤如下：
- en: Navigate to **VIEW** | **Server Explorer**.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**视图** | **服务器资源管理器**。
- en: Right-click on **Data Connections**, and choose **Add connection**.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击**数据连接**，然后选择**添加连接**。
- en: Select **Microsoft SQL Server (SqlClient)** as the **Data Source**.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Microsoft SQL Server (SqlClient)** 作为**数据源**。
- en: Choose the local machine if you have Microsoft SQL Server installed locally.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你在本地安装了 Microsoft SQL Server，请选择本地机器。
- en: Select **Use Windows Authentication**.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**使用 Windows 身份验证**。
- en: Specify the name of the database. From now on, we'll refer to our database as
    **TradingSystem**.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指定数据库的名称。从现在开始，我们将把我们的数据库称为**TradingSystem**。
- en: To test whether the setup is successful, press **Test Connection** in the lower-left
    corner.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了测试设置是否成功，在左下角按下**测试连接**。
- en: Press **OK**.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按**确定**。
- en: Then you will encounter a dialog asking if you want to create it, press **Yes**.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后你会遇到一个对话框，询问你是否要创建它，按**是**。
- en: Now we have the database for our project, and next we'll add the tables needed
    for the project. To do this, open **VIEW** | **SQL Server Object Explorer**. It
    will look like the following screenshot:![Connecting to Microsoft SQL Server](img/4623OS_08_06.jpg)
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经有了项目所需的数据库，接下来我们将添加项目所需的表。为此，打开**视图** | **SQL Server 对象资源管理器**。它将显示如下截图：![连接到
    Microsoft SQL Server](img/4623OS_08_06.jpg)
- en: To add our tables, we'll use the SQL snippets provided in the next step. Right-click
    on the **TradingSystem** database, and click on **New Query…**. Paste the following
    code to create the table `Log`.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了添加我们的表，我们将使用下一步中提供的 SQL 代码片段。右键点击**TradingSystem**数据库，然后点击**新建查询...**。粘贴以下代码来创建`Log`表。
- en: 'The following is the SQL code to create the `Log` table:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是创建`Log`表的 SQL 代码：
- en: '[PRE3]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This will output the following in the SQL terminal below the editor:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将在编辑器下方的 SQL 终端输出以下内容：
- en: '[PRE4]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We'll use this table in the next section about type providers and LINQ.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的类型提供程序和 LINQ 章节中使用这个表。
- en: Introducing type providers
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入类型提供程序
- en: Type providers are powerful ways of dealing with structured data from XML documents,
    SQL databases, and CSV files. They combine the type system of F# with structured
    data, which can be a tedious task in statically typed languages in many cases.
    Using type providers, the type of the data source is automatically converted to
    native types; this means the data is parsed and stored using the same field names
    as used in the data source. This enables Visual Studio and IntelliSense to support
    you in your coding without looking in the data source for the field names all
    the time.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 类型提供程序是处理 XML 文档、SQL 数据库和 CSV 文件中结构化数据的强大方式。它们将 F# 的类型系统与结构化数据结合起来，而在静态类型语言中，这通常是一个繁琐的任务。通过使用类型提供程序，数据源的类型会自动转换为本地类型；这意味着数据会使用与数据源中相同的字段名进行解析和存储。这使得
    Visual Studio 和 IntelliSense 可以帮助你编写代码，而无需每次都去数据源中查找字段名。
- en: Using LINQ and F#
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 LINQ 和 F#
- en: 'LINQ is a feature in the .NET framework and has been supported in F# since
    Version 3.0\. It''s used to provide powerful query syntax and can be used together
    with databases, XML documents, .NET collections, and so on. In this section we''ll
    briefly introduce LINQ and see how we can use it together with a SQL database.
    But first we''ll look at LINQ together with collections:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: LINQ 是 .NET 框架中的一项特性，自 Version 3.0 以来就得到了 F# 的支持。它用于提供强大的查询语法，可以与数据库、XML 文档、.NET
    集合等一起使用。在本节中，我们将简要介绍 LINQ，并看看如何将它与 SQL 数据库一起使用。但首先，我们将先看一下 LINQ 与集合的配合使用：
- en: 'First we need a list of values:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先我们需要一个值的列表：
- en: '[PRE5]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then we can construct our first LINQ query, which will select all the values
    in the list:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们可以构建我们的第一个 LINQ 查询，它将选择列表中的所有值：
- en: '[PRE6]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This is not that useful, so let''s add a condition. We''ll now select all values
    greater than `5`, this is done using a `where` clause:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这并不是很有用，所以我们添加一个条件。我们现在选择所有大于`5`的值，这可以通过 `where` 子句来实现：
- en: '[PRE7]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We can add another condition, selecting values greater than `5` and less than
    `8`:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以添加另一个条件，选择大于`5`且小于`8`的值：
- en: '[PRE8]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This is quite powerful, and it's more useful when dealing with data from, for
    example, SQL databases. In the next section we'll look at a sample application
    using both type providers and LINQ to insert and query a database.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常强大，特别是在处理来自 SQL 数据库等的数据时更为有用。在下一节中，我们将查看一个结合使用类型提供程序和 LINQ 的示例应用程序，用于插入和查询数据库。
- en: Explaining sample code using type providers and LINQ
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解释使用类型提供程序和 LINQ 的示例代码
- en: 'In this section we''ll look at a sample application using type providers and
    LINQ. We''ll use the `Log` table that we created earlier. This is a good way to
    test if everything works with the SQL database and the permissions to read and
    write to and from it:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将查看一个使用类型提供程序和 LINQ 的示例应用程序。我们将使用之前创建的 `Log` 表。这是测试 SQL 数据库及其读写权限是否正常工作的好方法：
- en: '[PRE9]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The connection string has to be changed in some cases; if so, simply check
    the `Connection` string value in the properties for the database:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串在某些情况下需要更改；如果是这样，只需检查数据库属性中的 `Connection` 字符串值：
- en: '[PRE10]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We''ll use LINQ to query our table. The code will be modified and used in the
    final application. Here we have one query to list all entries from the `Log` table:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 LINQ 来查询我们的表格。代码将在最终应用程序中进行修改和使用。这里有一个查询，它列出了 `Log` 表中的所有条目：
- en: '[PRE11]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We can use F# Interactive to see if the code works by adding a log entry and
    then trying to obtain it:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 F# Interactive 来查看代码是否有效，通过添加日志条目并尝试获取它：
- en: '[PRE12]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This seems to work fine, and we can consider the SQL Server setup done. We'll
    add tables and functionality in the next two chapters. But this is fine for now,
    the setup is complete.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这似乎运行得不错，我们可以认为 SQL Server 设置已完成。接下来的两章我们将添加表格和功能。但目前这样已经可以了，设置已完成。
- en: 'It''s also convenient to browse the data in Visual Studio for a table in the
    database. To do this, right-click on the `Log` table in the **SQL Server Object
    Explorer** and **View Data**. You will see a view similar to the following screenshot:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中浏览数据库表格的数据也很方便。为此，右键点击 **SQL Server 对象资源管理器** 中的 `Log` 表，然后选择
    **查看数据**。你将看到类似于以下截图的视图：
- en: '![Explaining sample code using type providers and LINQ](img/4623OS_08_07.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![解释使用类型提供程序和 LINQ 的示例代码](img/4623OS_08_07.jpg)'
- en: Creating the remaining table for our project
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建项目中剩余的表格
- en: The SQL database will be used to store the state and history of our system.
    It's mainly for illustrative purposes. We'll store log information and trade history.
    For this, we have to add a new table, and this will be done in the same way as
    before.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 数据库将用于存储我们系统的状态和历史记录，主要用于说明性目的。我们将存储日志信息和交易历史。为此，我们需要添加一个新表，方法与之前相同。
- en: '[PRE13]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If you execute the preceding SQL code, you will now see the table added to
    the **Tables view** in the **SQL Server Object Explorer** as shown in the following
    screenshot:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你执行上述 SQL 代码，现在可以看到该表已添加到 **SQL Server 对象资源管理器** 中的 **表格视图**，如以下截图所示：
- en: '![Creating the remaining table for our project](img/4623OS_08_08.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![为我们的项目创建剩余的表格](img/4623OS_08_08.jpg)'
- en: 'Following in our previous footsteps, we will examine sample code to query and
    insert a trade history entry:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 沿着我们之前的步骤，我们将检查示例代码来查询和插入一条交易历史记录：
- en: '[PRE14]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We can use F# Interactive to see if the code works by adding a trade entry
    and then trying to obtain it:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 F# Interactive 来查看代码是否有效，通过添加交易条目并尝试获取它：
- en: '[PRE15]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: It seems to work fine!
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来运行得不错！
- en: Writing test cases
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写测试用例
- en: 'In this section we''ll look at some of the test cases that can be written for
    the trading system. We''ll use NUnit together with the graphical user interface
    provided by NUnit to accomplish this. The following screenshot displays the main
    GUI from NUnit:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将查看可以为交易系统编写的一些测试用例。我们将结合 NUnit 和 NUnit 提供的图形用户界面来完成这项工作。以下截图显示了 NUnit
    的主界面：
- en: '![Writing test cases](img/4623OS_08_09.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![编写测试用例](img/4623OS_08_09.jpg)'
- en: 'Figure 4: The NUnit user interface'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4：NUnit 用户界面
- en: 'Before we start to write real tests for our system, we''ll write a simple test
    to verify that our setup is correct. NUnit will automatically rerun the executable
    every time it''s built. We start by writing a simple test inside the `TestOrderValidation`
    file, before we write the real ones:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始编写系统的真正测试之前，我们会编写一个简单的测试来验证我们的设置是否正确。NUnit 会在每次构建时自动重新运行可执行文件。我们首先在 `TestOrderValidation`
    文件中编写一个简单的测试，然后再编写真正的测试：
- en: '[PRE16]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This is quite silly, but we''ll be able to see if NUnit detects changes and
    if NUnit will detect the test cases inside the `.exe` file. The steps for writing
    a simple test case are as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来很傻，但我们将能看到 NUnit 是否能检测到变化，且 NUnit 是否能检测到 `.exe` 文件中的测试用例。编写简单测试用例的步骤如下：
- en: Open up **NUnit** and navigate to **File** | **Open Project...**.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**NUnit**，然后导航到**文件** | **打开项目...**。
- en: Select the `.exe` file corresponding to the .exe? file in **TradingSystem.Tests**,
    located in `..\visual studio 2012\Projects\TradingSystem\TradingSystem.Tests\bin\Debug`.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **TradingSystem.Tests** 中对应的 `.exe` 文件，该文件位于`..\visual studio 2012\Projects\TradingSystem\TradingSystem.Tests\bin\Debug`。
- en: Press the **Run** button and it should look like the following figure:![Writing
    test cases](img/4623OS_08_10.jpg)
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下**运行**按钮，应该会显示如下图：![编写测试用例](img/4623OS_08_10.jpg)
- en: 'Figure 5: NUnit when the sample unit test is run successfully'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5：成功运行示例单元测试时的 NUnit
- en: 'Now that we know the setup is correct, let''s start to write some real unit
    tests for our order validation code:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道设置是正确的，让我们开始为我们的订单验证代码编写一些真正的单元测试：
- en: '[PRE17]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now we need to build the project and then NUnit should be able to detect the
    changes. If everything works correctly, the NUnit GUI should look like the following
    screenshot:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要构建项目，然后 NUnit 应该能够检测到变化。如果一切正常，NUnit 图形界面应该显示如下截图：
- en: '![Writing test cases](img/4623OS_08_10.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![编写测试用例](img/4623OS_08_10.jpg)'
- en: 'Figure 6: NUnit when the ValidateBuyOrder test is run'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6：运行 ValidateBuyOrder 测试时的 NUnit
- en: 'Let''s add some more tests for the order validation code:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为订单验证代码添加一些更多的测试：
- en: '[PRE18]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Note that the name of the module is renamed to `ValidateOrderTests`. We''ll
    add more tests for validating instruments and using pre-trade risks in the same
    file. The following screenshot shows the four tests for validating orders:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，模块名称已更改为`ValidateOrderTests`。我们将为验证工具和使用预交易风险的功能添加更多测试，所有测试都将在同一文件中。以下截图显示了验证订单的四个测试：
- en: '![Writing test cases](img/4623OS_08_11.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![编写测试用例](img/4623OS_08_11.jpg)'
- en: NUnit when the four tests are run
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: NUnit 当运行四个测试时
- en: Details about the setup
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置的详细信息
- en: 'The following is a listing of the references used in the project until now.
    Use this to check if your project is up-to-date:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是到目前为止在项目中使用的引用列表。使用此列表检查你的项目是否是最新的：
- en: '`TradingSystemFSharp.Core`'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`TradingSystemFSharp.Core`'
- en: '`FSharp.Data.TypeProviders`'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FSharp.Data.TypeProviders`'
- en: '`mscorlib`'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mscorlib`'
- en: '`System`'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`System`'
- en: '`System.Core`'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`System.Core`'
- en: '`System.Data`'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`System.Data`'
- en: '`System.Data.Linq`'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`System.Data.Linq`'
- en: '`System.Numerics`'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`System.Numerics`'
- en: '`TradingSystem.Tests`'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`TradingSystem.Tests`'
- en: '`Fsharp.Core`'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Fsharp.Core`'
- en: '`FsUnit.NUnit`'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FsUnit.NUnit`'
- en: '`TradingSystem.Core`'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TradingSystem.Core`'
- en: '`FSharp.Data.TypeProviders`'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FSharp.Data.TypeProviders`'
- en: '`mscorlib`'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mscorlib`'
- en: '`nunit.framework`'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nunit.framework`'
- en: '`System`'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`System`'
- en: '`System.Core`'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`System.Core`'
- en: '`System.Numerics`'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`System.Numerics`'
- en: Summary
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter we set up the project, consisting of the trading system itself
    and the tests. We looked at how to use Visual Studio to handle our solution and
    integrate it with NUnit and FsUnit. We also looked at how to connect to Microsoft
    SQL Server and how to write queries in LINQ and retrieve data throughout the type
    providers.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们设置了项目，项目由交易系统本身和测试组成。我们学习了如何使用 Visual Studio 处理我们的解决方案，并将其与 NUnit 和 FsUnit
    集成。我们还了解了如何连接到 Microsoft SQL Server，以及如何在 LINQ 中编写查询并通过类型提供程序检索数据。
- en: In the next two chapters, we'll continue to develop the trading system from
    the base built in this chapter.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的两章中，我们将继续开发从本章构建的基础上的交易系统。
