- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Technical Analysis and Building Interactive Dashboards
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术分析与构建交互式仪表板
- en: In this chapter, we will cover the basics of **technical analysis** (**TA**)
    in Python. In short, TA is a methodology for determining (forecasting) the future
    direction of asset prices and identifying investment opportunities based on studying
    past market data (especially the prices themselves and the traded volume).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将介绍如何在Python中进行**技术分析**（**TA**）的基础知识。简而言之，技术分析是一种通过研究过去的市场数据（特别是价格本身和交易量）来确定（预测）资产价格未来走势，并识别投资机会的方法论。
- en: We begin by showing how to calculate some of the most popular TA indicators
    (with hints on how to calculate others using selected Python libraries). Additionally,
    we show how to download precalculated technical indicators from reliable financial
    data vendors. We also touch upon a subfield of TA—candlestick pattern recognition.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先展示如何计算一些最流行的技术分析指标（并提供如何使用选定的Python库计算其他指标的提示）。此外，我们还展示如何从可靠的金融数据提供商那里下载预先计算好的技术指标。我们还涉及技术分析的一个子领域——蜡烛图形态识别。
- en: At the end of the chapter, we demonstrate how to create a web app, which enables
    us to visualize and inspect the predefined TA indicators in an interactive fashion.
    Then, we deploy this app to the cloud, to make it accessible for anyone from anywhere.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最后，我们展示如何创建一个Web应用，使我们能够以交互的方式可视化和检查预定义的技术分析指标。然后，我们将这个应用部署到云端，使任何人都能随时随地访问。
- en: 'In this chapter, we present the following recipes:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍以下几个任务：
- en: Calculating the most popular technical indicators
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算最流行的技术指标
- en: Downloading the technical indicators
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载技术指标
- en: Recognizing candlestick patterns
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别蜡烛图形态
- en: Building an interactive web app for technical analysis using Streamlit
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Streamlit构建交互式技术分析Web应用
- en: Deploying the technical analysis app
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署技术分析应用
- en: Calculating the most popular technical indicators
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算最流行的技术指标
- en: There are hundreds of different technical indicators that traders use for making
    decisions on whether to enter or exit a position. In this recipe, we will learn
    how to easily calculate a few of those indicators using the `TA-Lib` library,
    which is the most popular library for such a task. We start with a brief introduction
    of a few of the selected indicators.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 有数百种不同的技术指标，交易者用它们来决定是否进入或退出某个仓位。在本节中，我们将学习如何使用`TA-Lib`库轻松计算其中一些技术指标，`TA-Lib`是最流行的此类任务库。我们将从简要介绍几种精选指标开始。
- en: '**Bollinger bands** are a statistical method, used for deriving information
    about the prices and volatility of a certain asset over time. To obtain the Bollinger
    bands, we need to calculate the moving average and standard deviation of the time
    series (prices), using a specified window (typically, 20 days). Then, we set the
    upper/lower bands at *K* times (typically, 2) the moving standard deviation above/below
    the moving average. The interpretation of the bands is quite simple: the bands
    widen with an increase in volatility and contract with a decrease in volatility.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**布林带**是一种统计方法，用于推导某一资产的价格和波动性随时间变化的信息。为了获得布林带，我们需要计算时间序列（价格）的移动平均和标准差，使用指定的窗口（通常为20天）。然后，我们将上轨/下轨设置为*K*倍（通常为2）移动标准差，位于移动平均线的上方/下方。布林带的解释非常简单：带宽随着波动性的增加而扩大，随着波动性的减少而收缩。'
- en: The default setting of using 2 standard deviations for the bands is connected
    to the (empirically incorrect) assumption about the normality of returns. Under
    the Gaussian distribution, we would assume that when using 2 standard deviations,
    95% of returns would fall within the bands.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 使用2个标准差作为布林带的默认设置与关于收益率正态分布的（经验性错误的）假设有关。在高斯分布下，我们假设使用2个标准差时，95%的收益率会落在布林带内。
- en: The **relative strength index** (**RSI**) is an indicator that uses the closing
    prices of an asset to identify oversold/overbought conditions. Most commonly,
    the RSI is calculated using a 14-day period and is measured on a scale from 0
    to 100 (it is an oscillator). Traders usually buy an asset when it is oversold
    (if the RSI is below 30) and sell when it is overbought (if the RSI is above 70).
    More extreme high/low levels, such as 80–20, are used less frequently and, at
    the same time, imply stronger momentum.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**相对强弱指数**（**RSI**）是一种指标，利用资产的收盘价来识别超卖/超买的状态。通常，RSI是使用14日周期计算的，并且在0到100的范围内测量（它是一个振荡器）。交易者通常在资产超卖时买入（如果RSI低于30），在资产超买时卖出（如果RSI高于70）。更极端的高/低水平，如80-20，较少使用，同时意味着更强的动量。'
- en: The last considered indicator is the **moving average convergence divergence**
    (**MACD**). It is a momentum indicator showing the relationship between two exponential
    moving averages (EMA) of a given asset’s price, most commonly 26- and 12-day ones.
    The MACD line is the difference between the fast (short period) and slow (long
    period) EMAs. Lastly, we calculate the MACD signal line as a 9-day EMA of the
    MACD line. Traders can use the crossover of the lines as a trading signal. For
    example, it can be considered a buy signal when the MACD line crosses the signal
    line from below.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 最后考虑的指标是**移动平均收敛/发散**（**MACD**）。它是一个动量指标，显示了给定资产价格的两条指数移动平均线（EMA）之间的关系，通常是26日和12日的EMA。MACD线是快速（短期）和慢速（长期）EMA之间的差值。最后，我们将MACD信号线计算为MACD线的9日EMA。交易者可以利用这些线的交叉作为交易信号。例如，当MACD线从下方穿越信号线时，可以视为买入信号。
- en: Naturally, most of the indicators are not used in isolation and traders look
    at multiple signals before making a decision. Also, all of the indicators can
    be tuned further (by changing their parameters) depending on the specific goal.
    We will cover backtesting trading strategies based on technical indicators in
    another chapter.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 自然地，大多数指标并不是单独使用的，交易者在做出决策之前会参考多个信号。此外，所有指标都可以进一步调整（通过改变其参数），以实现特定的目标。我们将在另一个章节中讨论基于技术指标的交易策略回测。
- en: How to do it…
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何进行…
- en: 'Execute the following steps to calculate some of the most popular technical
    indicators using IBM’s stock prices from 2020:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤，使用2020年的IBM股票价格计算一些最流行的技术指标：
- en: 'Import the libraries:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入库：
- en: '[PRE0]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`TA-Lib` is not like most Python libraries and it has a bit of a different
    installation process. For more information on how to do it, please refer to the
    GitHub repository provided in the *See also* section.'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`TA-Lib`与大多数Python库不同，其安装过程略有不同。有关如何操作的更多信息，请参阅*另见*部分提供的GitHub仓库。'
- en: 'Download IBM’s stock prices from 2020:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载2020年的IBM股票价格：
- en: '[PRE1]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Calculate and plot the Simple Moving Average (SMA):'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算并绘制简单移动平均线（SMA）：
- en: '[PRE2]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Running the snippet generates the following plot:'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行代码片段生成以下图表：
- en: '![](../Images/B18112_05_01.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B18112_05_01.png)'
- en: 'Figure 5.1: IBM’s close price and the 20-day SMA'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.1：IBM的收盘价和20日SMA
- en: 'Calculate and plot the Bollinger bands:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算并绘制布林带：
- en: '[PRE3]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Running the snippet generates the following plot:'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行代码片段生成以下图表：
- en: '![](../Images/B18112_05_02.png)'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](../Images/B18112_05_02.png)'
- en: 'Figure 5.2: IBM’s close price and the Bollinger bands'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图5.2：IBM的收盘价和布林带
- en: 'Calculate and plot the RSI:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算并绘制RSI：
- en: '[PRE4]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Running the snippet generates the following plot:'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行代码片段生成以下图表：
- en: '![](../Images/B18112_05_03.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B18112_05_03.png)'
- en: 'Figure 5.3: The RSI calculated using IBM’s close prices'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.3：使用IBM收盘价计算的RSI
- en: 'Calculate and plot the MACD:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算并绘制MACD：
- en: '[PRE5]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Running the snippet generates the following plot:'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行代码片段生成以下图表：
- en: '![](../Images/B18112_05_04.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B18112_05_04.png)'
- en: 'Figure 5.4: The MACD calculated using IBM’s close prices'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.4：使用IBM收盘价计算的MACD
- en: So far, we have calculated the technical indicators and plotted them. In the
    next chapters, we will spend more time on their implications and building trading
    strategies on their basis.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经计算了技术指标并将其绘制出来。在接下来的章节中，我们将更多地讨论它们的含义，并基于这些指标构建交易策略。
- en: How it works…
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: After importing the libraries, we downloaded IBM’s stock prices from 2020.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 导入库后，我们下载了2020年的IBM股票价格。
- en: In *Step 3*, we calculated the 20-day simple moving average using the `SMA`
    function. Naturally, we could have calculated the same indicator using the `rolling`
    method of a `pandas` DataFrame.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第3步*中，我们使用`SMA`函数计算了20日简单移动平均线。自然地，我们也可以通过使用`pandas`数据框的`rolling`方法来计算相同的指标。
- en: In *Step 4*, we calculated the Bollinger bands. The `BBANDS` function returns
    three objects (the upper and lower thresholds and the moving average), which we
    assigned to different columns of our DataFrame.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第4步*中，我们计算了布林带。`BBANDS`函数返回了三个对象（上限、下限和移动平均线），我们将它们分配到了DataFrame的不同列中。
- en: In the next step, we calculated the RSI using the default settings. We plotted
    the indicator, together with two horizontal lines (created using `ax.hlines`)
    indicating the popular decision-making thresholds.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一步中，我们使用默认设置计算了RSI。我们绘制了这个指标，并添加了两条水平线（使用`ax.hlines`创建），表示常用的决策阈值。
- en: In the last step, we calculated the MACD, also using the default number of periods
    for the EMAs. The `MACD` function also returned three objects, the MACD, the signal
    line, and the MACD histogram, which is effectively the difference between the
    first two elements. We plotted them on separate plots, as is most commonly done
    on trading platforms.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一步，我们也使用默认的EMA周期数计算了MACD。`MACD`函数也返回了三个对象：MACD线、信号线和MACD直方图，这实际上是前两者的差值。我们将它们分别绘制在不同的图表上，这是交易平台上最常见的做法。
- en: There’s more…
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容…
- en: '`TA-Lib` is a great library and the gold standard when it comes to calculating
    technical indicators. However, there are also alternative libraries out there,
    which are gaining traction. One of them is called `ta`. Compared to `TA-Lib`,
    which is a wrapper around a C++ library, `ta` is written using `pandas`, which
    makes exploring the code base much easier.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`TA-Lib`是一个非常棒的库，在计算技术指标方面是黄金标准。然而，市面上也有一些替代库，正在逐渐获得关注。其中一个叫做`ta`。与`TA-Lib`（一个C++库的封装）相比，`ta`是使用`pandas`编写的，这使得探索代码库变得更加容易。'
- en: While it does not offer as extensive functionalities as `TA-Lib`, one of its
    unique features is that it can calculate all of the available 30+ indicators in
    a single line of code. That can definitely be useful in situations in which we
    want to calculate a lot of potential features for a machine learning model.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管它的功能不如`TA-Lib`那样广泛，但它的一个独特功能是可以在一行代码中计算所有30多个可用的指标。这在我们想要为机器学习模型计算大量潜在特征时绝对很有用。
- en: 'Execute the following steps to calculate 30+ technical indicators with a single
    line of code:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤，用一行代码计算30多个技术指标：
- en: 'Import the libraries:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入库：
- en: '[PRE6]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Discard the previously calculated indicators and keep only the required columns:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 丢弃之前计算的指标，仅保留所需的列：
- en: '[PRE7]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Calculate all the technical indicators available in the `ta` library:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算`ta`库中所有可用的技术指标：
- en: '[PRE8]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The resulting DataFrame contains 88 columns, out of which 83 were added by the
    single function call.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的DataFrame包含88列，其中83列是通过一次函数调用添加的。
- en: See also
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: 'Please find below links to repositories of `TA-Lib`, `ta`, and other interesting
    libraries useful for technical analysis:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`TA-Lib`、`ta`及其他一些有助于技术分析的有趣库的GitHub仓库链接：
- en: '[https://github.com/mrjbq7/ta-lib](https://github.com/mrjbq7/ta-lib)—The GitHub
    repository of `TA-lib`. Please refer to this source for more details on installing
    the library.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/mrjbq7/ta-lib](https://github.com/mrjbq7/ta-lib)——`TA-lib`的GitHub仓库。请参考此资源了解更多关于库的安装细节。'
- en: '[https://ta-lib.org/](https://ta-lib.org/)'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://ta-lib.org/](https://ta-lib.org/)'
- en: '[https://github.com/bukosabino/ta](https://github.com/bukosabino/ta)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/bukosabino/ta](https://github.com/bukosabino/ta)'
- en: '[https://github.com/twopirllc/pandas-ta](https://github.com/twopirllc/pandas-ta)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/twopirllc/pandas-ta](https://github.com/twopirllc/pandas-ta)'
- en: '[https://github.com/peerchemist/finta](https://github.com/peerchemist/finta)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/peerchemist/finta](https://github.com/peerchemist/finta)'
- en: Downloading the technical indicators
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载技术指标
- en: We have already mentioned in *Chapter 1*, *Acquiring Financial Data*, that some
    data vendors not only provide historical stock prices but also offer a selection
    of the most popular technical indicators. In this recipe, we will show how to
    download the RSI indicator for IBM’s stock, which can be directly compared to
    the one we calculated in the previous recipe using the `TA-Lib` library.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在*第一章*，*获取财务数据*中提到过，某些数据提供商不仅提供历史股价，还提供一些最流行的技术指标。在本食谱中，我们将展示如何下载IBM股票的RSI指标，并且可以将其与我们在上一节中使用`TA-Lib`库计算的RSI进行直接对比。
- en: How to do it…
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Execute the following steps to download the RSI calculated for IBM from Alpha
    Vantage:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤从Alpha Vantage下载计算好的IBM RSI：
- en: 'Import the libraries:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入库：
- en: '[PRE9]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Instantiate the `TechIndicators` class and authenticate:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实例化`TechIndicators`类并进行身份验证：
- en: '[PRE10]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Download the RSI for IBM’s stock:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载IBM股票的RSI：
- en: '[PRE11]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Plot the downloaded RSI:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绘制下载的RSI：
- en: '[PRE12]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Running the snippet generates the following plot:'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行代码片段生成以下图表：
- en: '![](../Images/B18112_05_05.png)'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](../Images/B18112_05_05.png)'
- en: 'Figure 5.5: The RSI downloaded for IBM’s stock prices'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图5.5：下载的IBM股票价格的RSI
- en: The downloaded DataFrame contains RSI values from November 1999 until the most
    recent date.
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下载的DataFrame包含了从1999年11月到最新日期的RSI值。
- en: 'Explore the metadata object:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 探索元数据对象：
- en: '[PRE13]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'By displaying the metadata object, we can see the following details of our
    request:'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过显示元数据对象，我们可以看到以下请求的详细信息：
- en: '[PRE14]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: How it works…
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: After importing the libraries, we instantiated the `TechIndicators` class, which
    can be used for downloading any of the available technical indicators (via the
    class’s methods). While doing so, we provided our API key and indicated that we
    would like to receive the output in the form of a `pandas` DataFrame.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在导入库之后，我们实例化了`TechIndicators`类，该类可以用来下载任何可用的技术指标（通过该类的方法）。在此过程中，我们提供了API密钥，并表明希望以`pandas`
    DataFrame的形式接收输出结果。
- en: In *Step 3*, we downloaded the RSI for IBM’s stock using the `get_rsi` method.
    At this point, we specified we wanted to use the last 14 days for calculating
    the indicator.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第3步*中，我们使用`get_rsi`方法下载了IBM股票的RSI。在此步骤中，我们指定了希望使用过去14天的数据来计算指标。
- en: One thing to keep in mind while downloading calculated indicators is the data
    vendors’ pricing policy. At the time of writing, the RSI endpoint of Alpha Vantage
    is a free one, while the MACD is a premium endpoint and requires purchasing a
    paid plan.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 下载计算指标时需要注意的一点是数据供应商的定价政策。在撰写本文时，Alpha Vantage的RSI端点是免费的，而MACD则是付费端点，需要购买付费计划。
- en: What can be a bit surprising is that we cannot specify the range of dates that
    we are interested in. We can clearly see this in *Step 4*, in which we can see
    data points going as far back as November 1999\. We also plotted the RSI line,
    just as we have done in the previous recipe.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 令人有些惊讶的是，我们无法指定感兴趣的日期范围。我们可以在*第4步*中清楚地看到这一点，在该步骤中，我们看到数据点可以追溯到1999年11月。我们还绘制了RSI线，就像我们在之前的食谱中做的一样。
- en: In the last step, we explored the metadata of the request, which contains the
    RSI’s parameters, the stock symbol we requested, the latest refresh date, and
    which price series was used for calculating the indicator (in this case, the close
    price).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一步，我们探讨了请求的元数据，其中包含了RSI的参数、我们请求的股票代码、最新的刷新日期，以及用于计算指标的价格序列（在本例中是收盘价）。
- en: There’s more…
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'Alpha Vantage is not the only data vendor that is providing access to technical
    indicators. Another one is Intrinio. We demonstrate below how to download the
    MACD using its API:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Alpha Vantage并不是唯一提供技术指标访问的数据供应商。另一个供应商是Intrinio。我们在下文演示了如何通过其API下载MACD：
- en: 'Import the libraries:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入库：
- en: '[PRE15]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Authenticate using the personal API key and select the API:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用个人API密钥进行身份验证并选择API：
- en: '[PRE16]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Request the MACD for IBM’s stock from 2020:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请求2020年IBM股票的MACD：
- en: '[PRE17]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: While using Intrinio, we can actually specify the period for which we would
    like to download the indicator.
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用Intrinio时，我们实际上可以指定想要下载指标的周期。
- en: 'Convert the request’s output into a `pandas` DataFrame:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将请求的输出转换为`pandas` DataFrame：
- en: '[PRE18]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Plot the MACD:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绘制MACD：
- en: '[PRE19]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Running the snippet generates the following plot:'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行代码片段生成以下图表：
- en: '![](../Images/B18112_05_06.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B18112_05_06.png)'
- en: 'Figure 5.6: The MACD downloaded for IBM’s stock prices'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.6：下载的IBM股票价格的MACD
- en: Recognizing candlestick patterns
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 识别蜡烛图模式
- en: In this chapter, we have already covered some of the most popular technical
    indicators. Another field of technical analysis that can be used for making trading
    decisions is **candlestick pattern recognition**. Overall, there are hundreds
    of candlestick patterns that can be used for determining the price direction and
    momentum.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经介绍了一些最受欢迎的技术指标。另一个可以用于做出交易决策的技术分析领域是**蜡烛图模式识别**。总体来说，有数百种蜡烛图模式可以用来判断价格的方向和动能。
- en: 'Similar to all approaches to technical analysis, we should have a few things
    in mind while using pattern recognition. First, the patterns are only informative
    within the limitations of the given chart (in a specified frequency: intraday,
    daily, weekly, and so on). Second, the patterns’ predictive potency decreases
    very quickly after a few (3–5) bars once the pattern has been completed. Third,
    in the modern electronic environment, many signals identified by analyzing candlestick
    patterns might not work reliably anymore. Some big players are also able to set
    up traps by creating fake candlestick patterns to be picked up by other market
    participants.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 与所有技术分析方法类似，在使用模式识别时，我们需要牢记几点。首先，模式只在给定图表的限制条件下有效（在指定的频率下：例如日内、日线、周线等）。其次，模式的预测效能在模式完成后会迅速下降，通常在几个（3–5）K线之后效果减弱。第三，在现代电子环境中，通过分析蜡烛图模式识别出的许多信号可能不再可靠。部分大玩家也能通过制造虚假的蜡烛图模式设下陷阱，诱使其他市场参与者跟进。
- en: 'Bulkowski (2021) divides the patterns into two categories, based on the expected
    outcomes:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Bulkowski（2021）根据预期结果将模式分为两类：
- en: Reversal patterns—such patterns predict a change in the price’s direction
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反转模式—此类模式预测价格方向的变化
- en: Continuation patterns—such patterns predict an extension in the current trend
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 延续模式—此类模式预测当前趋势的延续
- en: In this recipe, we try to identify the **three line strike** pattern in hourly
    Bitcoin prices. That pattern belongs to the continuation group. Its bearish variant
    (identified in an overall bearish trend) is characterized by three bars, each
    one having a lower low than the previous one. The fourth bar of the pattern opens
    at the third candle’s low or even lower, but then reverses heavily and closes
    above the high of the first candle of the series.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个实例中，我们尝试在比特币小时价格中识别**三线反转**模式。该模式属于延续型模式。其看跌变体（在整体看跌趋势中识别）由三根蜡烛线组成，每根蜡烛的低点都低于前一根。该模式的第四根蜡烛在第三根蜡烛的低点或更低处开盘，但随后大幅反转并收盘在系列中第一根蜡烛的最高点之上。
- en: How to do it…
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'Execute the following steps to identify the three line strike pattern in Bitcoin’s
    hourly candlesticks:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以识别比特币小时蜡烛图中的三线反转模式：
- en: 'Import the libraries:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入库：
- en: '[PRE20]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Download Bitcoin’s hourly prices from the last 9 months:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载过去9个月的比特币小时价格：
- en: '[PRE21]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Identify the three line strike pattern:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 识别三线反转模式：
- en: '[PRE22]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Locate and plot the bearish pattern:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位并绘制看跌模式：
- en: '[PRE23]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '![](../Images/B18112_05_07.png)'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](../Images/B18112_05_07.png)'
- en: 'Figure 5.7: The first five observations of the bearish three line strike pattern'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.7：看跌三线反转模式的前五个观察点
- en: '[PRE24]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Executing the snippet returns the following plot:'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行代码片段后会返回以下图表：
- en: '![](../Images/B18112_05_08.png)'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](../Images/B18112_05_08.png)'
- en: 'Figure 5.8: The identified bearish three line strike pattern'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.8：识别出的看跌三线反转模式
- en: 'Locate and plot the bullish pattern:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位并绘制看涨模式：
- en: '[PRE25]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '![](../Images/B18112_05_09.png)'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](../Images/B18112_05_09.png)'
- en: 'Figure 5.9: The first five observations of the bullish three line strike pattern'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.9：看涨三线反转模式的前五个观察点
- en: '[PRE26]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Executing the snippet returns the following plot:'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行代码片段后会返回以下图表：
- en: '![](../Images/B18112_05_10.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B18112_05_10.png)'
- en: 'Figure 5.10: The identified bullish three line strike pattern'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.10：识别出的看涨三线反转模式
- en: We could use the identified patterns to create trading strategies. For example,
    a bearish three line strike usually signals a small pullback that will be followed
    by a continuation of the bearish trend.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以利用识别出的模式来创建交易策略。例如，看跌三线反转通常表示一次小幅回调，随后会继续出现看跌趋势。
- en: How it works…
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理……
- en: After importing the libraries, we downloaded hourly Bitcoin prices from the
    last 3 months using the `yfinance` library.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在导入库后，我们使用`yfinance`库下载了过去3个月的比特币小时价格。
- en: 'In *Step 3*, we used the `TA-Lib` library to identify the three line strike
    pattern (with the `CDL3LINESTRIKE` function). We had to separately provide the
    OHLC prices as inputs for the function. We store the outputs of the function in
    a new column. For this function, there are three possible outputs:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 3*中，我们使用`TA-Lib`库来识别三线反转模式（通过`CDL3LINESTRIKE`函数）。我们需要单独提供OHLC（开盘价、最高价、最低价、收盘价）数据作为该函数的输入。我们将函数的输出存储在一个新列中。对于该函数，有三种可能的输出：
- en: '`100`—Indicates the bullish variant of the pattern'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`100`—表示该模式的看涨变体'
- en: '`0`—No pattern detected'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0`—未检测到模式'
- en: '`-100`—Indicates the bearish variant of the pattern'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-100`—表示该模式的看跌变体'
- en: The authors of the library warn that the user should consider the three line
    strike pattern to be significant when it appears in a trend in the same direction
    (this is not verified by the library).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 库的作者警告，用户应考虑当三线打击模式出现在相同方向的趋势中时，其具有显著性（库未验证此点）。
- en: Certain functions can have additional possible outputs. Some of them also have
    values of -200/200 (for example, for the Hikkake pattern), whenever there is some
    additional confirmation in the pattern.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 某些函数可能有额外的输出。一些模式还具有-200/200的值（例如，Hikkake模式），每当模式中有额外确认时，就会出现这些值。
- en: In *Step 4*, we filtered the DataFrame for a bearish pattern. It has been identified
    six times and we chose the one from `2021-07-16 12:00:00`. Then, we plotted the
    pattern together with some neighboring candles.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤4*中，我们筛选了DataFrame中的看跌模式。它被识别了六次，我们选择了`2021-07-16 12:00:00`的那个模式。然后，我们将该模式与一些相邻的蜡烛图一起绘制。
- en: In *Step 5*, we have repeated the same procedure, this time for a bullish pattern.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤5*中，我们重复了相同的过程，这次是针对一个看涨模式。
- en: There’s more…
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多……
- en: 'If we wanted to use the identified patterns as features for a model/strategy,
    it might be worthwhile to try to identify all the possible patterns at once. We
    can do so by executing the following steps:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们希望将已识别的模式作为模型/策略的特征，可能值得尝试一次性识别所有可能的模式。我们可以通过执行以下步骤来实现：
- en: 'Get all available pattern names:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取所有可用的模式名称：
- en: '[PRE27]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Iterate over the list of patterns and try identifying them all:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 遍历模式列表并尝试识别所有模式：
- en: '[PRE28]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Inspect the summary statistics of the patterns:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查模式的汇总统计：
- en: '[PRE29]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'For brevity, we only present the top 10 rows of the returned DataFrame:'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了简洁起见，我们仅展示返回的DataFrame中的前10行：
- en: '![](../Images/B18112_05_11.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B18112_05_11.png)'
- en: 'Figure 5.11: Summary statistics of the identified candlestick patterns'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.11：已识别蜡烛图模式的汇总统计
- en: We can see that some patterns were never identified (the minimum and maximum
    of zero), while others had either one or two of the variants (bullish or bearish).
    In the notebook (available on GitHub), we have also looked into identifying the
    **evening star** pattern based on the outputs of this table.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，有些模式从未被识别（最小值和最大值为零），而其他模式则有一个或两个变体（看涨或看跌）。在GitHub上提供的笔记本中，我们还尝试了根据此表的输出识别**晚星**模式。
- en: See also
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: '[https://sourceforge.net/p/ta-lib/code/HEAD/tree/trunk/ta-lib/c/src/ta_func/](https://sourceforge.net/p/ta-lib/code/HEAD/tree/trunk/ta-lib/c/src/ta_func/)'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://sourceforge.net/p/ta-lib/code/HEAD/tree/trunk/ta-lib/c/src/ta_func/](https://sourceforge.net/p/ta-lib/code/HEAD/tree/trunk/ta-lib/c/src/ta_func/)'
- en: Bulkowski, T. N. 2021 *Encyclopedia of Chart Patterns*. John Wiley & Sons, 2021.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bulkowski, T. N. 2021 *《图表模式百科全书》*。John Wiley & Sons，2021年。
- en: Building an interactive web app for technical analysis using Streamlit
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Streamlit构建技术分析的互动网页应用
- en: In this chapter, we have already covered the basics of technical analysis, which
    can help traders make their decision. However, until now everything was quite
    static—we downloaded the data, calculated an indicator, plotted it, and if we
    wanted to change the asset or the range of dates, we had to repeat all the steps.
    What if there was a better and more interactive way to approach this challenge?
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经介绍了技术分析的基础知识，这些知识可以帮助交易者做出决策。然而，直到现在，一切都是相对静态的——我们下载数据，计算指标，绘制图表，如果我们想更换资产或日期范围，就必须重复所有步骤。那么，是否有更好、更互动的方式来解决这个问题呢？
- en: 'This is exactly where Streamlit comes into play. Streamlit is an open source
    framework (and a company under the same name, similarly to Plotly) that allows
    us to build interactive web apps using only Python, all within minutes. Below
    you can find the highlights of Streamlit:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是Streamlit发挥作用的地方。Streamlit是一个开源框架（以及一个同名公司，类似于Plotly），它允许我们仅使用Python在几分钟内构建互动网页应用。以下是Streamlit的亮点：
- en: It is easy to learn and can generate results very quickly
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它易于学习，并能非常快速地生成结果
- en: It is Python only; no frontend experience is required
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它仅限于Python；无需前端开发经验
- en: It allows us to focus purely on the data/ML sides of the app
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它允许我们专注于应用的纯数据/机器学习部分
- en: We can use Streamlit’s hosting services for our apps
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以使用Streamlit的托管服务来部署我们的应用
- en: In this recipe, we will build an interactive app used for technical analysis.
    You will be able to select any of the constituents of the S&P 500 and carry out
    a simple analysis quickly and in an interactive way. What is more, you can easily
    expand the app to add more features such as different indicators and assets, or
    even embed backtesting of trading strategies within the app.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，我们将构建一个用于技术分析的互动应用程序。你将能够选择任何标准普尔500指数的成分股，并快速、互动地进行简单的分析。此外，你还可以轻松扩展该应用程序，添加更多的功能，例如不同的指标和资产，甚至可以在应用程序中嵌入交易策略的回测功能。
- en: Getting ready
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: This recipe is slightly different than the rest. The code of our app “lives”
    in a single Python script (`technical_analysis_app.py`), which has around a hundred
    lines of code. A very basic app can be much more concise, but we wanted to go
    over some of the most interesting features of Streamlit, even if they are not
    strictly necessary to make a basic app for technical analysis.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例与其他示例略有不同。我们的应用程序代码“存在”于一个单一的 Python 脚本（`technical_analysis_app.py`）中，代码大约有一百行。一个非常基础的应用程序可以更加简洁，但我们希望展示一些
    Streamlit 最有趣的功能，即使它们对于构建基础的技术分析应用程序并非绝对必要。
- en: In general, Streamlit executes code from top to bottom, which makes the explanation
    easier to fit into the structure used in this book. Thus, the steps in this recipe
    are not steps *per se*—they cannot/should not be executed on their own. Instead,
    they are a step-by-step walkthrough of all the components of the app. While building
    your own apps or expanding this one, you can freely change the order of the steps
    as you see fit (as long as they are aligned with Streamlit’s framework).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，Streamlit 按照自上而下的顺序执行代码，这使得将解释与本书使用的结构相适配更加容易。因此，本示例中的步骤并不是*本身*的步骤——它们不能/不应该单独执行。相反，它们是应用程序所有组件的逐步演示。在构建自己的应用程序或扩展此应用程序时，你可以根据需要自由更改步骤的顺序（只要它们与
    Streamlit 框架一致）。
- en: How to do it…
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'The following steps are all located in the `technical_analysis_app.py`:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤都位于 `technical_analysis_app.py` 文件中：
- en: 'Import the libraries:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入库：
- en: '[PRE30]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Define a function for downloading a list of S&P 500 constituents from Wikipedia:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个从维基百科下载标准普尔500指数成分股列表的函数：
- en: '[PRE31]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Define a function for downloading historical stock prices using `yfinance`:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个使用 `yfinance` 下载历史股票价格的函数：
- en: '[PRE32]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Define a function for storing downloaded data as a CSV file:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个将下载的数据存储为 CSV 文件的函数：
- en: '[PRE33]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Define the part of the sidebar used for selecting the ticker and the dates:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义侧边栏用于选择股票代码和日期的部分：
- en: '[PRE34]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Define the part of the sidebar used for tuning the details of the technical
    analysis:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义侧边栏用于调整技术分析详细参数的部分：
- en: '[PRE35]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Add the expander with parameters of the SMA:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个带有 SMA 参数的展开器：
- en: '[PRE36]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Add the expander with parameters of the Bollinger bands:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个带有布林带参数的展开器：
- en: '[PRE37]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Add the expander with parameters of the RSI:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个带有 RSI 参数的展开器：
- en: '[PRE38]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Specify the title and additional text in the app’s main body:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序的主体中指定标题和附加文本：
- en: '[PRE39]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Load the historical stock prices:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载历史股票价格：
- en: '[PRE40]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Add the expander with a preview of the downloaded data:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个带有下载数据预览的展开器：
- en: '[PRE41]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Create the candlestick chart with the selected TA indicators:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用选定的技术分析指标创建蜡烛图：
- en: '[PRE42]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'To run the app, open the terminal, navigate to the directory in which the `technical_analysis_app.py`
    script is located, and run the following command:'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要运行应用程序，打开终端，导航到 `technical_analysis_app.py` 脚本所在的目录，并运行以下命令：
- en: '[PRE43]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Running the code opens the Streamlit app in your default browser. The app’s
    default screen looks as follows:'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行代码后，Streamlit 应用程序将在默认浏览器中打开。应用程序的默认屏幕如下所示：
- en: '![](../Images/B18112_05_12.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B18112_05_12.png)'
- en: 'Figure 5.12: Our technical analysis app in the browser'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.12：我们的技术分析应用程序在浏览器中的展示
- en: The app is fully responsive to the inputs—anytime you change the inputs in the
    sidebar or the app’s main body, the displayed contents will adjust accordingly.
    Potentially, we could even take it a step further and connect our app to a broker
    via the broker’s API. This way, we could analyze the patterns in the app and create
    orders based on the outcome of our analyses.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序对输入完全响应——每当你更改侧边栏或应用程序主体中的输入时，显示的内容将相应调整。实际上，我们甚至可以进一步扩展，将应用程序连接到经纪商的 API。这样，我们可以在应用程序中分析模式，并根据分析结果创建订单。
- en: How it works…
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: 'As mentioned in the *Getting ready* section, this recipe is structured differently.
    The steps are in fact a sequence of elements that all define the app we built.
    Before diving into the details, the general structure of the app’s codebase is
    as follows:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 如 *准备工作* 部分所述，这个食谱结构有所不同。步骤实际上是定义我们构建的应用的一系列元素。在深入细节之前，应用代码库的一般结构如下：
- en: Imports and setup (*step 1*)
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入和设置 (*步骤 1*)
- en: Data loading functions (*steps 2–4*)
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据加载函数 (*步骤 2–4*)
- en: Sidebar (*steps 5–9*)
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 侧边栏 (*步骤 5–9*)
- en: App’s main body (*steps 10–13*)
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序的主体 (*步骤 10–13*)
- en: In the first step, we imported the required libraries. For the technical analysis
    part, we decided to use a library that can visualize a selection of technical
    indicators in as few lines of code as possible. That is why we decided to go with
    `cufflinks`, which was introduced in *Chapter 3*, *Visualizing Financial Time
    Series*. However, in case you need to calculate a wider range of indicators, you
    can use any other library and create the plots yourself.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一步中，我们导入了所需的库。对于技术分析部分，我们决定使用一个库，它能在尽可能少的代码行内可视化一组技术指标。这就是我们选择 `cufflinks`
    的原因，它在 *第 3 章* *《可视化金融时间序列》* 中介绍。然而，如果你需要计算更多的指标，你可以使用任何其他库并自己绘制图表。
- en: 'In *Step 2*, we defined a function for loading a list of S&P 500 constituents
    from Wikipedia. We used the `pd.read_html` to download the information from the
    table straight into a DataFrame. The function returns two elements: a list of
    valid tickers and a dictionary containing pairs of tickers and their corresponding
    companies’ names.'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 2* 中，我们定义了一个函数，用于从 Wikipedia 加载标准普尔 500 指数成分股的列表。我们使用 `pd.read_html` 直接从表格中下载信息并保存为
    DataFrame。该函数返回两个元素：一个有效股票代码的列表和一个包含股票代码及其对应公司名称的字典。
- en: You surely have noticed that we used a `@st.cache` decorator while defining
    the function. We will not go over a lot of details of decorators in general, but
    we will cover what this one does as it is very handy while building an app using
    Streamlit. The decorator indicates that the app should cache the previously fetched
    data for later use. So in case we refresh the page or the function is called again,
    the data will not be downloaded/processed again (unless some conditions occur).
    This way, we can greatly increase the web app’s responsiveness and lower the end
    user’s waiting time.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 你肯定注意到了我们在定义函数时使用了 `@st.cache` 装饰器。我们不会详细讨论装饰器的一般内容，但会介绍这个装饰器的作用，因为它在使用 Streamlit
    构建应用时非常有用。该装饰器表明，应用应该缓存之前获取的数据以供后续使用。因此，如果我们刷新页面或再次调用函数，数据将不会重新下载/处理（除非发生某些条件）。通过这种方式，我们可以显著提高
    Web 应用的响应速度并降低最终用户的等待时间。
- en: 'Behind the scenes, Streamlit keeps track of the following information to determine
    if the data should be fetched again:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在幕后，Streamlit 跟踪以下信息，以确定是否需要重新获取数据：
- en: The input parameters that we provided while calling the function
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们在调用函数时提供的输入参数
- en: The values of any external variables used in the function
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数中使用的任何外部变量的值
- en: The body of the called function
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 被调用函数的主体
- en: The body of any function called inside of the cached function
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在缓存函数内部调用的任何函数的主体
- en: In short, if this is the first time Streamlit sees a certain combination of
    those four elements, it will execute the function and store its output in a local
    cache. If it encounters the very same set of items the next time the function
    is called, it will skip executing it and return the cached output from the previous
    execution.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，如果这是 Streamlit 第一次看到某种组合的这四个元素，它将执行函数并将其输出存储在本地缓存中。如果下次函数被调用时遇到完全相同的一组元素，它将跳过执行并返回上次执行的缓存输出。
- en: '*Steps 3* and *4* contain very small functions. The first one is used to fetch
    the historical stock prices from Yahoo Finance using the `yfinance` library. The
    following step saves the output of a DataFrame into a CSV file, which is then
    encoded in UTF-8.'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤 3* 和 *4* 包含非常小的函数。第一个用于通过 `yfinance` 库从 Yahoo Finance 获取历史股票价格。接下来的步骤将
    DataFrame 的输出保存为 CSV 文件，并将其编码为 UTF-8。'
- en: 'In *Step 5*, we started working on the app’s sidebar, which we use for storing
    the parameter configurations for the app. The first thing to notice is that all
    the elements that are meant to be located in the sidebar are called with `st.sidebar`
    (as opposed to just `st`, which we use when defining the main body’s elements
    and other functions). In this step, we did the following:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤5*中，我们开始着手开发应用程序的侧边栏，用于存储应用程序的参数配置。首先需要注意的是，所有计划放置在侧边栏中的元素都通过`st.sidebar`调用（与我们在定义主界面元素和其他功能时使用的`st`不同）。在这一步中，我们做了以下工作：
- en: We specified the header.
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们指定了标题。
- en: We downloaded the list of available tickers.
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们下载了可用票证的列表。
- en: We created a drop-down selection box of the available tickers. We also provided
    additional formatting by passing the dictionary containing symbol-name pairs to
    the `format_func` argument.
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们创建了一个下拉选择框，用于选择可用的票证。我们还通过将包含符号-名称对的字典传递给`format_func`参数来提供额外的格式化。
- en: We allowed the users to select the start and end dates for the analysis. Using
    `date_input` displays an interactive calendar from which the users can select
    a date.
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们允许用户选择分析的开始和结束日期。使用`date_input`会显示一个交互式日历，用户可以从中选择日期。
- en: We accounted for invalid combinations of dates (start later than the end) by
    using an `if` statement together with `st.sidebar.error`. This will halt the app
    execution until the error is resolved, that is, until a proper input is provided.
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们通过使用`if`语句结合`st.sidebar.error`来处理无效的日期组合（开始日期晚于结束日期）。这将暂停应用程序的执行，直到错误被解决，也就是说，直到提供正确的输入。
- en: 'The outcome of this step looks as follows:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 此步骤的结果如下所示：
- en: '![](../Images/B18112_05_13.png)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B18112_05_13.png)'
- en: 'Figure 5.13: Part of the sidebar where we can choose the ticket and start/end
    dates'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.13：侧边栏的一部分，我们可以在其中选择票证和开始/结束日期
- en: In *Step 6*, we added another header to our sidebar and created a checkbox using
    `st.checkbox`. If checked, the assigned variable will hold a `True` value, `False`
    if unchecked.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤6*中，我们在侧边栏中添加了另一个标题，并使用`st.checkbox`创建了一个复选框。如果选中，该变量将保存`True`值，未选中则为`False`。
- en: 'In *Step 7*, we started with configuring the technical indicators. To keep
    the app clean, we used expanders (`st.expander`). Expanders are collapsible boxes,
    which we trigger to expand by pressing the plus icon. Inside, we stored two elements:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤7*中，我们开始配置技术指标。为了保持应用程序的简洁，我们使用了展开器（`st.expander`）。展开器是可折叠的框，通过点击加号图标可以触发展开。在其中，我们存储了两个元素：
- en: A checkbox indicating whether we want to display the SMA.
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个复选框，用于指示是否要显示SMA。
- en: A numeric field in which we can specify the number of periods for the moving
    average. For that element, we used Streamlit’s `number_input` object. We provided
    the label, minimum/maximum values, the default value, and the step size (we can
    incrementally increase/decrease the value of the field by that number when we
    press the corresponding buttons).
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个数字字段，用于指定移动平均的周期数。对于该元素，我们使用了Streamlit的`number_input`对象。我们提供了标签、最小/最大值、默认值和步长（当我们按下相应的按钮时，可以逐步增加/减少字段的值）。
- en: 'When using expanders, we first instantiated one in the sidebar using `exp_sma
    = st.sidebar.expander("SMA")`. Then, when we wanted to add elements to the expander,
    for example, the checkbox, we used the following syntax: `sma_flag = exp_sma.checkbox(label="Add
    SMA")`. This way, it was added straight into the expander, not just the sidebar.'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 使用展开器时，我们首先在侧边栏中实例化了一个展开器，使用`exp_sma = st.sidebar.expander("SMA")`。然后，当我们想要向展开器中添加元素时，例如复选框，我们使用以下语法：`sma_flag
    = exp_sma.checkbox(label="添加SMA")`。这样，它就被直接添加到了展开器中，而不仅仅是侧边栏。
- en: '*Steps 8* and *9* are very similar. We created two expanders for other technical
    indicators we wanted to include in the app – Bollinger bands and the RSI.'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤8*和*步骤9*非常相似。我们为应用程序中想要包括的其他技术指标——布林带和RSI——创建了两个展开器。'
- en: 'The code from *Steps 7–9* generates the following part of the app’s sidebar:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤7到9*的代码生成了应用程序侧边栏的以下部分：'
- en: '![](../Images/B18112_05_14.png)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B18112_05_14.png)'
- en: 'Figure 5.14: Part of the sidebar where we can modify the parameters of the
    selected indicators'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.14：侧边栏的一部分，我们可以在其中修改所选指标的参数
- en: Then, we proceeded to define the app’s main body. In *Step 10*, we added the
    app’s title using `st.title` and added a user manual using `st.write`. When using
    the latter function, we can provide text input in a Markdown-formatted string.
    For this part, we used a subheader (indicated by `###`) and created a list of
    bullets indicated by `*`. For brevity, we did not include all the text in the
    book, but you can find it in the book’s GitHub repository.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们继续定义了应用程序的主体。在*步骤 10*中，我们使用`st.title`添加了应用程序的标题，并使用`st.write`添加了用户手册。在使用后者功能时，我们可以提供一个Markdown格式的文本输入。对于这一部分，我们使用了副标题（由`###`表示）并创建了一个项目符号列表（由`*`表示）。为了简洁起见，我们没有包含书中的所有文字，但你可以在书籍的GitHub仓库中找到它。
- en: In *Step 11*, we downloaded the historical stock prices based on the inputs
    from the sidebar. What we could also have done here is download a full range of
    dates available for a given stock and only then use the sidebar’s start/end dates
    to filter out the periods of interest. By doing so, we would not have to redownload
    the data anytime we changed the start/end dates.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 11*中，我们根据侧边栏的输入下载了历史股票价格。我们在这里还可以做的是下载给定股票的完整日期范围，然后使用侧边栏的起始/结束日期来筛选出感兴趣的时间段。这样，我们就不需要每次更改起始/结束日期时重新下载数据。
- en: In *Step 12*, we defined another expander, this time in the app’s main body.
    First, we added a multiple selection field (`st.multiselect`) from which we can
    select any of the available columns from the downloaded historical prices. Then,
    we displayed the selected columns of the DataFrame for further inspection using
    `st.dataframe`. Lastly, we added the functionality to download the selected data
    (including the column selection) as a CSV file. For that, we used our `convert_df_to_csv`
    function, together with `st.download_button`.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 12*中，我们定义了另一个展开面板，这次是在应用程序的主体中。首先，我们添加了一个多选字段（`st.multiselect`），从中我们可以选择从下载的历史价格中可用的任何列。然后，我们使用`st.dataframe`显示选定的DataFrame列，以便进一步检查。最后，我们添加了将选定数据（包括列选择）作为CSV文件下载的功能。为此，我们使用了`convert_df_to_csv`函数，并结合使用`st.download_button`。
- en: '*Step 12* is responsible for generating the following part of the app:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤 12*负责生成应用程序的以下部分：'
- en: '![](../Images/B18112_05_15.png)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B18112_05_15.png)'
- en: 'Figure 5.15: Part of the app where we can inspect the DataFrame containing
    prices and download it as a CSV'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.15：应用程序的部分，在这里我们可以检查包含价格的DataFrame并将其作为CSV下载
- en: In the app’s last step, we defined the figure we wanted to display. Without
    any of the technical analysis inputs, the app will display a candlestick chart
    using `cufflinks`. We instantiated the `QuantFig` object and then added elements
    to it depending on the inputs from the sidebar. Each of the Boolean flags triggers
    a separate command that adds an element to the plot. To display the interactive
    figure, we used `st.plotly_chart`, which works with `plotly` figures (`cufflinks`
    is a wrapper on top of `plotly`).
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序的最后一步，我们定义了要显示的图表。没有任何技术分析输入时，应用程序将使用`cufflinks`显示一个蜡烛图。我们实例化了`QuantFig`对象，然后根据侧边栏的输入向其添加元素。每个布尔标志触发一个单独的命令，向图表中添加一个元素。为了显示交互式图表，我们使用了`st.plotly_chart`，它与`plotly`图表配合使用（`cufflinks`是`plotly`的一个包装器）。
- en: For other visualization libraries, there are different commands to embed visualizations.
    For example, for `matplotlib`, we would use `st.pyplot`. We could also display
    plots created in Altair using `st.altair_chart`.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其他可视化库，有不同的命令来嵌入可视化。例如，对于`matplotlib`，我们会使用`st.pyplot`。我们还可以使用`st.altair_chart`显示用Altair创建的图表。
- en: There’s more…
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多……
- en: In the first edition of the book, we covered a bit of a different approach to
    creating an interactive dashboard for technical analysis. Instead of Streamlit,
    we used `ipywidgets` to build the dashboard inside of a Jupyter notebook.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的第一版中，我们介绍了一种不同的方法来创建用于技术分析的交互式仪表盘。我们没有使用Streamlit，而是使用`ipywidgets`在Jupyter笔记本中构建仪表盘。
- en: In general, Streamlit might be the better tool for this particular job, especially
    if we want to deploy the app (covered in the next recipe) and share it with others.
    However, `ipywidgets` can still be useful for other projects, which can live locally
    inside of a notebook. That is why you can find the code used for creating a very
    similar dashboard (within a notebook) in the accompanying GitHub repository.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 通常来说，Streamlit可能是这个特定任务的更好工具，特别是当我们想要部署应用程序（将在下一个食谱中介绍）并与他人共享时。然而，`ipywidgets`在其他项目中仍然很有用，这些项目可以在笔记本内本地运行。这就是为什么你可以在随附的GitHub仓库中找到用于创建非常相似仪表盘（在笔记本内）的代码。
- en: See also
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: '[https://streamlit.io/](https://streamlit.io/)'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://streamlit.io/](https://streamlit.io/)'
- en: '[https://docs.streamlit.io/](https://docs.streamlit.io/)'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.streamlit.io/](https://docs.streamlit.io/)'
- en: Deploying the technical analysis app
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署技术分析应用
- en: In the previous recipe, we created a full-fledged web app for technical analysis,
    which we can easily run and use locally. However, that is not always the goal,
    as we might want to access the app from anywhere or share it with our friends
    or colleagues. That is why the next step would be to deploy the app to the cloud.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的教程中，我们创建了一个完整的技术分析 Web 应用，能够轻松在本地运行和使用。然而，这并不是最终目标，因为我们可能希望从任何地方访问该应用，或者与朋友或同事分享它。因此，下一步是将应用部署到云端。
- en: In this recipe, we show how to deploy the app using Streamlit’s (the company)
    services.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们展示了如何使用 Streamlit（该公司）的服务部署应用。
- en: Getting ready
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To deploy the app to Streamlit Cloud, we need to create an account there ([https://forms.streamlit.io/community-sign-up](https://forms.streamlit.io/community-sign-up)).
    You will also need a GitHub account to host the code of the app.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 要将应用部署到 Streamlit Cloud，我们需要在该平台上创建一个账户（[https://forms.streamlit.io/community-sign-up](https://forms.streamlit.io/community-sign-up)）。你还需要一个
    GitHub 账户来托管应用的代码。
- en: How to do it…
  id: totrans-267
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Execute the following steps to deploy the Streamlit app to the cloud:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤将 Streamlit 应用部署到云端：
- en: Host the code base of the app in a public repository on GitHub:![](../Images/B18112_05_16.png)
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 GitHub 上托管应用的代码库：![](../Images/B18112_05_16.png)
- en: 'Figure 5.16: The code base of the app hosted in a public GitHub repository'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.16：托管在公共 GitHub 仓库中的应用代码库
- en: In this step, remember to host the entire code base of the app, which can naturally
    be spread out over multiple files. Also, please include some kind of a dependencies
    list. In our case, it is the `requirements.txt` file.
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此步骤中，记得托管整个应用的代码库，它可能分布在多个文件中。此外，请包含某种形式的依赖列表。在我们的例子中，这就是 `requirements.txt`
    文件。
- en: Go to [https://share.streamlit.io/](https://share.streamlit.io/) and log in.
    You might need to connect your GitHub account to your Streamlit account and authorize
    it to have certain types of access to your GitHub account.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 [https://share.streamlit.io/](https://share.streamlit.io/) 并登录。你可能需要将 GitHub
    账户与 Streamlit 账户连接，并授权它访问你 GitHub 账户的某些权限。
- en: Click the *New app* button.
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 *New app* 按钮。
- en: 'Provide the required details: the name of the repository in your profile, the
    branch, and the file containing the app:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供所需的详细信息：个人资料中的仓库名称、分支以及包含应用的文件：
- en: '![](../Images/B18112_05_17.png)'
  id: totrans-275
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/B18112_05_17.png)'
- en: 'Figure 5.17: The information we have to provide to create the app'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.17：创建应用所需提供的信息
- en: Click *Deploy!*.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 *Deploy!*。
- en: Now, you can go to the provided link to use the app.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以访问提供的链接来使用该应用。
- en: How it works…
  id: totrans-279
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In the first step, we hosted the app’s code in a public GitHub repository. If
    you are new to Git or GitHub, please refer to the link in the *See also* section
    for more information. At the time of writing, it is not possible to use other
    version control providers such as GitLab or BitBucket for hosting code of Streamlit
    apps. The bare minimum in terms of the files is the app’s script (in our case,
    `technical_analysis_app.py`) and some form of a list with requirements. The easiest
    one would be a simple `requirements.txt` text file containing all the libraries
    you would like to use in the app. If you are using a different dependency manager
    (`conda`, `pipenv`, or `poetry`), you need to provide their respective files.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一步中，我们将应用的代码托管在了一个公共的 GitHub 仓库中。如果你是 Git 或 GitHub 的新手，请参考*另见*部分的链接获取更多信息。在写作时，Streamlit
    应用的代码托管只支持 GitHub，无法使用其他版本控制提供商（如 GitLab 或 BitBucket）。文件的最低要求是应用的脚本（在我们的例子中是`technical_analysis_app.py`）和某种形式的依赖列表。最简单的依赖列表是一个包含所有所需库的
    `requirements.txt` 文本文件。如果你使用不同的依赖管理工具（如 `conda`、`pipenv` 或 `poetry`），你需要提供相应的文件。
- en: If there are multiple libraries you would like to use in the app, the easiest
    way to create the requirements file containing them would be to run `pip freeze
    > requirements.txt` while having your virtual environment activated.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望在应用中使用多个库，创建包含这些库的 requirements 文件最简单的方法是在虚拟环境激活时运行 `pip freeze > requirements.txt`。
- en: 'All the next steps are quite intuitive, as Streamlit’s platform is very easy
    to navigate. What might be useful to mention is that in *Step 4*, we can also
    provide some more advanced settings. They include:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的步骤都非常直观，因为 Streamlit 的平台非常易于使用。需要提到的是，在*步骤 4*中，我们还可以提供一些更高级的设置。这些设置包括：
- en: The Python version that you would like the app to use.
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您希望应用使用的 Python 版本。
- en: The Secrets field, in which you can store some environment variables and secrets,
    such as API keys. In general, it is against best practices to store usernames,
    API keys, and other secrets in public GitHub repositories. If your app is fetching
    data from some provider or your internal database, that is the field in which
    you can safely store the credentials, which will be then encrypted and served
    securely to your app at runtime.
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Secrets 字段，您可以在其中存储一些环境变量和秘密信息，如 API 密钥。通常来说，最好不要将用户名、API 密钥和其他秘密信息存储在公开的 GitHub
    仓库中。如果您的应用正在从某个提供商或内部数据库获取数据，可以将凭据安全地存储在该字段中，这些凭据将在运行时加密并安全地传递给您的应用。
- en: There’s more…
  id: totrans-285
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容……
- en: In this recipe, we showed how to deploy our web app to the Streamlit Cloud.
    While being the simplest, it is not the only option. Another one would be to deploy
    the app to Heroku, which is a **Platform as a Service** (**PaaS**) type of platform
    that enables you to build, run, and operate applications entirely in the cloud.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们展示了如何将我们的 Web 应用部署到 Streamlit Cloud。虽然这是最简单的方法，但它并不是唯一的选择。另一个选择是将应用部署到
    Heroku，Heroku 是一种**平台即服务**（**PaaS**）类型的平台，能够让你在云端完全构建、运行和操作应用程序。
- en: See also
  id: totrans-287
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: '[https://www.heroku.com/](https://www.heroku.com/)—for more information about
    Heroku’s services'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.heroku.com/](https://www.heroku.com/)—关于 Heroku 服务的更多信息'
- en: '[https://docs.streamlit.io/streamlit-cloud](https://docs.streamlit.io/streamlit-cloud)—for
    more details on how to deploy the app and what are the best practices'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.streamlit.io/streamlit-cloud](https://docs.streamlit.io/streamlit-cloud)—关于如何部署应用程序以及最佳实践的更多细节'
- en: '[https://docs.github.com/en/get-started/quickstart/hello-world](https://docs.github.com/en/get-started/quickstart/hello-world)—a
    tutorial on how to use GitHub'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.github.com/en/get-started/quickstart/hello-world](https://docs.github.com/en/get-started/quickstart/hello-world)—关于如何使用
    GitHub 的教程'
- en: Summary
  id: totrans-291
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we have learned about technical analysis. We started by calculating
    some of the most popular technical indicators (and downloading precalculated ones):
    the SMA, the RSI, and the MACD. We have also explored identifying patterns in
    candlesticks. Lastly, we learned how to create and deploy an interactive app for
    technical analysis.'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了技术分析。我们从计算一些最流行的技术指标（并下载了预计算的指标）开始：SMA、RSI 和 MACD。我们还探索了如何识别蜡烛图中的图形模式。最后，我们学习了如何创建和部署一个用于技术分析的互动应用。
- en: In further chapters, we will put this knowledge into practice by creating and
    backtesting trading strategies based on the technical indicators we have already
    covered.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 在后续章节中，我们将通过创建和回测基于我们已经学过的技术指标的交易策略，将这些知识付诸实践。
