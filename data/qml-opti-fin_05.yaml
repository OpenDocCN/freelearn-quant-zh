- en: '6'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '6'
- en: Qubits and Quantum Logic Gates
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 量子比特和量子逻辑门
- en: A computation can be broadly defined as a transformation of one memory state
    into another. Put slightly differently, a computation is a function that transforms
    information  [[281](Biblography.xhtml#XTegmark2017)]. In the case of classical
    digital computing, the fundamental memory unit is a *binary digit* (bit) of information.
    Functions that operate on bits of information are called *logic gates*. Logic
    gates are Boolean functions that can be combined into *circuits* capable of performing
    addition and multiplication, as well as more complex operations. In logic gates,
    the number of output bits does not have to be the same as the number of input
    bits.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 计算可以广义地定义为一种将一个记忆状态转换为另一个记忆状态的过程。换句话说，计算是一个将信息转换的函数[[281](Biblography.xhtml#XTegmark2017)]。在经典数字计算的情况下，基本的记忆单元是*二进制数字*（比特）信息。对比特信息执行操作的函数被称为*逻辑门*。逻辑门是布尔函数，它们可以组合成*电路*，执行加法、乘法以及更复杂的操作。在逻辑门中，输出比特的数量不必与输入比特的数量相同。
- en: 'A computation may seem to be an abstract mathematical concept but it always
    requires some physical system in order to be executed. It does not matter what
    this physical system is: billiard balls, electric switches, transistors, or anything
    else – the computation is substrate independent. However, it is always some physical
    process that changes the state of the system in a controlled way.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 计算可能看起来是一个抽象的数学概念，但它总是需要某种物理系统来执行。这个物理系统是什么并不重要：台球、电子开关、晶体管或任何其他物体——计算是与底层物质无关的。然而，始终是某种物理过程以受控的方式改变系统的状态。
- en: Classical digital computing requires some physical implementation of two distinct
    deterministic states (usually denoted as 0 and 1) and a set of gates that perform
    controlled transitions between them. In the following sections, we will see how
    classical digital computation can be implemented, what set of basis operations
    is required, and how the logic of classical computation can be extended to more
    general logic of quantum computation, of which classical computing is just a special
    case.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 经典数字计算要求物理实现两个不同的确定性状态（通常表示为0和1），并且需要一组执行受控转换的逻辑门。在接下来的章节中，我们将看到经典数字计算如何实现，所需的基础操作集是什么，以及如何将经典计算的逻辑扩展到更一般的量子计算逻辑，而经典计算仅是量子计算的一个特例。
- en: 6.1 Binary Digit (Bit) and Logic Gates
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 6.1 二进制数字（比特）与逻辑门
- en: In this section, we rapidly review classical logic gates and their universality,
    in order to draw a parallel later to quantum gates.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中，我们将快速回顾经典逻辑门及其普适性，以便稍后与量子门进行对比。
- en: 6.1.1 Logic gates
  id: totrans-7
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 6.1.1 逻辑门
- en: A logic gate is an implementation of a Boolean function, a logical operation
    performed on one or more binary inputs that produces a single binary output. Logic
    gates are represented by their *truth tables*. A truth table has one column for
    each input variable, and one final column showing all of the possible results
    of the logical operation that the table represents. Each row of the truth table
    contains one possible configuration (a single bit or a bitstring) of the input
    variables, and the result of the operation for those values.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑门是布尔函数的实现，它是在一个或多个二进制输入上执行的逻辑操作，产生一个单一的二进制输出。逻辑门通过其*真值表*表示。真值表为每个输入变量提供一列，并且有一列最终显示该表表示的逻辑操作的所有可能结果。真值表的每一行包含输入变量的一个可能配置（一个比特或比特串），以及对于这些值的操作结果。
- en: Figures and Tables [6.1](#6.1), [6.2](#6.2), [6.3](#6.3), and [6.4](#6.4) are
    schematic circuit representations of the AND, OR, NAND (not AND), and XOR (exclusive
    OR) logic gates as well as their corresponding truth tables.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 图表[6.1](#6.1)、[6.2](#6.2)、[6.3](#6.3)和[6.4](#6.4)是与门、或门、与非门（非与门）和异或门（排他或门）逻辑门的示意电路图及其对应的真值表。
- en: '![Figurex1-121007r1: AND gate diagram and truth table. ](img/file455.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![图6.5: 与门电路图和真值表](img/file455.jpg)'
- en: 'Figure 6.1: AND gate diagram and truth table.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '图6.1: 与门电路图和真值表。'
- en: '![Figurex1-121009r2: OR gate diagram and truth table. ](img/file456.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![图6.1: 与门电路图和真值表](img/file456.jpg)'
- en: 'Figure 6.2: OR gate diagram and truth table.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '图6.2: 或门电路图和真值表。'
- en: '![Figurex1-121011r3: NAND gate diagram and truth table. ](img/file457.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![图6.6: 与非门电路图和真值表](img/file457.jpg)'
- en: 'Figure 6.3: NAND gate diagram and truth table.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '图6.3: 与非门电路图和真值表。'
- en: '![Figurex1-121013r4: XOR gate diagram and truth table. ](img/file458.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![图6.4: 异或门电路图和真值表](img/file458.jpg)'
- en: 'Figure 6.4: XOR gate diagram and truth table.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.4：XOR 门的图示和真值表。
- en: 6.1.2 NAND as a universal logic gate
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 6.1.2 NAND 作为通用逻辑门
- en: Logic gates can be combined into circuits where the output of one is the input
    of another. This allows us i) to implement more complex operators than basic Boolean
    functions and ii) to implement all necessary Boolean functions using only a small
    number of easy-to-build logic gates. For example, all Boolean functions can be
    constructed using only a NAND gate and a fan-out operation. This makes NAND a
    *universal* gate in classical computing. Figure [6.5](#6.5) illustrates this by
    presenting the decomposition of four basic logic gates (NOT, AND, OR, XOR) into
    circuits consisting only of NAND gates.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑门可以组合成电路，其中一个门的输出作为另一个门的输入。这使得我们能够 i) 实现比基本布尔函数更复杂的运算符，ii) 仅使用少量易于构建的逻辑门来实现所有必要的布尔函数。例如，所有布尔函数都可以仅使用
    NAND 门和扇出操作来构建。这使得 NAND 成为经典计算中的 *通用* 门。图 [6.5](#6.5) 通过展示将四个基本逻辑门（NOT、AND、OR、XOR）分解为仅由
    NAND 门组成的电路来说明这一点。
- en: '![Figurex1-122002r5: Examples of logic gates decomposition into NAND gates
    and fan-out operations. ](img/file459.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图 x1-122002r5：逻辑门分解为 NAND 门和扇出操作的示例。](img/file459.jpg)'
- en: 'Figure 6.5: Examples of logic gates decomposition into NAND gates and fan-out
    operations.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.5：逻辑门分解为 NAND 门和扇出操作的示例。
- en: 6.1.3 Building an addition operator from the NAND gates
  id: totrans-22
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 6.1.3 利用 NAND 门构建加法运算符
- en: Figure [6.6](#6.6) shows how NAND and XOR gates can be combined into a circuit
    that implements the basic addition operator. As we know, the XOR gate itself can
    be constructed from the combination of NAND gates. The addition operator takes
    three 1-bit binary numbers as inputs and outputs two 1-bit binary numbers that
    can be read as a 2-bit bitstring (a 2-bit binary number). This 2-bit binary number
    can be translated into its integer number representation – an integer number between
    0 and 3 as shown in the truth table (Table [6.1](#x1-123004r1)).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 [6.6](#6.6) 展示了如何将 NAND 门和 XOR 门结合成一个实现基本加法运算符的电路。正如我们所知道的，XOR 门本身可以通过组合 NAND
    门来构建。加法运算符接受三个 1 位二进制数作为输入，并输出两个 1 位二进制数，这可以作为一个 2 位二进制数（2-bit bitstring）进行读取。这个
    2 位二进制数可以转换为它的整数表示——一个介于 0 到 3 之间的整数，如真值表（表 [6.1](#x1-123004r1)）所示。
- en: '![Figurex1-123002r6: Addition operator: the input is three 1-bit binary numbers
    and the output is a single 2-bit binary number. ](img/file460.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图 x1-123002r6：加法运算符：输入是三个 1 位二进制数，输出是一个 2 位二进制数。](img/file460.jpg)'
- en: 'Figure 6.6: Addition operator: the input is three 1-bit binary numbers and
    the output is a single 2-bit binary number.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.6：加法运算符：输入是三个 1 位二进制数，输出是一个 2 位二进制数。
- en: '| input 1 | input 2 | input 3 | output 1 | output 2 | binary | integer |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| 输入 1 | 输入 2 | 输入 3 | 输出 1 | 输出 2 | 二进制 | 整数 |'
- en: '| 0 | 0 | 0 | 0 | 0 | 00 | 0 |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 0 | 0 | 0 | 0 | 00 | 0 |'
- en: '| 0 | 0 | 1 | 0 | 1 | 01 | 1 |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 0 | 1 | 0 | 1 | 01 | 1 |'
- en: '| 0 | 1 | 0 | 0 | 1 | 01 | 1 |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 1 | 0 | 0 | 1 | 01 | 1 |'
- en: '| 1 | 0 | 0 | 0 | 1 | 01 | 1 |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 0 | 0 | 0 | 1 | 01 | 1 |'
- en: '| 0 | 1 | 1 | 1 | 0 | 10 | 2 |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 1 | 1 | 1 | 0 | 10 | 2 |'
- en: '| 1 | 0 | 1 | 1 | 0 | 10 | 2 |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 0 | 1 | 1 | 0 | 10 | 2 |'
- en: '| 1 | 1 | 0 | 1 | 0 | 10 | 2 |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 1 | 0 | 1 | 0 | 10 | 2 |'
- en: '| 1 | 1 | 1 | 1 | 1 | 11 | 3 |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 1 | 1 | 1 | 1 | 11 | 3 |'
- en: 'Table 6.1: Addition operator truth table.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 表 6.1：加法运算符真值表。
- en: Computation is a transformation of one memory state into another. Functions
    that perform such transformations are called logic gates. Logic gates are fully
    specified by their truth tables. A universal logic gate is one from which all
    other Boolean functions can be constructed. We only need to find an efficient
    physical realisation of a universal gate in order to perform computations of arbitrary
    complexity.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 计算是将一种内存状态转换为另一种内存状态的过程。执行这种转换的函数被称为逻辑门。逻辑门由它们的真值表完全定义。一个通用逻辑门是指从它可以构建所有其他布尔函数的逻辑门。我们只需要找到一个通用门的高效物理实现，就可以执行任意复杂度的计算。
- en: 6.2 Physical Realisations of Classical Bits and Logic Gates
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 6.2 经典比特和逻辑门的物理实现
- en: We have so far defined bits and classical logic gates from a theoretical computer
    science point of view. We now provide an overview of the most efficient hardware
    techniques used to effectively implement such operations.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经从计算机科学理论的角度定义了比特和经典逻辑门。接下来，我们将概述实现这些操作的最有效硬件技术。
- en: 6.2.1 Implementation of the NAND gate
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 6.2.1 NAND 门的实现
- en: The NAND gate (together with the fan-out operator) is a universal gate in classical
    digital computing. Therefore, it should be sufficient to find a practical physical
    implementation of the NAND Boolean function in order to build a universal computer.
    Figure [6.7](#6.7) displays several possible realisations of the NAND gate using
    different technologies, from electrical switches to semiconductors.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: NAND门（与扇出操作符一起）是经典数字计算中的通用门。因此，只需找到NAND布尔函数的一个实用物理实现，就足以构建一个通用计算机。图[6.7](#6.7)展示了使用不同技术（从电气开关到半导体）实现NAND门的几种可能方式。
- en: '**Relay Logic:** Switches are interpreted as bits with 0 = open and 1 = closed.
    When switches A and B are both closed, an electromagnet opens switch C. If either
    or both of switches A and B are open, the circuit is broken and an electromagnet
    cannot open switch C.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**继电器逻辑：** 开关被解释为位，0 = 开，1 = 闭。当A和B开关都闭合时，电磁铁会打开C开关。如果A和B中的任意一个或两个开关都为开，则电路断开，电磁铁无法打开C开关。'
- en: '**Resistor-Transistor (RT) Logic:** Voltages are interpreted as bits with 0 = zero
    volts and 1 = 3 volts. When wires A and B are both at +3 volts, the two transistors
    conduct electricity and wire C drops to zero volts. If either or both of inputs A
    and B are zero volts, the corresponding transistors do not conduct and output C
    stays at +3 volts.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**电阻-晶体管（RT）逻辑：** 电压被解释为位，0 = 0伏，1 = 3伏。当A和B两根导线都为+3伏时，两个晶体管导通，C线降至零伏。如果A和B的输入之一或两者都为零伏，则相应的晶体管不导通，输出C保持在+3伏。'
- en: '**Complementary Metal-Oxide-Semiconductor (CMOS) Logic:** Similar to RT logic,
    voltages are interpreted as bits with 0 = zero volts and 1 = 3 volts. The PMOS
    transistor is open when the input is 1 (+3 volts) and closed when the input is 0
    (zero volts). NMOS is the logical opposite of PMOS. The PMOS circuit is placed
    between the voltage and the output. The NMOS circuit is placed between the output
    and the ground.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**互补金属氧化物半导体（CMOS）逻辑：** 与RT逻辑类似，电压被解释为位，0 = 0伏，1 = 3伏。当输入为1（+3伏）时，PMOS晶体管导通；当输入为0（零伏）时，PMOS晶体管关闭。NMOS与PMOS的逻辑相反。PMOS电路位于电压源与输出之间，NMOS电路位于输出与地之间。'
- en: If both of the A and B inputs are high, both the NMOS transistors will conduct,
    neither of the PMOS transistors will conduct, and a conductive path will be established
    between the output, C, and the ground thus bringing the output low. If both of
    the A and B inputs are low, then neither of the NMOS transistors will conduct,
    while both of the PMOS transistors will conduct, establishing a conductive path
    between the output and the voltage source, bringing the output high. If either
    of the A or B inputs is low, one of the NMOS transistors will not conduct, one
    of the PMOS transistors will, and a conductive path will be established between
    the output and the voltage source, bringing the output high. Therefore, the circuit
    implements the NAND gate as the only configuration of the two inputs that results
    in a low output is when both are high.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果A和B输入都为高电平，则两个NMOS晶体管都会导通，两个PMOS晶体管都不会导通，输出端C与地之间将形成导电通路，从而使输出变为低电平。如果A和B输入都为低电平，则两个NMOS晶体管都不会导通，而两个PMOS晶体管都会导通，输出端与电压源之间将形成导电通路，使输出变为高电平。如果A或B输入之一为低电平，则一个NMOS晶体管不会导通，一个PMOS晶体管会导通，输出端与电压源之间将形成导电通路，使输出变为高电平。因此，该电路实现了NAND门，因为只有在两个输入都为高电平时，输出才会为低电平。
- en: '![Figurex1-125004r7: Physical realisations of the NAND gate. ](img/file461.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![Figurex1-125004r7: NAND门的物理实现](img/file461.jpg)'
- en: 'Figure 6.7: Physical realisations of the NAND gate.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.7：NAND门的物理实现。
- en: 6.2.2 Implementation of the RAM memory cell
  id: totrans-47
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 6.2.2 RAM存储单元的实现
- en: Random Access Memory (RAM) is used to store instructions and data currently
    used by the CPU. It is called *volatile memory* in the sense that it is wiped
    out when the computer is switched off. RAM may consist of many billions of elementary
    *memory cells*, with each memory cell being able to store one bit of information.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 随机存取存储器（RAM）用于存储CPU当前使用的指令和数据。它被称为*易失性存储器*，因为当计算机关闭时，它的内容会被清除。RAM可能由数十亿个基本的*存储单元*组成，每个存储单元能够存储一个位的信息。
- en: Now that we know how to build a universal logic gate, we can try to design a
    circuit that would implement the elementary memory unit we need to build RAM.
    For example, Figure [6.8](#6.8) shows how the memory cell can be built from four
    NAND logic gates.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何构建一个通用逻辑门，我们可以尝试设计一个电路，来实现我们需要构建RAM的基本存储单元。例如，图[6.8](#6.8)展示了如何利用四个NAND逻辑门构建存储单元。
- en: '![Figurex1-126004r8: Construction of the elementary memory cell from NAND gates.
    ](img/file462.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图x1-126004r8：通过NAND门构建基本存储单元。](img/file462.jpg)'
- en: 'Figure 6.8: Construction of the elementary memory cell from NAND gates.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.8：通过NAND门构建基本存储单元。
- en: '| D | E | Q | Q |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| D | E | Q | Q |'
- en: '| 0 | 1 | 0 | 1 |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 1 | 0 | 1 |'
- en: '| 1 | 1 | 1 | 0 |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 1 | 1 | 0 |'
- en: '| 0 | 0 | Q | Q |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 0 | Q | Q |'
- en: '| 1 | 0 | Q | Q |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 0 | Q | Q |'
- en: 'Table 6.2: Memory cell truth table.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 表6.2：存储单元真值表。
- en: 'The circuit in Figure [6.8](#6.8) has two input pins, D (Data) and E (Enabler),
    and two output pins, Q and Q (NOT Q). The truth table (Table [6.2](#x1-126006r2))
    of the memory cell circuit explains how it works:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图[6.8](#6.8)中的电路有两个输入端口，D（数据）和E（使能），以及两个输出端口，Q和Q（非Q）。存储单元电路的真值表（表[6.2](#x1-126006r2)）解释了它的工作原理：
- en: When the enabler input E is set to 1, the output Q can be set to the data input
    D.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当使能输入E设为1时，输出Q可以设置为数据输入D。
- en: When the enabler input E is set to 0, the output Q cannot be changed – it retains
    its value.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当使能输入E设为0时，输出Q无法改变——它会保持原值。
- en: These are the key features that allow the circuit to serve as a memory cell.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是使电路能够作为存储单元的关键特性。
- en: Computation is substrate independent. Any physical system that can exist in
    two discrete, stable states with controlled transitions between them can be used
    to implement gate model digital computing. At the same time, some of the implementations
    are more efficient (faster, cheaper, more reliable) than others.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 计算是平台无关的。任何可以存在于两个离散、稳定状态之间，并且能够在它们之间进行受控转变的物理系统，都可以用来实现门模型的数字计算。同时，有些实现方式比其他方式更高效（更快、更便宜、更可靠）。
- en: These classical logic gates provide a natural framework to understand their
    quantum formulations, which we’ll investigate now.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这些经典逻辑门提供了一个自然的框架，用于理解它们的量子化形式，接下来我们将对其进行探讨。
- en: 6.3 Quantum Binary Digit (Qubit) and Quantum Logic Gates
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 6.3 量子二进制数字（量子比特）和量子逻辑门
- en: Quantum bits and quantum logic gates are the quantum computing counterparts
    of classical bits and logic gates. While they share common features, the quantum
    aspects yield a multitude of specific properties, which are the subject of this
    section.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 量子比特和量子逻辑门是量子计算中对应于经典比特和逻辑门的概念。虽然它们共享一些共同特征，但量子特性带来了许多具体的性质，这正是本节讨论的内容。
- en: 6.3.1 Computation according to the laws of quantum mechanics
  id: totrans-66
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 6.3.1 根据量子力学定律进行计算
- en: Classical logic gates operating on bits implement Boolean functions, forming
    the basis of digital classical computing. As we have seen, there are many possible
    physical implementations of a classical bit – a system that has two distinct,
    stable states with controlled transitions between them. What can we say about
    such a system from the quantum mechanical point of view?
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 经典逻辑门作用于比特，执行布尔函数，构成了数字经典计算的基础。正如我们所见，经典比特的物理实现有很多种方式——一个具有两个不同、稳定状态并且能够在它们之间进行受控转变的系统。从量子力学的角度看，我们能如何描述这样的系统呢？
- en: As we know from Chapter [1](Chapter_1.xhtml#x1-220001), any such system may
    exist in a superposition of states, and the state of a qubit ![|ψ⟩](img/file463.jpg)
    is described by the expression
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们从第[1](Chapter_1.xhtml#x1-220001)章所知，任何这样的系统可能存在于状态的叠加态中，且量子比特的状态 ![|ψ⟩](img/file463.jpg)
    可以通过以下表达式来描述：
- en: '![|ψ⟩ = α |0 ⟩+ β |1⟩ , ](img/file464.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![|ψ⟩ = α |0⟩ + β |1⟩，](img/file464.jpg)'
- en: where *α* and *β* are complex numbers satisfying
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 其中*α*和*β*是满足条件的复数
- en: '| ![&#124;α&#124;2 + &#124;β&#124;2 = 1\. ](img/file465.jpg) |  |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| ![|α|² + |β|² = 1.](img/file465.jpg) |  |'
- en: The coefficients *α* and *β* are *probability amplitudes*. Any attempt to *measure*
    the state ![|ψ ⟩](img/file466.jpg) results in getting ![|0⟩](img/file467.jpg)
    with probability |*α*|², and ![|1⟩](img/file468.jpg) with probability |*β*|².
    The measurement consists in coupling the quantum system to the environment, which
    collapses the superposition. After the measurement, the system is in the measured
    state and further measurements on the same basis will always yield the same result.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 系数 *α* 和 *β* 是 *概率振幅*。任何对状态 ![|ψ ⟩](img/file466.jpg) 的 *测量* 都会以概率 |*α*|² 得到
    ![|0⟩](img/file467.jpg)，以概率 |*β*|² 得到 ![|1⟩](img/file468.jpg)。测量过程将量子系统与环境耦合，导致叠加态坍缩。测量后，系统处于已测量状态，之后对相同基的进一步测量将始终得到相同的结果。
- en: Since the qubit state ![|ψ⟩](img/file469.jpg) is described by two complex probability
    amplitudes satisfying ([6.3.1](#x1-1280001)), we can say that the state of a qubit
    is a unit vector in the two-dimensional complex vector space. In other words,
    the state ![|ψ ⟩](img/file470.jpg) can be written as the vector
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 由于量子比特状态 ![|ψ⟩](img/file469.jpg) 由两个满足 ([6.3.1](#x1-1280001)) 的复概率振幅描述，我们可以说量子比特的状态是二维复向量空间中的单位向量。换句话说，状态
    ![|ψ ⟩](img/file470.jpg) 可以写作向量
- en: '| ![⌊ ⌋ ⌊ ⌋ ⌊ ⌋ ⌈ α⌉ = α ⌈1⌉ + β ⌈0⌉ . β 0 1 ](img/file471.jpg) |  |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| ![⌊ ⌋ ⌊ ⌋ ⌊ ⌋ ⌈ α⌉ = α ⌈1⌉ + β ⌈0⌉ . β 0 1 ](img/file471.jpg) |  |'
- en: This means that the basis states ![|0 ⟩](img/file472.jpg) and ![|1⟩](img/file473.jpg)
    are represented by the standard orthonormal basis vectors
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着基态 ![|0 ⟩](img/file472.jpg) 和 ![|1⟩](img/file473.jpg) 被表示为标准正交基向量
- en: '| ![ ⌊ ⌋ ⌊ ⌋ &#124;0⟩ := ⌈1 ⌉, &#124;1⟩ := ⌈0 ⌉ . 0 1 ](img/file474.jpg) |  |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| ![ ⌊ ⌋ ⌊ ⌋ &#124;0⟩ := ⌈1 ⌉, &#124;1⟩ := ⌈0 ⌉ . 0 1 ](img/file474.jpg) |  |'
- en: 'The standard orthonormal basis ![|0⟩](img/file475.jpg) and ![|1⟩](img/file476.jpg)
    is not the only possible choice of the basis vectors. Any pair of *linearly independent*
    unit vectors ![|u⟩](img/file477.jpg) and ![|v ⟩](img/file478.jpg) from the complex
    two-dimensional vector space can serve as a basis:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 标准正交基 ![|0⟩](img/file475.jpg) 和 ![|1⟩](img/file476.jpg) 并不是唯一可选的基向量。来自复二维向量空间的任何一对
    *线性无关* 单位向量 ![|u⟩](img/file477.jpg) 和 ![|v ⟩](img/file478.jpg) 都可以作为基：
- en: '| ![α &#124;0⟩+ β &#124;1⟩ = α ′ &#124;u ⟩+ β′ &#124;v⟩. ](img/file479.jpg)
    |  |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| ![α &#124;0⟩+ β &#124;1⟩ = α ′ &#124;u ⟩+ β′ &#124;v⟩. ](img/file479.jpg)
    |  |'
- en: For example, we can use the Hadamard basis {![|+ ⟩](img/file480.jpg)*,*![|−
    ⟩](img/file481.jpg)} defined by
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以使用由 {![|+ ⟩](img/file480.jpg)*,*![|− ⟩](img/file481.jpg)} 定义的 Hadamard
    基
- en: '| ![ ⌊ 1 ⌋ ⌊ 1 ⌋ 1 1 &#124; √--&#124; 1 1 &#124; √---&#124; &#124;+⟩ := √--&#124;0⟩+
    √--&#124;1⟩ = ⌈ 12⌉ and &#124;− ⟩ := √--&#124;0⟩− √---&#124;1⟩ = ⌈ 21 ⌉ . 2 2
    √--- 2 2 − √--- 2 2 ](img/file482.jpg) |  |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| ![ ⌊ 1 ⌋ ⌊ 1 ⌋ 1 1 &#124; √--&#124; 1 1 &#124; √---&#124; &#124;+⟩ := √--&#124;0⟩+
    √--&#124;1⟩ = ⌈ 12⌉ and &#124;− ⟩ := √--&#124;0⟩− √---&#124;1⟩ = ⌈ 21 ⌉ . 2 2
    √--- 2 2 − √--- 2 2 ](img/file482.jpg) |  |'
- en: The basis is determined by the measurement process or the physical realisation
    of the quantum computer  [[80](Biblography.xhtml#XDawar)].
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 基是由测量过程或量子计算机的物理实现决定的 [[80](Biblography.xhtml#XDawar)]。
- en: It is important to specify the choice of the basis. For example, the vector
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 明确选择基底非常重要。例如，向量
- en: '| ![⌊ -1-⌋ &#124; √2-&#124; ⌈ 1 ⌉ √2- ](img/file483.jpg) |  |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| ![⌊ -1-⌋ &#124; √2-&#124; ⌈ 1 ⌉ √2- ](img/file483.jpg) |  |'
- en: measured in the standard orthonormal basis (the *computational basis*) gives
    outcomes ![|0⟩](img/file484.jpg) and ![|1⟩](img/file485.jpg) with equal probability
    1*∕*2\. Measured in the Hadamard basis, it gives the outcome ![|+ ⟩](img/file486.jpg)
    with probability 1\.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在标准正交基（*计算基*）下测量时，结果 ![|0⟩](img/file484.jpg) 和 ![|1⟩](img/file485.jpg) 以相同的概率
    1*∕*2 得出。在 Hadamard 基下测量时，结果是 ![|+ ⟩](img/file486.jpg)，其概率为 1\。
- en: The state of a two-qubit system can be represented by a unit vector in the four-dimensional
    complex vector space. In this case, the standard orthonormal basis consists of
    four orthonormal unit vectors
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 两量子比特系统的状态可以由四维复向量空间中的单位向量表示。在这种情况下，标准正交基由四个正交单位向量组成
- en: '| ![ ⌊ ⌋ ⌊ ⌋ ⌊ ⌋ ⌊ ⌋ &#124;1&#124; &#124; 0&#124; &#124; 0&#124; &#124;0&#124;
    &#124;&#124;0&#124;&#124; &#124;&#124; 1&#124;&#124; &#124;&#124; 0&#124;&#124;
    &#124;&#124;0&#124;&#124; &#124;00⟩ := &#124; &#124; , &#124;01⟩ := &#124; &#124;,
    &#124;10⟩ := &#124; &#124; , &#124;11⟩ := &#124; &#124; , &#124;⌈0&#124;⌉ &#124;⌈
    0&#124;⌉ &#124;⌈ 1&#124;⌉ &#124;⌈0&#124;⌉ 0 0 0 1 ](img/file487.jpg) |  |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| ![ ⌊ ⌋ ⌊ ⌋ ⌊ ⌋ ⌊ ⌋ &#124;1&#124; &#124; 0&#124; &#124; 0&#124; &#124;0&#124;
    &#124;&#124;0&#124;&#124; &#124;&#124; 1&#124;&#124; &#124;&#124; 0&#124;&#124;
    &#124;&#124;0&#124;&#124; &#124;00⟩ := &#124; &#124; , &#124;01⟩ := &#124; &#124;,
    &#124;10⟩ := &#124; &#124; , &#124;11⟩ := &#124; &#124; , &#124;⌈0&#124;⌉ &#124;⌈
    0&#124;⌉ &#124;⌈ 1&#124;⌉ &#124;⌈0&#124;⌉ 0 0 0 1 ](img/file487.jpg) |  |'
- en: 'and the system state is described by four probability amplitudes:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 系统状态由四个概率振幅来描述：
- en: '| ![&#124;ψ ⟩ = α &#124;00⟩+ β &#124;01⟩+ γ &#124;10⟩ + δ &#124;11⟩, ](img/file488.jpg)
    |  |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| ![&#124;ψ ⟩ = α &#124;00⟩+ β &#124;01⟩+ γ &#124;10⟩ + δ &#124;11⟩, ](img/file488.jpg)
    |  |'
- en: 'with *α,β,γ,δ* ∈ℂ such that |*α*|² + |*β*|² + |*γ*|² + |*δ*|² = 1\. The basis
    vectors ([6.3.1](#x1-1280001)) of the two-qubit states are constructed as *tensor
    products* of the individual qubit basis vectors:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 *α,β,γ,δ* ∈ℂ，且 |*α*|² + |*β*|² + |*γ*|² + |*δ*|² = 1。两个量子比特状态的基向量 ([6.3.1](#x1-1280001))
    是单个量子比特基向量的 *张量积*。
- en: '| ![ ⌊ ⌊ ⌋⌋ ⌊ ⌋ ⌊ ⌊ ⌋⌋ ⌊ ⌋ &#124; ⌈1 ⌉&#124; 1 &#124; ⌈0⌉&#124; 0 &#124;&#124;
    1⋅ 0 &#124;&#124; &#124;&#124; 0&#124;&#124; &#124;&#124;1 ⋅ 1 &#124;&#124; &#124;&#124;1&#124;&#124;
    &#124;00⟩ = &#124;0⟩⊗ &#124;0⟩ = &#124;&#124; ⌊ ⌋&#124;&#124; = &#124;&#124; &#124;&#124;,
    &#124;01⟩ = &#124;0⟩⊗&#124;1⟩ = &#124;&#124; ⌊ ⌋&#124;&#124; = &#124;&#124; &#124;&#124;
    , &#124; 1 &#124; &#124;⌈ 0&#124;⌉ &#124; 0 &#124; &#124;⌈0&#124;⌉ ⌈ 0⋅⌈ ⌉⌉ ⌈0
    ⋅⌈ ⌉⌉ 0 0 1 0 ](img/file489.jpg) |  |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| ![ ⌊ ⌊ ⌋⌋ ⌊ ⌋ ⌊ ⌊ ⌋⌋ ⌊ ⌋ &#124; ⌈1 ⌉&#124; 1 &#124; ⌈0⌉&#124; 0 &#124;&#124;
    1⋅ 0 &#124;&#124; &#124;&#124; 0&#124;&#124; &#124;&#124;1 ⋅ 1 &#124;&#124; &#124;&#124;1&#124;&#124;
    &#124;00⟩ = &#124;0⟩⊗ &#124;0⟩ = &#124;&#124; ⌊ ⌋&#124;&#124; = &#124;&#124; &#124;&#124;,
    &#124;01⟩ = &#124;0⟩⊗&#124;1⟩ = &#124;&#124; ⌊ ⌋&#124;&#124; = &#124;&#124; &#124;&#124;
    , &#124; 1 &#124; &#124;⌈ 0&#124;⌉ &#124; 0 &#124; &#124;⌈0&#124;⌉ ⌈ 0⋅⌈ ⌉⌉ ⌈0
    ⋅⌈ ⌉⌉ 0 0 1 0 ](img/file489.jpg) |  |'
- en: '| ![ ⌊ ⌊ ⌋⌋ ⌊ ⌋ ⌊ ⌊ ⌋⌋ ⌊ ⌋ &#124; 0⋅⌈1 ⌉&#124; &#124; 0&#124; &#124;0 ⋅⌈0⌉&#124;
    &#124;0&#124; &#124;&#124; 0 &#124;&#124; &#124; 0&#124; &#124;&#124; 1 &#124;&#124;
    &#124;0&#124; &#124;10⟩ = &#124;1⟩⊗ &#124;0⟩ = &#124;&#124; ⌊ ⌋&#124;&#124; =
    &#124;&#124; &#124;&#124;, &#124;11⟩ = &#124;1⟩⊗&#124;1⟩ = &#124;&#124; ⌊ ⌋&#124;&#124;
    = &#124;&#124; &#124;&#124; . &#124;⌈ ⌈1 ⌉&#124;⌉ &#124;⌈ 1&#124;⌉ &#124;⌈ ⌈0⌉&#124;⌉
    &#124;⌈0&#124;⌉ 1⋅ 0 1 ⋅ 1 0 1 ](img/file490.jpg) |  |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| ![ ⌊ ⌊ ⌋⌋ ⌊ ⌋ ⌊ ⌊ ⌋⌋ ⌊ ⌋ &#124; 0⋅⌈1 ⌉&#124; &#124; 0&#124; &#124;0 ⋅⌈0⌉&#124;
    &#124;0&#124; &#124;&#124; 0 &#124;&#124; &#124; 0&#124;&#124; 1 &#124;&#124;
    &#124;0&#124; &#124;10⟩ = &#124;1⟩⊗ &#124;0⟩ = &#124;&#124; ⌊ ⌋&#124;&#124; =
    &#124;&#124; &#124;&#124;, &#124;11⟩ = &#124;1⟩⊗&#124;1⟩ = &#124;&#124; ⌊ ⌋&#124;&#124;
    = &#124;&#124; &#124;&#124; . &#124;⌈ ⌈1 ⌉&#124;⌉ &#124;⌈ 1&#124;⌉ &#124;⌈ ⌈0⌉&#124;⌉
    &#124;⌈0&#124;⌉ 1⋅ 0 1 ⋅ 1 0 1 ](img/file490.jpg) |  |'
- en: Generally, the *n*-qubit system can exist in any superposition of the 2^n basis
    states and requires 2^n probability amplitudes to be fully specified.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，*n* 量子比特系统可以存在于 2^n 个基态的任意叠加中，并且需要 2^n 个概率振幅来完全指定。
- en: Computation is a transformation of the memory state. The qubit states are transformed
    by an application of quantum logic gates. Quantum logic gates are unitary linear
    operators that are represented by unitary matrices. The action of a quantum logic
    gate on a specific quantum state is found by multiplying the unitary matrix representing
    the gate by the vector representing the state. The result is the new quantum state.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 计算是记忆状态的转换。量子比特状态通过应用量子逻辑门进行转换。量子逻辑门是单位线性算符，由单位矩阵表示。量子逻辑门作用于特定量子状态的方式是将表示该门的单位矩阵与表示该状态的向量相乘。结果是新的量子状态。
- en: 6.3.2 Qubit
  id: totrans-94
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 6.3.2 量子比特
- en: It is convenient to visualise the state of a qubit as a point on the unit sphere,
    named the Bloch sphere after physicist Felix Bloch. Every point on the Bloch sphere
    is uniquely specified by two angles, *𝜃* ∈ [0*,π*] and *ϕ* ∈ [0*,*2*π*], as shown
    in Figure [6.3.2](#x1-1290002).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 将量子比特的状态可视化为单位球上的一个点是很方便的，这个球体被命名为Bloch球，得名于物理学家费利克斯·布洛赫。Bloch 球上的每一个点都可以通过两个角度
    *𝜃* ∈ [0*,π*] 和 *ϕ* ∈ [0*,*2*π*] 来唯一指定，如图 [6.3.2](#x1-1290002) 所示。
- en: '![Figure 6.9: Quantum state |ψ ⟩ on the Bloch sphere. ](img/file492.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图6.9：Bloch 球上的量子态 |ψ ⟩](img/file492.jpg)'
- en: 'Figure 6.9: Quantum state ![|ψ ⟩](img/file491.jpg) on the Bloch sphere.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.9：Bloch 球上的量子态 ![|ψ ⟩](img/file491.jpg)。
- en: With the mapping
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 通过映射
- en: '| ![ ( ) ( ) 𝜃- iϕ 𝜃- α = cos 2 , β = e sin 2 , ](img/file493.jpg) |  |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| ![ ( ) ( ) 𝜃- iϕ 𝜃- α = cos 2 , β = e sin 2 , ](img/file493.jpg) |  |'
- en: 'we obtain the canonical representation of the qubit state:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到量子比特状态的标准表示：
- en: '| ![ ⌊ ( 𝜃) ⌋ &#124; cos -- &#124; &#124;ψ⟩ = α &#124;0⟩+ β &#124;1⟩ = &#124;⌈
    (2 ) &#124;⌉. eiϕsin 𝜃- 2 ](img/file494.jpg) |  |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| ![ ⌊ ( 𝜃) ⌋ &#124; cos -- &#124; &#124;ψ⟩ = α &#124;0⟩+ β &#124;1⟩ = &#124;⌈
    (2 ) &#124;⌉. eiϕsin 𝜃- 2 ](img/file494.jpg) |  |'
- en: A transformation of the qubit state can be visualised as a transition from one
    point on the Bloch sphere to another. Therefore, the unitary matrix (quantum logic
    gate) that performs this transformation can be seen as a rotation operator and
    we can speak about *rotation* as a synonym of gate operation and *rotation* *angles*
    as gate parameters.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 量子比特状态的转换可以通过从Bloch球上的一个点转移到另一个点来可视化。因此，执行此转换的单位矩阵（量子逻辑门）可以看作是一个旋转算符，我们可以将 *旋转*
    视为门操作的同义词，将 *旋转角度* 视为门的参数。
- en: 6.3.3 One-qubit quantum logic gates
  id: totrans-103
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 6.3.3 单量子比特量子逻辑门
- en: 'Unlike classical computing where we can only define two logic gates operating
    on a single bit (the identity gate and the NOT gate), quantum computing has infinitely
    many single qubit logic gates: any unitary 2 × 2 matrix (rotation) is a quantum
    logic gate. Some of these gates are more important (or easier to implement) than
    others. Below we provide detailed descriptions of some of them, starting with
    the identity I and the Pauli matrices X, Y, and Z. The action of the I gate is
    obvious – it leaves the state of the qubit unchanged; Pauli matrices perform rotation
    of the qubit state by *π* radians around, respectively, the *x*, *y*, and *z*
    axis:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 与经典计算不同，经典计算中我们只能定义在单个位上操作的两个逻辑门（恒等门和非门），而量子计算中有无限多种单量子比特逻辑门：任何单位2 × 2矩阵（旋转）都是一个量子逻辑门。某些逻辑门比其他门更为重要（或更容易实现）。下面我们将详细描述其中一些，首先是恒等门I和保利矩阵X、Y和Z。I门的作用显而易见——它保持量子比特的状态不变；保利矩阵分别绕*x*、*y*、*z*轴进行*π*弧度的旋转：
- en: '| ![ ⌊ ⌋ ⌊ ⌋ ⌊ ⌋ ⌊ ⌋ 1 0 0 1 0 − i 1 0 I = ⌈ ⌉ , X = ⌈ ⌉ , Y = ⌈ ⌉ , Z = ⌈
    ⌉ . 0 1 1 0 i 0 0 − 1 ](img/file495.jpg) |  |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| ![ ⌊ ⌋ ⌊ ⌋ ⌊ ⌋ ⌊ ⌋ 1 0 0 1 0 − i 1 0 I = ⌈ ⌉ , X = ⌈ ⌉ , Y = ⌈ ⌉ , Z = ⌈
    ⌉ 。 0 1 1 0 i 0 0 − 1 ](img/file495.jpg) |  |'
- en: 'We can easily verify by performing simple algebraic operations that the X gate
    flips the bit and that the Z gate flips the phase:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过简单的代数运算轻松验证X门翻转位的功能，以及Z门翻转相位的功能：
- en: '| ![ ⌊ ⌋ ⌊ ⌋ ⌊ ⌋ ⌊ ⌋ ⌊ ⌋ ⌊ ⌋ X gate: ⌈0 1⌉ ⌈1⌉ = ⌈0 ⌉ , ⌈0 1⌉ ⌈0⌉ = ⌈1⌉ . 1
    0 0 1 1 0 1 0 ⌊ ⌋ ⌊ ⌋ ⌊ ⌋ ⌊ ⌋ ⌊ ⌋ ⌊ ⌋ 1 0 1 1 1 0 0 0 Z gate: ⌈ ⌉ ⌈ ⌉ = ⌈ ⌉ ,
    ⌈ ⌉ ⌈ ⌉ = − ⌈ ⌉ . 0 − 1 0 0 0 − 1 1 1 ](img/file496.jpg) |  |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| ![ ⌊ ⌋ ⌊ ⌋ ⌊ ⌋ ⌊ ⌋ ⌊ ⌋ ⌊ ⌋ X门：⌈0 1⌉ ⌈1⌉ = ⌈0 ⌉ , ⌈0 1⌉ ⌈0⌉ = ⌈1⌉ 。 1 0 0
    1 1 0 1 0 ⌊ ⌋ ⌊ ⌋ ⌊ ⌋ ⌊ ⌋ ⌊ ⌋ ⌊ ⌋ 1 0 1 1 1 0 0 0 Z门：⌈ ⌉ ⌈ ⌉ = ⌈ ⌉ , ⌈ ⌉ ⌈ ⌉ =
    − ⌈ ⌉ 。 0 − 1 0 0 0 − 1 1 1 ](img/file496.jpg) |  |'
- en: 'These operations can be visualised with the help of the following graphical
    representation of the quantum gates:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这些操作可以通过以下量子门的图形表示来进行可视化：
- en: '![Figure 6.10: Graphical representation of the X and Z gates. ](img/file497.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图6.10：X和Z门的图形表示。](img/file497.jpg)'
- en: 'Figure 6.10: Graphical representation of the X and Z gates.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.10：X和Z门的图形表示。
- en: 'Here, horizontal lines represent *quantum registers* and boxes represent quantum
    gates. Together, quantum registers and quantum gates form the graphical representation
    of *quantum circuits* – the sequence of quantum gates that transform the quantum
    state, thus implementing quantum computation. The quantum circuits are read from
    left to right: the initial quantum state is shown at the left end of the quantum
    circuit and the final state is shown at the right end. Often, the last operator
    on the quantum register is the *measurement* *operator*. Following measurement
    (in the computational basis), a qubit is transformed into a classical bit and
    its value is a known binary number.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，水平线表示*量子寄存器*，而框表示量子门。量子寄存器和量子门一起构成了*量子电路*的图形表示——量子电路是一系列量子门，通过它们转换量子状态，从而实现量子计算。量子电路的读取顺序是从左到右：量子电路的左端展示了初始量子状态，右端展示了最终状态。通常，量子寄存器上的最后一个操作符是*测量*操作符。测量后（在计算基中），量子比特被转化为经典比特，其值是一个已知的二进制数。
- en: Since the X gate flips the state of the qubit, it is also called the NOT gate.
    Similarly, the Z gate that flips the phase of the qubit state is known as the PHASE
    gate.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 由于X门会翻转量子比特的状态，它也被称为非门。同样，翻转量子比特状态相位的Z门被称为*相位门*。
- en: 'We can draw a direct analogy between the NOT gate in classical computing and
    the NOT gate in quantum computing but there are quantum gates that perform operations
    that do not exist in classical computing. One such example is the ![√NOT--](img/file498.jpg)
    gate (represented by the matrix M introduced in Section [1.2.1](Chapter_1.xhtml#x1-360001)).
    In classical computing, we do not have a function that, when applied twice, would
    flip the bit. But such a function exists in quantum computing:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将经典计算中的非门与量子计算中的非门进行直接类比，但也有些量子门执行的是经典计算中不存在的操作。一个例子是![√NOT--](img/file498.jpg)门（由第[1.2.1节](Chapter_1.xhtml#x1-360001)中引入的矩阵M表示）。在经典计算中，我们没有一个函数，应用两次后能反转位的状态。但在量子计算中，这样的函数是存在的：
- en: '| ![ ⌊ ⌋ √---- √ -- 1-⌈1 + i 1 − i⌉ NOT ≡ X = 2 1 − i 1 + i . ](img/file499.jpg)
    |  |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| ![ ⌊ ⌋ √---- √ -- 1-⌈1 + i 1 − i⌉ NOT ≡ X = 2 1 − i 1 + i . ](img/file499.jpg)
    |  |'
- en: 'We know that one of the main sources of power of quantum computing is the ability
    of a qubit to exist in a superposition of basis states. But how can we put a qubit
    that was initialised as ![|0 ⟩](img/file500.jpg) (or ![|1⟩](img/file501.jpg))
    in a superposition of states ![|0 ⟩](img/file502.jpg) and ![|1 ⟩](img/file503.jpg)?
    The answer is the Hadamard gate, H, which creates an equal superposition of states
    ![|0⟩](img/file504.jpg) and ![|1⟩](img/file505.jpg) when applied to either state
    ![|0⟩](img/file506.jpg) or state ![|1⟩](img/file507.jpg):'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道，量子计算的主要动力之一来自于量子比特（qubit）能够处于基态叠加态的能力。但是，我们如何将一个初始化为 ![|0 ⟩](img/file500.jpg)（或
    ![|1⟩](img/file501.jpg)）的量子比特放入状态 ![|0 ⟩](img/file502.jpg) 和 ![|1 ⟩](img/file503.jpg)
    的叠加态中呢？答案是哈达玛门（Hadamard gate），H，它在作用于状态 ![|0⟩](img/file506.jpg) 或状态 ![|1⟩](img/file507.jpg)
    时，会创建一个等概率的叠加态 ![|0⟩](img/file504.jpg) 和 ![|1⟩](img/file505.jpg)：
- en: '| ![ ⌊ ⌋ H = √1-⌈1 1 ⌉ , 2 1 − 1 ](img/file508.jpg) |  |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| ![ ⌊ ⌋ H = √1-⌈1 1 ⌉ , 2 1 − 1 ](img/file508.jpg) |  |'
- en: '| ![ ⌊ ⌋ ⌊ ⌋ ⌊ ⌋ ⌊ ⌋ ⌊ ⌋ ⌊ ⌋ 1 1-- 1 1-- 0 0 -1- 1 -1- 0 H ⌈ ⌉ = √2-⌈ ⌉ + √2-⌈
    ⌉ and H⌈ ⌉ = √2-⌈ ⌉− √2-⌈ ⌉. 0 0 1 1 0 1 ](img/file509.jpg) |  |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| ![ ⌊ ⌋ ⌊ ⌋ ⌊ ⌋ ⌊ ⌋ ⌊ ⌋ ⌊ ⌋ 1 1-- 1 1-- 0 0 -1- 1 -1- 0 H ⌈ ⌉ = √2-⌈ ⌉ + √2-⌈
    ⌉ 和 H⌈ ⌉ = √2-⌈ ⌉− √2-⌈ ⌉. 0 0 1 1 0 1 ](img/file509.jpg) |  |'
- en: '![Figure 6.11: Graphical representation of the Hadamard H gate. ](img/file510.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.11：哈达玛 H 门的图形表示。](img/file510.jpg)'
- en: 'Figure 6.11: Graphical representation of the Hadamard H gate.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.11：哈达玛 H 门的图形表示。
- en: 'Interestingly, the Hadamard H gate is its own inverse, so that the second application
    of the Hadamard gate reverses the action of the first (mathematically, H² = I,
    or H = H^(−1)):'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，哈达玛 H 门是它自己的逆门，因此第二次应用哈达玛门会逆转第一次的操作（从数学上讲，H² = I，或 H = H^(-1)）：
- en: '![Figure 6.12: Hadamard H gate applied twice. ](img/file511.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.12：哈达玛 H 门的两次应用。](img/file511.jpg)'
- en: 'Figure 6.12: Hadamard H gate applied twice.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.12：哈达玛 H 门的两次应用。
- en: 'Some other useful one-qubit gates are the *phase shift* gates where the phase
    is shifted by *π∕*2 and *π∕*4 rather than by *π* as is the case for the Z (PHASE)
    gate:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 其他一些有用的单量子比特门是 *相位移* 门，其中相位变化为 *π∕2* 和 *π∕4*，而不是 Z（相位）门中的 *π*：
- en: '| ![ ⌊ ⌋ ⌊ ⌋ S = ⌈1 0 ⌉ and T = ⌈1 0 ⌉ . 0 eiπ∕2 0 eiπ∕4 ](img/file512.jpg)
    |  |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| ![ ⌊ ⌋ ⌊ ⌋ S = ⌈1 0 ⌉ 和 T = ⌈1 0 ⌉ . 0 eiπ∕2 0 eiπ∕4 ](img/file512.jpg) |  |'
- en: Finally, it is necessary to mention the *adjustable* one-qubit gates that perform
    rotation of the qubit state around a specific axis by an arbitrary angle *𝜃*.
    For any given gate G, define
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，需要提到的是 *可调* 的单量子比特门，它们通过任意角度 *𝜃* 将量子比特状态绕特定轴旋转。对于任何给定的门 G，定义为：
- en: '![ ( ) RG(𝜃) := exp − 1-i𝜃G . 2 ](img/file513.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![ ( ) RG(𝜃) := exp − 1-i𝜃G . 2 ](img/file513.jpg)'
- en: Using Lemma [1](Chapter_1.xhtml#x1-30002r1) in Chapter [1](Chapter_1.xhtml#x1-220001),
    we can then immediately compute R[X], R[Y] and R[Z] as
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 使用第 [1](Chapter_1.xhtml#x1-30002r1) 章中的引理，我们可以立即计算出 R[X]、R[Y] 和 R[Z]：
- en: '| ![ ⌊ (𝜃) (𝜃)⌋ R (𝜃) = ⌈ cos 2 − isin 2 ⌉ , X − isin(𝜃) cos (𝜃) ⌊ 2 2⌋ cos(𝜃)
    − sin (𝜃) RY(𝜃) = ⌈ (2) ( 2) ⌉ , sin 𝜃2 cos 𝜃2 ⌊ ⌋ ⌈e −i𝜃∕2 0 ⌉ RZ(𝜃) = i𝜃∕2 .
    0 e ](img/file514.jpg) |  |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| ![ ⌊ (𝜃) (𝜃)⌋ R (𝜃) = ⌈ cos 2 − isin 2 ⌉ , X − isin(𝜃) cos (𝜃) ⌊ 2 2⌋ cos(𝜃)
    − sin (𝜃) RY(𝜃) = ⌈ (2) ( 2) ⌉ , sin 𝜃2 cos 𝜃2 ⌊ ⌋ ⌈e −i𝜃∕2 0 ⌉ RZ(𝜃) = i𝜃∕2 .
    0 e ](img/file514.jpg) |  |'
- en: The adjustable gates play a very important role in Parameterised Quantum Circuits
    (PQC), which we consider in the following chapters of this book.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 可调门在参数化量子电路（PQC）中起着非常重要的作用，我们将在本书接下来的章节中讨论这一点。
- en: 6.3.4 Two-qubit quantum logic gates
  id: totrans-130
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 6.3.4 两量子比特量子逻辑门
- en: Similar to one-qubit gates specified by unitary 2 × 2 matrices, we can construct
    any number of multi-qubit gates. The *n*-qubit gates would be represented by 2^n
    × 2^n unitary matrices. Since multi-qubit gates act on several qubits at the same
    time, they can be used to *entangle* them – i.e., make their states depend on
    each other. We also have a possibility to create conditional operators, where
    an operator is applied to a target qubit only if a control qubit is in state ![|1⟩](img/file515.jpg).
    Such gates are called *controlled* gates and we consider below some of them.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于由单位 2 × 2 矩阵指定的单量子比特门，我们可以构造任意数量的多量子比特门。*n* 量子比特门将由 2^n × 2^n 的单位矩阵表示。由于多量子比特门可以同时作用于多个量子比特，它们可以用来
    *纠缠* 量子比特——即让它们的状态相互依赖。我们还可以创建条件运算符，其中只有当控制量子比特处于状态 ![|1⟩](img/file515.jpg) 时，才会对目标量子比特应用操作。这种门被称为
    *受控* 门，以下我们将讨论一些受控门。
- en: 'Controlled gates are shown in the quantum circuit as a straight line connecting
    two quantum registers. One quantum register represents the control qubit, and
    is indicated by the dot placed at the end of the line connecting the quantum registers.
    Another quantum register represents the target qubit: the desired conditional
    operator is put on this register. Figure [6.13](#6.13) illustrates this by displaying
    a Controlled Y (CY) gate. Here, *q*[1] is the quantum register representing the
    control qubit, *q*[2] is the quantum register representing the target qubit, and
    the operator applied to the target qubit is Y.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 受控门在量子电路中通常通过一条直线连接两个量子寄存器来表示。一个量子寄存器表示控制量子比特，并通过连接量子寄存器的线的末端处的点来表示。另一个量子寄存器表示目标量子比特：所需的条件算符作用于这个寄存器。图
    [6.13](#6.13) 通过展示一个受控 Y (CY) 门来说明这一点。在这里，*q*[1] 是表示控制量子比特的量子寄存器，*q*[2] 是表示目标量子比特的量子寄存器，施加于目标量子比特的算符是
    Y。
- en: '| ![ ⌊ ⌋ &#124; 1 0 0 0 &#124; &#124; 0 1 0 0 &#124; CY = &#124;&#124; &#124;&#124;.
    &#124;⌈ 0 0 0 − i&#124;⌉ 0 0 i 0 ](img/file516.jpg) |  |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| ![ ⌊ ⌋ &#124; 1 0 0 0 &#124; &#124; 0 1 0 0 &#124; CY = &#124;&#124; &#124;&#124;.
    &#124;⌈ 0 0 0 − i&#124;⌉ 0 0 i 0 ](img/file516.jpg) |  |'
- en: '![Figurex1-131004r13: CY gate. ](img/file517.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![Figurex1-131004r13: CY 门。](img/file517.jpg)'
- en: 'Figure 6.13: CY gate.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.13：CY 门。
- en: 'The Controlled NOT gate, usually denoted as CNOT or CX, is another example
    of a two-qubit controlled gate. It consists of applying the Pauli X gate to the
    target qubit if the control qubit is in state ![|1⟩](img/file518.jpg) and is given
    by the following unitary matrix:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 受控非门，通常表示为 CNOT 或 CX，是另一个两量子比特受控门的例子。它的作用是当控制量子比特处于状态 ![|1⟩](img/file518.jpg)
    时，应用保利 X 门到目标量子比特，其单位矩阵为：
- en: '| ![ ⌊ ⌋ &#124; 1 0 0 0&#124; &#124;&#124; 0 1 0 0&#124;&#124; CNOT ≡ CX =
    &#124;&#124; &#124;&#124;. ⌈ 0 0 0 1⌉ 0 0 1 0 ](img/file519.jpg) |  |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| ![ ⌊ ⌋ &#124; 1 0 0 0&#124; &#124;&#124; 0 1 0 0&#124;&#124; CNOT ≡ CX =
    &#124;&#124; &#124;&#124;. ⌈ 0 0 0 1⌉ 0 0 1 0 ](img/file519.jpg) |  |'
- en: This gate is often represented in the quantum circuit by an XOR logical symbol
    (circled plus) placed on the target qubit quantum register since its truth table
    (for the target qubit) coincides with the truth table of the XOR logic gate.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 该门在量子电路中通常通过在目标量子比特寄存器上放置一个 XOR 逻辑符号（圈中的加号）来表示，因为它的真值表（针对目标量子比特）与 XOR 逻辑门的真值表一致。
- en: '![Figure 6.14: CX (CNOT) gate. ](img/file520.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.14：CX (CNOT) 门。](img/file520.jpg)'
- en: 'Figure 6.14: CX (CNOT) gate.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.14：CX (CNOT) 门。
- en: '| *q*[1] | *q*[2] | *q*′[1] | *q*′[2] |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| *q*[1] | *q*[2] | *q*′[1] | *q*′[2] |'
- en: '| 0 | 0 | 0 | 0 |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 0 | 0 | 0 |'
- en: '| 0 | 1 | 0 | 1 |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 1 | 0 | 1 |'
- en: '| 1 | 0 | 1 | 1 |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 0 | 1 | 1 |'
- en: '| 1 | 1 | 1 | 0 |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 1 | 1 | 0 |'
- en: 'Table 6.3: Truth table for CX (CNOT) gate.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 表 6.3：CX (CNOT) 门的真值表。
- en: Seen differently, note that we in fact have the equality
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 换个角度看，注意到实际上我们有以下等式
- en: '![CX |q1q2⟩ = |q1⟩ |q1 ⊕ q2⟩, ](img/file521.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![CX |q1q2⟩ = |q1⟩ |q1 ⊕ q2⟩,](img/file521.jpg)'
- en: for any *q*[1]*,q*[2] ∈{0*,*1}, where ⊕ denotes addition modulo 2.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任意 *q*[1]*,q*[2] ∈{0*,*1}，其中 ⊕ 表示模 2 加法。
- en: 'The CZ gate is a Pauli Z (phase flip) applied to the target qubit conditional
    on the control qubit being in state ![|1⟩](img/file522.jpg) and is given by the
    following unitary matrix:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: CZ 门是对目标量子比特应用的保利 Z (相位翻转) 操作，前提是控制量子比特处于状态 ![|1⟩](img/file522.jpg)，其单位矩阵为：
- en: '| ![ ⌊ ⌋ &#124;1 0 0 0 &#124; &#124;&#124;0 1 0 0 &#124;&#124; CPHASE ≡ CZ
    = &#124; &#124;. &#124;⌈0 0 1 0 &#124;⌉ 0 0 0 − 1 ](img/file523.jpg) |  |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| ![ ⌊ ⌋ &#124;1 0 0 0 &#124; &#124;&#124;0 1 0 0 &#124;&#124; CPHASE ≡ CZ
    = &#124;&#124;. &#124;⌈0 0 1 0 &#124;⌉ 0 0 0 − 1 ](img/file523.jpg) |  |'
- en: 'Interestingly, for CZ it does not really matter which qubit is the target qubit
    and which is the control qubit – the result is the same:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，对于 CZ 门，实际上目标量子比特和控制量子比特的顺序并不重要——结果是一样的：
- en: '![Figure 6.15: CZ (CPHASE) gates. ](img/file524.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.15：CZ (CPHASE) 门。](img/file524.jpg)'
- en: 'Figure 6.15: CZ (CPHASE) gates.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.15：CZ (CPHASE) 门。
- en: The SWAP gate swaps the states of two qubits. The ![√----- SWAP](img/file525.jpg)
    gate is universal in the sense that any multi-qubit gate can be constructed from
    only ![√ ----- SWAP](img/file526.jpg) and single qubit gates.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: SWAP 门交换两个量子比特的状态。![√----- SWAP](img/file525.jpg) 门是一个通用门，因为任何多量子比特门都可以仅由 ![√
    ----- SWAP](img/file526.jpg) 门和单量子比特门构造而成。
- en: '| ![ ⌊ ⌋ ⌊ ⌋ &#124;1 0 0 0&#124; &#124; 1 0 0 0&#124; &#124;&#124;0 0 1 0&#124;&#124;
    √----- &#124;&#124; 0 1+2i 1−2i 0&#124;&#124; SWAP = &#124;&#124; &#124;&#124;
    , SWAP = &#124;&#124; 1−i 1+i &#124;&#124;. ⌈0 1 0 0⌉ ⌈ 0 2 2 0⌉ 0 0 0 1 0 0 0
    1 ](img/file527.jpg) |  |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| ![ ⌊ ⌋ ⌊ ⌋ &#124;1 0 0 0&#124; &#124; 1 0 0 0&#124; &#124;&#124;0 0 1 0&#124;&#124;
    √----- &#124;&#124; 0 1+2i 1−2i 0&#124;&#124; SWAP = &#124;&#124; &#124;&#124;
    , SWAP = &#124;&#124; 1−i 1+i &#124;&#124;. ⌈0 1 0 0⌉ ⌈ 0 2 2 0⌉ 0 0 0 1 0 0 0
    1 ](img/file527.jpg) |  |'
- en: 'Very often, the choice of the set of universal gates from which all other gates
    can be constructed is dictated by the characteristics of the physical system used
    to perform quantum computation. The ![√----- SWAP](img/file528.jpg) is a *native
    gate* in the systems that exploit exchange interactions  [[221](Biblography.xhtml#XNemirovsky2021)].
    Related gates such as iSWAP and ![√ ------ iSWAP](img/file529.jpg) are natural
    gates in the systems with Ising-like interactions  [[244](Biblography.xhtml#XRasmussen2020)]:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 很多时候，从一组通用门中选择所有其他门可以构建的门集，是由用于执行量子计算的物理系统的特性决定的。![√----- SWAP](img/file528.jpg)是利用交换相互作用的系统中的*本地门*[[221](Biblography.xhtml#XNemirovsky2021)]。相关的门如iSWAP和![√
    ------ iSWAP](img/file529.jpg)是具有类似伊辛相互作用的系统中的自然门[[244](Biblography.xhtml#XRasmussen2020)]：
- en: '| ![ ⌊ ⌋ ⌊ ⌋ 1 0 0 0 1 0 0 0 &#124;&#124; &#124;&#124; &#124;&#124; 1 i &#124;&#124;
    &#124;0 0 i 0&#124; √ ------ &#124;0 √2- √2- 0&#124; iSWAP = &#124;&#124;0 i 0
    0&#124;&#124; , iSWAP = &#124;&#124;0 √i- √1- 0&#124;&#124; . ⌈ ⌉ ⌈ 2 2 ⌉ 0 0
    0 1 0 0 0 1 ](img/file530.jpg) |  |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| ![ ⌊ ⌋ ⌊ ⌋ 1 0 0 0 1 0 0 0 &#124;&#124; &#124;&#124; &#124;&#124; 1 i &#124;&#124;
    &#124;0 0 i 0&#124; √ ------ &#124;0 √2- √2- 0&#124; iSWAP = &#124;&#124;0 i 0
    0&#124; , iSWAP = &#124;&#124;0 √i- √1- 0&#124;&#124; . ⌈ ⌉ ⌈ 2 2 ⌉ 0 0 0 1 0
    0 0 1 ](img/file530.jpg) |  |'
- en: 'An example of an adjustable two-qubit gate is the XY gate, which is a rotation
    by some angle *𝜃* between the ![|01⟩](img/file531.jpg) and ![|10⟩](img/file532.jpg)
    states:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可调节的双量子比特门的例子是XY门，它是通过某个角度*𝜃*在![|01⟩](img/file531.jpg)和![|10⟩](img/file532.jpg)态之间的旋转：
- en: '| ![ ⌊ ⌋ &#124; 1 0( ) 0( ) 0&#124; &#124;&#124; 0 cos 𝜃2 isin 𝜃2 0&#124;&#124;
    XY(𝜃) = &#124;&#124; ( 𝜃) (𝜃) &#124;&#124; . ⌈ 0 isin 2 cos 2 0⌉ 0 0 0 1 ](img/file533.jpg)
    |  |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| ![ ⌊ ⌋ &#124; 1 0( ) 0( ) 0&#124; &#124;&#124; 0 cos 𝜃2 isin 𝜃2 0&#124;&#124;
    XY(𝜃) = &#124;&#124; ( 𝜃) (𝜃) &#124;&#124; . ⌈ 0 isin 2 cos 2 0⌉ 0 0 0 1 ](img/file533.jpg)
    |  |'
- en: Note that XY(*π*) = iSWAP and XY(*π∕*2) = ![√------ iSWAP](img/file534.jpg).
    Together with CZ, the iSWAP gate plays an important role in the construction of
    quantum circuits since any two-qubit gate can be expressed with at most three CZ
    or three iSWAP gates  [[2](Biblography.xhtml#XAbrams2019)].
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，XY(*π*) = iSWAP，XY(*π∕*2) = ![√------ iSWAP](img/file534.jpg)。与CZ门一起，iSWAP门在量子电路的构建中起着重要作用，因为任何双量子比特门都可以用最多三个CZ门或三个iSWAP门表示[[2](Biblography.xhtml#XAbrams2019)]。
- en: 6.3.5 The Toffoli gate
  id: totrans-162
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 6.3.5 Toffoli门
- en: 'The classical Toffoli gate, invented by Tommaso Toffoli  [[284](Biblography.xhtml#XToffoli1980)],
    is a three-bit logic gate, which is universal in classical computing. In quantum
    computing, it is a three-qubit Controlled Controlled NOT (CCNOT) gate that is
    represented by the following quantum circuit, where the qubit C is the target
    qubit and the qubits A and B are the control qubits:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 经典的Toffoli门由Tommaso Toffoli发明[[284](Biblography.xhtml#XToffoli1980)]，是一个三位逻辑门，在经典计算中是通用的。在量子计算中，它是一个三量子比特的受控受控非门（CCNOT），由以下量子电路表示，其中量子比特C是目标量子比特，量子比特A和B是控制量子比特：
- en: '![Figure 6.16: Toffoli (CCNOT) gate. ](img/file535.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.16: Toffoli (CCNOT) 门](img/file535.jpg)'
- en: 'Figure 6.16: Toffoli (CCNOT) gate.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '图 6.16: Toffoli (CCNOT) 门。'
- en: 'The classical Toffoli gate is given by the following truth table:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 经典的Toffoli门由以下真值表给出：
- en: '| A | B | C | A′ | B′ | C′ |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| A | B | C | A′ | B′ | C′ |'
- en: '| 0 | 0 | 0 | 0 | 0 | 0 |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 0 | 0 | 0 | 0 | 0 |'
- en: '| 1 | 0 | 0 | 1 | 0 | 0 |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 0 | 0 | 1 | 0 | 0 |'
- en: '| 0 | 1 | 0 | 0 | 1 | 0 |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 1 | 0 | 0 | 1 | 0 |'
- en: '| 1 | 1 | 0 | 1 | 1 | 1 |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 1 | 0 | 1 | 1 | 1 |'
- en: '| 0 | 0 | 1 | 0 | 0 | 1 |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 0 | 1 | 0 | 0 | 1 |'
- en: '| 1 | 0 | 1 | 1 | 0 | 1 |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 0 | 1 | 1 | 0 | 1 |'
- en: '| 0 | 1 | 1 | 0 | 1 | 1 |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 1 | 1 | 0 | 1 | 1 |'
- en: '| 1 | 1 | 1 | 1 | 1 | 0 |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 1 | 1 | 1 | 1 | 0 |'
- en: 'Table 6.4: Truth table for Toffoli gate.'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '表 6.4: Toffoli门的真值表。'
- en: 'The quantum Toffoli gate is represented by the unitary matrix:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 量子Toffoli门由单位矩阵表示：
- en: '| ![ ⌊ ⌋ &#124;1 0 0 0 0 0 0 0&#124; &#124;&#124;0 1 0 0 0 0 0 0&#124;&#124;
    &#124; &#124; &#124;&#124;0 0 1 0 0 0 0 0&#124;&#124; &#124;&#124;0 0 0 1 0 0
    0 0&#124;&#124; CCNOT = &#124;&#124; &#124;&#124;. &#124;&#124;0 0 0 0 1 0 0 0&#124;&#124;
    &#124;0 0 0 0 0 1 0 0&#124; &#124;&#124; &#124;&#124; &#124;⌈0 0 0 0 0 0 0 1&#124;⌉
    0 0 0 0 0 0 1 0 ](img/file536.jpg) |  |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| ![ ⌊ ⌋ &#124;1 0 0 0 0 0 0 0&#124; &#124;&#124;0 1 0 0 0 0 0 0&#124;&#124;
    &#124;&#124; &#124;&#124; &#124;&#124;0 0 1 0 0 0 0 0&#124;&#124; &#124;&#124;0
    0 0 1 0 0 0 0&#124;&#124; CCNOT = &#124;&#124; &#124;&#124;. &#124;&#124;0 0 0
    0 1 0 0 0&#124;&#124; &#124;0 0 0 0 0 1 0 0&#124; &#124;&#124; &#124;&#124; &#124;⌈0
    0 0 0 0 0 0 1&#124;⌉ 0 0 0 0 0 0 1 0 ](img/file536.jpg) |  |'
- en: 'It is clear from the Toffoli gate truth table that it also implements the AND
    and NAND gates. With C = 0 it can be viewed as the AND gate:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 从Toffoli门的真值表可以看出，它也实现了AND门和NAND门。当C = 0时，它可以视为AND门：
- en: '| ![if C = 0 : C ′ = A AND B. ](img/file537.jpg) |  |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| ![if C = 0 : C ′ = A AND B. ](img/file537.jpg) |  |'
- en: 'And with C = 1 it can be viewed as the NAND gate:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 当C = 1时，它可以视为NAND门：
- en: '| ![ ′ if C = 1 : C = A NAND B. ](img/file538.jpg) |  |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| ![′ 如果C = 1：C = A NAND B。](img/file538.jpg) |  |'
- en: 'The Toffoli gate can be decomposed into a quantum circuit consisting of CNOT
    and one-qubit gates:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: Toffoli门可以分解为由CNOT和单量子比特门组成的量子电路：
- en: '![Figure 6.17: Decomposition of the Toffoli (CCNOT) gate. The "dagger" superscript
    after the gate symbol such as T† indicates the adjoint operator (see Section 1.1.1).
    ](img/file539.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![图6.17：Toffoli（CCNOT）门的分解。门符号后面的“†”上标，如T†，表示伴随算子（参见第1.1.1节）。](img/file539.jpg)'
- en: 'Figure 6.17: Decomposition of the Toffoli (CCNOT) gate. The "dagger" superscript
    after the gate symbol such as T^† indicates the *adjoint* operator (see Section [1.1.1](Chapter_1.xhtml#x1-240001)).'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.17：Toffoli（CCNOT）门的分解。门符号后面的“†”上标，如T^†，表示*伴随*算子（参见第[1.1.1](Chapter_1.xhtml#x1-240001)节）。
- en: The fact that the Toffoli circuit allows us to implement the NAND gate, which
    is universal in classical computing, demonstrates the fact that quantum computing
    can perform all operations which are possible on classical computers. In other
    words, quantum computers can simulate classical computers. At the same time, we
    have seen examples of quantum operations that do not have their analogues in classical
    computing. In the most general case, classical simulation of an *n*-qubit quantum
    system would require the ability to store 2^n probability amplitudes – an impossible
    task for *n* larger than several hundred as there would not be enough matter in
    the visible universe to implement such classical memory. Consequently, quantum
    computation is more general than classical computation. Computation, as a concept,
    is really quantum computation. Classical computation is just a special case of
    quantum one  [[32](Biblography.xhtml#XBernhardt2019)].
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: Toffoli电路能够实现NAND门，而NAND门在经典计算中是通用的，这证明了量子计算可以执行所有经典计算机可以执行的操作。换句话说，量子计算机可以模拟经典计算机。同时，我们也见过一些量子操作，它们在经典计算中没有类似的对应操作。在最一般的情况下，模拟一个*n*量子比特的量子系统需要存储2^n的概率振幅——对于*n*大于几百的情况，这几乎是不可能的任务，因为在可见宇宙中没有足够的物质来实现这样的经典存储器。因此，量子计算比经典计算更加通用。作为一个概念，计算实际上就是量子计算，经典计算只是量子计算的一个特例
    [[32](Biblography.xhtml#XBernhardt2019)]。
- en: Quantum computing offers a wider range of logic gates than classical computing.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 量子计算提供了比经典计算更广泛的逻辑门。
- en: The Toffoli gate demonstrates that quantum computers can perform all operations
    implementable on classical computers. At the same time, an attempt to simulate
    quantum computing classically will immediately run into memory issues.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: Toffoli门证明了量子计算机可以执行所有经典计算机可以实现的操作。同时，尝试在经典计算机上模拟量子计算将立即面临内存问题。
- en: As discussed, quantum gates correspond to unitary matrices, which have the property
    of being invertible. Since quantum circuits are fundamentally classical and tensor
    products of such matrices, they can easily be inverted, yielding the concept of
    *reversible computing*, which we focus on in the next section.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，量子门对应于酉矩阵，酉矩阵具有可逆的特性。由于量子电路本质上是经典的，并且是这些矩阵的张量积，因此它们可以轻松地被逆转，从而引出了*可逆计算*的概念，我们将在下一节中重点讨论。
- en: 6.4 Reversible Computing
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 6.4 可逆计算
- en: The importance of the Toffoli gate goes beyond mere universality. It is a universal
    *reversible* logic gate, meaning that it can serve as a basis for reversible computing.
    Here, we should note that *all* quantum logic gates that are represented by unitary
    matrices are reversible. So, what does reversible computing mean?
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: Toffoli门的重要性不仅仅在于其通用性。它是一个通用的*可逆*逻辑门，这意味着它可以作为可逆计算的基础。在这里，我们应注意，*所有*由酉矩阵表示的量子逻辑门都是可逆的。那么，可逆计算是什么意思呢？
- en: Reversible computing is a model of computation where the computational process
    is time-reversible. It also means that no information is lost through the computation
    process and we can always reconstruct the initial state. The ability to physically
    realise reversible computing is hugely important due to the deep physical link
    between loss of information and generation of heat.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 可逆计算是一种计算模型，其中计算过程是时间可逆的。这也意味着在计算过程中没有信息丢失，我们始终可以重建初始状态。由于信息丢失与热量产生之间存在深刻的物理联系，因此物理实现可逆计算具有巨大的重要性。
- en: According to the principle formulated by Landauer  [[183](Biblography.xhtml#XLandauer1961)],
    in order for a computational process to be physically reversible, it must also
    be logically reversible. Fundamentally, this is due to the fact that the act of
    computation can only be performed by some physical system and is subject to the
    physical laws of thermodynamics.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 根据兰道尔提出的原理 [[183](Biblography.xhtml#XLandauer1961)]，为了使一个计算过程在物理上可逆，它也必须是逻辑上可逆的。从根本上讲，这是因为计算行为只能通过某个物理系统执行，并且受到热力学物理法则的制约。
- en: The loss of information leads to the increase in information entropy. Similarly,
    the increase in thermodynamic entropy leads to the generation of heat. In both
    cases, we are moving from the more ordered state to the less ordered state, which
    is an irreversible process.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 信息的丧失导致信息熵的增加。类似地，热力学熵的增加会导致热量的产生。在这两种情况下，我们都在从更有序的状态转向更无序的状态，这是一个不可逆的过程。
- en: This can be illustrated by the definitions of entropy (as a measure of disorder)
    in both statistical mechanics and information theory. Entropy in statistical mechanics
    is given by
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 这一点可以通过统计力学和信息理论中熵的定义来说明。统计力学中的熵定义为
- en: '| ![ ∑ S = − kB pilog (pi), i ](img/file540.jpg) |  |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| ![ ∑ S = − kB pilog (pi), i ](img/file540.jpg) |  |'
- en: where *k*[B] is the Boltzmann constant and *p*[i] is the probability of the
    microstate *i* taken from the equilibrium ensemble (macroscopic thermodynamic
    state), while entropy in information theory is given by
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 *k*[B] 是玻尔兹曼常数，*p*[i] 是来自平衡集（宏观热力学状态）的微观状态 *i* 的概率，而信息理论中的熵定义为
- en: '| ![ ∑ H = − pilog2(pi), i ](img/file541.jpg) |  |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| ![ ∑ H = − pilog2(pi), i ](img/file541.jpg) |  |'
- en: where *p*[i] is the probability of the message *i* taken from the message space.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 *p*[i] 是从消息空间中获取的消息 *i* 的概率。
- en: A very high probability of a particular microstate and a very high probability
    of a specific message indicate highly ordered systems with low entropy. The entropy
    is maximised (and information is minimised) when the microstates/messages are
    uniformly distributed.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 特定微观状态的高概率和特定消息的高概率表示具有低熵的高度有序系统。当微观状态/消息均匀分布时，熵最大化（信息最小化）。
- en: Any probability distribution can be approximated arbitrarily closely by some
    thermodynamic system  [[219](Biblography.xhtml#XMyrvold2021)]. If *h* is information
    (bits) per particle, then for *N* particles the entropy measured in the *natural
    unit of information* (1 bit = log(2) nat) is given by the expression
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 任何概率分布都可以通过某种热力学系统近似得非常精确 [[219](Biblography.xhtml#XMyrvold2021)]。如果 *h* 是每个粒子的位数信息，那么对于
    *N* 个粒子，在 *自然信息单位*（1 位 = log(2) 纳特）下测量的熵由以下公式给出
- en: '| ![S = − kB log (2)N h. ](img/file542.jpg) |  |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| ![S = − kB log (2)N h. ](img/file542.jpg) |  |'
- en: In energy units, *k*[B]*T* log(2) of heat is generated for each bit of information
    lost. Here, *T* is the temperature of the heat sink (in Kelvins). For example,
    if we take *T* = 300K (approx. 27C), then the minimum possible amount of energy
    required to erase one bit of information is 2.87 zJ (zeptojoule).
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在能量单位中，每丢失一位信息会产生 *k*[B]*T* log(2) 的热量。这里，*T* 是热源的温度（以开尔文为单位）。例如，如果我们取 *T* =
    300K（约27摄氏度），那么擦除一位信息所需的最小能量是 2.87 zJ（zeptojoule）。
- en: In practical terms, it means that every *logically irreversible* operation (e.g.,
    NAND or XOR gates) must be accompanied by the corresponding entropy increase and
    generation of heat. As the energy efficiency of the computation process becomes
    progressively more important, efforts to develop reversible computing are increasing
    since it may prove difficult for traditional technology based on the laws of classical
    physics to progress very far beyond current levels of energy efficiency if reversible
    computing principles are not used  [[106](Biblography.xhtml#XFrank2017)].
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 从实际角度来看，这意味着每个 *逻辑不可逆* 操作（例如 NAND 或 XOR 门）都必须伴随相应的熵增加和热量产生。随着计算过程的能效变得越来越重要，发展可逆计算的努力也在增加，因为如果不使用可逆计算原理，基于经典物理法则的传统技术可能很难在当前能效水平上取得更大进展
    [[106](Biblography.xhtml#XFrank2017)]。
- en: In contrast with classical computing, all quantum computing operations are reversible
    (except measurement). This means that the quantum advantage is likely to be demonstrated
    not only in quantum speedup and the expressive power of quantum circuits but also
    in achieving superior energy efficiency.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 与经典计算不同，所有量子计算操作都是可逆的（除了测量）。这意味着量子优势不仅可能体现在量子加速和量子电路的表达能力上，还可能体现在实现更高的能效上。
- en: We have so far seen forward and backward (reversible) quantum operations. However,
    what fundamentally distinguishes quantum computing from classical computing is
    the concept of entanglement.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了前向和反向（可逆）量子操作。然而，根本上区分量子计算和经典计算的是纠缠的概念。
- en: 6.5 Entanglement
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 6.5 纠缠
- en: The key aspect of quantum computing is entanglement, which allows for quantum
    states to encode more information than the sum of their individual components.
    We explain this in detail here and provide examples for two-qubit systems.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 量子计算的关键方面是纠缠，它使得量子态能够编码比其单独组成部分之和更多的信息。我们在这里详细解释这一点，并为二量子比特系统提供示例。
- en: 6.5.1 Quantum entanglement and why it matters
  id: totrans-209
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 6.5.1 量子纠缠及其重要性
- en: 'An *n*-qubit system can exist in any superposition of the 2^n basis states:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 一个*n*量子比特系统可以存在于2^n个基态的任意叠加中：
- en: '![ n 2∑ −1 ci |i⟩ = c0 |00...00⟩ + c1 |00...01⟩+ ...+ c2n−1 |11 ...11⟩, i=0
    ](img/file543.jpg)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![ n 2∑ −1 ci |i⟩ = c0 |00...00⟩ + c1 |00...01⟩+ ...+ c2n−1 |11 ...11⟩, i=0
    ](img/file543.jpg)'
- en: with
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: with
- en: '![ n 2∑ −1 2 |ci| = 1\. i=0 ](img/file544.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![ n 2∑ −1 2 |ci| = 1\. i=0 ](img/file544.jpg)'
- en: If such a state can be represented as a tensor product of individual qubit states
    then the qubit states are *not entangled*. For example, it is easy to check that
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这样的状态可以表示为单独量子比特态的张量积，则这些量子比特态*不是纠缠的*。例如，可以很容易地验证
- en: '|  | ![ 1 --√-- 4 2](img/file545.jpg)![(√ -- √-- √ -- √ -- ) 3 &#124;000⟩+
    &#124;001⟩ + 3 &#124;010⟩+ 3 &#124;011 ⟩+ 3 &#124;100⟩+ &#124;101⟩ + 3 &#124;110⟩+
    3 &#124;111⟩](img/file546.jpg) |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '|  | ![ 1 --√-- 4 2](img/file545.jpg)![(√ -- √-- √ -- √ -- ) 3 &#124;000⟩+
    &#124;001⟩ + 3 &#124;010⟩+ 3 &#124;011 ⟩+ 3 &#124;100⟩+ &#124;101⟩ + 3 &#124;110⟩+
    3 &#124;111⟩](img/file546.jpg) |'
- en: '|  | = ![( 1 1 ) √---&#124;0⟩ + √---&#124;1⟩ 2 2](img/file547.jpg)⊗![( -- )
    1 √ 3 --&#124;0⟩+ --- &#124;1 ⟩ 2 2](img/file548.jpg)⊗![( -- ) √ 3 1 ---&#124;0⟩+
    -&#124;1⟩ 2 2](img/file549.jpg)*,* | (6.5.1) |  |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '|  | = ![( 1 1 ) √---&#124;0⟩ + √---&#124;1⟩ 2 2](img/file547.jpg)⊗![( -- )
    1 √ 3 --&#124;0⟩+ --- &#124;1 ⟩ 2 2](img/file548.jpg)⊗![( -- ) √ 3 1 ---&#124;0⟩+
    -&#124;1⟩ 2 2](img/file549.jpg)*,* | (6.5.1) |  |'
- en: so that the quantum state is not entangled (only in superposition). An *entangled*
    state cannot be represented as a tensor product of individual qubit states.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 以便量子态不是纠缠态（仅为叠加态）。一个*纠缠*态不能表示为单独量子比特态的张量积。
- en: For example, the two-qubit state
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，二量子比特态
- en: '| ![ 1 1 √--&#124;00⟩+ √--&#124;11⟩ 2 2 ](img/file550.jpg) |  |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| ![ 1 1 √--&#124;00⟩+ √--&#124;11⟩ 2 2 ](img/file550.jpg) |  |'
- en: does not allow a tensor product decomposition. Namely, for any *a,b,c,d* ∈ℂ
    such that |*a*|² + |*b*|² = |*c*|² + |*d*|² = 1, we have
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 不允许张量积分解。即，对于任意*a,b,c,d* ∈ℂ，使得 |*a*|² + |*b*|² = |*c*|² + |*d*|² = 1，我们有
- en: '| ![-1- -1- √2-&#124;00⟩+ √2--&#124;11⟩ ⁄= (a &#124;0⟩ + b &#124;1⟩)⊗ (c &#124;0⟩+
    d &#124;1⟩). ](img/file551.jpg) |  |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| ![-1- -1- √2-&#124;00⟩+ √2--&#124;11⟩ ⁄= (a &#124;0⟩ + b &#124;1⟩)⊗ (c &#124;0⟩+
    d &#124;1⟩). ](img/file551.jpg) |  |'
- en: We notice that we need 2^n probability amplitudes to describe the state on the
    left side of ([6.5.1](#x1-135002r1)) while we only need 2*n* probability amplitudes
    to describe the state on the right side of ([6.5.1](#x1-135002r1)). The number
    of probability amplitudes needed to fully describe the state of a system is directly
    related to the amount of information the system can store. Entanglement allows
    us to encode a significantly larger amount of information than is possible with
    individual independent qubits. One can say that most of the information encoded
    in the state of a quantum mechanical system is stored non-locally in the correlations
    between the qubit states. This non-locality of information is one of the major
    distinguishing features of quantum computing over classical computing and is essential
    for a number of applications.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 我们注意到，描述([6.5.1](#x1-135002r1))左侧的状态需要2^n个概率振幅，而描述右侧的状态只需要2*n*个概率振幅。完全描述一个系统状态所需的概率振幅的数量与该系统能够存储的信息量直接相关。纠缠使我们能够编码比单独的独立量子比特更多的信息。可以说，量子机械系统状态中编码的大多数信息是以量子比特状态之间的相关性形式非局部存储的。这种信息的非局部性是量子计算与经典计算的主要区别特征之一，并且对于许多应用至关重要。
- en: 'What happens if we measure the entangled qubits? In ([6.5.1](#x1-135002r1))
    both qubits are in the state of equal superposition, i.e., if we measure the first
    qubit we will get both 0 and 1 with probability 1/2\. If instead we measure the
    second qubit we will also get 0 and 1 with equal probability. However, the situation
    is completely different if we measure the second qubit after the first has already
    been measured. In this case, the state of the second qubit is fully determined
    by the act of measuring the first qubit and there is no longer any uncertainty
    about its value: if the first qubit was measured as 0, the second qubit is also
    in state 0 and if the first qubit was measured as 1, the second qubit is also
    in state 1\. In other words, measuring one qubit collapses the superposition and
    has an immediate effect on the other.'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们测量纠缠的量子比特，会发生什么？在([6.5.1](#x1-135002r1))中，两个量子比特处于相等的叠加态，即，如果我们测量第一个量子比特，我们将以
    1/2 的概率得到 0 和 1。如果我们测量第二个量子比特，我们也会以相等的概率得到 0 和 1。然而，如果我们在第一个量子比特已经被测量之后再测量第二个量子比特，情况则完全不同。在这种情况下，第二个量子比特的状态完全由第一个量子比特的测量行为决定，不再存在任何不确定性：如果第一个量子比特被测量为
    0，第二个量子比特也处于状态 0；如果第一个量子比特被测量为 1，第二个量子比特也处于状态 1。换句话说，测量一个量子比特会坍缩叠加态，并立即影响另一个量子比特。
- en: 6.5.2 Entangling qubit states with two-qubit gates
  id: totrans-224
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 6.5.2 使用双量子比特门纠缠量子比特状态
- en: 'Qubit states can be entangled with the help of two-qubit gates. The two-qubit
    state given by ([6.5.1](#x1-135002r1)) is known as one of the four maximally entangled
    Bell states. It can be constructed from the unentangled state ![|00⟩](img/file552.jpg):'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 量子比特状态可以通过双量子比特门来纠缠。由([6.5.1](#x1-135002r1))给出的双量子比特状态被称为四个最大纠缠贝尔态之一。它可以从未纠缠状态
    ![|00⟩](img/file552.jpg) 构造出来：
- en: '| ![&#124;00⟩ = (1 ⋅ &#124;0⟩+ 0 ⋅ &#124;1⟩) ⊗ (1 ⋅ &#124;0⟩+ 0 ⋅ &#124;1⟩)
    ](img/file553.jpg) |  |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| ![&#124;00⟩ = (1 ⋅ &#124;0⟩+ 0 ⋅ &#124;1⟩) ⊗ (1 ⋅ &#124;0⟩+ 0 ⋅ &#124;1⟩)
    ](img/file553.jpg) |  |'
- en: 'by applying the *Bell circuit* consisting of H and CNOT gates:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 通过应用由 H 门和 CNOT 门组成的*贝尔电路*：
- en: '![Figure 6.18: Bell circuit. ](img/file554.jpg)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.18：贝尔电路。](img/file554.jpg)'
- en: 'Figure 6.18: Bell circuit.'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.18：贝尔电路。
- en: 'Running this circuit on the unentagled states ![|01⟩](img/file555.jpg), ![|10⟩](img/file556.jpg),
    and ![|11⟩](img/file557.jpg) will result in the construction of the other three
    Bell states:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在未纠缠的状态上运行该电路，![|01⟩](img/file555.jpg)、![|10⟩](img/file556.jpg) 和 ![|11⟩](img/file557.jpg)，将生成其他三个贝尔态：
- en: '| ![ 1 &#124;01⟩ → √--(&#124;01⟩+ &#124;10⟩), 2 ](img/file558.jpg) |  |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| ![ 1 &#124;01⟩ → √--(&#124;01⟩+ &#124;10⟩), 2 ](img/file558.jpg) |  |'
- en: '| ![ 1 &#124;10⟩ → √--(&#124;01⟩− &#124;10⟩), 2 ](img/file559.jpg) |  |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| ![ 1 &#124;10⟩ → √--(&#124;01⟩− &#124;10⟩), 2 ](img/file559.jpg) |  |'
- en: '| ![ 1 &#124;11⟩ → √--(&#124;00⟩− &#124;11⟩). 2 ](img/file560.jpg) |  |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| ![ 1 &#124;11⟩ → √--(&#124;00⟩− &#124;11⟩). 2 ](img/file560.jpg) |  |'
- en: Entanglement can be achieved with other two-qubit gates as well. Depending on
    the hardware implementation, it may be a SWAP, a CPHASE, or some other fixed two-qubit
    gate, or it can be an adjustable two-qubit gate such as XY(*𝜃*).
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 其他双量子比特门也可以实现纠缠。根据硬件实现的不同，可能是 SWAP 门、CPHASE 门或其他固定的双量子比特门，或者是可调的双量子比特门，如 XY(*𝜃*)。
- en: Entanglement allows us to store most of the information in the correlations
    between the states rather than in the states of individual qubits.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 纠缠使我们能够将大部分信息存储在量子比特状态之间的相关性中，而不是存储在单个量子比特的状态中。
- en: Entanglement is one of the main sources of the expressive power of quantum circuits
    that underpins our search for the quantum advantage.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 纠缠是量子电路表现力的主要来源之一，它支撑着我们寻找量子优势的努力。
- en: We saw that entanglement is a distinctive feature of quantum computing. We now
    see how it comes into play when analysing the quantum equivalents of classical
    logic gate decompositions studied in Section [6.1](#x1-1200001).
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到，纠缠是量子计算的一个独特特征。现在我们来看它如何在分析经典逻辑门分解的量子等价物时发挥作用，这些内容在第[6.1](#x1-1200001)节中进行了研究。
- en: 6.6 Quantum Gate Decompositions
  id: totrans-238
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 6.6 量子门分解
- en: 'The most widely used NISQ computing technologies are trapped ions and superconducting
    qubits. In both cases, one-qubit gates are much faster than two-qubit gates (by
    an order of magnitude). Additionally, one-qubit gates have much higher fidelity
     [[46](Biblography.xhtml#XBruzewicz2019), [164](Biblography.xhtml#XKjaergaard2019)].
    This means that we can treat one-qubit gates as computationally inexpensive and
    should not worry too much about their quantities. At the same time, we have to
    be economical with two-qubit gates: out of two equivalent circuits, the one with
    the smaller number of two-qubit gates would generally perform better. Therefore,
    we should be aware of the two-qubit gates that are native to any particular system
    – gates that can be implemented naturally using standard hardware control techniques.
    More complex gates can be decomposed into a sub-circuit of the native gates but
    an even better solution would be to specify the algorithm that takes advantage
    of the native gates and bypasses the need of having non-native two-qubit gates.
    For example, Rigetti’s Aspen system  [[275](Biblography.xhtml#XStrauch2003)] is
    based on the superconducting qubits with two native two-qubit gates CZ and XY
    – constructing a circuit based on these gates rather than, e.g., SWAP gates would
    achieve better performance.'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 最广泛使用的NISQ计算技术是困陷离子和超导量子比特。在这两种情况下，单量子比特门比双量子比特门快得多（快一个数量级）。此外，单量子比特门的保真度要高得多[[46](Biblography.xhtml#XBruzewicz2019)，[164](Biblography.xhtml#XKjaergaard2019)]。这意味着我们可以将单量子比特门视为计算上不昂贵的，且不必过于担心它们的数量。同时，我们必须在使用双量子比特门时保持节俭：在两个等效电路中，具有更少双量子比特门的电路通常表现得更好。因此，我们应当意识到任何特定系统的本地双量子比特门——那些可以通过标准硬件控制技术自然实现的门。更复杂的门可以分解为本地门的子电路，但更好的解决方案是指定能够利用本地门并绕过非本地双量子比特门的算法。例如，Rigetti的Aspen系统[[275](Biblography.xhtml#XStrauch2003)]基于超导量子比特，拥有两个本地双量子比特门CZ和XY——基于这些门而非例如SWAP门来构建电路会实现更好的性能。
- en: 'However, it is not always practical or desirable to make an algorithm hardware
    dependent. And since the choice of the native gates is inevitably limited, it
    is useful to keep in mind several basic decompositions. The following relationships
    can be verified by direct calculations and play an important role in quantum circuit
    construction:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使一个算法硬件依赖并不总是可行或理想的。而且由于本地门的选择不可避免地有限，因此记住几个基本的分解是有用的。以下关系可以通过直接计算验证，并在量子电路构建中发挥重要作用：
- en: '![Figure 6.19: CZ gate decomposition into CX and Hadamard gates. ](img/file561.jpg)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![图6.19：CZ门分解为CX和Hadamard门。](img/file561.jpg)'
- en: 'Figure 6.19: CZ gate decomposition into CX and Hadamard gates.'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.19：CZ门分解为CX和Hadamard门。
- en: '![Figurex1-137003r20: CX gate decomposition into CZ and Hadamard gates. ](img/file562.jpg)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![图x1-137003r20：CX门分解为CZ和Hadamard门。](img/file562.jpg)'
- en: 'Figure 6.20: CX gate decomposition into CZ and Hadamard gates.'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.20：CX门分解为CZ和Hadamard门。
- en: 'Given the limited connectivity of NISQ devices (nearest neighbours for most
    qubits), the SWAP gate that swaps the states of the qubits is especially useful
    and its efficient implementation using available native gates is very important.
    The SWAP gate can be represented by a sub-circuit consisting of three CX gates:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于NISQ设备的连接性有限（大多数量子比特的最近邻连接），SWAP门（交换量子比特的状态）特别有用，并且使用可用的本地门高效实现它非常重要。SWAP门可以通过一个由三个CX门组成的子电路表示：
- en: '![Figure 6.21: SWAP gate decomposition into three CX gates. ](img/file563.jpg)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![图6.21：SWAP门分解为三个CX门。](img/file563.jpg)'
- en: 'Figure 6.21: SWAP gate decomposition into three CX gates.'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.21：SWAP门分解为三个CX门。
- en: 'Taking into account the relationship between CX and CZ gates in Figure [6.20](#6.20),
    the SWAP gate can also be decomposed into a sub-circuit of three CZ and a handful
    of one-qubit Hadamard gates:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到图[6.20](#6.20)中CX和CZ门的关系，SWAP门也可以分解为一个包含三个CZ门和一些单量子比特Hadamard门的子电路：
- en: '![Figure 6.22: SWAP gate decomposition into three CZ and six Hadamard gates.
    ](img/file564.jpg)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![图6.22：SWAP门分解为三个CZ门和六个Hadamard门。](img/file564.jpg)'
- en: 'Figure 6.22: SWAP gate decomposition into three CZ and six Hadamard gates.'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.22：SWAP门分解为三个CZ门和六个Hadamard门。
- en: 'Alternatively, the SWAP gate can be implemented with the help of three iSWAP
    gates:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，SWAP门也可以通过三个iSWAP门来实现：
- en: '![Figurex1-137013r23: SWAP gate decomposition into three iSWAP gates (iSWAP
    = XY(π)) and three √- X gates. ](img/file566.jpg)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![图x1-137013r23：SWAP门分解为三个iSWAP门（iSWAP = XY(π)）和三个√- X门。](img/file566.jpg)'
- en: 'Figure 6.23: SWAP gate decomposition into three iSWAP gates (iSWAP = XY(π))
    and three ![√- X](img/file565.jpg) gates.'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.23：SWAP门分解为三个iSWAP门（iSWAP = XY(π)）和三个![√- X](img/file565.jpg)门。
- en: 'It is easy to verify by direct calculations that the circuit on the right side
    of Figure [6.23](#6.23) performs the following transformations:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 通过直接计算，很容易验证图[6.23](#6.23)右侧的电路执行以下变换：
- en: '![ ⌊ ⌋ ⌊ ⌋ ⌊ ⌋ |0| |0| | 0| ||1|| ||0|| ( π )|| 0|| ( π ) |0⟩⊗ |1⟩ ≡ | | −→
    | | = exp i-- | | ≡ exp i- |1⟩ ⊗ |0⟩, |⌈0|⌉ |⌈ i|⌉ 2 |⌈ 1|⌉ 2 0 0 0 ](img/file567.jpg)![
    ⌊ ⌋ ⌊ ⌋ ⌊ ⌋ |0| |0| | 0| ||0|| || i|| ( π )|| 1|| ( π ) |1⟩⊗ |0⟩ ≡ | | −→ | |
    = exp i-- | | ≡ exp i- |0⟩ ⊗ |1⟩. |⌈1|⌉ |⌈0|⌉ 2 |⌈ 0|⌉ 2 0 0 0 ](img/file568.jpg)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![ ⌊ ⌋ ⌊ ⌋ ⌊ ⌋ |0| |0| | 0| ||1|| ||0|| ( π )|| 0|| ( π ) |0⟩⊗ |1⟩ ≡ | | −→
    | | = exp i-- | | ≡ exp i- |1⟩ ⊗ |0⟩, |⌈0|⌉ |⌈ i|⌉ 2 |⌈ 1|⌉ 2 0 0 0 ](img/file567.jpg)![
    ⌊ ⌋ ⌊ ⌋ ⌊ ⌋ |0| |0| | 0| ||0|| || i|| ( π )|| 1|| ( π ) |1⟩⊗ |0⟩ ≡ | | −→ | |
    = exp i-- | | ≡ exp i- |0⟩ ⊗ |1⟩. |⌈1|⌉ |⌈0|⌉ 2 |⌈ 0|⌉ 2 0 0 0 ](img/file568.jpg)'
- en: 'The coefficient exp![(iπ ∕2)](img/file569.jpg) is a *global phase* and can
    be ignored. We can do this because a global phase is not *observable*: measuring
    the states ![|ψ⟩](img/file570.jpg) and exp(i*ϕ*)![|ψ⟩](img/file571.jpg) will yield
    the same result (i.e., the same states with the same probabilities) for any *ϕ*
    ∈ℝ. Said differently, two states differing only by a global phase represent the
    same physical system.'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 系数exp![(iπ ∕2)](img/file569.jpg)是一个*全局相位*，可以忽略。我们之所以这样做，是因为全局相位是不可*观察*的：对状态![|ψ⟩](img/file570.jpg)和exp(i*ϕ*)![|ψ⟩](img/file571.jpg)进行测量时，无论ϕ的值为何，结果（即相同的状态和相同的概率）都是相同的。换句话说，仅由全局相位不同的两个状态表示的是相同的物理系统。
- en: Finally, we mention the iSWAP representation of the CNOT gate. To do this, we
    need two iSWAP and several one-qubit gates as shown in Figure [6.24](#6.24).
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们提到CNOT门的iSWAP表示。为此，我们需要两个iSWAP门和若干一量子比特门，如图[6.24](#6.24)所示。
- en: '![Figurex1-137016r24: CNOT gate decomposition into two iSWAP gates (iSWAP =
    XY(π)) and several one-qubit rotation gates. ](img/file572.jpg)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![图x1-137016r24：CNOT门分解为两个iSWAP门（iSWAP = XY(π)）和多个一量子比特旋转门。](img/file572.jpg)'
- en: 'Figure 6.24: CNOT gate decomposition into two iSWAP gates (iSWAP = XY(π)) and
    several one-qubit rotation gates.'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.24：CNOT门分解为两个iSWAP门（iSWAP = XY(π)）和多个一量子比特旋转门。
- en: 'The CNOT gate applies the NOT gate to the target qubit if the control qubit
    is in state ![|1⟩](img/file573.jpg) while leaving the control qubit state unchanged.
    This is exactly what we see when we apply the circuit shown on the right side
    of Figure [6.24](#6.24) to the states ![|10⟩](img/file574.jpg) and ![|11⟩](img/file575.jpg):'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 当控制量子比特处于状态![|1⟩](img/file573.jpg)时，CNOT门将对目标量子比特应用NOT门，同时保持控制量子比特的状态不变。这正是当我们将图[6.24](#6.24)右侧所示电路应用于状态![|10⟩](img/file574.jpg)和![|11⟩](img/file575.jpg)时所观察到的效果：
- en: '![ ⌊ ⌋ ⌊ ⌋ ⌊ ⌋ |0| | 0 | | 0| ||0|| || 0 || ( π )|| 0|| ( π) |1⟩⊗ |0⟩ ≡ ||
    || − → || || = exp − i- || || ≡ exp − i- |1⟩⊗ |1⟩, ⌈1⌉ ⌈ 0 ⌉ 4 ⌈ 0⌉ 4 0 1√−i 1
    2 ](img/file576.jpg)![ ⌊ ⌋ ⌊ ⌋ ⌊ ⌋ 0 0 0 || || || || ( )|| || ( ) |1⟩⊗ |1⟩ ≡ ||0||
    − → || 0 || = exp − iπ || 0|| ≡ exp − iπ |1⟩⊗ |0⟩. |⌈0|⌉ |⌈ 1√−i|⌉ 4 |⌈ 1|⌉ 4
    2 1 0 0 ](img/file577.jpg)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![ ⌊ ⌋ ⌊ ⌋ ⌊ ⌋ |0| | 0 | | 0| ||0|| || 0 || ( π )|| 0|| ( π) |1⟩⊗ |0⟩ ≡ ||
    || − → || || = exp − i- || || ≡ exp − i- |1⟩⊗ |1⟩, ⌈1⌉ ⌈ 0 ⌉ 4 ⌈ 0⌉ 4 0 1√−i 1
    2 ](img/file576.jpg)![ ⌊ ⌋ ⌊ ⌋ ⌊ ⌋ 0 0 0 || || || || ( )|| || ( ) |1⟩⊗ |1⟩ ≡ ||0||
    − → || 0 || = exp − iπ || 0|| ≡ exp − iπ |1⟩⊗ |0⟩. |⌈0|⌉ |⌈ 1√−i|⌉ 4 |⌈ 1|⌉ 4
    2 1 0 0 ](img/file577.jpg)'
- en: Here, the accumulated unobservable global phase is exp![(− iπ∕4)](img/file578.jpg).
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 此处，累积的不可观察全局相位为exp![(− iπ∕4)](img/file578.jpg)。
- en: Decomposition of non-native two-qubit gates into the subcircuits consisting
    of the native two-qubit gates and high fidelity one-qubit gates allows us to build
    hardware-independent quantum algorithms.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 将非原生的两量子比特门分解为由原生的两量子比特门和高保真度的一量子比特门组成的子电路，使我们能够构建硬件无关的量子算法。
- en: Mimicking the setup for classical logic gates above, we now investigate how
    qubits and quantum logic gates can be effectively (physically) realised.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 模仿经典逻辑门的设置，我们现在研究量子比特和量子逻辑门如何有效（物理上）实现。
- en: 6.7 Physical Realisations of Qubits and Quantum Gates
  id: totrans-265
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 6.7 量子比特和量子门的物理实现
- en: Now that the theoretical framework for quantum bits and quantum gates has been
    set, it is important to understand how these can actually be realised from a hardware
    point of view.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，量子比特和量子门的理论框架已经确立，理解如何从硬件角度实现这些概念非常重要。
- en: 6.7.1 The DiVincenzo criteria
  id: totrans-267
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 6.7.1 DiVincenzo标准
- en: 'The modern approach to building quantum computing hardware was marked by the
    set of requirements for the physical implementation of quantum computation proposed
    in 2000 by DiVincenzo  [[87](Biblography.xhtml#XDiVincenzo2000)]. These requirements,
    now known as the "DiVincenzo criteria", are as follows:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 构建量子计算硬件的现代方法标志着2000年DiVincenzo提出的一系列量子计算物理实现要求[[87](Biblography.xhtml#XDiVincenzo2000)]。这些要求现在被称为“DiVincenzo标准”，具体如下：
- en: '**1\. A scalable physical system with well characterised qubits.** A qubit
    being “well characterised” means the following:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '**1\. 一个可扩展的物理系统，具有良好表征的量子比特。** 量子比特的“良好表征”意味着以下内容：'
- en: its physical parameters should be accurately known, including the internal Hamiltonian
    of the qubit, which determines the qubit energy eigenstates. Typically, the ground
    state is taken as ![|0⟩](img/file579.jpg) and the first excited state is taken
    as ![|1⟩](img/file580.jpg);
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其物理参数应准确已知，包括量子比特的内部哈密顿量，它决定了量子比特的能量本征态。通常，基态被视为![|0⟩](img/file579.jpg)，第一激发态被视为![|1⟩](img/file580.jpg)；
- en: the presence of and couplings to other states of the qubit;
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 量子比特其他状态的存在以及与这些状态的耦合；
- en: the couplings to external fields, needed to manipulate the state of the qubit;
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作量子比特状态所需的与外部场的耦合；
- en: the interactions with other qubits, needed to implement multi-qubit gates.
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 量子比特之间的相互作用，这是实现多量子比特门所必需的。
- en: '**2\. The ability to initialise the state of the system to a simple fiducial**
    **state, such as an all-zero state.** This requirement arises from the clear need
    to initialise quantum registers to a known value before the start of the computation.
    Another motivation for this requirement is the fact that quantum error correction
    requires a continuous, fresh supply of qubits in a low-entropy state (![|0⟩](img/file581.jpg)
    state). The need for a continuous supply of 0s, rather than just an initial supply,
    is a non-trivial problem that may rule out some of the potentially promising qubit
    implementations.'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '**2\. 能够将系统的状态初始化为简单的基准** **状态，例如全零状态。** 这一要求源于在计算开始之前，明确需要将量子寄存器初始化为已知值。另一个动机是，量子错误校正需要持续提供处于低熵状态的量子比特（![|0⟩](img/file581.jpg)
    状态）。持续提供 0 而非仅仅是初始的 0，这一需求是一个非平凡的问题，可能会排除一些潜在有前景的量子比特实现方式。'
- en: '**3\. Long relevant decoherence times, much longer than the gate** **operation
    time.** Decoherence can be viewed as the loss of information from a quantum system
    into the environment. Coupling with the environment leads to entanglement between
    the system and environment and the transfer of quantum information to the surroundings.
    As a result, the system dynamics is no longer unitary and the computation becomes
    irreversible (though the combined system plus environment evolves in a unitary
    fashion). This means that the quantum computer behaves as a classical machine.
    Therefore, it is important to preserve coherence for sufficiently long time to
    ensure that the uniquely quantum features of this style of computation have a
    chance to come into play. The term “relevant” emphasises that a physical system
    that realises a qubit can have many decoherence times pertaining to different
    degrees of freedom but many of these can be irrelevant to the functioning of this
    system as a qubit.'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '**3\. 长时间的相关去相干时间，远远长于门操作时间。** 去相干可以被视为量子系统向环境丧失信息的过程。与环境的耦合导致系统与环境之间的纠缠，并且量子信息向周围转移。因此，系统的动力学不再是单一的，计算变得不可逆（尽管整个系统与环境的结合体依然是单一演化的）。这意味着量子计算机表现得像一台经典机器。因此，保持足够长时间的相干性至关重要，以确保这一计算方式的独特量子特性有机会发挥作用。术语“相关的”强调了一个实现量子比特的物理系统可能具有许多不同自由度的去相干时间，但其中许多对系统作为量子比特的功能可能无关紧要。'
- en: '**4\. A universal set of quantum gates.** In all the physical implementations,
    only particular sorts of Hamiltonians can be turned on and off. In most cases,
    we are limited by only two-body (two-qubit) interactions. This poses a problem
    for a quantum computation specified with multi-qubit unitary transformations.
    Fortunately, these can always be re-expressed in terms of sequences of one- and
    two-qubit gates, and the two-qubit gates can be of just one type, which is "native"
    to a particular implementation (e.g., CNOT, CPHASE, or XY).'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '**4\. 一组通用的量子门。** 在所有物理实现中，只有特定类型的哈密顿量可以被开关。在大多数情况下，我们只能进行两体（两量子比特）相互作用。这对基于多量子比特单元变换的量子计算提出了问题。幸运的是，这些可以始终通过一系列一量子比特和两量子比特门重新表达，而两量子比特门可以只有一种类型，这种类型是某个特定实现的“原生”门（例如
    CNOT、CPHASE 或 XY）。'
- en: '**5\. A qubit-specific measurement capability.** This is a straightforward
    requirement for the efficient quantum computing process: the result of a computation
    must be read out, and this requires the ability to measure specific qubits.'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '**5\. 量子比特特定的测量能力。** 这是量子计算过程中高效运行的直接要求：计算结果必须能够读取，而这需要能够测量特定的量子比特。'
- en: There are many possible realisations of quantum computers satisfying the DiVincenzo
    criteria. The fundamental building blocks of quantum computers – qubits – can
    be constructed from electrons, photons, trapped ions, neutral atoms, superconducting
    circuits, to name just a few possibilities. Essentially, any quantum mechanical
    system that can exist in a superposition of two distinct states with controlled
    transitions between them can serve as a physical realisation of a qubit. This
    can be the spin of an electron ("up", "down") or the polarisation of a photon
    ("vertical", "horizontal"). In this section, we start with considering how the
    DiVincenzo criteria can be satisfied by superconducting qubits.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多可能的量子计算机实现方式可以满足DiVincenzo标准。量子计算机的基本构建模块——量子比特——可以由电子、光子、困缚离子、中性原子、超导电路等构成，以上仅是其中一些可能性。从本质上讲，任何能够在两个不同状态之间存在叠加，并且可以进行受控转变的量子力学系统，都可以作为量子比特的物理实现。这可以是电子的自旋（“上”、“下”）或光子的偏振（“垂直”、“水平”）。在本节中，我们将首先考虑如何通过超导量子比特来满足DiVincenzo标准。
- en: 6.7.2 Superconducting qubits
  id: totrans-279
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 6.7.2 超导量子比特
- en: 'Qubits constructed from tiny superconducting circuits are strong candidates
    for the scalable physical realisation of the principles of digital quantum computing.
    In a normal conductor, the charge carriers are individual electrons. Electrons
    are spin-![12](img/file582.jpg) elementary particles (fermions) satisfying the
    Pauli principle: no two fermions can simultaneously occupy the same state. In
    a superconducting circuit, the basic charge carriers are pairs of electrons (known
    as Cooper pairs), which are bosons (the total spin of a Cooper pair is an integer
    number) and can occupy the same quantum energy level. This effect is known as
    the Bose-Einstein condensate. The condensate wave function allows designing and
    measuring macroscopic quantum effects. The parameters of the superconducting circuits
    may be designed by setting the classical values of the electrical elements that
    compose them, e.g., adjusting the capacitance and inductance.'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 由微小超导电路构成的量子比特是数字量子计算原则可扩展物理实现的有力候选者。在普通导体中，电荷载体是单个电子。电子是自旋-![12](img/file582.jpg)
    基本粒子（费米子），满足泡利原理：两个费米子不能同时占据相同的状态。在超导电路中，基本的电荷载体是电子对（称为库珀对），它们是玻色子（库珀对的总自旋是整数），可以占据相同的量子能级。这个效应被称为玻色-爱因斯坦凝聚。凝聚态波函数使得设计和测量宏观量子效应成为可能。超导电路的参数可以通过设置组成它们的电学元件的经典值来设计，例如调整电容和电感。
- en: This gives us a concrete idea of how to build macroscopic qubits with desired
    quantum properties. Let us first have a look at the system known as Quantum Harmonic
    Oscillator (QHO) shown schematically in Figure [6.25](#6.25). Before explaining
    the physical aspects, let us have a look at its mathematical justification.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 这为我们提供了一个具体的思路，说明如何构建具有所需量子特性的宏观量子比特。首先，我们来看看图[6.25](#6.25)中示意的量子谐振子（QHO）系统。在解释其物理方面之前，让我们先来看一下它的数学依据。
- en: From classical to quantum harmonic oscillator
  id: totrans-282
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 从经典到量子谐振子
- en: Consider a simple harmonic oscillator, namely a spring on a flat frictionless
    surface, attached on one side to an unmovable object and on the other side to
    a movable one (say, a weight). In the equilibrium state, in the resting position,
    nothing moves. After applying some force, say by pulling (or pushing) the movable
    object, the spring starts oscillating due to its restoring force *F*[R]. Hooke’s
    law states that this force is proportional to the extension, namely
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个简单的谐振子，即一个放置在光滑无摩擦表面上的弹簧，一侧连接着一个不可动的物体，另一侧连接着一个可移动的物体（比如一个重物）。在平衡状态下，静止位置时没有任何运动。在施加某种力量后，比如通过拉动（或推）可移动物体，弹簧开始由于其恢复力*F*[R]而振荡。胡克定律指出，这个力与伸长量成正比，即
- en: '![FR (x(t)) = − kx(t), ](img/file583.jpg)'
  id: totrans-284
  prefs: []
  type: TYPE_IMG
  zh: '![FR (x(t)) = − kx(t), ](img/file583.jpg)'
- en: starting from *x*(0) = *x*[0] ∈ℝ, where *x*(*t*) denotes the position of the
    spring at time *t* and *k* is the spring constant. Newton’s second law of motion
    also states that
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 从 *x*(0) = *x*[0] ∈ℝ 开始，其中 *x*(*t*) 表示弹簧在时间 *t* 的位置，*k* 是弹簧常数。牛顿第二定律也指出：
- en: '![FR(x(t)) = ma (t), ](img/file584.jpg)'
  id: totrans-286
  prefs: []
  type: TYPE_IMG
  zh: '![FR(x(t)) = ma (t), ](img/file584.jpg)'
- en: for *t* ≥ 0, where *a*(*t*) denotes the acceleration at time *t*, and *m* is
    the mass of the spring. Since *a*(*t*) = *ẍ*(*t*), combining the two equations
    yields, for each *t* ≥ 0,
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 *t* ≥ 0，其中 *a*(*t*) 表示时间 *t* 时的加速度，*m* 是弹簧的质量。由于 *a*(*t*) = *ẍ*(*t*)，将两个方程结合，可以得到，对于每个
    *t* ≥ 0，
- en: '![¨x(t) = − k-x(t), m ](img/file585.jpg)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![¨x(t) = − k-x(t), m ](img/file585.jpg)'
- en: starting from *x*(0) = *x*[0], which is the equation of motion for the simple
    oscillator. It is a simple one-dimensional second order linear ordinary differential
    equation, which can be solved simply as
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 从 *x*(0) = *x*[0] 开始，这是简单振子的运动方程。它是一个简单的一维二阶线性常微分方程，可以通过以下方式简单求解：
- en: '| ![x(t) = x0cos(ωt)+ v0sin(ωt), for all t ≥ 0, ω ](img/file586.jpg) |  |'
  id: totrans-290
  prefs: []
  type: TYPE_TB
  zh: '| ![x(t) = x0cos(ωt)+ v0sin(ωt), 对于所有 t ≥ 0, ω ](img/file586.jpg) |  |'
- en: where
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 其中
- en: '![ ∘ -k- ω := -- and v0 := ˙x(0) m ](img/file587.jpg)'
  id: totrans-292
  prefs: []
  type: TYPE_IMG
  zh: '![ ∘ -k- ω := -- 和 v0 := ˙x(0) m ](img/file587.jpg)'
- en: are, respectively, the natural frequency of the oscillator and the speed. Trigonometric
    manipulations show that ([6.7.2](#x1-1410002)) can equivalently be written as
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 分别是振子的自然频率和速度。三角函数操作显示（[6.7.2](#x1-1410002)）可以等效地写成：
- en: '| ![x(t) = α cos(ωt − φ), for all t ≥ 0, ](img/file588.jpg) |  |'
  id: totrans-294
  prefs: []
  type: TYPE_TB
  zh: '| ![x(t) = α cos(ωt − φ), 对于所有 t ≥ 0, ](img/file588.jpg) |  |'
- en: where
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 其中
- en: '![ ∘ -------- 2 v20- -v0- α := x0 + ω2 and tan(φ) := ωx0\. ](img/file589.jpg)'
  id: totrans-296
  prefs: []
  type: TYPE_IMG
  zh: '![ ∘ -------- 2 v20- -v0- α := x0 + ω2 和 tan(φ) := ωx0\. ](img/file589.jpg)'
- en: Recall now that the potential energy 𝔙 is the energy stored in the oscillator
    when it is extended or compressed, i.e. (considering *x* = 0 as the equilibrium
    state),
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 现在回忆起，势能 𝔙 是当振子被拉伸或压缩时储存的能量，即（考虑 *x* = 0 作为平衡状态），
- en: '![ ∫ x(t) k 𝔙 (x,t) = − FR(z)dz = --x(t)2\. 0 2 ](img/file590.jpg)'
  id: totrans-298
  prefs: []
  type: TYPE_IMG
  zh: '![ ∫ x(t) k 𝔙 (x,t) = − FR(z)dz = --x(t)2\. 0 2 ](img/file590.jpg)'
- en: 'The total energy of the system is then the sum of the kinetic and the potential
    energies:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 系统的总能量是动能和势能的和：
- en: '| 𝔈[total](*t*) | = 𝔈[kinetic](*t*) + 𝔙(*x*(*t*)) |'
  id: totrans-300
  prefs: []
  type: TYPE_TB
  zh: '| 𝔈[total](*t*) | = 𝔈[kinetic](*t*) + 𝔙(*x*(*t*)) |'
- en: '|  | = ![m- 2](img/file591.jpg)*v*(*t*)² + ![k- 2](img/file592.jpg)*x*(*t*)²*.*
    |'
  id: totrans-301
  prefs: []
  type: TYPE_TB
  zh: '|  | = ![m- 2](img/file591.jpg)*v*(*t*)² + ![k- 2](img/file592.jpg)*x*(*t*)²*.*
    |'
- en: 'Using the explicit solution ([6.7.2](#x1-1410002)), with *ω* := ![∘ -- k- m](img/file593.jpg)
    we obtain:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 使用显式解（[6.7.2](#x1-1410002)），并且 *ω* := ![∘ -- k- m](img/file593.jpg)，我们得到：
- en: '| 𝔈[total](*t*) | = ![m- 2](img/file594.jpg)![( ( ) ) d- α cos(ωt− φ ) dt](img/file595.jpg)²
    + ![k- 2](img/file596.jpg)![(](img/file597.jpg)*α* cos(*ωt* − *φ*)![)](img/file598.jpg)²
    |'
  id: totrans-303
  prefs: []
  type: TYPE_TB
  zh: '| 𝔈[total](*t*) | = ![m- 2](img/file594.jpg)![( ( ) ) d- α cos(ωt− φ ) dt](img/file595.jpg)²
    + ![k- 2](img/file596.jpg)![(](img/file597.jpg)*α* cos(*ωt* − *φ*)![)](img/file598.jpg)²
    |'
- en: '|  | = ![m α2ω2 --2----](img/file599.jpg)sin(*ωt* − *φ*)² + ![mα2 ω2 --2----](img/file600.jpg)cos(*ωt*
    − *φ*)² |'
  id: totrans-304
  prefs: []
  type: TYPE_TB
  zh: '|  | = ![m α2ω2 --2----](img/file599.jpg)sin(*ωt* − *φ*)² + ![mα2 ω2 --2----](img/file600.jpg)cos(*ωt*
    − *φ*)² |'
- en: '|  | = ![ 2 2 m-α-ω-- 2](img/file601.jpg) = ![ 2 kα-- 2](img/file602.jpg)*.*
    |'
  id: totrans-305
  prefs: []
  type: TYPE_TB
  zh: '|  | = ![ 2 2 m-α-ω-- 2](img/file601.jpg) = ![ 2 kα-- 2](img/file602.jpg)*.*
    |'
- en: 'In this classical setting, we see that the total energy of the system can take
    a continuum of values. The quantum counterpart is fundamentally different and
    we shall see below that it is in fact quantised (giving rise to the "quantum"
    theory), as originally proposed by Bohr in 1913, and later detailed by Schrödinger
    and Heisenberg in 1926\. Recall now the general form of the time-dependent Schrödinger
    equation describing the evolution of a system over time:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个经典情形中，我们看到系统的总能量可以取一系列连续值。量子对应物则截然不同，我们将在下文看到它实际上是量子化的（这就是“量子”理论的由来），正如1913年玻尔最初提出的，之后由1926年的薛定谔和海森堡详细阐述。现在回顾一下描述系统随时间演化的时间相关的薛定谔方程的通式：
- en: '| ![iℏ dΨ(x,t)-= ℋ Ψ(x,t), dt ](img/file603.jpg) |  |'
  id: totrans-307
  prefs: []
  type: TYPE_TB
  zh: '| ![iℏ dΨ(x,t)-= ℋ Ψ(x,t), dt ](img/file603.jpg) |  |'
- en: where ℋ represents the Hamiltonian of the system. Since the latter (representing
    the energy of the system) is the sum of the kinetic energy and the potential energy,
    we have
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 ℋ 表示系统的哈密顿量。由于后者（表示系统的能量）是动能和势能之和，我们有
- en: '![ 2 2 ℋ = 𝔈kinetic + 𝔈potential =-p- + 𝔙 = − -ℏ- d---+ 𝔙, 2m 2m dx2 ](img/file604.jpg)'
  id: totrans-309
  prefs: []
  type: TYPE_IMG
  zh: '![ 2 2 ℋ = 𝔈kinetic + 𝔈potential =-p- + 𝔙 = − -ℏ- d---+ 𝔙, 2m 2m dx2 ](img/file604.jpg)'
- en: 'where *m* is the mass of the particle, ℏ is the usual Planck constant, 𝔙 is
    the potential representing the environment, and *p* is the momentum operator:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 *m* 是粒子的质量，ℏ 是普朗克常数，𝔙 是表示环境的势能，*p* 是动量算符：
- en: '![ d p = − iℏ--. dx ](img/file605.jpg)'
  id: totrans-311
  prefs: []
  type: TYPE_IMG
  zh: '![ d p = − iℏ--. dx ](img/file605.jpg)'
- en: Plugging this Hamiltonian into ([6.7.2](#x1-1410002)) yields
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 将此哈密顿量代入 ([6.7.2](#x1-1410002)) 可得
- en: '| ![ dΨ (x,t) ( ℏ2 d2 ) iℏ--------= − -----2-+ 𝔙 (x) Ψ (x,t). dt 2m dx ](img/file606.jpg)
    |  |'
  id: totrans-313
  prefs: []
  type: TYPE_TB
  zh: '| ![ dΨ (x,t) ( ℏ2 d2 ) iℏ--------= − -----2-+ 𝔙 (x) Ψ (x,t). dt 2m dx ](img/file606.jpg)
    |  |'
- en: Since the potential 𝔙 does not depend on time, separation of variables, with
    Ψ(*x,t*) = *ψ*(*x*)*u*(*t*), gives
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 由于势能 𝔙 不依赖于时间，通过变量分离，设Ψ(*x,t*) = *ψ*(*x*)*u*(*t*)，得
- en: '![ ( ) ′ -ℏ2 ′′ iℏψ(x)u (t) = −2m ψ (x)+ 𝔙 (x)ψ(x) u(t), ](img/file607.jpg)'
  id: totrans-315
  prefs: []
  type: TYPE_IMG
  zh: '![ ( ) ′ -ℏ2 ′′ iℏψ(x)u (t) = −2m ψ (x)+ 𝔙 (x)ψ(x) u(t), ](img/file607.jpg)'
- en: or else
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 或者
- en: '![ u′(t) − ℏ22mψ ′′(x )+ 𝔙 (x)ψ(x) iℏ u(t) = --------ψ-(x-)--------. ](img/file608.jpg)'
  id: totrans-317
  prefs: []
  type: TYPE_IMG
  zh: '![ u′(t) − ℏ22mψ ′′(x )+ 𝔙 (x)ψ(x) iℏ u(t) = --------ψ-(x-)--------. ](img/file608.jpg)'
- en: Since both sides depend on a different variable, they must be equal to a constant,
    say *E*, and we thus obtain the ordinary differential equation
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 由于两边依赖于不同的变量，它们必须等于一个常数，设为 *E*，因此我们得到常微分方程
- en: '![ u-′(t) iℏ u(t) = E, ](img/file609.jpg)'
  id: totrans-319
  prefs: []
  type: TYPE_IMG
  zh: '![ u-′(t) iℏ u(t) = E, ](img/file609.jpg)'
- en: as well as the eigenvalue equation
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 以及本征值方程
- en: '| ![ ℏ2 ℋ ψ (x ) = −---ψ ′′(x) + 𝔙 (x )ψ (x) = E ψ (x ). 2m ](img/file610.jpg)
    |  |'
  id: totrans-321
  prefs: []
  type: TYPE_TB
  zh: '| ![ ℏ2 ℋ ψ (x ) = −---ψ ′′(x) + 𝔙 (x )ψ (x) = E ψ (x ). 2m ](img/file610.jpg)
    |  |'
- en: The first one immediately admits the solution, with normalisation *u*(0) = 1,
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个方程立即得到解，且标准化为 *u*(0) = 1，
- en: '![ ( iEt ) u(t) = exp − --- . ℏ ](img/file611.jpg)'
  id: totrans-323
  prefs: []
  type: TYPE_IMG
  zh: '![ ( iEt ) u(t) = exp − --- . ℏ ](img/file611.jpg)'
- en: The eigenvalue equation ([6.7.2](#x1-1410002)) can be solved, for example, by
    spectral method. In fact, it can be proved (and we refer the interested reader
    to  [[258](Biblography.xhtml#Xschwabl2007quantum), Section 3.1] for details) that
    the operator ℋ here admits a finite spectrum, with the set of (eigenvalues, eigenfunctions)
    {(*E*[n]*,ψ*[n])}[n≥0] given by
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 本征值方程 ([6.7.2](#x1-1410002)) 可以通过谱方法求解。例如，可以证明（有关详细信息，请参见 [[258](Biblography.xhtml#Xschwabl2007quantum)，第3.1节]）该算符 ℋ
    在此处具有有限的谱，(本征值，本征函数) 集合为 {(*E*[n]*,ψ*[n])}[n≥0]，具体为
- en: '| ![( ( 1) &#124;&#124;{ En = n + -- ℏω, 2( )1∕4 ( 2 ) (∘ ---- ) &#124;&#124;(
    ψn (x) = √-1--- mω-- exp − m-ωx-- Hn m-ω-x , 2nn! πℏ 2ℏ ℏ ](img/file612.jpg) |  |'
  id: totrans-325
  prefs: []
  type: TYPE_TB
  zh: '| ![( ( 1) &#124;&#124;{ En = n + -- ℏω, 2( )1∕4 ( 2 ) (∘ ---- ) &#124;&#124;(
    ψn (x) = √-1--- mω-- exp − m-ωx-- Hn m-ω-x , 2nn! πℏ 2ℏ ℏ ](img/file612.jpg) |  |'
- en: for each *n* ≥ 0*,x* ∈ℝ, where *H*[n] denotes the *n*-th physicists’ Hermite
    polynomial
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个 *n* ≥ 0,*x* ∈ℝ，其中 *H*[n] 表示第 *n* 个物理学家的 Hermite 多项式
- en: '![ n ( ) Hn (z) := (− 1)nez2-d e−z2 . dzn ](img/file613.jpg)'
  id: totrans-327
  prefs: []
  type: TYPE_IMG
  zh: '![ n ( ) Hn (z) := (− 1)nez2-d e−z2 . dzn ](img/file613.jpg)'
- en: Physical representation of the QHO
  id: totrans-328
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: QHO 的物理表示
- en: A schematic representation of the QHO is shown in Figure [6.25](#6.25). In this
    system, energy oscillates between electrical energy in the capacitor *C* and magnetic
    energy in the inductor *L*.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: QHO 的示意图见图 [6.25](#6.25)。在此系统中，能量在电容器 *C* 中的电能和电感器 *L* 中的磁能之间振荡。
- en: '![Figurex1-142001r25: Quantum Harmonic Oscillator (QHO). ](img/file614.jpg)'
  id: totrans-330
  prefs: []
  type: TYPE_IMG
  zh: '![Figurex1-142001r25: Quantum Harmonic Oscillator (QHO). ](img/file614.jpg)'
- en: 'Figure 6.25: Quantum Harmonic Oscillator (QHO).'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.25：量子谐振子（QHO）。
- en: 'The Hamiltonian of this system is identical to the one describing a particle
    in a one-dimensional quadratic potential  [[177](Biblography.xhtml#XKrantz2019)].
    The solution to the eigenvalue problem above (see ([6.7.2](#x1-1410002))) gives
    an infinite series of eigenstates (![|n⟩](img/file615.jpg))[n≥0], whose corresponding
    eigenenergies, (*E*[n])[n≥0], are all equidistantly spaced as can be seem from ([6.7.2](#x1-1410002)):'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 该系统的哈密顿量与描述粒子在一维二次势能中的哈密顿量相同 [[177](Biblography.xhtml#XKrantz2019)]。上述本征值问题的解（参见 ([6.7.2](#x1-1410002)))
    给出了本征态的无限级数 (![|n⟩](img/file615.jpg))[n≥0]，其对应的本征能量 (*E*[n])[n≥0] 是等间隔的，如从 ([6.7.2](#x1-1410002))
    中所示：
- en: '| ![En+1 − En = ℏ ωr, for all n ≥ 0, ](img/file616.jpg) |  |'
  id: totrans-333
  prefs: []
  type: TYPE_TB
  zh: '| ![En+1 − En = ℏ ωr, for all n ≥ 0, ](img/file616.jpg) |  |'
- en: where the resonant frequency, *ω*[r], is given by the Thompson formula  [[283](Biblography.xhtml#XTomawski2021)]
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 其中共振频率，*ω*[r]，由汤普森公式给出 [[283](Biblography.xhtml#XTomawski2021)]。
- en: '| ![ωr = √-1--. LC ](img/file617.jpg) |  |'
  id: totrans-335
  prefs: []
  type: TYPE_TB
  zh: '| ![ωr = √-1--. LC ](img/file617.jpg) |  |'
- en: Our first task is to define a computational subspace consisting of only two
    energy states, ![|0⟩](img/file618.jpg) and ![|1⟩](img/file619.jpg), usually the
    lowest two energy eigenstates in between which transitions can be driven without
    also exciting other levels in the system. However, we cannot use the lowest two
    energy eigenstates of the QHO for this purpose since the quantum logic gate operations
    depend on frequency selectivity. The equidistant level-spacing of the QHO makes
    this impossible.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的首要任务是定义一个仅包含两个能量状态的计算子空间，![
- en: Therefore, we need to add anharmonicity (or non-linearity) into the system.
    We require the transition frequencies *ω*[01] between eigenstates ![|0⟩](img/file620.jpg)
    and ![|1⟩](img/file621.jpg) and *ω*[12] between eigenstates ![|1⟩](img/file622.jpg)
    and ![|2⟩](img/file623.jpg) to be sufficiently different in order to be individually
    addressable. The required non-linearity can be introduced by replacing the inductor *L*
    with the Josephson junction module *J*, as shown schematically in Figure [6.7.2](#x1-142001r2).
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们需要向系统中加入非谐性（或非线性）。我们要求本征态之间的跃迁频率 *ω*[01]，即 ![|0⟩](img/file620.jpg) 和 ![|1⟩](img/file621.jpg)
    之间的跃迁频率，及 *ω*[12]，即 ![|1⟩](img/file622.jpg) 和 ![|2⟩](img/file623.jpg) 之间的跃迁频率，要足够不同，以便能够单独寻址。所需的非线性可以通过用约瑟夫森结模块
    *J* 替代电感 *L* 来引入，如图 [6.7.2](#x1-142001r2) 所示。
- en: '![Figure 6.26: Qubit implemented as Quantum Anharmonic Oscillator (QAO). The
    two lowest energy eigenstates |0⟩ and |1⟩ form the qubit’s computational space.
    ](img/file626.jpg)'
  id: totrans-338
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.26：作为量子非谐振荡器（QAO）实现的量子比特。两个最低能量本征态 |0⟩ 和 |1⟩ 形成量子比特的计算空间。](img/file626.jpg)'
- en: 'Figure 6.26: Qubit implemented as Quantum Anharmonic Oscillator (QAO). The
    two lowest energy eigenstates ![|0⟩](img/file624.jpg) and ![|1⟩](img/file625.jpg)
    form the qubit’s computational space.'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.26：作为量子非谐振荡器（QAO）实现的量子比特。两个最低能量本征态 ![|0⟩](img/file624.jpg) 和 ![|1⟩](img/file625.jpg)
    形成量子比特的计算空间。
- en: The Josephson junction is the key element that transforms a superconducting
    circuit into a qubit. The description of the Josephson effect (the quantum tunnelling
    of the Cooper pairs) is outside the scope of this book but interested readers
    are encouraged to learn more about it from the excellent Feynman’s Lectures on
    Physics  [[101](Biblography.xhtml#XFeynman)].
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 约瑟夫森结是将超导电路转变为量子比特的关键元素。约瑟夫森效应（库珀对的量子隧穿）的描述超出了本书的范围，但有兴趣的读者可以通过费曼的《物理学讲义》 [[101](Biblography.xhtml#XFeynman)]进一步学习。
- en: After introducing the Josephson module to the circuit (the electric circuit
    symbol for the Josephson junction is an "X"), the potential energy no longer has
    the parabolic form (as a function of the superconducting phase), but rather takes
    a cosinusoidal form, which makes the energy spectrum non-equidistant. Now we can
    identify the two lowest energy eigenstates as a qubit computational subspace  [[177](Biblography.xhtml#XKrantz2019), [204](Biblography.xhtml#XMartinis2009)].
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 在电路中引入约瑟夫森模块后（约瑟夫森结的电路符号为“X”），势能不再呈现抛物线形状（作为超导相的函数），而是采取余弦型形式，这使得能量谱变得非等距。现在，我们可以将两个最低能量本征态识别为量子比特的计算子空间
    [[177](Biblography.xhtml#XKrantz2019), [204](Biblography.xhtml#XMartinis2009)]。
- en: 'A superconducting loop with two Josephson junctions in either arm is very sensitive
    to the magnetic flux enclosed  [[119](Biblography.xhtml#XGrundmann2005)]. In the
    following, we shall use a more compact symbol for the Josephson junction subcircuit:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 一个具有两个约瑟夫森结在每个臂上的超导回路对所包围的磁通非常敏感 [[119](Biblography.xhtml#XGrundmann2005)]。接下来，我们将为约瑟夫森结子电路使用更紧凑的符号：
- en: '![Figure 6.27: Josephson junction module subcircuit. ](img/file627.jpg)'
  id: totrans-343
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.27：约瑟夫森结模块子电路。](img/file627.jpg)'
- en: 'Figure 6.27: Josephson junction module subcircuit.'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.27：约瑟夫森结模块子电路。
- en: '**Remark:** It may also be possible to form a computational subspace using
    the three lowest energy eigenstates: ![|0⟩](img/file628.jpg), ![|1⟩](img/file629.jpg)
    and ![|2⟩](img/file630.jpg). In this case, we would have a physical realisation
    of a *qutrit*, whose superposition state vector, ![|ψ⟩](img/file631.jpg), can
    be represented as a linear combination of the three orthonormal basis states:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '**备注：** 也可能通过使用三个最低能量本征态来形成计算子空间：![|0⟩](img/file628.jpg)、![|1⟩](img/file629.jpg)和![|2⟩](img/file630.jpg)。在这种情况下，我们将拥有一个物理实现的*qutrit*，其叠加态矢量，![|ψ⟩](img/file631.jpg)，可以表示为三个正交归一基态的线性组合：'
- en: '![|ψ⟩ = α |0⟩+ β |1⟩+ γ |2⟩, ](img/file632.jpg)'
  id: totrans-346
  prefs: []
  type: TYPE_IMG
  zh: '![|ψ⟩ = α |0⟩+ β |1⟩+ γ |2⟩, ](img/file632.jpg)'
- en: where *α,β,γ* ∈ℂ are probability amplitudes such that |*α*|² + |*β*|² + |*γ*|²
    = 1\. Qutrits increase the amount of information encoded in a single element,
    enable techniques that decrease readout errors  [[200](Biblography.xhtml#XMallet2009)]
    and reduce the cost of decomposing three-qubit gates into basic two-qubit components  [[132](Biblography.xhtml#XHill2021)].
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 其中，*α,β,γ* ∈ℂ是概率幅度，满足|*α*|² + |*β*|² + |*γ*|² = 1。Qutrits增加了单个元素中编码信息的量，启用了减少读取错误的技术[[200](Biblography.xhtml#XMallet2009)]，并且降低了将三量子比特门分解为基本二量子比特组件的成本[[132](Biblography.xhtml#XHill2021)]。
- en: Controlling and measuring superconducting qubits
  id: totrans-348
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 控制与测量超导量子比特
- en: Having satisfied the first DiVincenzo requirement (well defined qubit), we have
    to demonstrate how superconducting qubits can be controlled, coupled together
    to build scalable systems, and measured. We start with the control and measurement
    of the superconducting qubit states.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 满足第一个DiVincenzo要求（良定义的量子比特）后，我们必须展示如何控制超导量子比特，如何将它们耦合以构建可扩展系统，并且如何进行测量。我们从超导量子比特态的控制和测量开始。
- en: The capacitive coupling between a resonator (or a feedline) and the superconducting
    qubit allows for microwave control to implement single-qubit rotations as well
    as certain two-qubit gates  [[177](Biblography.xhtml#XKrantz2019)]. Figure [6.28](#6.28)
    provides a schematic representation of the superconducting qubit coupled to a
    microwave source (also referred to as a *qubit drive*). The qubit is controlled
    by the pulses of microwave radiation. The control parameters are the frequency,
    the phase and the duration of the pulses.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 共振器（或馈线）与超导量子比特之间的电容耦合使得微波控制成为可能，从而实现单量子比特旋转以及某些双量子比特门[[177](Biblography.xhtml#XKrantz2019)]。图[6.28](#6.28)展示了超导量子比特与微波源耦合的示意图（也称为*量子比特驱动*）。量子比特通过微波辐射脉冲进行控制。控制参数包括频率、相位和脉冲持续时间。
- en: '![Figurex1-143001r28: Qubit capacitively coupled to the feedline. ](img/file633.jpg)'
  id: totrans-351
  prefs: []
  type: TYPE_IMG
  zh: '![Figurex1-143001r28: 量子比特与馈线的电容耦合。](img/file633.jpg)'
- en: 'Figure 6.28: Qubit capacitively coupled to the feedline.'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.28：量子比特与馈线的电容耦合。
- en: Figure [6.29](#6.29) shows the qubit that is capacitively coupled to a microwave
    resonator (non-linear) whose frequency is shifted by the qubit state  [[254](Biblography.xhtml#XSchmitt2015)].
    This frequency shift is exploited for reading the qubit state using the dispersive
    readout method. When sending a microwave pulse to the resonator, the phase of
    the reflected (or transmitted) signal conveys information on the qubit state.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 图[6.29](#6.29)展示了一个量子比特，它与微波共振器（非线性）通过电容耦合，且其频率会受到量子比特状态的影响[[254](Biblography.xhtml#XSchmitt2015)]。这种频率偏移被用于通过色散读出方法读取量子比特状态。当向共振器发送微波脉冲时，反射（或透射）信号的相位传递了量子比特状态的信息。
- en: '![Figurex1-143003r29: Qubit readout circuit that features a non-linear resonator
    with Josephson junction. ](img/file634.jpg)'
  id: totrans-354
  prefs: []
  type: TYPE_IMG
  zh: '![Figurex1-143003r29: 特征为带有约瑟夫森结的非线性共振器的量子比特读出电路。](img/file634.jpg)'
- en: 'Figure 6.29: Qubit readout circuit that features a non-linear resonator with
    Josephson junction.'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.29：特征为带有约瑟夫森结的非线性共振器的量子比特读出电路。
- en: Entanglement with superconducting qubits
  id: totrans-356
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 与超导量子比特的纠缠
- en: For the implementation of multi-qubit gates (and, therefore, entanglement),
    qubits must be connected. The connectivity of superconducting qubits is realised
    via capacitive coupling – either directly or with the help of a coupler as shown
    schematically in Figure [6.30](#6.30), where capacitive coupling is achieved via
    a coupler in the form of a linear resonator  [[177](Biblography.xhtml#XKrantz2019)].
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现多量子比特门（因此也实现纠缠），量子比特必须连接在一起。超导量子比特的连接通过电容耦合实现——可以是直接连接，或者通过耦合器帮助连接，如图[6.30](#6.30)所示，其中通过线性共振器实现电容耦合[[177](Biblography.xhtml#XKrantz2019)]。
- en: The fixed-frequency superconducting qubits typically feature longer coherence
    times and are less sensitive to flux noise. The two-qubit gate developed for these
    qubits is the cross-resonance gate CR. In the schematic circuit diagram of two
    fixed-frequency superconducting qubits coupled through a linear resonator (Figure [6.30](#6.30)),
    the CR gate is realised when qubit 1 is driven at the frequency of qubit 2.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 固定频率超导量子比特通常具有更长的相干时间，并且对磁通噪声的敏感性较低。为这些量子比特开发的两比特门是交叉共振门 CR。在通过线性谐振器耦合的两个固定频率超导量子比特的示意电路图中（图
    [6.30](#6.30)），当量子比特 1 以量子比特 2 的频率驱动时，就实现了 CR 门。
- en: '![Figurex1-144002r30: Capacitive coupling via coupler (linear resonator). Qubit
    1 and Qubit 2 are fixed-frequency qubits with frequencies ω1 and ω2 respectively.
    ](img/file635.jpg)'
  id: totrans-359
  prefs: []
  type: TYPE_IMG
  zh: '![图x1-144002r30：通过耦合器（线性谐振器）进行的电容耦合。量子比特 1 和量子比特 2 分别是频率为 ω1 和 ω2 的固定频率量子比特。](img/file635.jpg)'
- en: 'Figure 6.30: Capacitive coupling via coupler (linear resonator). Qubit 1 and
    Qubit 2 are fixed-frequency qubits with frequencies ω[1] and ω[2] respectively.'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.30：通过耦合器（线性谐振器）进行的电容耦合。量子比特 1 和量子比特 2 分别是频率为 ω[1] 和 ω[2] 的固定频率量子比特。
- en: 'The unitary matrix representation of the CR(*𝜃*) gate is given by the following  [[240](Biblography.xhtml#XQiskitRZXGate)]:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: CR(*𝜃*) 门的单位矩阵表示如下 [[240](Biblography.xhtml#XQiskitRZXGate)]：
- en: '| ![ ( ) CR(𝜃) = RZ⊗X(𝜃) = exp − 1-i𝜃σz ⊗ σx ⌊ 2 ⌋ cos(𝜃) − isin (𝜃) 0 0 &#124;
    2( ) ( 2) &#124; &#124;&#124; − isin 𝜃2 cos 𝜃2 0 0 &#124;&#124; = &#124;&#124;
    (𝜃 ) (𝜃)&#124;&#124;, ⌈ 0 0 cos 2( ) isin( 2) ⌉ 0 0 isin 𝜃2 cos 𝜃2 ](img/file636.jpg)
    |  |'
  id: totrans-362
  prefs: []
  type: TYPE_TB
  zh: '| ![ ( ) CR(𝜃) = RZ⊗X(𝜃) = exp − 1-i𝜃σz ⊗ σx ⌊ 2 ⌋ cos(𝜃) − isin (𝜃) 0 0 &#124;
    2( ) ( 2) &#124; &#124;&#124; − isin 𝜃2 cos 𝜃2 0 0 &#124;&#124; = &#124;&#124;
    (𝜃 ) (𝜃)&#124;&#124;, ⌈ 0 0 cos 2( ) isin( 2) ⌉ 0 0 isin 𝜃2 cos 𝜃2 ](img/file636.jpg)
    |  |'
- en: where the effective rotation angle *𝜃* is a function of the physical characteristics
    of the qubits, the coupler, and the driving microwave pulse.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 其中有效旋转角度 *𝜃* 是量子比特、耦合器和驱动微波脉冲的物理特性的函数。
- en: 'Due to the form of ([6.7.2](#x1-144002r2)), the CR(*𝜃*) gate can also be denoted
    as the ZX(*𝜃*) gate. This also tells us how we can use the cross-resonance gate
    to generate a CNOT gate (up to a global phase exp(−i*π∕*4)) in combination with
    only one-qubit gates:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 由于形式的原因 ([6.7.2](#x1-144002r2))，CR(*𝜃*) 门也可以表示为 ZX(*𝜃*) 门。这也告诉我们如何利用交叉共振门结合仅有的单量子比特门生成
    CNOT 门（最多带有全局相位 exp(−i*π∕*4)）：
- en: '![Figure 6.31: CNOT gate decomposition into ZX, RX and RZ gates. ](img/file637.jpg)'
  id: totrans-365
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.31：CNOT 门分解为 ZX、RX 和 RZ 门。](img/file637.jpg)'
- en: 'Figure 6.31: CNOT gate decomposition into ZX, R[X] and R[Z] gates.'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.31：CNOT 门分解为 ZX、R[X] 和 R[Z] 门。
- en: 6.7.3 Photonic qubits
  id: totrans-367
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 6.7.3 光子量子比特
- en: At the time of writing, it is not clear which qubit construction technology
    will become the industry standard, if any. There are a lot of exciting experiments
    and technological breakthroughs ahead of us. The superconducting qubits clearly
    satisfy the DiVincenzo criteria but there are many other interesting solutions
    at various stages of development.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，尚不清楚哪种量子比特构建技术将成为行业标准（如果有的话）。我们面临着许多激动人心的实验和技术突破。超导量子比特显然满足 DiVincenzo
    标准，但也有许多其他有趣的解决方案，处于不同的开发阶段。
- en: 'One of the possibilities is to encode qubits in photons. Single photons are
    largely free of noise and can be easily manipulated to realise one-qubit gates.
    A qubit can be encoded in any of multiple photon’s degrees of freedom: temporal,
    path, and polarisation. One-qubit gates can be implemented using *birefringent
    waveplates* and conversion between polarisation and path encoding can be achieved
    using a *polarising beam splitter*  [[225](Biblography.xhtml#XOBrien2008)], where
    ![|0⟩](img/file638.jpg) or ![|1⟩](img/file639.jpg) represents a photon in the
    upper or lower path, respectively (see Figure [6.33](#6.33)).'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一种可能性是将量子比特编码在光子中。单光子几乎不受噪声影响，并且可以轻松操控以实现单量子比特门。量子比特可以通过多个光子的自由度进行编码：时间、路径和偏振。可以使用
    *双折射波片* 实现单量子比特门，而偏振与路径编码之间的转换可以通过 *偏振分束器* 实现 [[225](Biblography.xhtml#XOBrien2008)]，其中
    ![|0⟩](img/file638.jpg) 或 ![|1⟩](img/file639.jpg) 分别表示光子在上路径或下路径中（见图 [6.33](#6.33)）。
- en: 'As we know, in order to entangle qubits, we need to find a suitable physical
    implementation of two-qubit gates. Let us have a look at the possible realisation
    of the CNOT gate using photonic qubits. First of all, we notice that the CNOT
    gate can be expressed in terms of the CPHASE gate, which can be naturally implemented
    on the photonics hardware:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所知，为了纠缠量子比特，我们需要找到适合的物理实现来实现两量子比特门。让我们看看使用光子量子比特实现CNOT门的可能性。首先，我们注意到CNOT门可以通过CPHASE门来表达，而CPHASE门可以自然地在光子硬件上实现：
- en: '![Figure 6.32: CNOT gate decomposition into CPHASE and H gates. ](img/file640.jpg)'
  id: totrans-371
  prefs: []
  type: TYPE_IMG
  zh: '![图6.32：CNOT门分解为CPHASE和H门。](img/file640.jpg)'
- en: 'Figure 6.32: CNOT gate decomposition into CPHASE and H gates.'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.32：CNOT门分解为CPHASE和H门。
- en: When the control qubit is in state ![|0⟩](img/file641.jpg) the two H gates cancel
    each other, and when it is in state ![|1⟩](img/file642.jpg) the combination of
    the gates acts as a NOT gate.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 当控制量子比特处于状态![|0⟩](img/file641.jpg)时，两个H门互相抵消，而当其处于状态![|1⟩](img/file642.jpg)时，门的组合则充当一个NOT门。
- en: Figure [6.33](#6.33) displays schematic representation of the possible photonic
    implementation of the CNOT gate  [[225](Biblography.xhtml#XOBrien2008)]. The two
    paths used to encode the target qubit are mixed at a 50% reflecting beam splitter
    (BS) that performs the Hadamard operation. If the phase shift is not applied,
    the second beam splitter (second Hadamard gate) undoes the first by returning
    the target qubit to the same state it started in. This is an example of classical
    interference. If a *π* phase shift is applied, the target qubit is flipped.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 图[6.33](#6.33)展示了CNOT门的可能光子实现的示意图[[225](Biblography.xhtml#XOBrien2008)]。用于编码目标量子比特的两条路径在一个50%反射的光束分
    splitter（BS）处混合，后者执行Hadamard操作。如果不施加相位偏移，第二个光束分 splitter（第二个Hadamard门）通过将目标量子比特返回到其初始状态来取消第一个操作。这是经典干涉的一个例子。如果施加了*π*相位偏移，目标量子比特则被翻转。
- en: '![Figurex1-145004r33: Photonic implementation of the CNOT gate. ](img/file643.jpg)'
  id: totrans-375
  prefs: []
  type: TYPE_IMG
  zh: '![Figurex1-145004r33: CNOT门的光子实现。](img/file643.jpg)'
- en: 'Figure 6.33: Photonic implementation of the CNOT gate.'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.33：CNOT门的光子实现。
- en: When the control qubit is in state ![|0⟩](img/file644.jpg), the *π*-phase shift
    is not applied, while it is applied when the control qubit is in state ![|1⟩](img/file645.jpg).
    A CNOT gate must implement this phase shift when the control qubit is in the ![|1⟩](img/file646.jpg)
    path, otherwise not.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 当控制量子比特处于状态![|0⟩](img/file644.jpg)时，不施加*π*相位偏移，而当控制量子比特处于状态![|1⟩](img/file645.jpg)时，则施加该相位偏移。当控制量子比特处于![|1⟩](img/file646.jpg)路径时，CNOT门必须实现此相位偏移，否则不需要。
- en: Although the proposed realisation of the CNOT gate is simple in principle, it
    is a hard practical problem to find a material with optical non-linearity strong
    enough to implement the conditional phase shift  [[225](Biblography.xhtml#XOBrien2008)].
    However, it is possible to achieve a CNOT gate with the help of single photon
    sources, single photon detectors, and linear optical circuits consisting of beam
    splitters as was proposed by Knill, Laflamme, and Milburn  [[165](Biblography.xhtml#XKLM2001)].
    The first integrated photonic CNOT gate for polarisation-encoded qubits was demonstrated
    in  [[74](Biblography.xhtml#XCrespi2011)].
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管CNOT门的提出实现原理上简单，但要找到一种具有足够强光学非线性的材料来实现条件相位偏移仍然是一个困难的实际问题[[225](Biblography.xhtml#XOBrien2008)]。然而，借助单光子源、单光子探测器和由光束分
    splitter组成的线性光学电路，仍然可以实现CNOT门，正如Knill、Laflamme和Milburn提出的那样[[165](Biblography.xhtml#XKLM2001)]。第一个集成光子CNOT门用于极化编码量子比特的实验在[[74](Biblography.xhtml#XCrespi2011)]中得到了展示。
- en: 6.7.4 Trapped ion qubits
  id: totrans-379
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 6.7.4 受限离子量子比特
- en: Another promising approach to building large-scale quantum computers is based
    on the trapped ion technology  [[68](Biblography.xhtml#XCirac1995)]. Ions (positively
    charged atoms that lost an electron) are *trapped* in the electromagnetic field
    potential, which fixes their positions in space. The quantum chip is cooled and
    placed in the vacuum chamber. The ions themselves are cooled and made almost motionless
    by the laser beams that drain their energy through the rapid absorption-emission
    of photons (ions emit photons of slightly higher frequency than absorbed photons,
    thus losing their kinetic energy).
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种有前景的大规模量子计算机构建方法是基于受限离子技术[[68](Biblography.xhtml#XCirac1995)]。离子（失去一个电子的带正电原子）被*困*在电磁场势能中，从而固定了它们在空间中的位置。量子芯片被冷却并放置在真空腔内。离子本身通过激光束被冷却，激光束通过快速的吸收-发射光子过程使其几乎静止（离子发射的光子频率略高于吸收的光子频率，从而失去动能）。
- en: 'The most widely used technique is a *linear trap* shown in Figure [6.34](#6.34).
    The two states of the *i*-th qubit can be identified with the internal states
    of the corresponding ion: a ground state ![|g⟩](img/file647.jpg)[i] and an excited
    state ![|e⟩](img/file648.jpg)[i]. The trapped ions do not sit perfectly still
    but can oscillate around their equilibrium positions. Figure [6.34](#6.34) depicts
    a situation where *N* ions are confined in a linear trap and interact with different
    laser beams in standing wave configurations  [[67](Biblography.xhtml#XCirac1993)].'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 最广泛使用的技术是图 [6.34](#6.34) 所示的*线性阱*。第 *i* 个量子比特的两种状态可以与相应离子的内部状态对应：基态 ![|g⟩](img/file647.jpg)[i]
    和激发态 ![|e⟩](img/file648.jpg)[i]。被困离子并不完全静止，而是可以围绕其平衡位置振荡。图 [6.34](#6.34) 描述了 *N*
    个离子被限制在一个线性阱中，并与不同的激光束以驻波配置相互作用 [[67](Biblography.xhtml#XCirac1993)]。
- en: The confinement of the motion along the *x*-, *y*-, and *z*-axes can be described
    by a harmonic potential of frequencies *ω*[x] ≪ *ω*[y], *ω*[z] respectively. Additionally,
    the Coulomb repulsion between the positively charged ions provides the coupling
    of the motion of the ions along the *x*-axis. The collective motion (excitation)
    along the *x* axis, if present, behaves as a quasiparticle called a *phonon*.
    We denote the state of the Centre-of-Mass (CM) mode of *N* ions moving in the
    *x*-direction as ![|0⟩](img/file649.jpg) (no phonon) or ![|1⟩](img/file650.jpg)
    (one phonon).
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 沿 *x*、*y* 和 *z* 轴的运动约束可以通过具有频率 *ω*[x] ≪ *ω*[y] 和 *ω*[z] 的谐波势能来描述。此外，正电荷离子之间的库仑排斥提供了沿
    *x* 轴离子运动的耦合。沿 *x* 轴的集体运动（激发），如果存在，表现为一种准粒子，称为*声子*。我们将沿 *x* 方向移动的 *N* 个离子的质心（CM）模式的状态表示为
    ![|0⟩](img/file649.jpg)（无声子）或 ![|1⟩](img/file650.jpg)（一个声子）。
- en: '![Figurex1-146003r34: Schematic representation of the linear ion trap. ](img/file651.jpg)'
  id: totrans-383
  prefs: []
  type: TYPE_IMG
  zh: '![Figurex1-146003r34: 线性离子阱的示意图。](img/file651.jpg)'
- en: 'Figure 6.34: Schematic representation of the linear ion trap.'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.34：线性离子阱的示意图。
- en: Applying the laser beam at the right frequency, it is possible to exclusively
    excite either a single ion or the CM mode. Addressing a single ion (and, thus,
    implementing a one-qubit gate) is straightforward. Let us see how we can implement
    a multi-qubit gate needed to create entanglement.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 通过以正确的频率施加激光束，可以仅激发单个离子或质心（CM）模式。单个离子的寻址（从而实现一量子比特门）是直接的。让我们看看如何实现所需的多量子比特门，以创建纠缠。
- en: 'The following protocol that implements a two-qubit gate was proposed by Cirac
    and Zoller  [[68](Biblography.xhtml#XCirac1995)]. First, we note that the excited
    state ![|e⟩](img/file652.jpg)[i] is not unique and depends on the polarisation
    of the laser beam applied to ion *i*. If we have two possible polarisations, which
    we denote as *q* = 0 and *q* = 1, then the corresponding excited states are denoted
    as ![|e0⟩](img/file653.jpg)[i] and ![|e1⟩](img/file654.jpg)[i]. The computational
    basis is {![|g⟩](img/file655.jpg)[i]*,*![|e0⟩](img/file656.jpg)[i]}. The protocol
    reads as follows:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 以下协议实现了由 Cirac 和 Zoller 提出的两量子比特门[[68](Biblography.xhtml#XCirac1995)]。首先，我们注意到激发态
    ![|e⟩](img/file652.jpg)[i] 不是唯一的，取决于施加到离子 *i* 上的激光束的偏振。如果我们有两种可能的偏振，分别记为 *q* =
    0 和 *q* = 1，那么对应的激发态分别记为 ![|e0⟩](img/file653.jpg)[i] 和 ![|e1⟩](img/file654.jpg)[i]。计算基为
    {![|g⟩](img/file655.jpg)[i]*,*![|e0⟩](img/file656.jpg)[i]}。该协议如下：
- en: Apply a *π* laser pulse with polarisation *q* = 0 to excite the *i*-th ion.
    The *π* laser pulse has the meaning of a laser pulse applied for time *π∕ω*, where
    *ω* is a characteristic frequency of the trapped ion system.
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对第 *i* 个离子施加偏振 *q* = 0 的*π* 激光脉冲以激发该离子。*π* 激光脉冲的意义是施加一个持续时间为 *π∕ω* 的激光脉冲，其中
    *ω* 是困束离子系统的特征频率。
- en: Direct the laser to the *j*-th ion and turn it on for a time of a 2*π* pulse
    with polarisation *q* = 1.
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将激光引导到第 *j* 个离子，并在偏振 *q* = 1 的情况下开启激光，持续时间为 2*π* 脉冲。
- en: Direct the laser back to the *i*-th ion and turn it on for a time of a *π* pulse
    with polarisation *q* = 0.
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将激光引导回第 *i* 个离子，并在偏振 *q* = 0 的情况下开启激光，持续时间为 *π* 脉冲时间。
- en: The effect of this procedure is to change the sign of the state only when both
    ions are initially excited as shown in Table [6.5](#table6.5).
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 该过程的效果是仅当两个离子最初都被激发时，才会改变状态的符号，如表 [6.5](#table6.5) 所示。
- en: '![Table 6.5: Two-qubit gate (CPHASE) with the trapped ion qubits. ](img/file657.jpg)'
  id: totrans-391
  prefs: []
  type: TYPE_IMG
  zh: '![表 6.5：使用困束离子量子比特的两量子比特门（CPHASE）。](img/file657.jpg)'
- en: 'Table 6.5: Two-qubit gate (CPHASE) with the trapped ion qubits.'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 表 6.5：使用困束离子量子比特的两量子比特门（CPHASE）。
- en: We note that the state of the CM mode is restored to the initial state ![|0⟩](img/file658.jpg)
    (no phonon) after the process. The protocol realises the CPHASE two-qubit gate.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 我们注意到，在该过程后，CM模态的状态恢复到初始状态 ![|0⟩](img/file658.jpg)（没有声子）。该协议实现了CPHASE二量子比特门。
- en: Trapped ion-based qubits are characterised by longer coherence time (how long
    the quantum state survives) and higher fidelity (accuracy of the gate operations)
    in comparison with the superconducting qubits. On the flip side, superconducting
    qubits enjoy orders of magnitude shorter gate times.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 基于囚禁离子的量子比特具有比超导量子比特更长的相干时间（量子态存活的时间）和更高的保真度（门操作的准确性）。但另一方面，超导量子比特享有数量级更短的门时间。
- en: Similar to many possible physical realisations of a classical bit, there exist
    many competing quantum computing technologies. It is too early to say which one
    will become the ultimate winner in the long run, or whether multiple technologies
    will co-exist by occupying their respective niches.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于经典比特的许多可能物理实现，量子计算技术也有许多竞争者。目前尚无法确定哪种技术将成为最终的赢家，或者是否多种技术会通过各自占据不同的市场领域而共同存在。
- en: We now have all the tools, theoretical and physical, to actually build quantum
    circuits. In the next section, we discuss the quantum hardware and quantum simulators
    that would allow us to do it.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们拥有了所有的工具，包括理论工具和物理工具，可以真正开始构建量子电路。在下一节中，我们将讨论量子硬件和量子模拟器，这些工具可以帮助我们实现这一目标。
- en: 6.8 Quantum Hardware and Simulators
  id: totrans-397
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 6.8 量子硬件与模拟器
- en: 'The current state-of-the-art quantum computing technology demonstrates impressive
    qubit fidelity and coherence time:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 当前的量子计算技术在量子比特保真度和相干时间方面展现了令人印象深刻的表现：
- en: 'Qubits made of superconducting circuits (coherence time: ∼ 10µs)   [[164](Biblography.xhtml#XKjaergaard2019)]'
  id: totrans-399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由超导电路构成的量子比特（相干时间：∼ 10µs） [[164](Biblography.xhtml#XKjaergaard2019)]
- en: '| one-qubit gate |  | two-qubit gate |  |'
  id: totrans-400
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 单量子比特门 |  | 二量子比特门 |  |'
- en: '| Gate time: | ∼ 10^(−2)µs | Gate time: | ∼ 10^(−2)-10^(−1)µs |'
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 门时间： | ∼ 10^(−2)µs | 门时间： | ∼ 10^(−2)-10^(−1)µs |'
- en: '| Fidelity: | 99.9% | Fidelity: | 99.7% |'
  id: totrans-402
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 保真度： | 99.9% | 保真度： | 99.7% |'
- en: 'Table 6.6: Superconducting qubits.'
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 表6.6：超导量子比特。
- en: 'Qubits made of trapped ions (coherence time: *>* 10⁷µs)  [[46](Biblography.xhtml#XBruzewicz2019)]'
  id: totrans-404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由囚禁离子构成的量子比特（相干时间：*>* 10⁷µs） [[46](Biblography.xhtml#XBruzewicz2019)]
- en: '| one-qubit gate |  | two-qubit gate |  |'
  id: totrans-405
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 单量子比特门 |  | 二量子比特门 |  |'
- en: '| Gate time: | ∼ 1-10µs | Gate time: | ∼ 10µs |'
  id: totrans-406
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 门时间： | ∼ 1-10µs | 门时间： | ∼ 10µs |'
- en: '| Fidelity: | 99.9999% | Fidelity: | 99.9% |'
  id: totrans-407
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 保真度： | 99.9999% | 保真度： | 99.9% |'
- en: 'Table 6.7: Trapped ion qubits.'
  id: totrans-408
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 表6.7：囚禁离子量子比特。
- en: Even more importantly, the pace of technological improvements remains very fast.
    Recent experiments conducted by MIT researchers on superconducting qubits  [[277](Biblography.xhtml#XSung2021)]
    demonstrated a possibility to sharply reduce errors in two-qubit gates, bringing
    two-qubit gate fidelity for CZ and iSWAP gates to near 99.9%. Interestingly, this
    improvement in two-qubit gate fidelity has been achieved through the introduction
    of tunable couplers (Figure [6.30](#6.30) schematically shows a two-qubit interaction
    via a coupler). To eliminate the error generating qubit-qubit interactions, the
    higher energy levels of the coupler were used to cancel out the problematic interactions.
    As was schematically shown in Figure [6.7.2](#x1-142001r2), the higher energy
    levels are usually ignored, although they have a non-negligible contribution.
    Better control and design of the coupler is key to tailoring the qubit-qubit interaction
    as needed.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 更为重要的是，技术进步的步伐依然非常快速。麻省理工学院研究人员最近对超导量子比特进行的实验 [[277](Biblography.xhtml#XSung2021)]
    展示了显著降低二量子比特门错误的可能性，使得CZ和iSWAP门的二量子比特门保真度接近99.9%。有趣的是，这一二量子比特门保真度的提高是通过引入可调耦合器实现的（图[6.30](#6.30)示意图展示了通过耦合器实现的二量子比特交互）。为了消除产生错误的量子比特-量子比特交互，耦合器的高能级被用来抵消有问题的交互。如图[6.7.2](#x1-142001r2)所示，通常会忽略这些高能级，尽管它们对系统的贡献不可忽视。更好的耦合器控制和设计是根据需要定制量子比特-量子比特交互的关键。
- en: 'This is a big step towards implementing *error correction*: additional qubits
    can be added to improve the robustness of quantum computation. Qubit errors can
    be actively addressed by adding redundancy. However, in order for the hardware
    redundancy to be practical, higher qubit fidelity is required. Different error
    correction protocols require different fidelity thresholds, and 99.9% two-qubit
    gate fidelity is not a bad place to start.'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 这是实现*错误修正*的一个重要步骤：可以通过增加额外的量子比特来提高量子计算的鲁棒性。量子比特的错误可以通过增加冗余来主动解决。然而，为了让硬件冗余具备实用性，需要更高的量子比特保真度。不同的错误修正协议需要不同的保真度阈值，而99.9%的双量子比特门保真度是一个不错的起点。
- en: However, we are still some years away from sufficiently fault-tolerant quantum
    computers. This is why it is useful (and even necessary) to experiment with quantum
    simulators – classical computers operating according to the logic of quantum computing.
    There is nothing preventing classical digital computers from operating according
    to the laws of quantum computing except for prohibitive memory requirements. The
    state of an *n*-qubit quantum system can be stored in classical memory as 2^n
    probability amplitudes. This prevents most classical computers from performing
    quantum computing operations on more than 35-40 qubits. But it is perfectly feasible
    to run quantum computing programs on up to 25-30 quantum registers.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们距离足够容错的量子计算机还有数年之遥。这就是为什么实验量子模拟器是有用的（甚至是必要的）——量子模拟器是根据量子计算逻辑操作的经典计算机。除了内存需求过高外，没有任何障碍阻止经典数字计算机根据量子计算的规律进行操作。一个*n*量子比特量子系统的状态可以作为2^n个概率幅度存储在经典内存中。这使得大多数经典计算机无法在超过35-40个量子比特上执行量子计算操作。但在最多25-30个量子寄存器上运行量子计算程序是完全可行的。
- en: Although quantum simulators can only operate on a relatively small number of
    qubits, they are *ideal* quantum computers that do not suffer from any type of
    quantum hardware imperfections. This makes them invaluable in testing principles
    and small-scale versions of quantum algorithms. They can be used for the proof-of-concept
    and to help develop new ideas in a situation where actual quantum hardware is
    still too noisy and not readily available.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管量子模拟器只能在相对较少的量子比特上运行，但它们是*理想的*量子计算机，不会受到任何类型的量子硬件缺陷的影响。这使得它们在测试量子算法的原理和小规模版本时具有不可或缺的价值。它们可以用于概念验证，并帮助在实际量子硬件仍然噪声较大且不易获取的情况下开发新思想。
- en: There are many open-source quantum simulators (and, even, specialised quantum
    computing programming languages). In this book, we investigate the performance
    of various quantum algorithms using `Qiskit`  [[238](Biblography.xhtml#XIBM2019)]
    – an open-source Python package that implements the logic of quantum computing
    in an intuitive and user-friendly way. Qiskit also owes its popularity to a well-written
    and highly educational textbook with many well-thought-out examples that make
    it a pleasure to learn the principles of quantum computing. The `Qiskit` package
    and the textbook are available from
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多开源量子模拟器（甚至是专门的量子计算编程语言）。在本书中，我们使用`Qiskit`  [[238](Biblography.xhtml#XIBM2019)]研究各种量子算法的性能——这是一个开源的Python包，以直观且用户友好的方式实现量子计算的逻辑。Qiskit的流行还归功于一本编写精良且富有教育意义的教科书，里面有许多深思熟虑的示例，使学习量子计算原理变得十分愉快。`Qiskit`包和教科书可在以下网站获得：
- en: '`https://qiskit.org/`'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: '`https://qiskit.org/`'
- en: and
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 和
- en: '`https://qiskit.org/textbook/preface.html`'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: '`https://qiskit.org/textbook/preface.html`'
- en: The field of quantum programming is growing fast and several languages or software
    development kits are now competing. Quantum instruction sets such as `Quil`, `cQASM`,
    `OpenQASM`, and `Blackbird` allow us to translate high-level algorithms into physical
    instructions run on quantum computers. They are used in quantum software development
    kits (QSDKs) to represent quantum circuits. The most important QSDKs at the time
    of writing are
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 量子编程领域正在快速发展，多个编程语言或软件开发工具包现在正在竞争。量子指令集，如`Quil`、`cQASM`、`OpenQASM`和`Blackbird`，使我们能够将高级算法转换为在量子计算机上运行的物理指令。它们被用于量子软件开发工具包（QSDKs）中，表示量子电路。在本文写作时，最重要的QSDK包括：
- en: '`Ocean` (D-Wave)'
  id: totrans-418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Ocean`（D-Wave）'
- en: '`Forest` (Rigetti)'
  id: totrans-419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Forest`（Rigetti）'
- en: '`Qiskit` (IBM)'
  id: totrans-420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Qiskit`（IBM）'
- en: '`Cirq` (Google)'
  id: totrans-421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Cirq`（Google）'
- en: '`Quantum Development Kit` (Microsoft)'
  id: totrans-422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Quantum Development Kit`（Microsoft）'
- en: '`Braket SDK` (Amazon)'
  id: totrans-423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Braket SDK`（Amazon）'
- en: '`ProjectQ` (ETH Zurich)'
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ProjectQ`（苏黎世联邦理工学院）'
- en: '`Strawberry Fields` (Xanadu)'
  id: totrans-425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Strawberry Fields`（Xanadu）'
- en: Parallel to these QSDKs, quantum programming languages have been developed,
    both of the imperative type (step-by-step instructions) such as `QCL`, `QMASM`,
    and `Silq` and of the functional type such as `QML`, `Quantum Lambda Calculus`,
    `QFC`, `QPL`, and `Q`*♯*.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 与这些QSDK并行，量子编程语言也已开发出来，包括命令式类型（逐步指令）如`QCL`、`QMASM`和`Silq`，以及函数式类型如`QML`、`量子λ演算`、`QFC`、`QPL`和`Q`*♯*。
- en: We observed an exceptionally fast pace of quantum computing hardware development
    over the last several years, with multiple technological breakthroughs. Additionally,
    the progress on the quantum software development side assists in relaxing requirements
    for the physical qubits needed to build fault-tolerant quantum computers.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 我们观察到，量子计算硬件在过去几年里发展速度异常迅猛，取得了多个技术突破。此外，量子软件开发方面的进展有助于放宽构建容错量子计算机所需的物理量子比特的要求。
- en: Summary
  id: totrans-428
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we covered and contrasted the basic elements of classical
    and quantum computing. We started with the concept of a fundamental memory unit
    (bit) and functions that transform the memory states (logic gates). We also provided
    examples of the possible physical realisations of the logic gates and a memory
    cell – this highlights the fundamental dualism of both classical and quantum computing:
    computation is substrate independent but its practical realisation requires the
    existence of a suitable physical system.'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍并对比了经典计算和量子计算的基本元素。我们从基本的存储单元（比特）概念开始，并讨论了变换存储状态的功能（逻辑门）。我们还提供了逻辑门和存储单元可能的物理实现示例——这突显了经典计算和量子计算的根本二元性：计算是与底层材料无关的，但它的实际实现需要存在适当的物理系统。
- en: Then, we introduced the concept of the qubit and its canonical mathematical
    representation. Visualisation of a qubit with the help of the Bloch sphere allows
    for the natural representation of single qubit quantum gates as rotation operators.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，我们介绍了量子比特的概念及其规范的数学表示。借助Bloch球的可视化，量子比特可以自然地表示为旋转操作符，从而直观地表现单量子比特量子门。
- en: Next, we studied two-qubit gates and their matrix representation. We learned
    how to assemble one-qubit and multi-qubit gates into quantum circuits – a good
    example is the Bell circuit, which creates a maximally entangled state of two
    qubits from the completely unentangled initial states. We also touched on the
    important topics of reversible computing and cutting edge quantum hardware.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 随后，我们研究了两比特门及其矩阵表示。我们学习了如何将单量子比特门和多量子比特门组合成量子电路——一个好的例子是贝尔电路，它从完全不纠缠的初始态创建了两个量子比特的最大纠缠态。我们还涉及了可逆计算和前沿量子硬件的重要话题。
- en: In the next chapter, we will introduce a particular type of quantum circuit,
    so-called Parameterised Quantum Circuits, that provide great flexibility for applications.
    We will also explore various data encoding schemes – the mapping of samples from
    the classical datasets into the corresponding quantum states.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将介绍一种特定类型的量子电路——所谓的参数化量子电路，它为应用提供了极大的灵活性。我们还将探讨各种数据编码方案——将经典数据集中的样本映射到相应的量子态。
- en: Join our book’s Discord space
  id: totrans-433
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 加入我们书籍的Discord空间
- en: 'Join our Discord community to meet like-minded people and learn alongside more
    than 2000 members at: [https://packt.link/quantum](https://packt.link/quantum)'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们的Discord社区，结识志同道合的人，并与超过2000名成员一起学习，网址：[https://packt.link/quantum](https://packt.link/quantum)
- en: '![PIC](img/file1.png)'
  id: totrans-435
  prefs: []
  type: TYPE_IMG
  zh: '![PIC](img/file1.png)'
